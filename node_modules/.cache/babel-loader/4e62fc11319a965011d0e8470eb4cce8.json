{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\nclass TokenType {\n  constructor(label, conf = {}) {\n    this.label = void 0;\n    this.keyword = void 0;\n    this.beforeExpr = void 0;\n    this.startsExpr = void 0;\n    this.rightAssociative = void 0;\n    this.isLoop = void 0;\n    this.isAssign = void 0;\n    this.prefix = void 0;\n    this.postfix = void 0;\n    this.binop = void 0;\n    this.updateContext = void 0;\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    this.updateContext = null;\n  }\n\n}\n\nconst keywords$1 = new Map();\n\nfunction createKeyword(name, options = {}) {\n  options.keyword = name;\n  const token = new TokenType(name, options);\n  keywords$1.set(name, token);\n  return token;\n}\n\nfunction createBinop(name, binop) {\n  return new TokenType(name, {\n    beforeExpr,\n    binop\n  });\n}\n\nconst types$1 = {\n  num: new TokenType(\"num\", {\n    startsExpr\n  }),\n  bigint: new TokenType(\"bigint\", {\n    startsExpr\n  }),\n  decimal: new TokenType(\"decimal\", {\n    startsExpr\n  }),\n  regexp: new TokenType(\"regexp\", {\n    startsExpr\n  }),\n  string: new TokenType(\"string\", {\n    startsExpr\n  }),\n  name: new TokenType(\"name\", {\n    startsExpr\n  }),\n  privateName: new TokenType(\"#name\", {\n    startsExpr\n  }),\n  eof: new TokenType(\"eof\"),\n  bracketL: new TokenType(\"[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketHashL: new TokenType(\"#[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketBarL: new TokenType(\"[|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketR: new TokenType(\"]\"),\n  bracketBarR: new TokenType(\"|]\"),\n  braceL: new TokenType(\"{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceBarL: new TokenType(\"{|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceHashL: new TokenType(\"#{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceR: new TokenType(\"}\", {\n    beforeExpr\n  }),\n  braceBarR: new TokenType(\"|}\"),\n  parenL: new TokenType(\"(\", {\n    beforeExpr,\n    startsExpr\n  }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", {\n    beforeExpr\n  }),\n  semi: new TokenType(\";\", {\n    beforeExpr\n  }),\n  colon: new TokenType(\":\", {\n    beforeExpr\n  }),\n  doubleColon: new TokenType(\"::\", {\n    beforeExpr\n  }),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", {\n    beforeExpr\n  }),\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", {\n    beforeExpr\n  }),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", {\n    beforeExpr\n  }),\n  backQuote: new TokenType(\"`\", {\n    startsExpr\n  }),\n  dollarBraceL: new TokenType(\"${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  at: new TokenType(\"@\"),\n  hash: new TokenType(\"#\", {\n    startsExpr\n  }),\n  interpreterDirective: new TokenType(\"#!...\"),\n  eq: new TokenType(\"=\", {\n    beforeExpr,\n    isAssign\n  }),\n  assign: new TokenType(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  slashAssign: new TokenType(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  moduloAssign: new TokenType(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  incDec: new TokenType(\"++/--\", {\n    prefix,\n    postfix,\n    startsExpr\n  }),\n  bang: new TokenType(\"!\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  tilde: new TokenType(\"~\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", {\n    beforeExpr,\n    binop: 9,\n    prefix,\n    startsExpr\n  }),\n  modulo: new TokenType(\"%\", {\n    binop: 10,\n    startsExpr\n  }),\n  star: new TokenType(\"*\", {\n    binop: 10\n  }),\n  slash: createBinop(\"/\", 10),\n  exponent: new TokenType(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true\n  }),\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", {\n    beforeExpr\n  }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", {\n    beforeExpr\n  }),\n  _do: createKeyword(\"do\", {\n    isLoop,\n    beforeExpr\n  }),\n  _else: createKeyword(\"else\", {\n    beforeExpr\n  }),\n  _finally: createKeyword(\"finally\"),\n  _for: createKeyword(\"for\", {\n    isLoop\n  }),\n  _function: createKeyword(\"function\", {\n    startsExpr\n  }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", {\n    beforeExpr\n  }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _while: createKeyword(\"while\", {\n    isLoop\n  }),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", {\n    beforeExpr,\n    startsExpr\n  }),\n  _this: createKeyword(\"this\", {\n    startsExpr\n  }),\n  _super: createKeyword(\"super\", {\n    startsExpr\n  }),\n  _class: createKeyword(\"class\", {\n    startsExpr\n  }),\n  _extends: createKeyword(\"extends\", {\n    beforeExpr\n  }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", {\n    startsExpr\n  }),\n  _null: createKeyword(\"null\", {\n    startsExpr\n  }),\n  _true: createKeyword(\"true\", {\n    startsExpr\n  }),\n  _false: createKeyword(\"false\", {\n    startsExpr\n  }),\n  _in: createKeyword(\"in\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _instanceof: createKeyword(\"instanceof\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _typeof: createKeyword(\"typeof\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _void: createKeyword(\"void\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _delete: createKeyword(\"delete\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  })\n};\nconst lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nconst lineBreakG = new RegExp(lineBreak.source, \"g\");\n\nfunction isNewLine(code) {\n  switch (code) {\n    case 10:\n    case 13:\n    case 8232:\n    case 8233:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nconst skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\nconst skipWhiteSpaceInLine = /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/y;\nconst skipWhiteSpaceToLineBreak = new RegExp(\"(?=(\" + skipWhiteSpaceInLine.source + \"))\\\\1\" + /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source, \"y\");\n\nfunction isWhitespace(code) {\n  switch (code) {\n    case 0x0009:\n    case 0x000b:\n    case 0x000c:\n    case 32:\n    case 160:\n    case 5760:\n    case 0x2000:\n    case 0x2001:\n    case 0x2002:\n    case 0x2003:\n    case 0x2004:\n    case 0x2005:\n    case 0x2006:\n    case 0x2007:\n    case 0x2008:\n    case 0x2009:\n    case 0x200a:\n    case 0x202f:\n    case 0x205f:\n    case 0x3000:\n    case 0xfeff:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nclass Position {\n  constructor(line, col) {\n    this.line = void 0;\n    this.column = void 0;\n    this.line = line;\n    this.column = col;\n  }\n\n}\n\nclass SourceLocation {\n  constructor(start, end) {\n    this.start = void 0;\n    this.end = void 0;\n    this.filename = void 0;\n    this.identifierName = void 0;\n    this.start = start;\n    this.end = end;\n  }\n\n}\n\nfunction getLineInfo(input, offset) {\n  let line = 1;\n  let lineStart = 0;\n  let match;\n  lineBreakG.lastIndex = 0;\n\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n\nclass BaseParser {\n  constructor() {\n    this.sawUnambiguousESM = false;\n    this.ambiguousScriptDifferentAst = false;\n  }\n\n  hasPlugin(name) {\n    return this.plugins.has(name);\n  }\n\n  getPluginOption(plugin, name) {\n    if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];\n  }\n\n}\n\nfunction setTrailingComments(node, comments) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\nfunction setInnerComments(node, comments) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else if (comments !== undefined) {\n    node.innerComments.unshift(...comments);\n  }\n}\n\nfunction adjustInnerComments(node, elements, commentWS) {\n  let lastElement = null;\n  let i = elements.length;\n\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\nclass CommentsParser extends BaseParser {\n  addComment(comment) {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.comments.push(comment);\n  }\n\n  processComment(node) {\n    const {\n      commentStack\n    } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const {\n      start: nodeStart\n    } = node;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n\n      if (commentEnd > nodeStart) {\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n\n        break;\n      }\n    }\n  }\n\n  finalizeComment(commentWS) {\n    const {\n      comments\n    } = commentWS;\n\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n\n      if (commentWS.trailingNode !== null) {\n        commentWS.trailingNode.leadingComments = comments;\n      }\n    } else {\n      const {\n        containingNode: node,\n        start: commentStart\n      } = commentWS;\n\n      if (this.input.charCodeAt(commentStart - 1) === 44) {\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n\n          default:\n            {\n              setInnerComments(node, comments);\n            }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  finalizeRemainingComments() {\n    const {\n      commentStack\n    } = this.state;\n\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n\n    this.state.commentStack = [];\n  }\n\n  resetPreviousNodeTrailingComments(node) {\n    const {\n      commentStack\n    } = this.state;\n    const {\n      length\n    } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n}\n\nconst ErrorCodes = Object.freeze({\n  SyntaxError: \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n});\nconst ErrorMessages = makeErrorTemplates({\n  AccessorIsGenerator: \"A %0ter cannot be a generator.\",\n  ArgumentsInClass: \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext: \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier: \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock: \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter: \"'await' is not allowed in async function parameters.\",\n  AwaitNotInAsyncContext: \"'await' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n  BadGetterArity: \"A 'get' accesor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accesor must have exactly one formal parameter.\",\n  BadSetterRestParameter: \"A 'set' accesor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField: \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: \"'%0' require an initialization value.\",\n  DecoratorBeforeExport: \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n  DecoratorConstructor: \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass: \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport: \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: \"`%0` has already been exported. Exported identifiers must be unique.\",\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: \"A string literal cannot be used as an exported binding without `from`.\\n- Did you mean `export { '%0' as '%1' } from 'some-module'`?\",\n  ExportDefaultFromAsIdentifier: \"'from' is not allowed as an identifier after 'export default'.\",\n  ForInOfLoopInitializer: \"'%0' loop variable declaration may not have an initializer.\",\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext: \"Generators can only be declared at the top level or inside a block.\",\n  IllegalBreakContinue: \"Unsyntactic %0.\",\n  IllegalLanguageModeDirective: \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportBindingIsString: 'A string literal cannot be used as an imported binding.\\n- Did you mean `import { \"%0\" as foo }`?',\n  ImportCallArgumentTrailingComma: \"Trailing comma is disallowed inside import(...) arguments.\",\n  ImportCallArity: \"`import()` requires exactly %0.\",\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: \"Expected number in radix %0.\",\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: \"Escape sequence in keyword %0.\",\n  InvalidIdentifier: \"Invalid identifier %0.\",\n  InvalidLhs: \"Invalid left-hand side in %0.\",\n  InvalidLhsBinding: \"Binding invalid left-hand side in %0.\",\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent: \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: \"Unexpected character '%0'.\",\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: \"Private name #%0 is not defined.\",\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty: \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: \"Label '%0' is already declared.\",\n  LetInLexicalBinding: \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment: \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical: \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType: \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue: \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: 'Duplicate key \"%0\" is not allowed in module attributes.',\n  ModuleExportNameHasLoneSurrogate: \"An export name cannot include a lone surrogate, found '\\\\u%0'.\",\n  ModuleExportUndefined: \"Export '%0' is not defined.\",\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence: \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar: \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew: \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate: \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor: \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PipeBodyIsTighter: \"Unexpected %0 after pipeline body; any %0 expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  PipeTopicRequiresHackPipes: 'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PipeTopicUnbound: \"Topic reference is unbound; it must be inside a pipe body.\",\n  PipeTopicUnconfiguredToken: 'Invalid topic token %0. In order to use %0 as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"%0\" }.',\n  PipeTopicUnused: \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  PipelineBodyNoArrow: 'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  PipelineBodySequenceExpression: \"Pipeline body may not be a comma-separated sequence expression.\",\n  PipelineHeadSequenceExpression: \"Pipeline head should not be a comma-separated sequence expression.\",\n  PipelineTopicUnused: \"Pipeline is in topic style but does not use topic reference.\",\n  PrimaryTopicNotAllowed: \"Topic reference was used in a lexical context without topic binding.\",\n  PrimaryTopicRequiresSmartPipeline: 'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PrivateInExpectedIn: \"Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`).\",\n  PrivateNameRedeclaration: \"Duplicate private name #%0.\",\n  RecordExpressionBarIncorrectEndSyntaxType: \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType: \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType: \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction: \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  StrictDelete: \"Deleting local variable in strict mode.\",\n  StrictEvalArguments: \"Assigning to '%0' in strict mode.\",\n  StrictEvalArgumentsBinding: \"Binding '%0' in strict mode.\",\n  StrictFunction: \"In strict mode code, functions can only be declared at top level or inside a block.\",\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n  StrictWith: \"'with' in strict mode.\",\n  SuperNotAllowed: \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType: \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType: \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType: \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody: 'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport: \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: \"Unexpected keyword '%0'.\",\n  UnexpectedLeadingDecorator: \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration: \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget: \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator: \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\\n or a property of member expression (i.e. this.#p).\",\n  UnexpectedReservedWord: \"Unexpected reserved word '%0'.\",\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: \"Unexpected token '%0'.\",\n  UnexpectedTokenUnaryExponentiation: \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport: \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport: \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport: \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1.\",\n  UnsupportedParameterDecorator: \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator: \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper: \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  VarRedeclaration: \"Identifier '%0' has already been declared.\",\n  YieldBindingIdentifier: \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  ZeroDigitNumericSeparator: \"Numeric separator can not be used after leading 0.\"\n}, ErrorCodes.SyntaxError);\nconst SourceTypeModuleErrorMessages = makeErrorTemplates({\n  ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n  ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`\n}, ErrorCodes.SourceTypeModuleError);\n\nfunction makeErrorTemplates(messages, code) {\n  const templates = {};\n  Object.keys(messages).forEach(reasonCode => {\n    templates[reasonCode] = Object.freeze({\n      code,\n      reasonCode,\n      template: messages[reasonCode]\n    });\n  });\n  return Object.freeze(templates);\n}\n\nclass ParserError extends CommentsParser {\n  getLocationForPosition(pos) {\n    let loc;\n    if (pos === this.state.start) loc = this.state.startLoc;else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;else if (pos === this.state.end) loc = this.state.endLoc;else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;else loc = getLineInfo(this.input, pos);\n    return loc;\n  }\n\n  raise(pos, {\n    code,\n    reasonCode,\n    template\n  }, ...params) {\n    return this.raiseWithData(pos, {\n      code,\n      reasonCode\n    }, template, ...params);\n  }\n\n  raiseOverwrite(pos, {\n    code,\n    template\n  }, ...params) {\n    const loc = this.getLocationForPosition(pos);\n    const message = template.replace(/%(\\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;\n\n    if (this.options.errorRecovery) {\n      const errors = this.state.errors;\n\n      for (let i = errors.length - 1; i >= 0; i--) {\n        const error = errors[i];\n\n        if (error.pos === pos) {\n          return Object.assign(error, {\n            message\n          });\n        } else if (error.pos < pos) {\n          break;\n        }\n      }\n    }\n\n    return this._raise({\n      code,\n      loc,\n      pos\n    }, message);\n  }\n\n  raiseWithData(pos, data, errorTemplate, ...params) {\n    const loc = this.getLocationForPosition(pos);\n    const message = errorTemplate.replace(/%(\\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;\n    return this._raise(Object.assign({\n      loc,\n      pos\n    }, data), message);\n  }\n\n  _raise(errorContext, message) {\n    const err = new SyntaxError(message);\n    Object.assign(err, errorContext);\n\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n\n}\n\nvar estree = superClass => class extends superClass {\n  parseRegExpLiteral({\n    pattern,\n    flags\n  }) {\n    let regex = null;\n\n    try {\n      regex = new RegExp(pattern, flags);\n    } catch (e) {}\n\n    const node = this.estreeParseLiteral(regex);\n    node.regex = {\n      pattern,\n      flags\n    };\n    return node;\n  }\n\n  parseBigIntLiteral(value) {\n    let bigInt;\n\n    try {\n      bigInt = BigInt(value);\n    } catch (_unused) {\n      bigInt = null;\n    }\n\n    const node = this.estreeParseLiteral(bigInt);\n    node.bigint = String(node.value || value);\n    return node;\n  }\n\n  parseDecimalLiteral(value) {\n    const decimal = null;\n    const node = this.estreeParseLiteral(decimal);\n    node.decimal = String(node.value || value);\n    return node;\n  }\n\n  estreeParseLiteral(value) {\n    return this.parseLiteral(value, \"Literal\");\n  }\n\n  parseStringLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  parseNumericLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  parseNullLiteral() {\n    return this.estreeParseLiteral(null);\n  }\n\n  parseBooleanLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  directiveToStmt(directive) {\n    const directiveLiteral = directive.value;\n    const stmt = this.startNodeAt(directive.start, directive.loc.start);\n    const expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);\n    expression.value = directiveLiteral.extra.expressionValue;\n    expression.raw = directiveLiteral.extra.raw;\n    stmt.expression = this.finishNodeAt(expression, \"Literal\", directiveLiteral.end, directiveLiteral.loc.end);\n    stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n    return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.end, directive.loc.end);\n  }\n\n  initFunction(node, isAsync) {\n    super.initFunction(node, isAsync);\n    node.expression = false;\n  }\n\n  checkDeclaration(node) {\n    if (node != null && this.isObjectProperty(node)) {\n      this.checkDeclaration(node.value);\n    } else {\n      super.checkDeclaration(node);\n    }\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.value.params;\n  }\n\n  isValidDirective(stmt) {\n    var _stmt$expression$extr;\n\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && !((_stmt$expression$extr = stmt.expression.extra) != null && _stmt$expression$extr.parenthesized);\n  }\n\n  stmtToDirective(stmt) {\n    const value = stmt.expression.value;\n    const directive = super.stmtToDirective(stmt);\n    this.addExtra(directive.value, \"expressionValue\", value);\n    return directive;\n  }\n\n  parseBlockBody(node, ...args) {\n    super.parseBlockBody(node, ...args);\n    const directiveStatements = node.directives.map(d => this.directiveToStmt(d));\n    node.body = directiveStatements.concat(node.body);\n    delete node.directives;\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true);\n\n    if (method.typeParameters) {\n      method.value.typeParameters = method.typeParameters;\n      delete method.typeParameters;\n    }\n\n    classBody.body.push(method);\n  }\n\n  parseMaybePrivateName(...args) {\n    const node = super.parseMaybePrivateName(...args);\n\n    if (node.type === \"PrivateName\" && this.getPluginOption(\"estree\", \"classFeatures\")) {\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    return node;\n  }\n\n  convertPrivateNameToPrivateIdentifier(node) {\n    const name = super.getPrivateNameSV(node);\n    node = node;\n    delete node.id;\n    node.name = name;\n    node.type = \"PrivateIdentifier\";\n    return node;\n  }\n\n  isPrivateName(node) {\n    if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n      return super.isPrivateName(node);\n    }\n\n    return node.type === \"PrivateIdentifier\";\n  }\n\n  getPrivateNameSV(node) {\n    if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n      return super.getPrivateNameSV(node);\n    }\n\n    return node.name;\n  }\n\n  parseLiteral(value, type) {\n    const node = super.parseLiteral(value, type);\n    node.raw = node.extra.raw;\n    delete node.extra;\n    return node;\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    super.parseFunctionBody(node, allowExpression, isMethod);\n    node.expression = node.body.type !== \"BlockStatement\";\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    let funcNode = this.startNode();\n    funcNode.kind = node.kind;\n    funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n    funcNode.type = \"FunctionExpression\";\n    delete funcNode.kind;\n    node.value = funcNode;\n\n    if (type === \"ClassPrivateMethod\") {\n      node.computed = false;\n    }\n\n    type = \"MethodDefinition\";\n    return this.finishNode(node, type);\n  }\n\n  parseClassProperty(...args) {\n    const propertyNode = super.parseClassProperty(...args);\n\n    if (this.getPluginOption(\"estree\", \"classFeatures\")) {\n      propertyNode.type = \"PropertyDefinition\";\n    }\n\n    return propertyNode;\n  }\n\n  parseClassPrivateProperty(...args) {\n    const propertyNode = super.parseClassPrivateProperty(...args);\n\n    if (this.getPluginOption(\"estree\", \"classFeatures\")) {\n      propertyNode.type = \"PropertyDefinition\";\n      propertyNode.computed = false;\n    }\n\n    return propertyNode;\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);\n\n    if (node) {\n      node.type = \"Property\";\n      if (node.kind === \"method\") node.kind = \"init\";\n      node.shorthand = false;\n    }\n\n    return node;\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    const node = super.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n\n    if (node) {\n      node.kind = \"init\";\n      node.type = \"Property\";\n    }\n\n    return node;\n  }\n\n  isAssignable(node, isBinding) {\n    if (node != null && this.isObjectProperty(node)) {\n      return this.isAssignable(node.value, isBinding);\n    }\n\n    return super.isAssignable(node, isBinding);\n  }\n\n  toAssignable(node, isLHS = false) {\n    if (node != null && this.isObjectProperty(node)) {\n      this.toAssignable(node.value, isLHS);\n      return node;\n    }\n\n    return super.toAssignable(node, isLHS);\n  }\n\n  toAssignableObjectExpressionProp(prop, ...args) {\n    if (prop.kind === \"get\" || prop.kind === \"set\") {\n      this.raise(prop.key.start, ErrorMessages.PatternHasAccessor);\n    } else if (prop.method) {\n      this.raise(prop.key.start, ErrorMessages.PatternHasMethod);\n    } else {\n      super.toAssignableObjectExpressionProp(prop, ...args);\n    }\n  }\n\n  finishCallExpression(node, optional) {\n    super.finishCallExpression(node, optional);\n\n    if (node.callee.type === \"Import\") {\n      node.type = \"ImportExpression\";\n      node.source = node.arguments[0];\n\n      if (this.hasPlugin(\"importAssertions\")) {\n        var _node$arguments$;\n\n        node.attributes = (_node$arguments$ = node.arguments[1]) != null ? _node$arguments$ : null;\n      }\n\n      delete node.arguments;\n      delete node.callee;\n    }\n\n    return node;\n  }\n\n  toReferencedArguments(node) {\n    if (node.type === \"ImportExpression\") {\n      return;\n    }\n\n    super.toReferencedArguments(node);\n  }\n\n  parseExport(node) {\n    super.parseExport(node);\n\n    switch (node.type) {\n      case \"ExportAllDeclaration\":\n        node.exported = null;\n        break;\n\n      case \"ExportNamedDeclaration\":\n        if (node.specifiers.length === 1 && node.specifiers[0].type === \"ExportNamespaceSpecifier\") {\n          node.type = \"ExportAllDeclaration\";\n          node.exported = node.specifiers[0].exported;\n          delete node.specifiers;\n        }\n\n        break;\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    const node = super.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n    if (state.optionalChainMember) {\n      if (node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\") {\n        node.type = node.type.substring(8);\n      }\n\n      if (state.stop) {\n        const chain = this.startNodeAtNode(node);\n        chain.expression = node;\n        return this.finishNode(chain, \"ChainExpression\");\n      }\n    } else if (node.type === \"MemberExpression\" || node.type === \"CallExpression\") {\n      node.optional = false;\n    }\n\n    return node;\n  }\n\n  hasPropertyAsPrivateName(node) {\n    if (node.type === \"ChainExpression\") {\n      node = node.expression;\n    }\n\n    return super.hasPropertyAsPrivateName(node);\n  }\n\n  isOptionalChain(node) {\n    return node.type === \"ChainExpression\";\n  }\n\n  isObjectProperty(node) {\n    return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n  }\n\n  isObjectMethod(node) {\n    return node.method || node.kind === \"get\" || node.kind === \"set\";\n  }\n\n};\n\nclass TokContext {\n  constructor(token, preserveSpace) {\n    this.token = void 0;\n    this.preserveSpace = void 0;\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n}\n\nconst types = {\n  brace: new TokContext(\"{\"),\n  template: new TokContext(\"`\", true)\n};\n\ntypes$1.braceR.updateContext = context => {\n  context.pop();\n};\n\ntypes$1.braceL.updateContext = types$1.braceHashL.updateContext = types$1.dollarBraceL.updateContext = context => {\n  context.push(types.brace);\n};\n\ntypes$1.backQuote.updateContext = context => {\n  if (context[context.length - 1] === types.template) {\n    context.pop();\n  } else {\n    context.push(types.template);\n  }\n};\n\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08c7\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\u9ffc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7bf\\ua7c2-\\ua7ca\\ua7f5-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf\\u1ac0\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\nconst nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nconst nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nconst astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 107, 20, 28, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8952, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42717, 35, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];\nconst astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\n\nfunction isInAstralSet(code, set) {\n  let pos = 0x10000;\n\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n\n  return false;\n}\n\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\nconst reservedWords = {\n  keyword: [\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\"],\n  strict: [\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"],\n  strictBind: [\"eval\", \"arguments\"]\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\nfunction isReservedWord(word, inModule) {\n  return inModule && word === \"await\" || word === \"enum\";\n}\n\nfunction isStrictReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\nfunction isStrictBindOnlyReservedWord(word) {\n  return reservedWordsStrictBindSet.has(word);\n}\n\nfunction isStrictBindReservedWord(word, inModule) {\n  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\n}\n\nfunction isKeyword(word) {\n  return keywords.has(word);\n}\n\nfunction isIteratorStart(current, next) {\n  return current === 64 && next === 64;\n}\n\nconst reservedWordLikeSet = new Set([\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\", \"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\", \"eval\", \"arguments\", \"enum\", \"await\"]);\n\nfunction canBeReservedWord(word) {\n  return reservedWordLikeSet.has(word);\n}\n\nconst SCOPE_OTHER = 0b000000000,\n      SCOPE_PROGRAM = 0b000000001,\n      SCOPE_FUNCTION = 0b000000010,\n      SCOPE_ARROW = 0b000000100,\n      SCOPE_SIMPLE_CATCH = 0b000001000,\n      SCOPE_SUPER = 0b000010000,\n      SCOPE_DIRECT_SUPER = 0b000100000,\n      SCOPE_CLASS = 0b001000000,\n      SCOPE_STATIC_BLOCK = 0b010000000,\n      SCOPE_TS_MODULE = 0b100000000,\n      SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\nconst BIND_KIND_VALUE = 0b000000000001,\n      BIND_KIND_TYPE = 0b000000000010,\n      BIND_SCOPE_VAR = 0b000000000100,\n      BIND_SCOPE_LEXICAL = 0b000000001000,\n      BIND_SCOPE_FUNCTION = 0b000000010000,\n      BIND_FLAGS_NONE = 0b000001000000,\n      BIND_FLAGS_CLASS = 0b000010000000,\n      BIND_FLAGS_TS_ENUM = 0b000100000000,\n      BIND_FLAGS_TS_CONST_ENUM = 0b001000000000,\n      BIND_FLAGS_TS_EXPORT_ONLY = 0b010000000000,\n      BIND_FLAGS_FLOW_DECLARE_FN = 0b100000000000;\nconst BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS,\n      BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0,\n      BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0,\n      BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0,\n      BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS,\n      BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0,\n      BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM,\n      BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n      BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\nconst CLASS_ELEMENT_FLAG_STATIC = 0b100,\n      CLASS_ELEMENT_KIND_GETTER = 0b010,\n      CLASS_ELEMENT_KIND_SETTER = 0b001,\n      CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\nconst CLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n      CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n      CLASS_ELEMENT_OTHER = 0;\n\nclass Scope {\n  constructor(flags) {\n    this.var = new Set();\n    this.lexical = new Set();\n    this.functions = new Set();\n    this.flags = flags;\n  }\n\n}\n\nclass ScopeHandler {\n  constructor(raise, inModule) {\n    this.scopeStack = [];\n    this.undefinedExports = new Map();\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n\n      if (flags & SCOPE_STATIC_BLOCK) {\n        return true;\n      }\n\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n        return false;\n      }\n    }\n  }\n\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags) {\n    return new Scope(flags);\n  }\n\n  enter(flags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  treatFunctionsAsVarInScope(scope) {\n    return !!(scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_PROGRAM);\n  }\n\n  declareName(name, bindingType, pos) {\n    let scope = this.currentScope();\n\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope, name) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(scope, name, bindingType, pos) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(pos, ErrorMessages.VarRedeclaration, name);\n    }\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return scope.lexical.has(name) || scope.functions.has(name) || scope.var.has(name);\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return scope.lexical.has(name) || !this.treatFunctionsAsVarInScope(scope) && scope.var.has(name);\n    }\n\n    return scope.lexical.has(name) && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical.values().next().value === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name);\n  }\n\n  checkLocalExport(id) {\n    const {\n      name\n    } = id;\n    const topLevelScope = this.scopeStack[0];\n\n    if (!topLevelScope.lexical.has(name) && !topLevelScope.var.has(name) && !topLevelScope.functions.has(name)) {\n      this.undefinedExports.set(name, id.start);\n    }\n  }\n\n  currentScope() {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScopeFlags() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n\n  currentThisScopeFlags() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n\n}\n\nclass FlowScope extends Scope {\n  constructor(...args) {\n    super(...args);\n    this.declareFunctions = new Set();\n  }\n\n}\n\nclass FlowScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new FlowScope(flags);\n  }\n\n  declareName(name, bindingType, pos) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (super.isRedeclaredInScope(...arguments)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return !scope.declareFunctions.has(name) && (scope.lexical.has(name) || scope.functions.has(name));\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nclass State {\n  constructor() {\n    this.strict = void 0;\n    this.curLine = void 0;\n    this.startLoc = void 0;\n    this.endLoc = void 0;\n    this.errors = [];\n    this.potentialArrowAt = -1;\n    this.noArrowAt = [];\n    this.noArrowParamsConversionAt = [];\n    this.maybeInArrowParameters = false;\n    this.inType = false;\n    this.noAnonFunctionType = false;\n    this.inPropertyName = false;\n    this.hasFlowComment = false;\n    this.isAmbientContext = false;\n    this.inAbstractClass = false;\n    this.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n    this.soloAwait = false;\n    this.inFSharpPipelineDirectBody = false;\n    this.labels = [];\n    this.decoratorStack = [[]];\n    this.comments = [];\n    this.commentStack = [];\n    this.pos = 0;\n    this.lineStart = 0;\n    this.type = types$1.eof;\n    this.value = null;\n    this.start = 0;\n    this.end = 0;\n    this.lastTokEndLoc = null;\n    this.lastTokStartLoc = null;\n    this.lastTokStart = 0;\n    this.lastTokEnd = 0;\n    this.context = [types.brace];\n    this.exprAllowed = true;\n    this.containsEsc = false;\n    this.strictErrors = new Map();\n    this.tokensLength = 0;\n  }\n\n  init(options) {\n    this.strict = options.strictMode === false ? false : options.strictMode === true ? true : options.sourceType === \"module\";\n    this.curLine = options.startLine;\n    this.startLoc = this.endLoc = this.curPosition();\n  }\n\n  curPosition() {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  }\n\n  clone(skipArrays) {\n    const state = new State();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      state[key] = val;\n    }\n\n    return state;\n  }\n\n}\n\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\n\nconst VALID_REGEX_FLAGS = new Set([103, 109, 115, 105, 121, 117, 100]);\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [46, 66, 69, 79, 95, 98, 101, 111],\n  hex: [46, 88, 95, 120]\n};\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [48, 49];\nallowedNumericSeparatorSiblings.oct = [...allowedNumericSeparatorSiblings.bin, 50, 51, 52, 53, 54, 55];\nallowedNumericSeparatorSiblings.dec = [...allowedNumericSeparatorSiblings.oct, 56, 57];\nallowedNumericSeparatorSiblings.hex = [...allowedNumericSeparatorSiblings.dec, 65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102];\n\nclass Token {\n  constructor(state) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n}\n\nclass Tokenizer extends ParserError {\n  constructor(options, input) {\n    super();\n    this.isLookahead = void 0;\n    this.tokens = [];\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token) {\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  next() {\n    this.checkKeywordEscapes();\n\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type) {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  match(type) {\n    return this.state.type === type;\n  }\n\n  createLookaheadState(state) {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      lastTokEnd: state.end,\n      context: [this.curContext()],\n      inType: state.inType\n    };\n  }\n\n  lookahead() {\n    const old = this.state;\n    this.state = this.createLookaheadState(old);\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart() {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos) {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode() {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos) {\n    let cp = this.input.charCodeAt(pos);\n\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n\n    return cp;\n  }\n\n  setStrict(strict) {\n    this.state.strict = strict;\n\n    if (strict) {\n      this.state.strictErrors.forEach((message, pos) => this.raise(pos, message));\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext() {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  nextToken() {\n    const curContext = this.curContext();\n    if (!curContext.preserveSpace) this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n\n    if (this.state.pos >= this.length) {\n      this.finishToken(types$1.eof);\n      return;\n    }\n\n    if (curContext === types.template) {\n      this.readTmplToken();\n    } else {\n      this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n    }\n  }\n\n  skipBlockComment() {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", start + 2);\n    if (end === -1) throw this.raise(start, ErrorMessages.UnterminatedComment);\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start + 2;\n\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    if (this.isLookahead) return;\n    const comment = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + 2,\n      loc: new SourceLocation(startLoc, this.state.curPosition())\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip) {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt(this.state.pos += startSkip);\n\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    if (this.isLookahead) return;\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n    const comment = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition())\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipSpace() {\n    const spaceStart = this.state.pos;\n    const comments = [];\n\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 32:\n        case 160:\n        case 9:\n          ++this.state.pos;\n          break;\n\n        case 13:\n          if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n            ++this.state.pos;\n          }\n\n        case 10:\n        case 8232:\n        case 8233:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case 47:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case 42:\n              {\n                const comment = this.skipBlockComment();\n\n                if (comment !== undefined) {\n                  this.addComment(comment);\n                  if (this.options.attachComment) comments.push(comment);\n                }\n\n                break;\n              }\n\n            case 47:\n              {\n                const comment = this.skipLineComment(2);\n\n                if (comment !== undefined) {\n                  this.addComment(comment);\n                  if (this.options.attachComment) comments.push(comment);\n                }\n\n                break;\n              }\n\n            default:\n              break loop;\n          }\n\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (ch === 45 && !this.inModule) {\n            const pos = this.state.pos;\n\n            if (this.input.charCodeAt(pos + 1) === 45 && this.input.charCodeAt(pos + 2) === 62 && (spaceStart === 0 || this.state.lineStart > spaceStart)) {\n              const comment = this.skipLineComment(3);\n\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (ch === 60 && !this.inModule) {\n            const pos = this.state.pos;\n\n            if (this.input.charCodeAt(pos + 1) === 33 && this.input.charCodeAt(pos + 2) === 45 && this.input.charCodeAt(pos + 3) === 45) {\n              const comment = this.skipLineComment(4);\n\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null\n      };\n      this.state.commentStack.push(CommentWhitespace);\n    }\n  }\n\n  finishToken(type, val) {\n    this.state.end = this.state.pos;\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.state.endLoc = this.state.curPosition();\n      this.updateContext(prevType);\n    }\n  }\n\n  readToken_numberSign() {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n\n    if (next >= 48 && next <= 57) {\n      throw this.raise(this.state.pos, ErrorMessages.UnexpectedDigitAfterHash);\n    }\n\n    if (next === 123 || next === 91 && this.hasPlugin(\"recordAndTuple\")) {\n      this.expectPlugin(\"recordAndTuple\");\n\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(this.state.pos, next === 123 ? ErrorMessages.RecordExpressionHashIncorrectStartSyntaxType : ErrorMessages.TupleExpressionHashIncorrectStartSyntaxType);\n      }\n\n      this.state.pos += 2;\n\n      if (next === 123) {\n        this.finishToken(types$1.braceHashL);\n      } else {\n        this.finishToken(types$1.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(types$1.privateName, this.readWord1(next));\n    } else if (next === 92) {\n      ++this.state.pos;\n      this.finishToken(types$1.privateName, this.readWord1());\n    } else {\n      this.finishOp(types$1.hash, 1);\n    }\n  }\n\n  readToken_dot() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next >= 48 && next <= 57) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {\n      this.state.pos += 3;\n      this.finishToken(types$1.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types$1.dot);\n    }\n  }\n\n  readToken_slash() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types$1.slashAssign, 2);\n    } else {\n      this.finishOp(types$1.slash, 1);\n    }\n  }\n\n  readToken_interpreter() {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== 33) return false;\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n    this.finishToken(types$1.interpreterDirective, value);\n    return true;\n  }\n\n  readToken_mult_modulo(code) {\n    let type = code === 42 ? types$1.star : types$1.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 42 && next === 42) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = types$1.exponent;\n    }\n\n    if (next === 61 && !this.state.inType) {\n      width++;\n      type = code === 37 ? types$1.moduloAssign : types$1.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === 61) {\n        this.finishOp(types$1.assign, 3);\n      } else {\n        this.finishOp(code === 124 ? types$1.logicalOR : types$1.logicalAND, 2);\n      }\n\n      return;\n    }\n\n    if (code === 124) {\n      if (next === 62) {\n        this.finishOp(types$1.pipeline, 2);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 125) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.state.pos += 2;\n        this.finishToken(types$1.braceBarR);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 93) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.state.pos += 2;\n        this.finishToken(types$1.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === 61) {\n      this.finishOp(types$1.assign, 2);\n      return;\n    }\n\n    this.finishOp(code === 124 ? types$1.bitwiseOR : types$1.bitwiseAND, 1);\n  }\n\n  readToken_caret() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types$1.assign, 2);\n    } else {\n      this.finishOp(types$1.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_plus_min(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(types$1.incDec, 2);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(types$1.assign, 2);\n    } else {\n      this.finishOp(types$1.plusMin, 1);\n    }\n  }\n\n  readToken_lt_gt(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    let size = 1;\n\n    if (next === code) {\n      size = code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;\n\n      if (this.input.charCodeAt(this.state.pos + size) === 61) {\n        this.finishOp(types$1.assign, size + 1);\n        return;\n      }\n\n      this.finishOp(types$1.bitShift, size);\n      return;\n    }\n\n    if (next === 61) {\n      size = 2;\n    }\n\n    this.finishOp(types$1.relational, size);\n  }\n\n  readToken_eq_excl(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types$1.equality, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n      return;\n    }\n\n    if (code === 61 && next === 62) {\n      this.state.pos += 2;\n      this.finishToken(types$1.arrow);\n      return;\n    }\n\n    this.finishOp(code === 61 ? types$1.eq : types$1.bang, 1);\n  }\n\n  readToken_question() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n\n    if (next === 63) {\n      if (next2 === 61) {\n        this.finishOp(types$1.assign, 3);\n      } else {\n        this.finishOp(types$1.nullishCoalescing, 2);\n      }\n    } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\n      this.state.pos += 2;\n      this.finishToken(types$1.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types$1.question);\n    }\n  }\n\n  getTokenFromCode(code) {\n    switch (code) {\n      case 46:\n        this.readToken_dot();\n        return;\n\n      case 40:\n        ++this.state.pos;\n        this.finishToken(types$1.parenL);\n        return;\n\n      case 41:\n        ++this.state.pos;\n        this.finishToken(types$1.parenR);\n        return;\n\n      case 59:\n        ++this.state.pos;\n        this.finishToken(types$1.semi);\n        return;\n\n      case 44:\n        ++this.state.pos;\n        this.finishToken(types$1.comma);\n        return;\n\n      case 91:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.state.pos += 2;\n          this.finishToken(types$1.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(types$1.bracketL);\n        }\n\n        return;\n\n      case 93:\n        ++this.state.pos;\n        this.finishToken(types$1.bracketR);\n        return;\n\n      case 123:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.state.pos += 2;\n          this.finishToken(types$1.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(types$1.braceL);\n        }\n\n        return;\n\n      case 125:\n        ++this.state.pos;\n        this.finishToken(types$1.braceR);\n        return;\n\n      case 58:\n        if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n          this.finishOp(types$1.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(types$1.colon);\n        }\n\n        return;\n\n      case 63:\n        this.readToken_question();\n        return;\n\n      case 96:\n        ++this.state.pos;\n        this.finishToken(types$1.backQuote);\n        return;\n\n      case 48:\n        {\n          const next = this.input.charCodeAt(this.state.pos + 1);\n\n          if (next === 120 || next === 88) {\n            this.readRadixNumber(16);\n            return;\n          }\n\n          if (next === 111 || next === 79) {\n            this.readRadixNumber(8);\n            return;\n          }\n\n          if (next === 98 || next === 66) {\n            this.readRadixNumber(2);\n            return;\n          }\n        }\n\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n        this.readNumber(false);\n        return;\n\n      case 34:\n      case 39:\n        this.readString(code);\n        return;\n\n      case 47:\n        this.readToken_slash();\n        return;\n\n      case 37:\n      case 42:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case 124:\n      case 38:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case 94:\n        this.readToken_caret();\n        return;\n\n      case 43:\n      case 45:\n        this.readToken_plus_min(code);\n        return;\n\n      case 60:\n      case 62:\n        this.readToken_lt_gt(code);\n        return;\n\n      case 61:\n      case 33:\n        this.readToken_eq_excl(code);\n        return;\n\n      case 126:\n        this.finishOp(types$1.tilde, 1);\n        return;\n\n      case 64:\n        ++this.state.pos;\n        this.finishToken(types$1.at);\n        return;\n\n      case 35:\n        this.readToken_numberSign();\n        return;\n\n      case 92:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n\n    }\n\n    throw this.raise(this.state.pos, ErrorMessages.InvalidOrUnexpectedToken, String.fromCodePoint(code));\n  }\n\n  finishOp(type, size) {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp() {\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let {\n      pos\n    } = this.state;\n\n    for (;; ++pos) {\n      if (pos >= this.length) {\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n      }\n\n      const ch = this.input.charCodeAt(pos);\n\n      if (isNewLine(ch)) {\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n      }\n\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === 91) {\n          inClass = true;\n        } else if (ch === 93 && inClass) {\n          inClass = false;\n        } else if (ch === 47 && !inClass) {\n          break;\n        }\n\n        escaped = ch === 92;\n      }\n    }\n\n    const content = this.input.slice(start, pos);\n    ++pos;\n    let mods = \"\";\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      const char = String.fromCharCode(cp);\n\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (mods.includes(char)) {\n          this.raise(pos + 1, ErrorMessages.DuplicateRegExpFlags);\n        }\n      } else if (isIdentifierChar(cp) || cp === 92) {\n        this.raise(pos + 1, ErrorMessages.MalformedRegExpFlags);\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n\n    this.state.pos = pos;\n    this.finishToken(types$1.regexp, {\n      pattern: content,\n      flags: mods\n    });\n  }\n\n  readInt(radix, len, forceLen, allowNumSeparator = true) {\n    const start = this.state.pos;\n    const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings = radix === 16 ? allowedNumericSeparatorSiblings.hex : radix === 10 ? allowedNumericSeparatorSiblings.dec : radix === 8 ? allowedNumericSeparatorSiblings.oct : allowedNumericSeparatorSiblings.bin;\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === 95) {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (allowedSiblings.indexOf(next) === -1) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n        } else if (forbiddenSiblings.indexOf(prev) > -1 || forbiddenSiblings.indexOf(next) > -1 || Number.isNaN(next)) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n        }\n\n        if (!allowNumSeparator) {\n          this.raise(this.state.pos, ErrorMessages.NumericSeparatorInEscapeSequence);\n        }\n\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= 97) {\n        val = code - 97 + 10;\n      } else if (code >= 65) {\n        val = code - 65 + 10;\n      } else if (_isDigit(code)) {\n        val = code - 48;\n      } else {\n        val = Infinity;\n      }\n\n      if (val >= radix) {\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(this.state.start + i + 2, ErrorMessages.InvalidDigit, radix);\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n\n    if (this.state.pos === start || len != null && this.state.pos - start !== len || invalid) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix) {\n    const start = this.state.pos;\n    let isBigInt = false;\n    this.state.pos += 2;\n    const val = this.readInt(radix);\n\n    if (val == null) {\n      this.raise(this.state.start + 2, ErrorMessages.InvalidDigit, radix);\n    }\n\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 110) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === 109) {\n      throw this.raise(start, ErrorMessages.InvalidDecimal);\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(types$1.bigint, str);\n      return;\n    }\n\n    this.finishToken(types$1.num, val);\n  }\n\n  readNumber(startsWithDot) {\n    const start = this.state.pos;\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(start, ErrorMessages.InvalidNumber);\n    }\n\n    const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(start, ErrorMessages.StrictOctalLiteral);\n\n      if (!this.state.strict) {\n        const underscorePos = integer.indexOf(\"_\");\n\n        if (underscorePos > 0) {\n          this.raise(underscorePos + start, ErrorMessages.ZeroDigitNumericSeparator);\n        }\n      }\n\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 46 && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if ((next === 69 || next === 101) && !isOctal) {\n      next = this.input.charCodeAt(++this.state.pos);\n\n      if (next === 43 || next === 45) {\n        ++this.state.pos;\n      }\n\n      if (this.readInt(10) === null) {\n        this.raise(start, ErrorMessages.InvalidOrMissingExponent);\n      }\n\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === 110) {\n      if (isFloat || hasLeadingZero) {\n        this.raise(start, ErrorMessages.InvalidBigIntLiteral);\n      }\n\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === 109) {\n      this.expectPlugin(\"decimal\", this.state.pos);\n\n      if (hasExponent || hasLeadingZero) {\n        this.raise(start, ErrorMessages.InvalidDecimal);\n      }\n\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n    }\n\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(types$1.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(types$1.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(types$1.num, val);\n  }\n\n  readCodePoint(throwOnInvalid) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === 123) {\n      const codePos = ++this.state.pos;\n      code = this.readHexChar(this.input.indexOf(\"}\", this.state.pos) - this.state.pos, true, throwOnInvalid);\n      ++this.state.pos;\n\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(codePos, ErrorMessages.InvalidCodePoint);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n\n    return code;\n  }\n\n  readString(quote) {\n    let out = \"\",\n        chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (ch === 8232 || ch === 8233) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(types$1.string, out);\n  }\n\n  readTmplToken() {\n    let out = \"\",\n        chunkStart = this.state.pos,\n        containsInvalid = false;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedTemplate);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {\n        if (this.state.pos === this.state.start && this.match(types$1.template)) {\n          if (ch === 36) {\n            this.state.pos += 2;\n            this.finishToken(types$1.dollarBraceL);\n            return;\n          } else {\n            ++this.state.pos;\n            this.finishToken(types$1.backQuote);\n            return;\n          }\n        }\n\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(types$1.template, containsInvalid ? null : out);\n        return;\n      }\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n\n        switch (ch) {\n          case 13:\n            if (this.input.charCodeAt(this.state.pos) === 10) {\n              ++this.state.pos;\n            }\n\n          case 10:\n            out += \"\\n\";\n            break;\n\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  recordStrictModeErrors(pos, message) {\n    if (this.state.strict && !this.state.strictErrors.has(pos)) {\n      this.raise(pos, message);\n    } else {\n      this.state.strictErrors.set(pos, message);\n    }\n  }\n\n  readEscapedChar(inTemplate) {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n\n    switch (ch) {\n      case 110:\n        return \"\\n\";\n\n      case 114:\n        return \"\\r\";\n\n      case 120:\n        {\n          const code = this.readHexChar(2, false, throwOnInvalid);\n          return code === null ? null : String.fromCharCode(code);\n        }\n\n      case 117:\n        {\n          const code = this.readCodePoint(throwOnInvalid);\n          return code === null ? null : String.fromCodePoint(code);\n        }\n\n      case 116:\n        return \"\\t\";\n\n      case 98:\n        return \"\\b\";\n\n      case 118:\n        return \"\\u000b\";\n\n      case 102:\n        return \"\\f\";\n\n      case 13:\n        if (this.input.charCodeAt(this.state.pos) === 10) {\n          ++this.state.pos;\n        }\n\n      case 10:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n\n      case 8232:\n      case 8233:\n        return \"\";\n\n      case 56:\n      case 57:\n        if (inTemplate) {\n          return null;\n        } else {\n          this.recordStrictModeErrors(this.state.pos - 1, ErrorMessages.StrictNumericEscape);\n        }\n\n      default:\n        if (ch >= 48 && ch <= 55) {\n          const codePos = this.state.pos - 1;\n          const match = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/);\n          let octalStr = match[0];\n          let octal = parseInt(octalStr, 8);\n\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n\n          if (octalStr !== \"0\" || next === 56 || next === 57) {\n            if (inTemplate) {\n              return null;\n            } else {\n              this.recordStrictModeErrors(codePos, ErrorMessages.StrictNumericEscape);\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  readHexChar(len, forceLen, throwOnInvalid) {\n    const codePos = this.state.pos;\n    const n = this.readInt(16, len, forceLen, false);\n\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, ErrorMessages.InvalidEscapeSequence);\n      } else {\n        this.state.pos = codePos - 1;\n      }\n    }\n\n    return n;\n  }\n\n  readWord1(firstCode) {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === 92) {\n        this.state.containsEsc = true;\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.pos;\n        const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== 117) {\n          this.raise(this.state.pos, ErrorMessages.MissingUnicodeEscape);\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(escStart, ErrorMessages.EscapedCharNotAnIdentifier);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  readWord(firstCode) {\n    const word = this.readWord1(firstCode);\n    const type = keywords$1.get(word) || types$1.name;\n    this.finishToken(type, word);\n  }\n\n  checkKeywordEscapes() {\n    const kw = this.state.type.keyword;\n\n    if (kw && this.state.containsEsc) {\n      this.raise(this.state.start, ErrorMessages.InvalidEscapedReservedWord, kw);\n    }\n  }\n\n  updateContext(prevType) {\n    var _this$state$type$upda, _this$state$type;\n\n    (_this$state$type$upda = (_this$state$type = this.state.type).updateContext) == null ? void 0 : _this$state$type$upda.call(_this$state$type, this.state.context);\n  }\n\n}\n\nclass ClassScope {\n  constructor() {\n    this.privateNames = new Set();\n    this.loneAccessors = new Map();\n    this.undefinedPrivateNames = new Map();\n  }\n\n}\n\nclass ClassScopeHandler {\n  constructor(raise) {\n    this.stack = [];\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n  }\n\n  current() {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n    const current = this.current();\n\n    for (const [name, pos] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, pos);\n        }\n      } else {\n        this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n      }\n    }\n  }\n\n  declarePrivateName(name, elementType, pos) {\n    const classScope = this.current();\n    let redefined = classScope.privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && classScope.loneAccessors.get(name);\n\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n        if (!redefined) classScope.loneAccessors.delete(name);\n      } else if (!redefined) {\n        classScope.loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.raise(pos, ErrorMessages.PrivateNameRedeclaration, name);\n    }\n\n    classScope.privateNames.add(name);\n    classScope.undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name, pos) {\n    let classScope;\n\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, pos);\n    } else {\n      this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n    }\n  }\n\n}\n\nconst kExpression = 0,\n      kMaybeArrowParameterDeclaration = 1,\n      kMaybeAsyncArrowParameterDeclaration = 2,\n      kParameterDeclaration = 3;\n\nclass ExpressionScope {\n  constructor(type = kExpression) {\n    this.type = void 0;\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration() {\n    return this.type === kMaybeAsyncArrowParameterDeclaration || this.type === kMaybeArrowParameterDeclaration;\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n\n}\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  constructor(type) {\n    super(type);\n    this.errors = new Map();\n  }\n\n  recordDeclarationError(pos, template) {\n    this.errors.set(pos, template);\n  }\n\n  clearDeclarationError(pos) {\n    this.errors.delete(pos);\n  }\n\n  iterateErrors(iterator) {\n    this.errors.forEach(iterator);\n  }\n\n}\n\nclass ExpressionScopeHandler {\n  constructor(raise) {\n    this.stack = [new ExpressionScope()];\n    this.raise = raise;\n  }\n\n  enter(scope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  recordParameterInitializerError(pos, template) {\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(pos, template);\n      } else {\n        return;\n      }\n\n      scope = stack[--i];\n    }\n\n    this.raise(pos, template);\n  }\n\n  recordParenthesizedIdentifierError(pos, template) {\n    const {\n      stack\n    } = this;\n    const scope = stack[stack.length - 1];\n\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.raise(pos, template);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(pos, template);\n    } else {\n      return;\n    }\n  }\n\n  recordAsyncArrowParametersError(pos, template) {\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        scope.recordDeclarationError(pos, template);\n      }\n\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern() {\n    const {\n      stack\n    } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors((template, pos) => {\n      this.raise(pos, template);\n      let i = stack.length - 2;\n      let scope = stack[i];\n\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(pos);\n        scope = stack[--i];\n      }\n    });\n  }\n\n}\n\nfunction newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nfunction newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nfunction newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nfunction newExpressionScope() {\n  return new ExpressionScope();\n}\n\nconst PARAM = 0b0000,\n      PARAM_YIELD = 0b0001,\n      PARAM_AWAIT = 0b0010,\n      PARAM_RETURN = 0b0100,\n      PARAM_IN = 0b1000;\n\nclass ProductionParameterHandler {\n  constructor() {\n    this.stacks = [];\n  }\n\n  enter(flags) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags() {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait() {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield() {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn() {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn() {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n\n}\n\nfunction functionFlags(isAsync, isGenerator) {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n\nclass UtilParser extends Tokenizer {\n  addExtra(node, key, val) {\n    if (!node) return;\n    const extra = node.extra = node.extra || {};\n    extra[key] = val;\n  }\n\n  isRelational(op) {\n    return this.match(types$1.relational) && this.state.value === op;\n  }\n\n  expectRelational(op) {\n    if (this.isRelational(op)) {\n      this.next();\n    } else {\n      this.unexpected(null, types$1.relational);\n    }\n  }\n\n  isContextual(name) {\n    return this.match(types$1.name) && this.state.value === name && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart, name) {\n    const nameEnd = nameStart + name.length;\n\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(isIdentifierChar(nextCh) || (nextCh & 0xfc00) === 0xd800);\n    }\n\n    return false;\n  }\n\n  isLookaheadContextual(name) {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  eatContextual(name) {\n    return this.isContextual(name) && this.eat(types$1.name);\n  }\n\n  expectContextual(name, template) {\n    if (!this.eatContextual(name)) this.unexpected(null, template);\n  }\n\n  canInsertSemicolon() {\n    return this.match(types$1.eof) || this.match(types$1.braceR) || this.hasPrecedingLineBreak();\n  }\n\n  hasPrecedingLineBreak() {\n    return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));\n  }\n\n  hasFollowingLineBreak() {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n\n  isLineTerminator() {\n    return this.eat(types$1.semi) || this.canInsertSemicolon();\n  }\n\n  semicolon(allowAsi = true) {\n    if (allowAsi ? this.isLineTerminator() : this.eat(types$1.semi)) return;\n    this.raise(this.state.lastTokEnd, ErrorMessages.MissingSemicolon);\n  }\n\n  expect(type, pos) {\n    this.eat(type) || this.unexpected(pos, type);\n  }\n\n  assertNoSpace(message = \"Unexpected space.\") {\n    if (this.state.start > this.state.lastTokEnd) {\n      this.raise(this.state.lastTokEnd, {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedSpace\",\n        template: message\n      });\n    }\n  }\n\n  unexpected(pos, messageOrType = {\n    code: ErrorCodes.SyntaxError,\n    reasonCode: \"UnexpectedToken\",\n    template: \"Unexpected token\"\n  }) {\n    if (messageOrType instanceof TokenType) {\n      messageOrType = {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedToken\",\n        template: `Unexpected token, expected \"${messageOrType.label}\"`\n      };\n    }\n\n    throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n  }\n\n  expectPlugin(name, pos) {\n    if (!this.hasPlugin(name)) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: [name]\n      }, `This experimental syntax requires enabling the parser plugin: '${name}'`);\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(names, pos) {\n    if (!names.some(n => this.hasPlugin(n))) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: names\n      }, `This experimental syntax requires enabling one of the following parser plugin(s): '${names.join(\", \")}'`);\n    }\n  }\n\n  tryParse(fn, oldState = this.state.clone()) {\n    const abortSignal = {\n      node: null\n    };\n\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n\n      if (error instanceof SyntaxError) {\n        return {\n          node: null,\n          error,\n          thrown: true,\n          aborted: false,\n          failState\n        };\n      }\n\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(refExpressionErrors, andThrow) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssign,\n      doubleProto,\n      optionalParameters\n    } = refExpressionErrors;\n\n    if (!andThrow) {\n      return shorthandAssign >= 0 || doubleProto >= 0 || optionalParameters >= 0;\n    }\n\n    if (shorthandAssign >= 0) {\n      this.unexpected(shorthandAssign);\n    }\n\n    if (doubleProto >= 0) {\n      this.raise(doubleProto, ErrorMessages.DuplicateProto);\n    }\n\n    if (optionalParameters >= 0) {\n      this.unexpected(optionalParameters);\n    }\n  }\n\n  isLiteralPropertyName() {\n    return this.match(types$1.name) || !!this.state.type.keyword || this.match(types$1.string) || this.match(types$1.num) || this.match(types$1.bigint) || this.match(types$1.decimal);\n  }\n\n  isPrivateName(node) {\n    return node.type === \"PrivateName\";\n  }\n\n  getPrivateNameSV(node) {\n    return node.id.name;\n  }\n\n  hasPropertyAsPrivateName(node) {\n    return (node.type === \"MemberExpression\" || node.type === \"OptionalMemberExpression\") && this.isPrivateName(node.property);\n  }\n\n  isOptionalChain(node) {\n    return node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\";\n  }\n\n  isObjectProperty(node) {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node) {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(inModule = this.options.sourceType === \"module\") {\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this.raise.bind(this));\n    return () => {\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n\n    if (this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n}\n\nclass ExpressionErrors {\n  constructor() {\n    this.shorthandAssign = -1;\n    this.doubleProto = -1;\n    this.optionalParameters = -1;\n  }\n\n}\n\nclass Node {\n  constructor(parser, pos, loc) {\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser != null && parser.options.ranges) this.range = [pos, 0];\n    if (parser != null && parser.filename) this.loc.filename = parser.filename;\n  }\n\n}\n\nconst NodePrototype = Node.prototype;\n{\n  NodePrototype.__clone = function () {\n    const newNode = new Node();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n\n      if (key !== \"leadingComments\" && key !== \"trailingComments\" && key !== \"innerComments\") {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node) {\n  return cloneIdentifier(node);\n}\n\nfunction cloneIdentifier(node) {\n  const {\n    type,\n    start,\n    end,\n    loc,\n    range,\n    extra,\n    name\n  } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n\n  return cloned;\n}\n\nfunction cloneStringLiteral(node) {\n  const {\n    type,\n    start,\n    end,\n    loc,\n    range,\n    extra\n  } = node;\n\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n\n  const cloned = Object.create(NodePrototype);\n  cloned.type = \"StringLiteral\";\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.value = node.value;\n  return cloned;\n}\n\nclass NodeUtils extends UtilParser {\n  startNode() {\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt(pos, loc) {\n    return new Node(this, pos, loc);\n  }\n\n  startNodeAtNode(type) {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  finishNode(node, type) {\n    return this.finishNodeAt(node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);\n  }\n\n  finishNodeAt(node, type, pos, loc) {\n    node.type = type;\n    node.end = pos;\n    node.loc.end = loc;\n    if (this.options.ranges) node.range[1] = pos;\n    if (this.options.attachComment) this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node, start, startLoc) {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(node, end = this.state.lastTokEnd, endLoc = this.state.lastTokEndLoc) {\n    node.end = end;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = end;\n  }\n\n  resetStartLocationFromNode(node, locationNode) {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n\n}\n\nconst reservedTypes = new Set([\"_\", \"any\", \"bool\", \"boolean\", \"empty\", \"extends\", \"false\", \"interface\", \"mixed\", \"null\", \"number\", \"static\", \"string\", \"true\", \"typeof\", \"void\"]);\nconst FlowErrors = makeErrorTemplates({\n  AmbiguousConditionalArrow: \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind: \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  AssignReservedType: \"Cannot overwrite reserved type %0.\",\n  DeclareClassElement: \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer: \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports: \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n  EnumDuplicateMemberName: \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n  EnumInconsistentMemberValues: \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n  EnumInvalidExplicitType: \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidExplicitTypeUnknownSupplied: \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidMemberInitializerPrimaryType: \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n  EnumInvalidMemberInitializerSymbolType: \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n  EnumInvalidMemberInitializerUnknownType: \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n  EnumInvalidMemberName: \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n  EnumNumberMemberNotInitialized: \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n  EnumStringMemberInconsistentlyInitailized: \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportTypeShorthandOnlyInPureImport: \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact: \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject: \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule: \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault: \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule: \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  OptionalBindingPattern: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired: \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor: \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst: \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern: \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject: \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: \"Unexpected reserved type %0.\",\n  UnexpectedReservedUnderscore: \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks: \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType: \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand: 'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter: \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction: \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: \"`declare export %0` is not supported. Use `%1` instead.\",\n  UnsupportedStatementInDeclareModule: \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\"\n}, ErrorCodes.SyntaxError);\n\nfunction isEsModuleType(bodyElement) {\n  return bodyElement.type === \"DeclareExportAllDeclaration\" || bodyElement.type === \"DeclareExportDeclaration\" && (!bodyElement.declaration || bodyElement.declaration.type !== \"TypeAlias\" && bodyElement.declaration.type !== \"InterfaceDeclaration\");\n}\n\nfunction hasTypeImportKind(node) {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(state) {\n  return (state.type === types$1.name || !!state.type.keyword) && state.value !== \"from\";\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\"\n};\n\nfunction partition(list, test) {\n  const list1 = [];\n  const list2 = [];\n\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\nvar flow = superClass => class extends superClass {\n  constructor(...args) {\n    super(...args);\n    this.flowPragma = undefined;\n  }\n\n  getScopeHandler() {\n    return FlowScopeHandler;\n  }\n\n  shouldParseTypes() {\n    return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n  }\n\n  shouldParseEnums() {\n    return !!this.getPluginOption(\"flow\", \"enums\");\n  }\n\n  finishToken(type, val) {\n    if (type !== types$1.string && type !== types$1.semi && type !== types$1.interpreterDirective) {\n      if (this.flowPragma === undefined) {\n        this.flowPragma = null;\n      }\n    }\n\n    return super.finishToken(type, val);\n  }\n\n  addComment(comment) {\n    if (this.flowPragma === undefined) {\n      const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n      if (!matches) ;else if (matches[1] === \"flow\") {\n        this.flowPragma = \"flow\";\n      } else if (matches[1] === \"noflow\") {\n        this.flowPragma = \"noflow\";\n      } else {\n        throw new Error(\"Unexpected flow pragma\");\n      }\n    }\n\n    return super.addComment(comment);\n  }\n\n  flowParseTypeInitialiser(tok) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(tok || types$1.colon);\n    const type = this.flowParseType();\n    this.state.inType = oldInType;\n    return type;\n  }\n\n  flowParsePredicate() {\n    const node = this.startNode();\n    const moduloPos = this.state.start;\n    this.next();\n    this.expectContextual(\"checks\");\n\n    if (this.state.lastTokStart > moduloPos + 1) {\n      this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);\n    }\n\n    if (this.eat(types$1.parenL)) {\n      node.value = this.parseExpression();\n      this.expect(types$1.parenR);\n      return this.finishNode(node, \"DeclaredPredicate\");\n    } else {\n      return this.finishNode(node, \"InferredPredicate\");\n    }\n  }\n\n  flowParseTypeAndPredicateInitialiser() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(types$1.colon);\n    let type = null;\n    let predicate = null;\n\n    if (this.match(types$1.modulo)) {\n      this.state.inType = oldInType;\n      predicate = this.flowParsePredicate();\n    } else {\n      type = this.flowParseType();\n      this.state.inType = oldInType;\n\n      if (this.match(types$1.modulo)) {\n        predicate = this.flowParsePredicate();\n      }\n    }\n\n    return [type, predicate];\n  }\n\n  flowParseDeclareClass(node) {\n    this.next();\n    this.flowParseInterfaceish(node, true);\n    return this.finishNode(node, \"DeclareClass\");\n  }\n\n  flowParseDeclareFunction(node) {\n    this.next();\n    const id = node.id = this.parseIdentifier();\n    const typeNode = this.startNode();\n    const typeContainer = this.startNode();\n\n    if (this.isRelational(\"<\")) {\n      typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      typeNode.typeParameters = null;\n    }\n\n    this.expect(types$1.parenL);\n    const tmp = this.flowParseFunctionTypeParams();\n    typeNode.params = tmp.params;\n    typeNode.rest = tmp.rest;\n    typeNode.this = tmp._this;\n    this.expect(types$1.parenR);\n    [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n    typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n    id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n    this.resetEndLocation(id);\n    this.semicolon();\n    this.scope.declareName(node.id.name, BIND_FLOW_DECLARE_FN, node.id.start);\n    return this.finishNode(node, \"DeclareFunction\");\n  }\n\n  flowParseDeclare(node, insideModule) {\n    if (this.match(types$1._class)) {\n      return this.flowParseDeclareClass(node);\n    } else if (this.match(types$1._function)) {\n      return this.flowParseDeclareFunction(node);\n    } else if (this.match(types$1._var)) {\n      return this.flowParseDeclareVariable(node);\n    } else if (this.eatContextual(\"module\")) {\n      if (this.match(types$1.dot)) {\n        return this.flowParseDeclareModuleExports(node);\n      } else {\n        if (insideModule) {\n          this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);\n        }\n\n        return this.flowParseDeclareModule(node);\n      }\n    } else if (this.isContextual(\"type\")) {\n      return this.flowParseDeclareTypeAlias(node);\n    } else if (this.isContextual(\"opaque\")) {\n      return this.flowParseDeclareOpaqueType(node);\n    } else if (this.isContextual(\"interface\")) {\n      return this.flowParseDeclareInterface(node);\n    } else if (this.match(types$1._export)) {\n      return this.flowParseDeclareExportDeclaration(node, insideModule);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  flowParseDeclareVariable(node) {\n    this.next();\n    node.id = this.flowParseTypeAnnotatableIdentifier(true);\n    this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\n    this.semicolon();\n    return this.finishNode(node, \"DeclareVariable\");\n  }\n\n  flowParseDeclareModule(node) {\n    this.scope.enter(SCOPE_OTHER);\n\n    if (this.match(types$1.string)) {\n      node.id = this.parseExprAtom();\n    } else {\n      node.id = this.parseIdentifier();\n    }\n\n    const bodyNode = node.body = this.startNode();\n    const body = bodyNode.body = [];\n    this.expect(types$1.braceL);\n\n    while (!this.match(types$1.braceR)) {\n      let bodyNode = this.startNode();\n\n      if (this.match(types$1._import)) {\n        this.next();\n\n        if (!this.isContextual(\"type\") && !this.match(types$1._typeof)) {\n          this.raise(this.state.lastTokStart, FlowErrors.InvalidNonTypeImportInDeclareModule);\n        }\n\n        this.parseImport(bodyNode);\n      } else {\n        this.expectContextual(\"declare\", FlowErrors.UnsupportedStatementInDeclareModule);\n        bodyNode = this.flowParseDeclare(bodyNode, true);\n      }\n\n      body.push(bodyNode);\n    }\n\n    this.scope.exit();\n    this.expect(types$1.braceR);\n    this.finishNode(bodyNode, \"BlockStatement\");\n    let kind = null;\n    let hasModuleExport = false;\n    body.forEach(bodyElement => {\n      if (isEsModuleType(bodyElement)) {\n        if (kind === \"CommonJS\") {\n          this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n        }\n\n        kind = \"ES\";\n      } else if (bodyElement.type === \"DeclareModuleExports\") {\n        if (hasModuleExport) {\n          this.raise(bodyElement.start, FlowErrors.DuplicateDeclareModuleExports);\n        }\n\n        if (kind === \"ES\") {\n          this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n        }\n\n        kind = \"CommonJS\";\n        hasModuleExport = true;\n      }\n    });\n    node.kind = kind || \"CommonJS\";\n    return this.finishNode(node, \"DeclareModule\");\n  }\n\n  flowParseDeclareExportDeclaration(node, insideModule) {\n    this.expect(types$1._export);\n\n    if (this.eat(types$1._default)) {\n      if (this.match(types$1._function) || this.match(types$1._class)) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n      } else {\n        node.declaration = this.flowParseType();\n        this.semicolon();\n      }\n\n      node.default = true;\n      return this.finishNode(node, \"DeclareExportDeclaration\");\n    } else {\n      if (this.match(types$1._const) || this.isLet() || (this.isContextual(\"type\") || this.isContextual(\"interface\")) && !insideModule) {\n        const label = this.state.value;\n        const suggestion = exportSuggestions[label];\n        throw this.raise(this.state.start, FlowErrors.UnsupportedDeclareExportKind, label, suggestion);\n      }\n\n      if (this.match(types$1._var) || this.match(types$1._function) || this.match(types$1._class) || this.isContextual(\"opaque\")) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n        node.default = false;\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else if (this.match(types$1.star) || this.match(types$1.braceL) || this.isContextual(\"interface\") || this.isContextual(\"type\") || this.isContextual(\"opaque\")) {\n        node = this.parseExport(node);\n\n        if (node.type === \"ExportNamedDeclaration\") {\n          node.type = \"ExportDeclaration\";\n          node.default = false;\n          delete node.exportKind;\n        }\n\n        node.type = \"Declare\" + node.type;\n        return node;\n      }\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParseDeclareModuleExports(node) {\n    this.next();\n    this.expectContextual(\"exports\");\n    node.typeAnnotation = this.flowParseTypeAnnotation();\n    this.semicolon();\n    return this.finishNode(node, \"DeclareModuleExports\");\n  }\n\n  flowParseDeclareTypeAlias(node) {\n    this.next();\n    this.flowParseTypeAlias(node);\n    node.type = \"DeclareTypeAlias\";\n    return node;\n  }\n\n  flowParseDeclareOpaqueType(node) {\n    this.next();\n    this.flowParseOpaqueType(node, true);\n    node.type = \"DeclareOpaqueType\";\n    return node;\n  }\n\n  flowParseDeclareInterface(node) {\n    this.next();\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"DeclareInterface\");\n  }\n\n  flowParseInterfaceish(node, isClass = false) {\n    node.id = this.flowParseRestrictedIdentifier(!isClass, true);\n    this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.extends = [];\n    node.implements = [];\n    node.mixins = [];\n\n    if (this.eat(types$1._extends)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (!isClass && this.eat(types$1.comma));\n    }\n\n    if (this.isContextual(\"mixins\")) {\n      this.next();\n\n      do {\n        node.mixins.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types$1.comma));\n    }\n\n    if (this.isContextual(\"implements\")) {\n      this.next();\n\n      do {\n        node.implements.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types$1.comma));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: isClass,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: isClass,\n      allowInexact: false\n    });\n  }\n\n  flowParseInterfaceExtends() {\n    const node = this.startNode();\n    node.id = this.flowParseQualifiedTypeIdentifier();\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    } else {\n      node.typeParameters = null;\n    }\n\n    return this.finishNode(node, \"InterfaceExtends\");\n  }\n\n  flowParseInterface(node) {\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"InterfaceDeclaration\");\n  }\n\n  checkNotUnderscore(word) {\n    if (word === \"_\") {\n      this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);\n    }\n  }\n\n  checkReservedType(word, startLoc, declaration) {\n    if (!reservedTypes.has(word)) return;\n    this.raise(startLoc, declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, word);\n  }\n\n  flowParseRestrictedIdentifier(liberal, declaration) {\n    this.checkReservedType(this.state.value, this.state.start, declaration);\n    return this.parseIdentifier(liberal);\n  }\n\n  flowParseTypeAlias(node) {\n    node.id = this.flowParseRestrictedIdentifier(false, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.right = this.flowParseTypeInitialiser(types$1.eq);\n    this.semicolon();\n    return this.finishNode(node, \"TypeAlias\");\n  }\n\n  flowParseOpaqueType(node, declare) {\n    this.expectContextual(\"type\");\n    node.id = this.flowParseRestrictedIdentifier(true, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.supertype = null;\n\n    if (this.match(types$1.colon)) {\n      node.supertype = this.flowParseTypeInitialiser(types$1.colon);\n    }\n\n    node.impltype = null;\n\n    if (!declare) {\n      node.impltype = this.flowParseTypeInitialiser(types$1.eq);\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"OpaqueType\");\n  }\n\n  flowParseTypeParameter(requireDefault = false) {\n    const nodeStart = this.state.start;\n    const node = this.startNode();\n    const variance = this.flowParseVariance();\n    const ident = this.flowParseTypeAnnotatableIdentifier();\n    node.name = ident.name;\n    node.variance = variance;\n    node.bound = ident.typeAnnotation;\n\n    if (this.match(types$1.eq)) {\n      this.eat(types$1.eq);\n      node.default = this.flowParseType();\n    } else {\n      if (requireDefault) {\n        this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);\n      }\n    }\n\n    return this.finishNode(node, \"TypeParameter\");\n  }\n\n  flowParseTypeParameterDeclaration() {\n    const oldInType = this.state.inType;\n    const node = this.startNode();\n    node.params = [];\n    this.state.inType = true;\n\n    if (this.isRelational(\"<\") || this.match(types$1.jsxTagStart)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    let defaultRequired = false;\n\n    do {\n      const typeParameter = this.flowParseTypeParameter(defaultRequired);\n      node.params.push(typeParameter);\n\n      if (typeParameter.default) {\n        defaultRequired = true;\n      }\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types$1.comma);\n      }\n    } while (!this.isRelational(\">\"));\n\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterDeclaration\");\n  }\n\n  flowParseTypeParameterInstantiation() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expectRelational(\"<\");\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n    this.state.noAnonFunctionType = false;\n\n    while (!this.isRelational(\">\")) {\n      node.params.push(this.flowParseType());\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseTypeParameterInstantiationCallOrNew() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expectRelational(\"<\");\n\n    while (!this.isRelational(\">\")) {\n      node.params.push(this.flowParseTypeOrImplicitInstantiation());\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseInterfaceType() {\n    const node = this.startNode();\n    this.expectContextual(\"interface\");\n    node.extends = [];\n\n    if (this.eat(types$1._extends)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types$1.comma));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: false,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: false,\n      allowInexact: false\n    });\n    return this.finishNode(node, \"InterfaceTypeAnnotation\");\n  }\n\n  flowParseObjectPropertyKey() {\n    return this.match(types$1.num) || this.match(types$1.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n  }\n\n  flowParseObjectTypeIndexer(node, isStatic, variance) {\n    node.static = isStatic;\n\n    if (this.lookahead().type === types$1.colon) {\n      node.id = this.flowParseObjectPropertyKey();\n      node.key = this.flowParseTypeInitialiser();\n    } else {\n      node.id = null;\n      node.key = this.flowParseType();\n    }\n\n    this.expect(types$1.bracketR);\n    node.value = this.flowParseTypeInitialiser();\n    node.variance = variance;\n    return this.finishNode(node, \"ObjectTypeIndexer\");\n  }\n\n  flowParseObjectTypeInternalSlot(node, isStatic) {\n    node.static = isStatic;\n    node.id = this.flowParseObjectPropertyKey();\n    this.expect(types$1.bracketR);\n    this.expect(types$1.bracketR);\n\n    if (this.isRelational(\"<\") || this.match(types$1.parenL)) {\n      node.method = true;\n      node.optional = false;\n      node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n    } else {\n      node.method = false;\n\n      if (this.eat(types$1.question)) {\n        node.optional = true;\n      }\n\n      node.value = this.flowParseTypeInitialiser();\n    }\n\n    return this.finishNode(node, \"ObjectTypeInternalSlot\");\n  }\n\n  flowParseObjectTypeMethodish(node) {\n    node.params = [];\n    node.rest = null;\n    node.typeParameters = null;\n    node.this = null;\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    this.expect(types$1.parenL);\n\n    if (this.match(types$1._this)) {\n      node.this = this.flowParseFunctionTypeParam(true);\n      node.this.name = null;\n\n      if (!this.match(types$1.parenR)) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    while (!this.match(types$1.parenR) && !this.match(types$1.ellipsis)) {\n      node.params.push(this.flowParseFunctionTypeParam(false));\n\n      if (!this.match(types$1.parenR)) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    if (this.eat(types$1.ellipsis)) {\n      node.rest = this.flowParseFunctionTypeParam(false);\n    }\n\n    this.expect(types$1.parenR);\n    node.returnType = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"FunctionTypeAnnotation\");\n  }\n\n  flowParseObjectTypeCallProperty(node, isStatic) {\n    const valueNode = this.startNode();\n    node.static = isStatic;\n    node.value = this.flowParseObjectTypeMethodish(valueNode);\n    return this.finishNode(node, \"ObjectTypeCallProperty\");\n  }\n\n  flowParseObjectType({\n    allowStatic,\n    allowExact,\n    allowSpread,\n    allowProto,\n    allowInexact\n  }) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const nodeStart = this.startNode();\n    nodeStart.callProperties = [];\n    nodeStart.properties = [];\n    nodeStart.indexers = [];\n    nodeStart.internalSlots = [];\n    let endDelim;\n    let exact;\n    let inexact = false;\n\n    if (allowExact && this.match(types$1.braceBarL)) {\n      this.expect(types$1.braceBarL);\n      endDelim = types$1.braceBarR;\n      exact = true;\n    } else {\n      this.expect(types$1.braceL);\n      endDelim = types$1.braceR;\n      exact = false;\n    }\n\n    nodeStart.exact = exact;\n\n    while (!this.match(endDelim)) {\n      let isStatic = false;\n      let protoStart = null;\n      let inexactStart = null;\n      const node = this.startNode();\n\n      if (allowProto && this.isContextual(\"proto\")) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== types$1.colon && lookahead.type !== types$1.question) {\n          this.next();\n          protoStart = this.state.start;\n          allowStatic = false;\n        }\n      }\n\n      if (allowStatic && this.isContextual(\"static\")) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== types$1.colon && lookahead.type !== types$1.question) {\n          this.next();\n          isStatic = true;\n        }\n      }\n\n      const variance = this.flowParseVariance();\n\n      if (this.eat(types$1.bracketL)) {\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (this.eat(types$1.bracketL)) {\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));\n        } else {\n          nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n        }\n      } else if (this.match(types$1.parenL) || this.isRelational(\"<\")) {\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.unexpected(variance.start);\n        }\n\n        nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n      } else {\n        let kind = \"init\";\n\n        if (this.isContextual(\"get\") || this.isContextual(\"set\")) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type === types$1.name || lookahead.type === types$1.string || lookahead.type === types$1.num) {\n            kind = this.state.value;\n            this.next();\n          }\n        }\n\n        const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);\n\n        if (propOrInexact === null) {\n          inexact = true;\n          inexactStart = this.state.lastTokStart;\n        } else {\n          nodeStart.properties.push(propOrInexact);\n        }\n      }\n\n      this.flowObjectTypeSemicolon();\n\n      if (inexactStart && !this.match(types$1.braceR) && !this.match(types$1.braceBarR)) {\n        this.raise(inexactStart, FlowErrors.UnexpectedExplicitInexactInObject);\n      }\n    }\n\n    this.expect(endDelim);\n\n    if (allowSpread) {\n      nodeStart.inexact = inexact;\n    }\n\n    const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n    this.state.inType = oldInType;\n    return out;\n  }\n\n  flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact) {\n    if (this.eat(types$1.ellipsis)) {\n      const isInexactToken = this.match(types$1.comma) || this.match(types$1.semi) || this.match(types$1.braceR) || this.match(types$1.braceBarR);\n\n      if (isInexactToken) {\n        if (!allowSpread) {\n          this.raise(this.state.lastTokStart, FlowErrors.InexactInsideNonObject);\n        } else if (!allowInexact) {\n          this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);\n        }\n\n        if (variance) {\n          this.raise(variance.start, FlowErrors.InexactVariance);\n        }\n\n        return null;\n      }\n\n      if (!allowSpread) {\n        this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);\n      }\n\n      if (protoStart != null) {\n        this.unexpected(protoStart);\n      }\n\n      if (variance) {\n        this.raise(variance.start, FlowErrors.SpreadVariance);\n      }\n\n      node.argument = this.flowParseType();\n      return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n    } else {\n      node.key = this.flowParseObjectPropertyKey();\n      node.static = isStatic;\n      node.proto = protoStart != null;\n      node.kind = kind;\n      let optional = false;\n\n      if (this.isRelational(\"<\") || this.match(types$1.parenL)) {\n        node.method = true;\n\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.unexpected(variance.start);\n        }\n\n        node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n\n        if (kind === \"get\" || kind === \"set\") {\n          this.flowCheckGetterSetterParams(node);\n        }\n\n        if (!allowSpread && node.key.name === \"constructor\" && node.value.this) {\n          this.raise(node.value.this.start, FlowErrors.ThisParamBannedInConstructor);\n        }\n      } else {\n        if (kind !== \"init\") this.unexpected();\n        node.method = false;\n\n        if (this.eat(types$1.question)) {\n          optional = true;\n        }\n\n        node.value = this.flowParseTypeInitialiser();\n        node.variance = variance;\n      }\n\n      node.optional = optional;\n      return this.finishNode(node, \"ObjectTypeProperty\");\n    }\n  }\n\n  flowCheckGetterSetterParams(property) {\n    const paramCount = property.kind === \"get\" ? 0 : 1;\n    const start = property.start;\n    const length = property.value.params.length + (property.value.rest ? 1 : 0);\n\n    if (property.value.this) {\n      this.raise(property.value.this.start, property.kind === \"get\" ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam);\n    }\n\n    if (length !== paramCount) {\n      if (property.kind === \"get\") {\n        this.raise(start, ErrorMessages.BadGetterArity);\n      } else {\n        this.raise(start, ErrorMessages.BadSetterArity);\n      }\n    }\n\n    if (property.kind === \"set\" && property.value.rest) {\n      this.raise(start, ErrorMessages.BadSetterRestParameter);\n    }\n  }\n\n  flowObjectTypeSemicolon() {\n    if (!this.eat(types$1.semi) && !this.eat(types$1.comma) && !this.match(types$1.braceR) && !this.match(types$1.braceBarR)) {\n      this.unexpected();\n    }\n  }\n\n  flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n    let node = id || this.flowParseRestrictedIdentifier(true);\n\n    while (this.eat(types$1.dot)) {\n      const node2 = this.startNodeAt(startPos, startLoc);\n      node2.qualification = node;\n      node2.id = this.flowParseRestrictedIdentifier(true);\n      node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n    }\n\n    return node;\n  }\n\n  flowParseGenericType(startPos, startLoc, id) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.typeParameters = null;\n    node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    return this.finishNode(node, \"GenericTypeAnnotation\");\n  }\n\n  flowParseTypeofType() {\n    const node = this.startNode();\n    this.expect(types$1._typeof);\n    node.argument = this.flowParsePrimaryType();\n    return this.finishNode(node, \"TypeofTypeAnnotation\");\n  }\n\n  flowParseTupleType() {\n    const node = this.startNode();\n    node.types = [];\n    this.expect(types$1.bracketL);\n\n    while (this.state.pos < this.length && !this.match(types$1.bracketR)) {\n      node.types.push(this.flowParseType());\n      if (this.match(types$1.bracketR)) break;\n      this.expect(types$1.comma);\n    }\n\n    this.expect(types$1.bracketR);\n    return this.finishNode(node, \"TupleTypeAnnotation\");\n  }\n\n  flowParseFunctionTypeParam(first) {\n    let name = null;\n    let optional = false;\n    let typeAnnotation = null;\n    const node = this.startNode();\n    const lh = this.lookahead();\n    const isThis = this.state.type === types$1._this;\n\n    if (lh.type === types$1.colon || lh.type === types$1.question) {\n      if (isThis && !first) {\n        this.raise(node.start, FlowErrors.ThisParamMustBeFirst);\n      }\n\n      name = this.parseIdentifier(isThis);\n\n      if (this.eat(types$1.question)) {\n        optional = true;\n\n        if (isThis) {\n          this.raise(node.start, FlowErrors.ThisParamMayNotBeOptional);\n        }\n      }\n\n      typeAnnotation = this.flowParseTypeInitialiser();\n    } else {\n      typeAnnotation = this.flowParseType();\n    }\n\n    node.name = name;\n    node.optional = optional;\n    node.typeAnnotation = typeAnnotation;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  reinterpretTypeAsFunctionTypeParam(type) {\n    const node = this.startNodeAt(type.start, type.loc.start);\n    node.name = null;\n    node.optional = false;\n    node.typeAnnotation = type;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  flowParseFunctionTypeParams(params = []) {\n    let rest = null;\n    let _this = null;\n\n    if (this.match(types$1._this)) {\n      _this = this.flowParseFunctionTypeParam(true);\n      _this.name = null;\n\n      if (!this.match(types$1.parenR)) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    while (!this.match(types$1.parenR) && !this.match(types$1.ellipsis)) {\n      params.push(this.flowParseFunctionTypeParam(false));\n\n      if (!this.match(types$1.parenR)) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    if (this.eat(types$1.ellipsis)) {\n      rest = this.flowParseFunctionTypeParam(false);\n    }\n\n    return {\n      params,\n      rest,\n      _this\n    };\n  }\n\n  flowIdentToTypeAnnotation(startPos, startLoc, node, id) {\n    switch (id.name) {\n      case \"any\":\n        return this.finishNode(node, \"AnyTypeAnnotation\");\n\n      case \"bool\":\n      case \"boolean\":\n        return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n      case \"mixed\":\n        return this.finishNode(node, \"MixedTypeAnnotation\");\n\n      case \"empty\":\n        return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n      case \"number\":\n        return this.finishNode(node, \"NumberTypeAnnotation\");\n\n      case \"string\":\n        return this.finishNode(node, \"StringTypeAnnotation\");\n\n      case \"symbol\":\n        return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n      default:\n        this.checkNotUnderscore(id.name);\n        return this.flowParseGenericType(startPos, startLoc, id);\n    }\n  }\n\n  flowParsePrimaryType() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const node = this.startNode();\n    let tmp;\n    let type;\n    let isGroupedType = false;\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n    switch (this.state.type) {\n      case types$1.name:\n        if (this.isContextual(\"interface\")) {\n          return this.flowParseInterfaceType();\n        }\n\n        return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());\n\n      case types$1.braceL:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: false,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: true\n        });\n\n      case types$1.braceBarL:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: true,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: false\n        });\n\n      case types$1.bracketL:\n        this.state.noAnonFunctionType = false;\n        type = this.flowParseTupleType();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        return type;\n\n      case types$1.relational:\n        if (this.state.value === \"<\") {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(types$1.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(types$1.parenR);\n          this.expect(types$1.arrow);\n          node.returnType = this.flowParseType();\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n\n        break;\n\n      case types$1.parenL:\n        this.next();\n\n        if (!this.match(types$1.parenR) && !this.match(types$1.ellipsis)) {\n          if (this.match(types$1.name) || this.match(types$1._this)) {\n            const token = this.lookahead().type;\n            isGroupedType = token !== types$1.question && token !== types$1.colon;\n          } else {\n            isGroupedType = true;\n          }\n        }\n\n        if (isGroupedType) {\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.state.noAnonFunctionType || !(this.match(types$1.comma) || this.match(types$1.parenR) && this.lookahead().type === types$1.arrow)) {\n            this.expect(types$1.parenR);\n            return type;\n          } else {\n            this.eat(types$1.comma);\n          }\n        }\n\n        if (type) {\n          tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n        } else {\n          tmp = this.flowParseFunctionTypeParams();\n        }\n\n        node.params = tmp.params;\n        node.rest = tmp.rest;\n        node.this = tmp._this;\n        this.expect(types$1.parenR);\n        this.expect(types$1.arrow);\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n      case types$1.string:\n        return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n\n      case types$1._true:\n      case types$1._false:\n        node.value = this.match(types$1._true);\n        this.next();\n        return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n      case types$1.plusMin:\n        if (this.state.value === \"-\") {\n          this.next();\n\n          if (this.match(types$1.num)) {\n            return this.parseLiteralAtNode(-this.state.value, \"NumberLiteralTypeAnnotation\", node);\n          }\n\n          if (this.match(types$1.bigint)) {\n            return this.parseLiteralAtNode(-this.state.value, \"BigIntLiteralTypeAnnotation\", node);\n          }\n\n          throw this.raise(this.state.start, FlowErrors.UnexpectedSubtractionOperand);\n        }\n\n        throw this.unexpected();\n\n      case types$1.num:\n        return this.parseLiteral(this.state.value, \"NumberLiteralTypeAnnotation\");\n\n      case types$1.bigint:\n        return this.parseLiteral(this.state.value, \"BigIntLiteralTypeAnnotation\");\n\n      case types$1._void:\n        this.next();\n        return this.finishNode(node, \"VoidTypeAnnotation\");\n\n      case types$1._null:\n        this.next();\n        return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n      case types$1._this:\n        this.next();\n        return this.finishNode(node, \"ThisTypeAnnotation\");\n\n      case types$1.star:\n        this.next();\n        return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n      default:\n        if (this.state.type.keyword === \"typeof\") {\n          return this.flowParseTypeofType();\n        } else if (this.state.type.keyword) {\n          const label = this.state.type.label;\n          this.next();\n          return super.createIdentifier(node, label);\n        }\n\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParsePostfixType() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let type = this.flowParsePrimaryType();\n    let seenOptionalIndexedAccess = false;\n\n    while ((this.match(types$1.bracketL) || this.match(types$1.questionDot)) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const optional = this.eat(types$1.questionDot);\n      seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n      this.expect(types$1.bracketL);\n\n      if (!optional && this.match(types$1.bracketR)) {\n        node.elementType = type;\n        this.next();\n        type = this.finishNode(node, \"ArrayTypeAnnotation\");\n      } else {\n        node.objectType = type;\n        node.indexType = this.flowParseType();\n        this.expect(types$1.bracketR);\n\n        if (seenOptionalIndexedAccess) {\n          node.optional = optional;\n          type = this.finishNode(node, \"OptionalIndexedAccessType\");\n        } else {\n          type = this.finishNode(node, \"IndexedAccessType\");\n        }\n      }\n    }\n\n    return type;\n  }\n\n  flowParsePrefixType() {\n    const node = this.startNode();\n\n    if (this.eat(types$1.question)) {\n      node.typeAnnotation = this.flowParsePrefixType();\n      return this.finishNode(node, \"NullableTypeAnnotation\");\n    } else {\n      return this.flowParsePostfixType();\n    }\n  }\n\n  flowParseAnonFunctionWithoutParens() {\n    const param = this.flowParsePrefixType();\n\n    if (!this.state.noAnonFunctionType && this.eat(types$1.arrow)) {\n      const node = this.startNodeAt(param.start, param.loc.start);\n      node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n      node.rest = null;\n      node.this = null;\n      node.returnType = this.flowParseType();\n      node.typeParameters = null;\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    return param;\n  }\n\n  flowParseIntersectionType() {\n    const node = this.startNode();\n    this.eat(types$1.bitwiseAND);\n    const type = this.flowParseAnonFunctionWithoutParens();\n    node.types = [type];\n\n    while (this.eat(types$1.bitwiseAND)) {\n      node.types.push(this.flowParseAnonFunctionWithoutParens());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n  }\n\n  flowParseUnionType() {\n    const node = this.startNode();\n    this.eat(types$1.bitwiseOR);\n    const type = this.flowParseIntersectionType();\n    node.types = [type];\n\n    while (this.eat(types$1.bitwiseOR)) {\n      node.types.push(this.flowParseIntersectionType());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n  }\n\n  flowParseType() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const type = this.flowParseUnionType();\n    this.state.inType = oldInType;\n    return type;\n  }\n\n  flowParseTypeOrImplicitInstantiation() {\n    if (this.state.type === types$1.name && this.state.value === \"_\") {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.parseIdentifier();\n      return this.flowParseGenericType(startPos, startLoc, node);\n    } else {\n      return this.flowParseType();\n    }\n  }\n\n  flowParseTypeAnnotation() {\n    const node = this.startNode();\n    node.typeAnnotation = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"TypeAnnotation\");\n  }\n\n  flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {\n    const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\n\n    if (this.match(types$1.colon)) {\n      ident.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(ident);\n    }\n\n    return ident;\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  flowParseVariance() {\n    let variance = null;\n\n    if (this.match(types$1.plusMin)) {\n      variance = this.startNode();\n\n      if (this.state.value === \"+\") {\n        variance.kind = \"plus\";\n      } else {\n        variance.kind = \"minus\";\n      }\n\n      this.next();\n      this.finishNode(variance, \"Variance\");\n    }\n\n    return variance;\n  }\n\n  parseFunctionBody(node, allowExpressionBody, isMethod = false) {\n    if (allowExpressionBody) {\n      return this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));\n    }\n\n    return super.parseFunctionBody(node, false, isMethod);\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(types$1.colon)) {\n      const typeNode = this.startNode();\n      [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n      node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.state.strict && this.match(types$1.name) && this.state.value === \"interface\") {\n      const lookahead = this.lookahead();\n\n      if (lookahead.type === types$1.name || isKeyword(lookahead.value)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseInterface(node);\n      }\n    } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n\n    const stmt = super.parseStatement(context, topLevel);\n\n    if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n      this.flowPragma = null;\n    }\n\n    return stmt;\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type === \"Identifier\") {\n      if (expr.name === \"declare\") {\n        if (this.match(types$1._class) || this.match(types$1.name) || this.match(types$1._function) || this.match(types$1._var) || this.match(types$1._export)) {\n          return this.flowParseDeclare(node);\n        }\n      } else if (this.match(types$1.name)) {\n        if (expr.name === \"interface\") {\n          return this.flowParseInterface(node);\n        } else if (expr.name === \"type\") {\n          return this.flowParseTypeAlias(node);\n        } else if (expr.name === \"opaque\") {\n          return this.flowParseOpaqueType(node, false);\n        }\n      }\n    }\n\n    return super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    return this.isContextual(\"type\") || this.isContextual(\"interface\") || this.isContextual(\"opaque\") || this.shouldParseEnums() && this.isContextual(\"enum\") || super.shouldParseExportDeclaration();\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types$1.name) && (this.state.value === \"type\" || this.state.value === \"interface\" || this.state.value === \"opaque\" || this.shouldParseEnums() && this.state.value === \"enum\")) {\n      return false;\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseExportDefaultExpression() {\n    if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n    if (!this.match(types$1.question)) return expr;\n\n    if (this.state.maybeInArrowParameters) {\n      const nextCh = this.lookaheadCharCode();\n\n      if (nextCh === 44 || nextCh === 61 || nextCh === 58 || nextCh === 41) {\n        this.setOptionalParametersError(refExpressionErrors);\n        return expr;\n      }\n    }\n\n    this.expect(types$1.question);\n    const state = this.state.clone();\n    const originalNoArrowAt = this.state.noArrowAt;\n    const node = this.startNodeAt(startPos, startLoc);\n    let {\n      consequent,\n      failed\n    } = this.tryParseConditionalConsequent();\n    let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n    if (failed || invalid.length > 0) {\n      const noArrowAt = [...originalNoArrowAt];\n\n      if (invalid.length > 0) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt;\n\n        for (let i = 0; i < invalid.length; i++) {\n          noArrowAt.push(invalid[i].start);\n        }\n\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n        [valid, invalid] = this.getArrowLikeExpressions(consequent);\n      }\n\n      if (failed && valid.length > 1) {\n        this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);\n      }\n\n      if (failed && valid.length === 1) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt.concat(valid[0].start);\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n      }\n    }\n\n    this.getArrowLikeExpressions(consequent, true);\n    this.state.noArrowAt = originalNoArrowAt;\n    this.expect(types$1.colon);\n    node.test = expr;\n    node.consequent = consequent;\n    node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(undefined, undefined));\n    return this.finishNode(node, \"ConditionalExpression\");\n  }\n\n  tryParseConditionalConsequent() {\n    this.state.noArrowParamsConversionAt.push(this.state.start);\n    const consequent = this.parseMaybeAssignAllowIn();\n    const failed = !this.match(types$1.colon);\n    this.state.noArrowParamsConversionAt.pop();\n    return {\n      consequent,\n      failed\n    };\n  }\n\n  getArrowLikeExpressions(node, disallowInvalid) {\n    const stack = [node];\n    const arrows = [];\n\n    while (stack.length !== 0) {\n      const node = stack.pop();\n\n      if (node.type === \"ArrowFunctionExpression\") {\n        if (node.typeParameters || !node.returnType) {\n          this.finishArrowValidation(node);\n        } else {\n          arrows.push(node);\n        }\n\n        stack.push(node.body);\n      } else if (node.type === \"ConditionalExpression\") {\n        stack.push(node.consequent);\n        stack.push(node.alternate);\n      }\n    }\n\n    if (disallowInvalid) {\n      arrows.forEach(node => this.finishArrowValidation(node));\n      return [arrows, []];\n    }\n\n    return partition(arrows, node => node.params.every(param => this.isAssignable(param, true)));\n  }\n\n  finishArrowValidation(node) {\n    var _node$extra;\n\n    this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingComma, false);\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    super.checkParams(node, false, true);\n    this.scope.exit();\n  }\n\n  forwardNoArrowParamsConversionAt(node, parse) {\n    let result;\n\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n      result = parse();\n      this.state.noArrowParamsConversionAt.pop();\n    } else {\n      result = parse();\n    }\n\n    return result;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(types$1.question)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(types$1.colon)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (node.type === \"ImportDeclaration\" && (node.importKind === \"type\" || node.importKind === \"typeof\") || node.type === \"ExportNamedDeclaration\" && node.exportKind === \"type\" || node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\") {\n      return;\n    }\n\n    super.assertModuleNodeAllowed(node);\n  }\n\n  parseExport(node) {\n    const decl = super.parseExport(node);\n\n    if (decl.type === \"ExportNamedDeclaration\" || decl.type === \"ExportAllDeclaration\") {\n      decl.exportKind = decl.exportKind || \"value\";\n    }\n\n    return decl;\n  }\n\n  parseExportDeclaration(node) {\n    if (this.isContextual(\"type\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n\n      if (this.match(types$1.braceL)) {\n        node.specifiers = this.parseExportSpecifiers();\n        this.parseExportFrom(node);\n        return null;\n      } else {\n        return this.flowParseTypeAlias(declarationNode);\n      }\n    } else if (this.isContextual(\"opaque\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseOpaqueType(declarationNode, false);\n    } else if (this.isContextual(\"interface\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseInterface(declarationNode);\n    } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      node.exportKind = \"value\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(declarationNode);\n    } else {\n      return super.parseExportDeclaration(node);\n    }\n  }\n\n  eatExportStar(node) {\n    if (super.eatExportStar(...arguments)) return true;\n\n    if (this.isContextual(\"type\") && this.lookahead().type === types$1.star) {\n      node.exportKind = \"type\";\n      this.next();\n      this.next();\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    const pos = this.state.start;\n    const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n\n    if (hasNamespace && node.exportKind === \"type\") {\n      this.unexpected(pos);\n    }\n\n    return hasNamespace;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    super.parseClassId(node, isStatement, optionalId);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n  }\n\n  parseClassMember(classBody, member, state) {\n    const pos = this.state.start;\n\n    if (this.isContextual(\"declare\")) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      member.declare = true;\n    }\n\n    super.parseClassMember(classBody, member, state);\n\n    if (member.declare) {\n      if (member.type !== \"ClassProperty\" && member.type !== \"ClassPrivateProperty\" && member.type !== \"PropertyDefinition\") {\n        this.raise(pos, FlowErrors.DeclareClassElement);\n      } else if (member.value) {\n        this.raise(member.value.start, FlowErrors.DeclareClassFieldInitializer);\n      }\n    }\n  }\n\n  isIterator(word) {\n    return word === \"iterator\" || word === \"asyncIterator\";\n  }\n\n  readIterator() {\n    const word = super.readWord1();\n    const fullWord = \"@@\" + word;\n\n    if (!this.isIterator(word) || !this.state.inType) {\n      this.raise(this.state.pos, ErrorMessages.InvalidIdentifier, fullWord);\n    }\n\n    this.finishToken(types$1.name, fullWord);\n  }\n\n  getTokenFromCode(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 123 && next === 124) {\n      return this.finishOp(types$1.braceBarL, 2);\n    } else if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(types$1.relational, 1);\n    } else if (this.state.inType && code === 63) {\n      if (next === 46) {\n        return this.finishOp(types$1.questionDot, 2);\n      }\n\n      return this.finishOp(types$1.question, 1);\n    } else if (isIteratorStart(code, next)) {\n      this.state.pos += 2;\n      return this.readIterator();\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  isAssignable(node, isBinding) {\n    if (node.type === \"TypeCastExpression\") {\n      return this.isAssignable(node.expression, isBinding);\n    } else {\n      return super.isAssignable(node, isBinding);\n    }\n  }\n\n  toAssignable(node, isLHS = false) {\n    if (node.type === \"TypeCastExpression\") {\n      return super.toAssignable(this.typeCastToParameter(node), isLHS);\n    } else {\n      return super.toAssignable(node, isLHS);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaPos, isLHS) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n\n      if ((expr == null ? void 0 : expr.type) === \"TypeCastExpression\") {\n        exprList[i] = this.typeCastToParameter(expr);\n      }\n    }\n\n    return super.toAssignableList(exprList, trailingCommaPos, isLHS);\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    for (let i = 0; i < exprList.length; i++) {\n      var _expr$extra;\n\n      const expr = exprList[i];\n\n      if (expr && expr.type === \"TypeCastExpression\" && !((_expr$extra = expr.extra) != null && _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {\n        this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);\n      }\n    }\n\n    return exprList;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);\n\n    if (canBePattern && !this.state.maybeInArrowParameters) {\n      this.toReferencedList(node.elements);\n    }\n\n    return node;\n  }\n\n  checkLVal(expr, ...args) {\n    if (expr.type !== \"TypeCastExpression\") {\n      return super.checkLVal(expr, ...args);\n    }\n  }\n\n  parseClassProperty(node) {\n    if (this.match(types$1.colon)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (this.match(types$1.colon)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassPrivateProperty(node);\n  }\n\n  isClassMethod() {\n    return this.isRelational(\"<\") || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(types$1.colon) || super.isClassProperty();\n  }\n\n  isNonstaticConstructor(method) {\n    return !this.match(types$1.colon) && super.isNonstaticConstructor(method);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    if (method.variance) {\n      this.unexpected(method.variance.start);\n    }\n\n    delete method.variance;\n\n    if (this.isRelational(\"<\")) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n\n    if (method.params && isConstructor) {\n      const params = method.params;\n\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\n      }\n    } else if (method.type === \"MethodDefinition\" && isConstructor && method.value.params) {\n      const params = method.value.params;\n\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\n      }\n    }\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    if (method.variance) {\n      this.unexpected(method.variance.start);\n    }\n\n    delete method.variance;\n\n    if (this.isRelational(\"<\")) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.isRelational(\"<\")) {\n      node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    if (this.isContextual(\"implements\")) {\n      this.next();\n      const implemented = node.implements = [];\n\n      do {\n        const node = this.startNode();\n        node.id = this.flowParseRestrictedIdentifier(true);\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterInstantiation();\n        } else {\n          node.typeParameters = null;\n        }\n\n        implemented.push(this.finishNode(node, \"ClassImplements\"));\n      } while (this.eat(types$1.comma));\n    }\n  }\n\n  checkGetterSetterParams(method) {\n    super.checkGetterSetterParams(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length > 0) {\n      const param = params[0];\n\n      if (this.isThisParam(param) && method.kind === \"get\") {\n        this.raise(param.start, FlowErrors.GetterMayNotHaveThisParam);\n      } else if (this.isThisParam(param)) {\n        this.raise(param.start, FlowErrors.SetterMayNotHaveThisParam);\n      }\n    }\n  }\n\n  parsePropertyName(node, isPrivateNameAllowed) {\n    const variance = this.flowParseVariance();\n    const key = super.parsePropertyName(node, isPrivateNameAllowed);\n    node.variance = variance;\n    return key;\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    if (prop.variance) {\n      this.unexpected(prop.variance.start);\n    }\n\n    delete prop.variance;\n    let typeParameters;\n\n    if (this.isRelational(\"<\") && !isAccessor) {\n      typeParameters = this.flowParseTypeParameterDeclaration();\n      if (!this.match(types$1.parenL)) this.unexpected();\n    }\n\n    super.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n\n    if (typeParameters) {\n      (prop.value || prop).typeParameters = typeParameters;\n    }\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(types$1.question)) {\n      if (param.type !== \"Identifier\") {\n        this.raise(param.start, FlowErrors.OptionalBindingPattern);\n      }\n\n      if (this.isThisParam(param)) {\n        this.raise(param.start, FlowErrors.ThisParamMayNotBeOptional);\n      }\n\n      param.optional = true;\n    }\n\n    if (this.match(types$1.colon)) {\n      param.typeAnnotation = this.flowParseTypeAnnotation();\n    } else if (this.isThisParam(param)) {\n      this.raise(param.start, FlowErrors.ThisParamAnnotationRequired);\n    }\n\n    if (this.match(types$1.eq) && this.isThisParam(param)) {\n      this.raise(param.start, FlowErrors.ThisParamNoDefault);\n    }\n\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);\n    }\n\n    return node;\n  }\n\n  shouldParseDefaultImport(node) {\n    if (!hasTypeImportKind(node)) {\n      return super.shouldParseDefaultImport(node);\n    }\n\n    return isMaybeDefaultImport(this.state);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    node.importKind = \"value\";\n    let kind = null;\n\n    if (this.match(types$1._typeof)) {\n      kind = \"typeof\";\n    } else if (this.isContextual(\"type\")) {\n      kind = \"type\";\n    }\n\n    if (kind) {\n      const lh = this.lookahead();\n\n      if (kind === \"type\" && lh.type === types$1.star) {\n        this.unexpected(lh.start);\n      }\n\n      if (isMaybeDefaultImport(lh) || lh.type === types$1.braceL || lh.type === types$1.star) {\n        this.next();\n        node.importKind = kind;\n      }\n    }\n\n    return super.maybeParseDefaultImportSpecifier(node);\n  }\n\n  parseImportSpecifier(node) {\n    const specifier = this.startNode();\n    const firstIdentIsString = this.match(types$1.string);\n    const firstIdent = this.parseModuleExportName();\n    let specifierTypeKind = null;\n\n    if (firstIdent.type === \"Identifier\") {\n      if (firstIdent.name === \"type\") {\n        specifierTypeKind = \"type\";\n      } else if (firstIdent.name === \"typeof\") {\n        specifierTypeKind = \"typeof\";\n      }\n    }\n\n    let isBinding = false;\n\n    if (this.isContextual(\"as\") && !this.isLookaheadContextual(\"as\")) {\n      const as_ident = this.parseIdentifier(true);\n\n      if (specifierTypeKind !== null && !this.match(types$1.name) && !this.state.type.keyword) {\n        specifier.imported = as_ident;\n        specifier.importKind = specifierTypeKind;\n        specifier.local = cloneIdentifier(as_ident);\n      } else {\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = this.parseIdentifier();\n      }\n    } else {\n      if (specifierTypeKind !== null && (this.match(types$1.name) || this.state.type.keyword)) {\n        specifier.imported = this.parseIdentifier(true);\n        specifier.importKind = specifierTypeKind;\n      } else {\n        if (firstIdentIsString) {\n          throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, firstIdent.value);\n        }\n\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n      }\n\n      if (this.eatContextual(\"as\")) {\n        specifier.local = this.parseIdentifier();\n      } else {\n        isBinding = true;\n        specifier.local = cloneIdentifier(specifier.imported);\n      }\n    }\n\n    const nodeIsTypeImport = hasTypeImportKind(node);\n    const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n    if (nodeIsTypeImport && specifierIsTypeImport) {\n      this.raise(specifier.start, FlowErrors.ImportTypeShorthandOnlyInPureImport);\n    }\n\n    if (nodeIsTypeImport || specifierIsTypeImport) {\n      this.checkReservedType(specifier.local.name, specifier.local.start, true);\n    }\n\n    if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {\n      this.checkReservedWord(specifier.local.name, specifier.start, true, true);\n    }\n\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types$1._this:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const kind = node.kind;\n\n    if (kind !== \"get\" && kind !== \"set\" && this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (this.match(types$1.colon)) {\n      decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(types$1.colon)) {\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = true;\n      node.returnType = this.flowParseTypeAnnotation();\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types$1.colon) || super.shouldParseAsyncArrow();\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n    var _jsx;\n\n    let state = null;\n    let jsx;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(types$1.jsxTagStart) || this.isRelational(\"<\"))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n      const curContext = context[context.length - 1];\n\n      if (curContext === types.j_oTag) {\n        context.length -= 2;\n      } else if (curContext === types.j_expr) {\n        context.length -= 1;\n      }\n    }\n\n    if ((_jsx = jsx) != null && _jsx.error || this.isRelational(\"<\")) {\n      var _jsx2, _jsx3;\n\n      state = state || this.state.clone();\n      let typeParameters;\n      const arrow = this.tryParse(abort => {\n        var _arrowExpression$extr;\n\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        const arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, () => {\n          const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n          this.resetStartLocationFromNode(result, typeParameters);\n          return result;\n        });\n        if ((_arrowExpression$extr = arrowExpression.extra) != null && _arrowExpression$extr.parenthesized) abort();\n        const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n        if (expr.type !== \"ArrowFunctionExpression\") abort();\n        expr.typeParameters = typeParameters;\n        this.resetStartLocationFromNode(expr, typeParameters);\n        return arrowExpression;\n      }, state);\n      let arrowExpression = null;\n\n      if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === \"ArrowFunctionExpression\") {\n        if (!arrow.error && !arrow.aborted) {\n          if (arrow.node.async) {\n            this.raise(typeParameters.start, FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction);\n          }\n\n          return arrow.node;\n        }\n\n        arrowExpression = arrow.node;\n      }\n\n      if ((_jsx2 = jsx) != null && _jsx2.node) {\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrowExpression) {\n        this.state = arrow.failState;\n        return arrowExpression;\n      }\n\n      if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      throw this.raise(typeParameters.start, FlowErrors.UnexpectedTokenAfterTypeParameter);\n    }\n\n    return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n  }\n\n  parseArrow(node) {\n    if (this.match(types$1.colon)) {\n      const result = this.tryParse(() => {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        const typeNode = this.startNode();\n        [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        if (this.canInsertSemicolon()) this.unexpected();\n        if (!this.match(types$1.arrow)) this.unexpected();\n        return typeNode;\n      });\n      if (result.thrown) return null;\n      if (result.error) this.state = result.failState;\n      node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, \"TypeAnnotation\") : null;\n    }\n\n    return super.parseArrow(node);\n  }\n\n  shouldParseArrow(params) {\n    return this.match(types$1.colon) || super.shouldParseArrow(params);\n  }\n\n  setArrowFunctionParameters(node, params) {\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      node.params = params;\n    } else {\n      super.setArrowFunctionParameters(node, params);\n    }\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction) {\n    if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      return;\n    }\n\n    for (let i = 0; i < node.params.length; i++) {\n      if (this.isThisParam(node.params[i]) && i > 0) {\n        this.raise(node.params[i].start, FlowErrors.ThisParamMustBeFirst);\n      }\n    }\n\n    return super.checkParams(...arguments);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    if (base.type === \"Identifier\" && base.name === \"async\" && this.state.noArrowAt.indexOf(startPos) !== -1) {\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n      base = this.finishNode(node, \"CallExpression\");\n    } else if (base.type === \"Identifier\" && base.name === \"async\" && this.isRelational(\"<\")) {\n      const state = this.state.clone();\n      const arrow = this.tryParse(abort => this.parseAsyncArrowWithTypeParameters(startPos, startLoc) || abort(), state);\n      if (!arrow.error && !arrow.aborted) return arrow.node;\n      const result = this.tryParse(() => super.parseSubscripts(base, startPos, startLoc, noCalls), state);\n      if (result.node && !result.error) return result.node;\n\n      if (arrow.node) {\n        this.state = arrow.failState;\n        return arrow.node;\n      }\n\n      if (result.node) {\n        this.state = result.failState;\n        return result.node;\n      }\n\n      throw arrow.error || result.error;\n    }\n\n    return super.parseSubscripts(base, startPos, startLoc, noCalls);\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, subscriptState) {\n    if (this.match(types$1.questionDot) && this.isLookaheadToken_lt()) {\n      subscriptState.optionalChainMember = true;\n\n      if (noCalls) {\n        subscriptState.stop = true;\n        return base;\n      }\n\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.typeArguments = this.flowParseTypeParameterInstantiation();\n      this.expect(types$1.parenL);\n      node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n      node.optional = true;\n      return this.finishCallExpression(node, true);\n    } else if (!noCalls && this.shouldParseTypes() && this.isRelational(\"<\")) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      const result = this.tryParse(() => {\n        node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n        this.expect(types$1.parenL);\n        node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n        if (subscriptState.optionalChainMember) node.optional = false;\n        return this.finishCallExpression(node, subscriptState.optionalChainMember);\n      });\n\n      if (result.node) {\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, subscriptState);\n  }\n\n  parseNewArguments(node) {\n    let targs = null;\n\n    if (this.shouldParseTypes() && this.isRelational(\"<\")) {\n      targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;\n    }\n\n    node.typeArguments = targs;\n    super.parseNewArguments(node);\n  }\n\n  parseAsyncArrowWithTypeParameters(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.parseFunctionParams(node);\n    if (!this.parseArrow(node)) return;\n    return this.parseArrowExpression(node, undefined, true);\n  }\n\n  readToken_mult_modulo(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 42 && next === 47 && this.state.hasFlowComment) {\n      this.state.hasFlowComment = false;\n      this.state.pos += 2;\n      this.nextToken();\n      return;\n    }\n\n    super.readToken_mult_modulo(code);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 124 && next === 125) {\n      this.finishOp(types$1.braceBarR, 2);\n      return;\n    }\n\n    super.readToken_pipe_amp(code);\n  }\n\n  parseTopLevel(file, program) {\n    const fileNode = super.parseTopLevel(file, program);\n\n    if (this.state.hasFlowComment) {\n      this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);\n    }\n\n    return fileNode;\n  }\n\n  skipBlockComment() {\n    if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n      if (this.state.hasFlowComment) {\n        this.unexpected(null, FlowErrors.NestedFlowComment);\n      }\n\n      this.hasFlowCommentCompletion();\n      this.state.pos += this.skipFlowComment();\n      this.state.hasFlowComment = true;\n      return;\n    }\n\n    if (this.state.hasFlowComment) {\n      const end = this.input.indexOf(\"*-/\", this.state.pos += 2);\n\n      if (end === -1) {\n        throw this.raise(this.state.pos - 2, ErrorMessages.UnterminatedComment);\n      }\n\n      this.state.pos = end + 3;\n      return;\n    }\n\n    return super.skipBlockComment();\n  }\n\n  skipFlowComment() {\n    const {\n      pos\n    } = this.state;\n    let shiftToFirstNonWhiteSpace = 2;\n\n    while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {\n      shiftToFirstNonWhiteSpace++;\n    }\n\n    const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n    const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n    if (ch2 === 58 && ch3 === 58) {\n      return shiftToFirstNonWhiteSpace + 2;\n    }\n\n    if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === \"flow-include\") {\n      return shiftToFirstNonWhiteSpace + 12;\n    }\n\n    if (ch2 === 58 && ch3 !== 58) {\n      return shiftToFirstNonWhiteSpace;\n    }\n\n    return false;\n  }\n\n  hasFlowCommentCompletion() {\n    const end = this.input.indexOf(\"*/\", this.state.pos);\n\n    if (end === -1) {\n      throw this.raise(this.state.pos, ErrorMessages.UnterminatedComment);\n    }\n  }\n\n  flowEnumErrorBooleanMemberNotInitialized(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumBooleanMemberNotInitialized, memberName, enumName);\n  }\n\n  flowEnumErrorInvalidMemberName(pos, {\n    enumName,\n    memberName\n  }) {\n    const suggestion = memberName[0].toUpperCase() + memberName.slice(1);\n    this.raise(pos, FlowErrors.EnumInvalidMemberName, memberName, suggestion, enumName);\n  }\n\n  flowEnumErrorDuplicateMemberName(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);\n  }\n\n  flowEnumErrorInconsistentMemberValues(pos, {\n    enumName\n  }) {\n    this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);\n  }\n\n  flowEnumErrorInvalidExplicitType(pos, {\n    enumName,\n    suppliedType\n  }) {\n    return this.raise(pos, suppliedType === null ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied : FlowErrors.EnumInvalidExplicitType, enumName, suppliedType);\n  }\n\n  flowEnumErrorInvalidMemberInitializer(pos, {\n    enumName,\n    explicitType,\n    memberName\n  }) {\n    let message = null;\n\n    switch (explicitType) {\n      case \"boolean\":\n      case \"number\":\n      case \"string\":\n        message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;\n        break;\n\n      case \"symbol\":\n        message = FlowErrors.EnumInvalidMemberInitializerSymbolType;\n        break;\n\n      default:\n        message = FlowErrors.EnumInvalidMemberInitializerUnknownType;\n    }\n\n    return this.raise(pos, message, enumName, memberName, explicitType);\n  }\n\n  flowEnumErrorNumberMemberNotInitialized(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumNumberMemberNotInitialized, enumName, memberName);\n  }\n\n  flowEnumErrorStringMemberInconsistentlyInitailized(pos, {\n    enumName\n  }) {\n    this.raise(pos, FlowErrors.EnumStringMemberInconsistentlyInitailized, enumName);\n  }\n\n  flowEnumMemberInit() {\n    const startPos = this.state.start;\n\n    const endOfInit = () => this.match(types$1.comma) || this.match(types$1.braceR);\n\n    switch (this.state.type) {\n      case types$1.num:\n        {\n          const literal = this.parseNumericLiteral(this.state.value);\n\n          if (endOfInit()) {\n            return {\n              type: \"number\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      case types$1.string:\n        {\n          const literal = this.parseStringLiteral(this.state.value);\n\n          if (endOfInit()) {\n            return {\n              type: \"string\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      case types$1._true:\n      case types$1._false:\n        {\n          const literal = this.parseBooleanLiteral(this.match(types$1._true));\n\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      default:\n        return {\n          type: \"invalid\",\n          pos: startPos\n        };\n    }\n  }\n\n  flowEnumMemberRaw() {\n    const pos = this.state.start;\n    const id = this.parseIdentifier(true);\n    const init = this.eat(types$1.eq) ? this.flowEnumMemberInit() : {\n      type: \"none\",\n      pos\n    };\n    return {\n      id,\n      init\n    };\n  }\n\n  flowEnumCheckExplicitTypeMismatch(pos, context, expectedType) {\n    const {\n      explicitType\n    } = context;\n\n    if (explicitType === null) {\n      return;\n    }\n\n    if (explicitType !== expectedType) {\n      this.flowEnumErrorInvalidMemberInitializer(pos, context);\n    }\n  }\n\n  flowEnumMembers({\n    enumName,\n    explicitType\n  }) {\n    const seenNames = new Set();\n    const members = {\n      booleanMembers: [],\n      numberMembers: [],\n      stringMembers: [],\n      defaultedMembers: []\n    };\n    let hasUnknownMembers = false;\n\n    while (!this.match(types$1.braceR)) {\n      if (this.eat(types$1.ellipsis)) {\n        hasUnknownMembers = true;\n        break;\n      }\n\n      const memberNode = this.startNode();\n      const {\n        id,\n        init\n      } = this.flowEnumMemberRaw();\n      const memberName = id.name;\n\n      if (memberName === \"\") {\n        continue;\n      }\n\n      if (/^[a-z]/.test(memberName)) {\n        this.flowEnumErrorInvalidMemberName(id.start, {\n          enumName,\n          memberName\n        });\n      }\n\n      if (seenNames.has(memberName)) {\n        this.flowEnumErrorDuplicateMemberName(id.start, {\n          enumName,\n          memberName\n        });\n      }\n\n      seenNames.add(memberName);\n      const context = {\n        enumName,\n        explicitType,\n        memberName\n      };\n      memberNode.id = id;\n\n      switch (init.type) {\n        case \"boolean\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"boolean\");\n            memberNode.init = init.value;\n            members.booleanMembers.push(this.finishNode(memberNode, \"EnumBooleanMember\"));\n            break;\n          }\n\n        case \"number\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(this.finishNode(memberNode, \"EnumNumberMember\"));\n            break;\n          }\n\n        case \"string\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(this.finishNode(memberNode, \"EnumStringMember\"));\n            break;\n          }\n\n        case \"invalid\":\n          {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\n          }\n\n        case \"none\":\n          {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(init.pos, context);\n                break;\n\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\n                break;\n\n              default:\n                members.defaultedMembers.push(this.finishNode(memberNode, \"EnumDefaultedMember\"));\n            }\n          }\n      }\n\n      if (!this.match(types$1.braceR)) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    return {\n      members,\n      hasUnknownMembers\n    };\n  }\n\n  flowEnumStringMembers(initializedMembers, defaultedMembers, {\n    enumName\n  }) {\n    if (initializedMembers.length === 0) {\n      return defaultedMembers;\n    } else if (defaultedMembers.length === 0) {\n      return initializedMembers;\n    } else if (defaultedMembers.length > initializedMembers.length) {\n      for (const member of initializedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n          enumName\n        });\n      }\n\n      return defaultedMembers;\n    } else {\n      for (const member of defaultedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n          enumName\n        });\n      }\n\n      return initializedMembers;\n    }\n  }\n\n  flowEnumParseExplicitType({\n    enumName\n  }) {\n    if (this.eatContextual(\"of\")) {\n      if (!this.match(types$1.name)) {\n        throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n          enumName,\n          suppliedType: null\n        });\n      }\n\n      const {\n        value\n      } = this.state;\n      this.next();\n\n      if (value !== \"boolean\" && value !== \"number\" && value !== \"string\" && value !== \"symbol\") {\n        this.flowEnumErrorInvalidExplicitType(this.state.start, {\n          enumName,\n          suppliedType: value\n        });\n      }\n\n      return value;\n    }\n\n    return null;\n  }\n\n  flowEnumBody(node, {\n    enumName,\n    nameLoc\n  }) {\n    const explicitType = this.flowEnumParseExplicitType({\n      enumName\n    });\n    this.expect(types$1.braceL);\n    const {\n      members,\n      hasUnknownMembers\n    } = this.flowEnumMembers({\n      enumName,\n      explicitType\n    });\n    node.hasUnknownMembers = hasUnknownMembers;\n\n    switch (explicitType) {\n      case \"boolean\":\n        node.explicitType = true;\n        node.members = members.booleanMembers;\n        this.expect(types$1.braceR);\n        return this.finishNode(node, \"EnumBooleanBody\");\n\n      case \"number\":\n        node.explicitType = true;\n        node.members = members.numberMembers;\n        this.expect(types$1.braceR);\n        return this.finishNode(node, \"EnumNumberBody\");\n\n      case \"string\":\n        node.explicitType = true;\n        node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n          enumName\n        });\n        this.expect(types$1.braceR);\n        return this.finishNode(node, \"EnumStringBody\");\n\n      case \"symbol\":\n        node.members = members.defaultedMembers;\n        this.expect(types$1.braceR);\n        return this.finishNode(node, \"EnumSymbolBody\");\n\n      default:\n        {\n          const empty = () => {\n            node.members = [];\n            this.expect(types$1.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n\n          node.explicitType = false;\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n              enumName\n            });\n            this.expect(types$1.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.booleanMembers;\n            this.expect(types$1.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.numberMembers;\n            this.expect(types$1.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.flowEnumErrorInconsistentMemberValues(nameLoc, {\n              enumName\n            });\n            return empty();\n          }\n        }\n    }\n  }\n\n  flowParseEnumDeclaration(node) {\n    const id = this.parseIdentifier();\n    node.id = id;\n    node.body = this.flowEnumBody(this.startNode(), {\n      enumName: id.name,\n      nameLoc: id.start\n    });\n    return this.finishNode(node, \"EnumDeclaration\");\n  }\n\n  isLookaheadToken_lt() {\n    const next = this.nextTokenStart();\n\n    if (this.input.charCodeAt(next) === 60) {\n      const afterNext = this.input.charCodeAt(next + 1);\n      return afterNext !== 60 && afterNext !== 61;\n    }\n\n    return false;\n  }\n\n  maybeUnwrapTypeCastExpression(node) {\n    return node.type === \"TypeCastExpression\" ? node.expression : node;\n  }\n\n};\n\nconst entities = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\"\n};\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\nconst JsxErrors = makeErrorTemplates({\n  AttributeIsEmpty: \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: \"Expected corresponding JSX closing tag for <%0>.\",\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression: \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  UnsupportedJsxValue: \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements: \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\"\n}, ErrorCodes.SyntaxError);\ntypes.j_oTag = new TokContext(\"<tag\");\ntypes.j_cTag = new TokContext(\"</tag\");\ntypes.j_expr = new TokContext(\"<tag>...</tag>\", true);\ntypes$1.jsxName = new TokenType(\"jsxName\");\ntypes$1.jsxText = new TokenType(\"jsxText\", {\n  beforeExpr: true\n});\ntypes$1.jsxTagStart = new TokenType(\"jsxTagStart\", {\n  startsExpr: true\n});\ntypes$1.jsxTagEnd = new TokenType(\"jsxTagEnd\");\n\ntypes$1.jsxTagStart.updateContext = context => {\n  context.push(types.j_expr, types.j_oTag);\n};\n\nfunction isFragment(object) {\n  return object ? object.type === \"JSXOpeningFragment\" || object.type === \"JSXClosingFragment\" : false;\n}\n\nfunction getQualifiedJSXName(object) {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n  }\n\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nvar jsx = superClass => class extends superClass {\n  jsxReadToken() {\n    let out = \"\";\n    let chunkStart = this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 60:\n        case 123:\n          if (this.state.pos === this.state.start) {\n            if (ch === 60 && this.state.exprAllowed) {\n              ++this.state.pos;\n              return this.finishToken(types$1.jsxTagStart);\n            }\n\n            return super.getTokenFromCode(ch);\n          }\n\n          out += this.input.slice(chunkStart, this.state.pos);\n          return this.finishToken(types$1.jsxText, out);\n\n        case 38:\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n          break;\n\n        case 62:\n        case 125:\n        default:\n          if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadNewLine(true);\n            chunkStart = this.state.pos;\n          } else {\n            ++this.state.pos;\n          }\n\n      }\n    }\n  }\n\n  jsxReadNewLine(normalizeCRLF) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let out;\n    ++this.state.pos;\n\n    if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n      ++this.state.pos;\n      out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n    } else {\n      out = String.fromCharCode(ch);\n    }\n\n    ++this.state.curLine;\n    this.state.lineStart = this.state.pos;\n    return out;\n  }\n\n  jsxReadString(quote) {\n    let out = \"\";\n    let chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 38) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadEntity();\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadNewLine(false);\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    return this.finishToken(types$1.string, out);\n  }\n\n  jsxReadEntity() {\n    let str = \"\";\n    let count = 0;\n    let entity;\n    let ch = this.input[this.state.pos];\n    const startPos = ++this.state.pos;\n\n    while (this.state.pos < this.length && count++ < 10) {\n      ch = this.input[this.state.pos++];\n\n      if (ch === \";\") {\n        if (str[0] === \"#\") {\n          if (str[1] === \"x\") {\n            str = str.substr(2);\n\n            if (HEX_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 16));\n            }\n          } else {\n            str = str.substr(1);\n\n            if (DECIMAL_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 10));\n            }\n          }\n        } else {\n          entity = entities[str];\n        }\n\n        break;\n      }\n\n      str += ch;\n    }\n\n    if (!entity) {\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    return entity;\n  }\n\n  jsxReadWord() {\n    let ch;\n    const start = this.state.pos;\n\n    do {\n      ch = this.input.charCodeAt(++this.state.pos);\n    } while (isIdentifierChar(ch) || ch === 45);\n\n    return this.finishToken(types$1.jsxName, this.input.slice(start, this.state.pos));\n  }\n\n  jsxParseIdentifier() {\n    const node = this.startNode();\n\n    if (this.match(types$1.jsxName)) {\n      node.name = this.state.value;\n    } else if (this.state.type.keyword) {\n      node.name = this.state.type.keyword;\n    } else {\n      this.unexpected();\n    }\n\n    this.next();\n    return this.finishNode(node, \"JSXIdentifier\");\n  }\n\n  jsxParseNamespacedName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const name = this.jsxParseIdentifier();\n    if (!this.eat(types$1.colon)) return name;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.namespace = name;\n    node.name = this.jsxParseIdentifier();\n    return this.finishNode(node, \"JSXNamespacedName\");\n  }\n\n  jsxParseElementName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let node = this.jsxParseNamespacedName();\n\n    if (node.type === \"JSXNamespacedName\") {\n      return node;\n    }\n\n    while (this.eat(types$1.dot)) {\n      const newNode = this.startNodeAt(startPos, startLoc);\n      newNode.object = node;\n      newNode.property = this.jsxParseIdentifier();\n      node = this.finishNode(newNode, \"JSXMemberExpression\");\n    }\n\n    return node;\n  }\n\n  jsxParseAttributeValue() {\n    let node;\n\n    switch (this.state.type) {\n      case types$1.braceL:\n        node = this.startNode();\n        this.next();\n        node = this.jsxParseExpressionContainer(node);\n\n        if (node.expression.type === \"JSXEmptyExpression\") {\n          this.raise(node.start, JsxErrors.AttributeIsEmpty);\n        }\n\n        return node;\n\n      case types$1.jsxTagStart:\n      case types$1.string:\n        return this.parseExprAtom();\n\n      default:\n        throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);\n    }\n  }\n\n  jsxParseEmptyExpression() {\n    const node = this.startNodeAt(this.state.lastTokEnd, this.state.lastTokEndLoc);\n    return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.start, this.state.startLoc);\n  }\n\n  jsxParseSpreadChild(node) {\n    this.next();\n    node.expression = this.parseExpression();\n    this.expect(types$1.braceR);\n    return this.finishNode(node, \"JSXSpreadChild\");\n  }\n\n  jsxParseExpressionContainer(node) {\n    if (this.match(types$1.braceR)) {\n      node.expression = this.jsxParseEmptyExpression();\n    } else {\n      const expression = this.parseExpression();\n      node.expression = expression;\n    }\n\n    this.expect(types$1.braceR);\n    return this.finishNode(node, \"JSXExpressionContainer\");\n  }\n\n  jsxParseAttribute() {\n    const node = this.startNode();\n\n    if (this.eat(types$1.braceL)) {\n      this.expect(types$1.ellipsis);\n      node.argument = this.parseMaybeAssignAllowIn();\n      this.expect(types$1.braceR);\n      return this.finishNode(node, \"JSXSpreadAttribute\");\n    }\n\n    node.name = this.jsxParseNamespacedName();\n    node.value = this.eat(types$1.eq) ? this.jsxParseAttributeValue() : null;\n    return this.finishNode(node, \"JSXAttribute\");\n  }\n\n  jsxParseOpeningElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(types$1.jsxTagEnd)) {\n      this.expect(types$1.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    return this.jsxParseOpeningElementAfterName(node);\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    const attributes = [];\n\n    while (!this.match(types$1.slash) && !this.match(types$1.jsxTagEnd)) {\n      attributes.push(this.jsxParseAttribute());\n    }\n\n    node.attributes = attributes;\n    node.selfClosing = this.eat(types$1.slash);\n    this.expect(types$1.jsxTagEnd);\n    return this.finishNode(node, \"JSXOpeningElement\");\n  }\n\n  jsxParseClosingElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(types$1.jsxTagEnd)) {\n      this.expect(types$1.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    this.expect(types$1.jsxTagEnd);\n    return this.finishNode(node, \"JSXClosingElement\");\n  }\n\n  jsxParseElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const children = [];\n    const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n    let closingElement = null;\n\n    if (!openingElement.selfClosing) {\n      contents: for (;;) {\n        switch (this.state.type) {\n          case types$1.jsxTagStart:\n            startPos = this.state.start;\n            startLoc = this.state.startLoc;\n            this.next();\n\n            if (this.eat(types$1.slash)) {\n              closingElement = this.jsxParseClosingElementAt(startPos, startLoc);\n              break contents;\n            }\n\n            children.push(this.jsxParseElementAt(startPos, startLoc));\n            break;\n\n          case types$1.jsxText:\n            children.push(this.parseExprAtom());\n            break;\n\n          case types$1.braceL:\n            {\n              const node = this.startNode();\n              this.next();\n\n              if (this.match(types$1.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node));\n              }\n\n              break;\n            }\n\n          default:\n            throw this.unexpected();\n        }\n      }\n\n      if (isFragment(openingElement) && !isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagFragment);\n      } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n      } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n          this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n        }\n      }\n    }\n\n    if (isFragment(openingElement)) {\n      node.openingFragment = openingElement;\n      node.closingFragment = closingElement;\n    } else {\n      node.openingElement = openingElement;\n      node.closingElement = closingElement;\n    }\n\n    node.children = children;\n\n    if (this.isRelational(\"<\")) {\n      throw this.raise(this.state.start, JsxErrors.UnwrappedAdjacentJSXElements);\n    }\n\n    return isFragment(openingElement) ? this.finishNode(node, \"JSXFragment\") : this.finishNode(node, \"JSXElement\");\n  }\n\n  jsxParseElement() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.next();\n    return this.jsxParseElementAt(startPos, startLoc);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    if (this.match(types$1.jsxText)) {\n      return this.parseLiteral(this.state.value, \"JSXText\");\n    } else if (this.match(types$1.jsxTagStart)) {\n      return this.jsxParseElement();\n    } else if (this.isRelational(\"<\") && this.input.charCodeAt(this.state.pos) !== 33) {\n      this.finishToken(types$1.jsxTagStart);\n      return this.jsxParseElement();\n    } else {\n      return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n\n  createLookaheadState(state) {\n    const lookaheadState = super.createLookaheadState(state);\n    lookaheadState.inPropertyName = state.inPropertyName;\n    return lookaheadState;\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inPropertyName) return super.getTokenFromCode(code);\n    const context = this.curContext();\n\n    if (context === types.j_expr) {\n      return this.jsxReadToken();\n    }\n\n    if (context === types.j_oTag || context === types.j_cTag) {\n      if (isIdentifierStart(code)) {\n        return this.jsxReadWord();\n      }\n\n      if (code === 62) {\n        ++this.state.pos;\n        return this.finishToken(types$1.jsxTagEnd);\n      }\n\n      if ((code === 34 || code === 39) && context === types.j_oTag) {\n        return this.jsxReadString(code);\n      }\n    }\n\n    if (code === 60 && this.state.exprAllowed && this.input.charCodeAt(this.state.pos + 1) !== 33) {\n      ++this.state.pos;\n      return this.finishToken(types$1.jsxTagStart);\n    }\n\n    return super.getTokenFromCode(code);\n  }\n\n  updateContext(prevType) {\n    super.updateContext(prevType);\n    const {\n      context,\n      type\n    } = this.state;\n\n    if (type === types$1.slash && prevType === types$1.jsxTagStart) {\n      context.splice(-2, 2, types.j_cTag);\n      this.state.exprAllowed = false;\n    } else if (type === types$1.jsxTagEnd) {\n      const out = context.pop();\n\n      if (out === types.j_oTag && prevType === types$1.slash || out === types.j_cTag) {\n        context.pop();\n        this.state.exprAllowed = context[context.length - 1] === types.j_expr;\n      } else {\n        this.state.exprAllowed = true;\n      }\n    } else if (type.keyword && (prevType === types$1.dot || prevType === types$1.questionDot)) {\n      this.state.exprAllowed = false;\n    } else {\n      this.state.exprAllowed = type.beforeExpr;\n    }\n  }\n\n};\n\nclass TypeScriptScope extends Scope {\n  constructor(...args) {\n    super(...args);\n    this.types = new Set();\n    this.enums = new Set();\n    this.constEnums = new Set();\n    this.classes = new Set();\n    this.exportOnlyBindings = new Set();\n  }\n\n}\n\nclass TypeScriptScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name, bindingType, pos) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        this.maybeExportDefined(scope, name);\n      }\n\n      scope.types.add(name);\n    }\n\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n\n      return true;\n    }\n\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        return false;\n      }\n    }\n\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id) {\n    const topLevelScope = this.scopeStack[0];\n    const {\n      name\n    } = id;\n\n    if (!topLevelScope.types.has(name) && !topLevelScope.exportOnlyBindings.has(name)) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nfunction nonNull(x) {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n\n  return x;\n}\n\nfunction assert(x) {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\nconst TSErrors = makeErrorTemplates({\n  AbstractMethodHasImplementation: \"Method '%0' cannot have an implementation because it is marked abstract.\",\n  AbstractPropertyHasInitializer: \"Property '%0' cannot have an initializer because it is marked abstract.\",\n  AccesorCannotDeclareThisParameter: \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstructorHasTypeParameters: \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: \"'declare' is not allowed in %0ters.\",\n  DeclareClassFieldHasInitializer: \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation: \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier: \"Accessibility modifier already seen.\",\n  DuplicateModifier: \"Duplicate modifier: '%0'.\",\n  EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare: \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  IncompatibleModifiers: \"'%0' modifier cannot be used with '%1' modifier.\",\n  IndexSignatureHasAbstract: \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: \"Index signatures cannot have an accessibility modifier ('%0').\",\n  IndexSignatureHasDeclare: \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride: \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic: \"Index signatures cannot have the 'static' modifier.\",\n  InvalidModifierOnTypeMember: \"'%0' modifier cannot appear on a type member.\",\n  InvalidModifiersOrder: \"'%0' modifier must precede '%1' modifier.\",\n  InvalidTupleMemberLabel: \"Tuple members must be labeled with a simple identifier.\",\n  MissingInterfaceName: \"'interface' declarations must be followed by an identifier.\",\n  MixedLabeledAndUnlabeledElements: \"Tuple members must all have names or all not have names.\",\n  NonAbstractClassHasAbstractMethod: \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer: \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired: \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass: \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract: \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: \"Private elements cannot have an accessibility modifier ('%0').\",\n  ReadonlyForMethodSignature: \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  SetAccesorCannotHaveOptionalParameter: \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccesorCannotHaveRestParameter: \"A 'set' accessor cannot have rest parameter.\",\n  SetAccesorCannotHaveReturnType: \"A 'set' accessor cannot have a return type annotation.\",\n  StaticBlockCannotHaveModifier: \"Static class blocks cannot have any modifier.\",\n  TypeAnnotationAfterAssign: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed: \"A type-only import can specify a default import or named bindings, but not both.\",\n  UnexpectedParameterModifier: \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly: \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument: \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind: \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0.\"\n}, ErrorCodes.SyntaxError);\n\nfunction keywordTypeFromName(value) {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n\n    case \"never\":\n      return \"TSNeverKeyword\";\n\n    case \"number\":\n      return \"TSNumberKeyword\";\n\n    case \"object\":\n      return \"TSObjectKeyword\";\n\n    case \"string\":\n      return \"TSStringKeyword\";\n\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier) {\n  return modifier === \"private\" || modifier === \"public\" || modifier === \"protected\";\n}\n\nvar typescript = superClass => class extends superClass {\n  getScopeHandler() {\n    return TypeScriptScopeHandler;\n  }\n\n  tsIsIdentifier() {\n    return this.match(types$1.name);\n  }\n\n  tsTokenCanFollowModifier() {\n    return (this.match(types$1.bracketL) || this.match(types$1.braceL) || this.match(types$1.star) || this.match(types$1.ellipsis) || this.match(types$1.privateName) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();\n  }\n\n  tsNextTokenCanFollowModifier() {\n    this.next();\n    return this.tsTokenCanFollowModifier();\n  }\n\n  tsParseModifier(allowedModifiers) {\n    if (!this.match(types$1.name)) {\n      return undefined;\n    }\n\n    const modifier = this.state.value;\n\n    if (allowedModifiers.indexOf(modifier) !== -1 && this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n      return modifier;\n    }\n\n    return undefined;\n  }\n\n  tsParseModifiers(modified, allowedModifiers, disallowedModifiers, errorTemplate) {\n    const enforceOrder = (pos, modifier, before, after) => {\n      if (modifier === before && modified[after]) {\n        this.raise(pos, TSErrors.InvalidModifiersOrder, before, after);\n      }\n    };\n\n    const incompatible = (pos, modifier, mod1, mod2) => {\n      if (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) {\n        this.raise(pos, TSErrors.IncompatibleModifiers, mod1, mod2);\n      }\n    };\n\n    for (;;) {\n      const startPos = this.state.start;\n      const modifier = this.tsParseModifier(allowedModifiers.concat(disallowedModifiers != null ? disallowedModifiers : []));\n      if (!modifier) break;\n\n      if (tsIsAccessModifier(modifier)) {\n        if (modified.accessibility) {\n          this.raise(startPos, TSErrors.DuplicateAccessibilityModifier);\n        } else {\n          enforceOrder(startPos, modifier, modifier, \"override\");\n          enforceOrder(startPos, modifier, modifier, \"static\");\n          enforceOrder(startPos, modifier, modifier, \"readonly\");\n          modified.accessibility = modifier;\n        }\n      } else {\n        if (Object.hasOwnProperty.call(modified, modifier)) {\n          this.raise(startPos, TSErrors.DuplicateModifier, modifier);\n        } else {\n          enforceOrder(startPos, modifier, \"static\", \"readonly\");\n          enforceOrder(startPos, modifier, \"static\", \"override\");\n          enforceOrder(startPos, modifier, \"override\", \"readonly\");\n          enforceOrder(startPos, modifier, \"abstract\", \"override\");\n          incompatible(startPos, modifier, \"declare\", \"override\");\n          incompatible(startPos, modifier, \"static\", \"abstract\");\n        }\n\n        modified[modifier] = true;\n      }\n\n      if (disallowedModifiers != null && disallowedModifiers.includes(modifier)) {\n        this.raise(startPos, errorTemplate, modifier);\n      }\n    }\n  }\n\n  tsIsListTerminator(kind) {\n    switch (kind) {\n      case \"EnumMembers\":\n      case \"TypeMembers\":\n        return this.match(types$1.braceR);\n\n      case \"HeritageClauseElement\":\n        return this.match(types$1.braceL);\n\n      case \"TupleElementTypes\":\n        return this.match(types$1.bracketR);\n\n      case \"TypeParametersOrArguments\":\n        return this.isRelational(\">\");\n    }\n\n    throw new Error(\"Unreachable\");\n  }\n\n  tsParseList(kind, parseElement) {\n    const result = [];\n\n    while (!this.tsIsListTerminator(kind)) {\n      result.push(parseElement());\n    }\n\n    return result;\n  }\n\n  tsParseDelimitedList(kind, parseElement) {\n    return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true));\n  }\n\n  tsParseDelimitedListWorker(kind, parseElement, expectSuccess) {\n    const result = [];\n\n    for (;;) {\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      const element = parseElement();\n\n      if (element == null) {\n        return undefined;\n      }\n\n      result.push(element);\n\n      if (this.eat(types$1.comma)) {\n        continue;\n      }\n\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      if (expectSuccess) {\n        this.expect(types$1.comma);\n      }\n\n      return undefined;\n    }\n\n    return result;\n  }\n\n  tsParseBracketedList(kind, parseElement, bracket, skipFirstToken) {\n    if (!skipFirstToken) {\n      if (bracket) {\n        this.expect(types$1.bracketL);\n      } else {\n        this.expectRelational(\"<\");\n      }\n    }\n\n    const result = this.tsParseDelimitedList(kind, parseElement);\n\n    if (bracket) {\n      this.expect(types$1.bracketR);\n    } else {\n      this.expectRelational(\">\");\n    }\n\n    return result;\n  }\n\n  tsParseImportType() {\n    const node = this.startNode();\n    this.expect(types$1._import);\n    this.expect(types$1.parenL);\n\n    if (!this.match(types$1.string)) {\n      this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);\n    }\n\n    node.argument = this.parseExprAtom();\n    this.expect(types$1.parenR);\n\n    if (this.eat(types$1.dot)) {\n      node.qualifier = this.tsParseEntityName(true);\n    }\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSImportType\");\n  }\n\n  tsParseEntityName(allowReservedWords) {\n    let entity = this.parseIdentifier();\n\n    while (this.eat(types$1.dot)) {\n      const node = this.startNodeAtNode(entity);\n      node.left = entity;\n      node.right = this.parseIdentifier(allowReservedWords);\n      entity = this.finishNode(node, \"TSQualifiedName\");\n    }\n\n    return entity;\n  }\n\n  tsParseTypeReference() {\n    const node = this.startNode();\n    node.typeName = this.tsParseEntityName(false);\n\n    if (!this.hasPrecedingLineBreak() && this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSTypeReference\");\n  }\n\n  tsParseThisTypePredicate(lhs) {\n    this.next();\n    const node = this.startNodeAtNode(lhs);\n    node.parameterName = lhs;\n    node.typeAnnotation = this.tsParseTypeAnnotation(false);\n    node.asserts = false;\n    return this.finishNode(node, \"TSTypePredicate\");\n  }\n\n  tsParseThisTypeNode() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"TSThisType\");\n  }\n\n  tsParseTypeQuery() {\n    const node = this.startNode();\n    this.expect(types$1._typeof);\n\n    if (this.match(types$1._import)) {\n      node.exprName = this.tsParseImportType();\n    } else {\n      node.exprName = this.tsParseEntityName(true);\n    }\n\n    return this.finishNode(node, \"TSTypeQuery\");\n  }\n\n  tsParseTypeParameter() {\n    const node = this.startNode();\n    node.name = this.tsParseTypeParameterName();\n    node.constraint = this.tsEatThenParseType(types$1._extends);\n    node.default = this.tsEatThenParseType(types$1.eq);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsTryParseTypeParameters() {\n    if (this.isRelational(\"<\")) {\n      return this.tsParseTypeParameters();\n    }\n  }\n\n  tsParseTypeParameters() {\n    const node = this.startNode();\n\n    if (this.isRelational(\"<\") || this.match(types$1.jsxTagStart)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    node.params = this.tsParseBracketedList(\"TypeParametersOrArguments\", this.tsParseTypeParameter.bind(this), false, true);\n\n    if (node.params.length === 0) {\n      this.raise(node.start, TSErrors.EmptyTypeParameters);\n    }\n\n    return this.finishNode(node, \"TSTypeParameterDeclaration\");\n  }\n\n  tsTryNextParseConstantContext() {\n    if (this.lookahead().type === types$1._const) {\n      this.next();\n      return this.tsParseTypeReference();\n    }\n\n    return null;\n  }\n\n  tsFillSignature(returnToken, signature) {\n    const returnTokenRequired = returnToken === types$1.arrow;\n    signature.typeParameters = this.tsTryParseTypeParameters();\n    this.expect(types$1.parenL);\n    signature.parameters = this.tsParseBindingListForSignature();\n\n    if (returnTokenRequired) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    } else if (this.match(returnToken)) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    }\n  }\n\n  tsParseBindingListForSignature() {\n    return this.parseBindingList(types$1.parenR, 41).map(pattern => {\n      if (pattern.type !== \"Identifier\" && pattern.type !== \"RestElement\" && pattern.type !== \"ObjectPattern\" && pattern.type !== \"ArrayPattern\") {\n        this.raise(pattern.start, TSErrors.UnsupportedSignatureParameterKind, pattern.type);\n      }\n\n      return pattern;\n    });\n  }\n\n  tsParseTypeMemberSemicolon() {\n    if (!this.eat(types$1.comma) && !this.isLineTerminator()) {\n      this.expect(types$1.semi);\n    }\n  }\n\n  tsParseSignatureMember(kind, node) {\n    this.tsFillSignature(types$1.colon, node);\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, kind);\n  }\n\n  tsIsUnambiguouslyIndexSignature() {\n    this.next();\n    return this.eat(types$1.name) && this.match(types$1.colon);\n  }\n\n  tsTryParseIndexSignature(node) {\n    if (!(this.match(types$1.bracketL) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {\n      return undefined;\n    }\n\n    this.expect(types$1.bracketL);\n    const id = this.parseIdentifier();\n    id.typeAnnotation = this.tsParseTypeAnnotation();\n    this.resetEndLocation(id);\n    this.expect(types$1.bracketR);\n    node.parameters = [id];\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, \"TSIndexSignature\");\n  }\n\n  tsParsePropertyOrMethodSignature(node, readonly) {\n    if (this.eat(types$1.question)) node.optional = true;\n    const nodeAny = node;\n\n    if (this.match(types$1.parenL) || this.isRelational(\"<\")) {\n      if (readonly) {\n        this.raise(node.start, TSErrors.ReadonlyForMethodSignature);\n      }\n\n      const method = nodeAny;\n\n      if (method.kind && this.isRelational(\"<\")) {\n        this.raise(this.state.pos, TSErrors.AccesorCannotHaveTypeParameters);\n      }\n\n      this.tsFillSignature(types$1.colon, method);\n      this.tsParseTypeMemberSemicolon();\n\n      if (method.kind === \"get\") {\n        if (method.parameters.length > 0) {\n          this.raise(this.state.pos, ErrorMessages.BadGetterArity);\n\n          if (this.isThisParam(method.parameters[0])) {\n            this.raise(this.state.pos, TSErrors.AccesorCannotDeclareThisParameter);\n          }\n        }\n      } else if (method.kind === \"set\") {\n        if (method.parameters.length !== 1) {\n          this.raise(this.state.pos, ErrorMessages.BadSetterArity);\n        } else {\n          const firstParameter = method.parameters[0];\n\n          if (this.isThisParam(firstParameter)) {\n            this.raise(this.state.pos, TSErrors.AccesorCannotDeclareThisParameter);\n          }\n\n          if (firstParameter.type === \"Identifier\" && firstParameter.optional) {\n            this.raise(this.state.pos, TSErrors.SetAccesorCannotHaveOptionalParameter);\n          }\n\n          if (firstParameter.type === \"RestElement\") {\n            this.raise(this.state.pos, TSErrors.SetAccesorCannotHaveRestParameter);\n          }\n        }\n\n        if (method.typeAnnotation) {\n          this.raise(method.typeAnnotation.start, TSErrors.SetAccesorCannotHaveReturnType);\n        }\n      } else {\n        method.kind = \"method\";\n      }\n\n      return this.finishNode(method, \"TSMethodSignature\");\n    } else {\n      const property = nodeAny;\n      if (readonly) property.readonly = true;\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) property.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(property, \"TSPropertySignature\");\n    }\n  }\n\n  tsParseTypeMember() {\n    const node = this.startNode();\n\n    if (this.match(types$1.parenL) || this.isRelational(\"<\")) {\n      return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n    }\n\n    if (this.match(types$1._new)) {\n      const id = this.startNode();\n      this.next();\n\n      if (this.match(types$1.parenL) || this.isRelational(\"<\")) {\n        return this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\", node);\n      } else {\n        node.key = this.createIdentifier(id, \"new\");\n        return this.tsParsePropertyOrMethodSignature(node, false);\n      }\n    }\n\n    this.tsParseModifiers(node, [\"readonly\"], [\"declare\", \"abstract\", \"private\", \"protected\", \"public\", \"static\", \"override\"], TSErrors.InvalidModifierOnTypeMember);\n    const idx = this.tsTryParseIndexSignature(node);\n\n    if (idx) {\n      return idx;\n    }\n\n    this.parsePropertyName(node, false);\n\n    if (!node.computed && node.key.type === \"Identifier\" && (node.key.name === \"get\" || node.key.name === \"set\") && this.tsTokenCanFollowModifier()) {\n      node.kind = node.key.name;\n      this.parsePropertyName(node, false);\n    }\n\n    return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n  }\n\n  tsParseTypeLiteral() {\n    const node = this.startNode();\n    node.members = this.tsParseObjectTypeMembers();\n    return this.finishNode(node, \"TSTypeLiteral\");\n  }\n\n  tsParseObjectTypeMembers() {\n    this.expect(types$1.braceL);\n    const members = this.tsParseList(\"TypeMembers\", this.tsParseTypeMember.bind(this));\n    this.expect(types$1.braceR);\n    return members;\n  }\n\n  tsIsStartOfMappedType() {\n    this.next();\n\n    if (this.eat(types$1.plusMin)) {\n      return this.isContextual(\"readonly\");\n    }\n\n    if (this.isContextual(\"readonly\")) {\n      this.next();\n    }\n\n    if (!this.match(types$1.bracketL)) {\n      return false;\n    }\n\n    this.next();\n\n    if (!this.tsIsIdentifier()) {\n      return false;\n    }\n\n    this.next();\n    return this.match(types$1._in);\n  }\n\n  tsParseMappedTypeParameter() {\n    const node = this.startNode();\n    node.name = this.tsParseTypeParameterName();\n    node.constraint = this.tsExpectThenParseType(types$1._in);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsParseMappedType() {\n    const node = this.startNode();\n    this.expect(types$1.braceL);\n\n    if (this.match(types$1.plusMin)) {\n      node.readonly = this.state.value;\n      this.next();\n      this.expectContextual(\"readonly\");\n    } else if (this.eatContextual(\"readonly\")) {\n      node.readonly = true;\n    }\n\n    this.expect(types$1.bracketL);\n    node.typeParameter = this.tsParseMappedTypeParameter();\n    node.nameType = this.eatContextual(\"as\") ? this.tsParseType() : null;\n    this.expect(types$1.bracketR);\n\n    if (this.match(types$1.plusMin)) {\n      node.optional = this.state.value;\n      this.next();\n      this.expect(types$1.question);\n    } else if (this.eat(types$1.question)) {\n      node.optional = true;\n    }\n\n    node.typeAnnotation = this.tsTryParseType();\n    this.semicolon();\n    this.expect(types$1.braceR);\n    return this.finishNode(node, \"TSMappedType\");\n  }\n\n  tsParseTupleType() {\n    const node = this.startNode();\n    node.elementTypes = this.tsParseBracketedList(\"TupleElementTypes\", this.tsParseTupleElementType.bind(this), true, false);\n    let seenOptionalElement = false;\n    let labeledElements = null;\n    node.elementTypes.forEach(elementNode => {\n      var _labeledElements;\n\n      let {\n        type\n      } = elementNode;\n\n      if (seenOptionalElement && type !== \"TSRestType\" && type !== \"TSOptionalType\" && !(type === \"TSNamedTupleMember\" && elementNode.optional)) {\n        this.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);\n      }\n\n      seenOptionalElement = seenOptionalElement || type === \"TSNamedTupleMember\" && elementNode.optional || type === \"TSOptionalType\";\n\n      if (type === \"TSRestType\") {\n        elementNode = elementNode.typeAnnotation;\n        type = elementNode.type;\n      }\n\n      const isLabeled = type === \"TSNamedTupleMember\";\n      labeledElements = (_labeledElements = labeledElements) != null ? _labeledElements : isLabeled;\n\n      if (labeledElements !== isLabeled) {\n        this.raise(elementNode.start, TSErrors.MixedLabeledAndUnlabeledElements);\n      }\n    });\n    return this.finishNode(node, \"TSTupleType\");\n  }\n\n  tsParseTupleElementType() {\n    const {\n      start: startPos,\n      startLoc\n    } = this.state;\n    const rest = this.eat(types$1.ellipsis);\n    let type = this.tsParseType();\n    const optional = this.eat(types$1.question);\n    const labeled = this.eat(types$1.colon);\n\n    if (labeled) {\n      const labeledNode = this.startNodeAtNode(type);\n      labeledNode.optional = optional;\n\n      if (type.type === \"TSTypeReference\" && !type.typeParameters && type.typeName.type === \"Identifier\") {\n        labeledNode.label = type.typeName;\n      } else {\n        this.raise(type.start, TSErrors.InvalidTupleMemberLabel);\n        labeledNode.label = type;\n      }\n\n      labeledNode.elementType = this.tsParseType();\n      type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n    } else if (optional) {\n      const optionalTypeNode = this.startNodeAtNode(type);\n      optionalTypeNode.typeAnnotation = type;\n      type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n    }\n\n    if (rest) {\n      const restNode = this.startNodeAt(startPos, startLoc);\n      restNode.typeAnnotation = type;\n      type = this.finishNode(restNode, \"TSRestType\");\n    }\n\n    return type;\n  }\n\n  tsParseParenthesizedType() {\n    const node = this.startNode();\n    this.expect(types$1.parenL);\n    node.typeAnnotation = this.tsParseType();\n    this.expect(types$1.parenR);\n    return this.finishNode(node, \"TSParenthesizedType\");\n  }\n\n  tsParseFunctionOrConstructorType(type, abstract) {\n    const node = this.startNode();\n\n    if (type === \"TSConstructorType\") {\n      node.abstract = !!abstract;\n      if (abstract) this.next();\n      this.next();\n    }\n\n    this.tsFillSignature(types$1.arrow, node);\n    return this.finishNode(node, type);\n  }\n\n  tsParseLiteralTypeNode() {\n    const node = this.startNode();\n\n    node.literal = (() => {\n      switch (this.state.type) {\n        case types$1.num:\n        case types$1.bigint:\n        case types$1.string:\n        case types$1._true:\n        case types$1._false:\n          return this.parseExprAtom();\n\n        default:\n          throw this.unexpected();\n      }\n    })();\n\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  tsParseTemplateLiteralType() {\n    const node = this.startNode();\n    node.literal = this.parseTemplate(false);\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  parseTemplateSubstitution() {\n    if (this.state.inType) return this.tsParseType();\n    return super.parseTemplateSubstitution();\n  }\n\n  tsParseThisTypeOrThisTypePredicate() {\n    const thisKeyword = this.tsParseThisTypeNode();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      return this.tsParseThisTypePredicate(thisKeyword);\n    } else {\n      return thisKeyword;\n    }\n  }\n\n  tsParseNonArrayType() {\n    switch (this.state.type) {\n      case types$1.name:\n      case types$1._void:\n      case types$1._null:\n        {\n          const type = this.match(types$1._void) ? \"TSVoidKeyword\" : this.match(types$1._null) ? \"TSNullKeyword\" : keywordTypeFromName(this.state.value);\n\n          if (type !== undefined && this.lookaheadCharCode() !== 46) {\n            const node = this.startNode();\n            this.next();\n            return this.finishNode(node, type);\n          }\n\n          return this.tsParseTypeReference();\n        }\n\n      case types$1.string:\n      case types$1.num:\n      case types$1.bigint:\n      case types$1._true:\n      case types$1._false:\n        return this.tsParseLiteralTypeNode();\n\n      case types$1.plusMin:\n        if (this.state.value === \"-\") {\n          const node = this.startNode();\n          const nextToken = this.lookahead();\n\n          if (nextToken.type !== types$1.num && nextToken.type !== types$1.bigint) {\n            throw this.unexpected();\n          }\n\n          node.literal = this.parseMaybeUnary();\n          return this.finishNode(node, \"TSLiteralType\");\n        }\n\n        break;\n\n      case types$1._this:\n        return this.tsParseThisTypeOrThisTypePredicate();\n\n      case types$1._typeof:\n        return this.tsParseTypeQuery();\n\n      case types$1._import:\n        return this.tsParseImportType();\n\n      case types$1.braceL:\n        return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\n\n      case types$1.bracketL:\n        return this.tsParseTupleType();\n\n      case types$1.parenL:\n        return this.tsParseParenthesizedType();\n\n      case types$1.backQuote:\n        return this.tsParseTemplateLiteralType();\n    }\n\n    throw this.unexpected();\n  }\n\n  tsParseArrayTypeOrHigher() {\n    let type = this.tsParseNonArrayType();\n\n    while (!this.hasPrecedingLineBreak() && this.eat(types$1.bracketL)) {\n      if (this.match(types$1.bracketR)) {\n        const node = this.startNodeAtNode(type);\n        node.elementType = type;\n        this.expect(types$1.bracketR);\n        type = this.finishNode(node, \"TSArrayType\");\n      } else {\n        const node = this.startNodeAtNode(type);\n        node.objectType = type;\n        node.indexType = this.tsParseType();\n        this.expect(types$1.bracketR);\n        type = this.finishNode(node, \"TSIndexedAccessType\");\n      }\n    }\n\n    return type;\n  }\n\n  tsParseTypeOperator(operator) {\n    const node = this.startNode();\n    this.expectContextual(operator);\n    node.operator = operator;\n    node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n    if (operator === \"readonly\") {\n      this.tsCheckTypeAnnotationForReadOnly(node);\n    }\n\n    return this.finishNode(node, \"TSTypeOperator\");\n  }\n\n  tsCheckTypeAnnotationForReadOnly(node) {\n    switch (node.typeAnnotation.type) {\n      case \"TSTupleType\":\n      case \"TSArrayType\":\n        return;\n\n      default:\n        this.raise(node.start, TSErrors.UnexpectedReadonly);\n    }\n  }\n\n  tsParseInferType() {\n    const node = this.startNode();\n    this.expectContextual(\"infer\");\n    const typeParameter = this.startNode();\n    typeParameter.name = this.tsParseTypeParameterName();\n    node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n    return this.finishNode(node, \"TSInferType\");\n  }\n\n  tsParseTypeOperatorOrHigher() {\n    const operator = [\"keyof\", \"unique\", \"readonly\"].find(kw => this.isContextual(kw));\n    return operator ? this.tsParseTypeOperator(operator) : this.isContextual(\"infer\") ? this.tsParseInferType() : this.tsParseArrayTypeOrHigher();\n  }\n\n  tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {\n    const node = this.startNode();\n    const hasLeadingOperator = this.eat(operator);\n    const types = [];\n\n    do {\n      types.push(parseConstituentType());\n    } while (this.eat(operator));\n\n    if (types.length === 1 && !hasLeadingOperator) {\n      return types[0];\n    }\n\n    node.types = types;\n    return this.finishNode(node, kind);\n  }\n\n  tsParseIntersectionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\", this.tsParseTypeOperatorOrHigher.bind(this), types$1.bitwiseAND);\n  }\n\n  tsParseUnionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSUnionType\", this.tsParseIntersectionTypeOrHigher.bind(this), types$1.bitwiseOR);\n  }\n\n  tsIsStartOfFunctionType() {\n    if (this.isRelational(\"<\")) {\n      return true;\n    }\n\n    return this.match(types$1.parenL) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\n  }\n\n  tsSkipParameterStart() {\n    if (this.match(types$1.name) || this.match(types$1._this)) {\n      this.next();\n      return true;\n    }\n\n    if (this.match(types$1.braceL)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(types$1.braceL)) {\n          ++braceStackCounter;\n        } else if (this.match(types$1.braceR)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    if (this.match(types$1.bracketL)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(types$1.bracketL)) {\n          ++braceStackCounter;\n        } else if (this.match(types$1.bracketR)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  tsIsUnambiguouslyStartOfFunctionType() {\n    this.next();\n\n    if (this.match(types$1.parenR) || this.match(types$1.ellipsis)) {\n      return true;\n    }\n\n    if (this.tsSkipParameterStart()) {\n      if (this.match(types$1.colon) || this.match(types$1.comma) || this.match(types$1.question) || this.match(types$1.eq)) {\n        return true;\n      }\n\n      if (this.match(types$1.parenR)) {\n        this.next();\n\n        if (this.match(types$1.arrow)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  tsParseTypeOrTypePredicateAnnotation(returnToken) {\n    return this.tsInType(() => {\n      const t = this.startNode();\n      this.expect(returnToken);\n      const node = this.startNode();\n      const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));\n\n      if (asserts && this.match(types$1._this)) {\n        let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n\n        if (thisTypePredicate.type === \"TSThisType\") {\n          node.parameterName = thisTypePredicate;\n          node.asserts = true;\n          node.typeAnnotation = null;\n          thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n        } else {\n          this.resetStartLocationFromNode(thisTypePredicate, node);\n          thisTypePredicate.asserts = true;\n        }\n\n        t.typeAnnotation = thisTypePredicate;\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n      if (!typePredicateVariable) {\n        if (!asserts) {\n          return this.tsParseTypeAnnotation(false, t);\n        }\n\n        node.parameterName = this.parseIdentifier();\n        node.asserts = asserts;\n        node.typeAnnotation = null;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const type = this.tsParseTypeAnnotation(false);\n      node.parameterName = typePredicateVariable;\n      node.typeAnnotation = type;\n      node.asserts = asserts;\n      t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    });\n  }\n\n  tsTryParseTypeOrTypePredicateAnnotation() {\n    return this.match(types$1.colon) ? this.tsParseTypeOrTypePredicateAnnotation(types$1.colon) : undefined;\n  }\n\n  tsTryParseTypeAnnotation() {\n    return this.match(types$1.colon) ? this.tsParseTypeAnnotation() : undefined;\n  }\n\n  tsTryParseType() {\n    return this.tsEatThenParseType(types$1.colon);\n  }\n\n  tsParseTypePredicatePrefix() {\n    const id = this.parseIdentifier();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      this.next();\n      return id;\n    }\n  }\n\n  tsParseTypePredicateAsserts() {\n    if (!this.match(types$1.name) || this.state.value !== \"asserts\" || this.hasPrecedingLineBreak()) {\n      return false;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    this.next();\n\n    if (!this.match(types$1.name) && !this.match(types$1._this)) {\n      return false;\n    }\n\n    if (containsEsc) {\n      this.raise(this.state.lastTokStart, ErrorMessages.InvalidEscapedReservedWord, \"asserts\");\n    }\n\n    return true;\n  }\n\n  tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {\n    this.tsInType(() => {\n      if (eatColon) this.expect(types$1.colon);\n      t.typeAnnotation = this.tsParseType();\n    });\n    return this.finishNode(t, \"TSTypeAnnotation\");\n  }\n\n  tsParseType() {\n    assert(this.state.inType);\n    const type = this.tsParseNonConditionalType();\n\n    if (this.hasPrecedingLineBreak() || !this.eat(types$1._extends)) {\n      return type;\n    }\n\n    const node = this.startNodeAtNode(type);\n    node.checkType = type;\n    node.extendsType = this.tsParseNonConditionalType();\n    this.expect(types$1.question);\n    node.trueType = this.tsParseType();\n    this.expect(types$1.colon);\n    node.falseType = this.tsParseType();\n    return this.finishNode(node, \"TSConditionalType\");\n  }\n\n  isAbstractConstructorSignature() {\n    return this.isContextual(\"abstract\") && this.lookahead().type === types$1._new;\n  }\n\n  tsParseNonConditionalType() {\n    if (this.tsIsStartOfFunctionType()) {\n      return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n    }\n\n    if (this.match(types$1._new)) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n    } else if (this.isAbstractConstructorSignature()) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\", true);\n    }\n\n    return this.tsParseUnionTypeOrHigher();\n  }\n\n  tsParseTypeAssertion() {\n    const node = this.startNode();\n\n    const _const = this.tsTryNextParseConstantContext();\n\n    node.typeAnnotation = _const || this.tsNextThenParseType();\n    this.expectRelational(\">\");\n    node.expression = this.parseMaybeUnary();\n    return this.finishNode(node, \"TSTypeAssertion\");\n  }\n\n  tsParseHeritageClause(descriptor) {\n    const originalStart = this.state.start;\n    const delimitedList = this.tsParseDelimitedList(\"HeritageClauseElement\", this.tsParseExpressionWithTypeArguments.bind(this));\n\n    if (!delimitedList.length) {\n      this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);\n    }\n\n    return delimitedList;\n  }\n\n  tsParseExpressionWithTypeArguments() {\n    const node = this.startNode();\n    node.expression = this.tsParseEntityName(false);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n  }\n\n  tsParseInterfaceDeclaration(node) {\n    if (this.match(types$1.name)) {\n      node.id = this.parseIdentifier();\n      this.checkLVal(node.id, \"typescript interface declaration\", BIND_TS_INTERFACE);\n    } else {\n      node.id = null;\n      this.raise(this.state.start, TSErrors.MissingInterfaceName);\n    }\n\n    node.typeParameters = this.tsTryParseTypeParameters();\n\n    if (this.eat(types$1._extends)) {\n      node.extends = this.tsParseHeritageClause(\"extends\");\n    }\n\n    const body = this.startNode();\n    body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n    node.body = this.finishNode(body, \"TSInterfaceBody\");\n    return this.finishNode(node, \"TSInterfaceDeclaration\");\n  }\n\n  tsParseTypeAliasDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript type alias\", BIND_TS_TYPE);\n    node.typeParameters = this.tsTryParseTypeParameters();\n    node.typeAnnotation = this.tsInType(() => {\n      this.expect(types$1.eq);\n\n      if (this.isContextual(\"intrinsic\") && this.lookahead().type !== types$1.dot) {\n        const node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"TSIntrinsicKeyword\");\n      }\n\n      return this.tsParseType();\n    });\n    this.semicolon();\n    return this.finishNode(node, \"TSTypeAliasDeclaration\");\n  }\n\n  tsInNoContext(cb) {\n    const oldContext = this.state.context;\n    this.state.context = [oldContext[0]];\n\n    try {\n      return cb();\n    } finally {\n      this.state.context = oldContext;\n    }\n  }\n\n  tsInType(cb) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.inType = oldInType;\n    }\n  }\n\n  tsEatThenParseType(token) {\n    return !this.match(token) ? undefined : this.tsNextThenParseType();\n  }\n\n  tsExpectThenParseType(token) {\n    return this.tsDoThenParseType(() => this.expect(token));\n  }\n\n  tsNextThenParseType() {\n    return this.tsDoThenParseType(() => this.next());\n  }\n\n  tsDoThenParseType(cb) {\n    return this.tsInType(() => {\n      cb();\n      return this.tsParseType();\n    });\n  }\n\n  tsParseEnumMember() {\n    const node = this.startNode();\n    node.id = this.match(types$1.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n\n    if (this.eat(types$1.eq)) {\n      node.initializer = this.parseMaybeAssignAllowIn();\n    }\n\n    return this.finishNode(node, \"TSEnumMember\");\n  }\n\n  tsParseEnumDeclaration(node, isConst) {\n    if (isConst) node.const = true;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript enum declaration\", isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM);\n    this.expect(types$1.braceL);\n    node.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this));\n    this.expect(types$1.braceR);\n    return this.finishNode(node, \"TSEnumDeclaration\");\n  }\n\n  tsParseModuleBlock() {\n    const node = this.startNode();\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(types$1.braceL);\n    this.parseBlockOrModuleBlockBody(node.body = [], undefined, true, types$1.braceR);\n    this.scope.exit();\n    return this.finishNode(node, \"TSModuleBlock\");\n  }\n\n  tsParseModuleOrNamespaceDeclaration(node, nested = false) {\n    node.id = this.parseIdentifier();\n\n    if (!nested) {\n      this.checkLVal(node.id, \"module or namespace declaration\", BIND_TS_NAMESPACE);\n    }\n\n    if (this.eat(types$1.dot)) {\n      const inner = this.startNode();\n      this.tsParseModuleOrNamespaceDeclaration(inner, true);\n      node.body = inner;\n    } else {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseAmbientExternalModuleDeclaration(node) {\n    if (this.isContextual(\"global\")) {\n      node.global = true;\n      node.id = this.parseIdentifier();\n    } else if (this.match(types$1.string)) {\n      node.id = this.parseExprAtom();\n    } else {\n      this.unexpected();\n    }\n\n    if (this.match(types$1.braceL)) {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    } else {\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseImportEqualsDeclaration(node, isExport) {\n    node.isExport = isExport || false;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"import equals declaration\", BIND_LEXICAL);\n    this.expect(types$1.eq);\n    const moduleReference = this.tsParseModuleReference();\n\n    if (node.importKind === \"type\" && moduleReference.type !== \"TSExternalModuleReference\") {\n      this.raise(moduleReference.start, TSErrors.ImportAliasHasImportType);\n    }\n\n    node.moduleReference = moduleReference;\n    this.semicolon();\n    return this.finishNode(node, \"TSImportEqualsDeclaration\");\n  }\n\n  tsIsExternalModuleReference() {\n    return this.isContextual(\"require\") && this.lookaheadCharCode() === 40;\n  }\n\n  tsParseModuleReference() {\n    return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);\n  }\n\n  tsParseExternalModuleReference() {\n    const node = this.startNode();\n    this.expectContextual(\"require\");\n    this.expect(types$1.parenL);\n\n    if (!this.match(types$1.string)) {\n      throw this.unexpected();\n    }\n\n    node.expression = this.parseExprAtom();\n    this.expect(types$1.parenR);\n    return this.finishNode(node, \"TSExternalModuleReference\");\n  }\n\n  tsLookAhead(f) {\n    const state = this.state.clone();\n    const res = f();\n    this.state = state;\n    return res;\n  }\n\n  tsTryParseAndCatch(f) {\n    const result = this.tryParse(abort => f() || abort());\n    if (result.aborted || !result.node) return undefined;\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  tsTryParse(f) {\n    const state = this.state.clone();\n    const result = f();\n\n    if (result !== undefined && result !== false) {\n      return result;\n    } else {\n      this.state = state;\n      return undefined;\n    }\n  }\n\n  tsTryParseDeclare(nany) {\n    if (this.isLineTerminator()) {\n      return;\n    }\n\n    let starttype = this.state.type;\n    let kind;\n\n    if (this.isContextual(\"let\")) {\n      starttype = types$1._var;\n      kind = \"let\";\n    }\n\n    return this.tsInAmbientContext(() => {\n      switch (starttype) {\n        case types$1._function:\n          nany.declare = true;\n          return this.parseFunctionStatement(nany, false, true);\n\n        case types$1._class:\n          nany.declare = true;\n          return this.parseClass(nany, true, false);\n\n        case types$1._const:\n          if (this.match(types$1._const) && this.isLookaheadContextual(\"enum\")) {\n            this.expect(types$1._const);\n            this.expectContextual(\"enum\");\n            return this.tsParseEnumDeclaration(nany, true);\n          }\n\n        case types$1._var:\n          kind = kind || this.state.value;\n          return this.parseVarStatement(nany, kind);\n\n        case types$1.name:\n          {\n            const value = this.state.value;\n\n            if (value === \"global\") {\n              return this.tsParseAmbientExternalModuleDeclaration(nany);\n            } else {\n              return this.tsParseDeclaration(nany, value, true);\n            }\n          }\n      }\n    });\n  }\n\n  tsTryParseExportDeclaration() {\n    return this.tsParseDeclaration(this.startNode(), this.state.value, true);\n  }\n\n  tsParseExpressionStatement(node, expr) {\n    switch (expr.name) {\n      case \"declare\":\n        {\n          const declaration = this.tsTryParseDeclare(node);\n\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n\n          break;\n        }\n\n      case \"global\":\n        if (this.match(types$1.braceL)) {\n          this.scope.enter(SCOPE_TS_MODULE);\n          this.prodParam.enter(PARAM);\n          const mod = node;\n          mod.global = true;\n          mod.id = expr;\n          mod.body = this.tsParseModuleBlock();\n          this.scope.exit();\n          this.prodParam.exit();\n          return this.finishNode(mod, \"TSModuleDeclaration\");\n        }\n\n        break;\n\n      default:\n        return this.tsParseDeclaration(node, expr.name, false);\n    }\n  }\n\n  tsParseDeclaration(node, value, next) {\n    switch (value) {\n      case \"abstract\":\n        if (this.tsCheckLineTerminator(next) && (this.match(types$1._class) || this.match(types$1.name))) {\n          return this.tsParseAbstractDeclaration(node);\n        }\n\n        break;\n\n      case \"enum\":\n        if (next || this.match(types$1.name)) {\n          if (next) this.next();\n          return this.tsParseEnumDeclaration(node, false);\n        }\n\n        break;\n\n      case \"interface\":\n        if (this.tsCheckLineTerminator(next) && this.match(types$1.name)) {\n          return this.tsParseInterfaceDeclaration(node);\n        }\n\n        break;\n\n      case \"module\":\n        if (this.tsCheckLineTerminator(next)) {\n          if (this.match(types$1.string)) {\n            return this.tsParseAmbientExternalModuleDeclaration(node);\n          } else if (this.match(types$1.name)) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n        }\n\n        break;\n\n      case \"namespace\":\n        if (this.tsCheckLineTerminator(next) && this.match(types$1.name)) {\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n\n        break;\n\n      case \"type\":\n        if (this.tsCheckLineTerminator(next) && this.match(types$1.name)) {\n          return this.tsParseTypeAliasDeclaration(node);\n        }\n\n        break;\n    }\n  }\n\n  tsCheckLineTerminator(next) {\n    if (next) {\n      if (this.hasFollowingLineBreak()) return false;\n      this.next();\n      return true;\n    }\n\n    return !this.isLineTerminator();\n  }\n\n  tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {\n    if (!this.isRelational(\"<\")) {\n      return undefined;\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = true;\n    const res = this.tsTryParseAndCatch(() => {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.typeParameters = this.tsParseTypeParameters();\n      super.parseFunctionParams(node);\n      node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n      this.expect(types$1.arrow);\n      return node;\n    });\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    if (!res) {\n      return undefined;\n    }\n\n    return this.parseArrowExpression(res, null, true);\n  }\n\n  tsParseTypeArguments() {\n    const node = this.startNode();\n    node.params = this.tsInType(() => this.tsInNoContext(() => {\n      this.expectRelational(\"<\");\n      return this.tsParseDelimitedList(\"TypeParametersOrArguments\", this.tsParseType.bind(this));\n    }));\n\n    if (node.params.length === 0) {\n      this.raise(node.start, TSErrors.EmptyTypeArguments);\n    }\n\n    this.expectRelational(\">\");\n    return this.finishNode(node, \"TSTypeParameterInstantiation\");\n  }\n\n  tsIsDeclarationStart() {\n    if (this.match(types$1.name)) {\n      switch (this.state.value) {\n        case \"abstract\":\n        case \"declare\":\n        case \"enum\":\n        case \"interface\":\n        case \"module\":\n        case \"namespace\":\n        case \"type\":\n          return true;\n      }\n    }\n\n    return false;\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.tsIsDeclarationStart()) return false;\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let accessibility;\n    let readonly = false;\n    let override = false;\n\n    if (allowModifiers !== undefined) {\n      const modified = {};\n      this.tsParseModifiers(modified, [\"public\", \"private\", \"protected\", \"override\", \"readonly\"]);\n      accessibility = modified.accessibility;\n      override = modified.override;\n      readonly = modified.readonly;\n\n      if (allowModifiers === false && (accessibility || readonly || override)) {\n        this.raise(startPos, TSErrors.UnexpectedParameterModifier);\n      }\n    }\n\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (accessibility || readonly || override) {\n      const pp = this.startNodeAt(startPos, startLoc);\n\n      if (decorators.length) {\n        pp.decorators = decorators;\n      }\n\n      if (accessibility) pp.accessibility = accessibility;\n      if (readonly) pp.readonly = readonly;\n      if (override) pp.override = override;\n\n      if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n        this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);\n      }\n\n      pp.parameter = elt;\n      return this.finishNode(pp, \"TSParameterProperty\");\n    }\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(types$1.colon)) {\n      node.returnType = this.tsParseTypeOrTypePredicateAnnotation(types$1.colon);\n    }\n\n    const bodilessType = type === \"FunctionDeclaration\" ? \"TSDeclareFunction\" : type === \"ClassMethod\" ? \"TSDeclareMethod\" : undefined;\n\n    if (bodilessType && !this.match(types$1.braceL) && this.isLineTerminator()) {\n      this.finishNode(node, bodilessType);\n      return;\n    }\n\n    if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n      this.raise(node.start, TSErrors.DeclareFunctionHasImplementation);\n\n      if (node.declare) {\n        super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        return;\n      }\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.body && node.id) {\n      this.checkLVal(node.id, \"function name\", BIND_TS_AMBIENT);\n    } else {\n      super.registerFunctionStatementId(...arguments);\n    }\n  }\n\n  tsCheckForInvalidTypeCasts(items) {\n    items.forEach(node => {\n      if ((node == null ? void 0 : node.type) === \"TSTypeCastExpression\") {\n        this.raise(node.typeAnnotation.start, TSErrors.UnexpectedTypeAnnotation);\n      }\n    });\n  }\n\n  toReferencedList(exprList, isInParens) {\n    this.tsCheckForInvalidTypeCasts(exprList);\n    return exprList;\n  }\n\n  parseArrayLike(...args) {\n    const node = super.parseArrayLike(...args);\n\n    if (node.type === \"ArrayExpression\") {\n      this.tsCheckForInvalidTypeCasts(node.elements);\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!this.hasPrecedingLineBreak() && this.match(types$1.bang)) {\n      this.state.exprAllowed = false;\n      this.next();\n      const nonNullExpression = this.startNodeAt(startPos, startLoc);\n      nonNullExpression.expression = base;\n      return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n    }\n\n    let isOptionalCall = false;\n\n    if (this.match(types$1.questionDot) && this.lookaheadCharCode() === 60) {\n      if (noCalls) {\n        state.stop = true;\n        return base;\n      }\n\n      state.optionalChainMember = isOptionalCall = true;\n      this.next();\n    }\n\n    if (this.isRelational(\"<\")) {\n      let missingParenErrorPos;\n      const result = this.tsTryParseAndCatch(() => {\n        if (!noCalls && this.atPossibleAsyncArrow(base)) {\n          const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);\n\n          if (asyncArrowFn) {\n            return asyncArrowFn;\n          }\n        }\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        const typeArguments = this.tsParseTypeArguments();\n\n        if (typeArguments) {\n          if (isOptionalCall && !this.match(types$1.parenL)) {\n            missingParenErrorPos = this.state.pos;\n            this.unexpected();\n          }\n\n          if (!noCalls && this.eat(types$1.parenL)) {\n            node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n            node.typeParameters = typeArguments;\n\n            if (state.optionalChainMember) {\n              node.optional = isOptionalCall;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          } else if (this.match(types$1.backQuote)) {\n            const result = this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n            result.typeParameters = typeArguments;\n            return result;\n          }\n        }\n\n        this.unexpected();\n      });\n\n      if (missingParenErrorPos) {\n        this.unexpected(missingParenErrorPos, types$1.parenL);\n      }\n\n      if (result) return result;\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n  }\n\n  parseNewArguments(node) {\n    if (this.isRelational(\"<\")) {\n      const typeParameters = this.tsTryParseAndCatch(() => {\n        const args = this.tsParseTypeArguments();\n        if (!this.match(types$1.parenL)) this.unexpected();\n        return args;\n      });\n\n      if (typeParameters) {\n        node.typeParameters = typeParameters;\n      }\n    }\n\n    super.parseNewArguments(node);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    if (nonNull(types$1._in.binop) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual(\"as\")) {\n      const node = this.startNodeAt(leftStartPos, leftStartLoc);\n      node.expression = left;\n\n      const _const = this.tsTryNextParseConstantContext();\n\n      if (_const) {\n        node.typeAnnotation = _const;\n      } else {\n        node.typeAnnotation = this.tsNextThenParseType();\n      }\n\n      this.finishNode(node, \"TSAsExpression\");\n      this.reScan_lt_gt();\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {}\n\n  checkDuplicateExports() {}\n\n  parseImport(node) {\n    node.importKind = \"value\";\n\n    if (this.match(types$1.name) || this.match(types$1.star) || this.match(types$1.braceL)) {\n      let ahead = this.lookahead();\n\n      if (this.isContextual(\"type\") && ahead.type !== types$1.comma && !(ahead.type === types$1.name && ahead.value === \"from\") && ahead.type !== types$1.eq) {\n        node.importKind = \"type\";\n        this.next();\n        ahead = this.lookahead();\n      }\n\n      if (this.match(types$1.name) && ahead.type === types$1.eq) {\n        return this.tsParseImportEqualsDeclaration(node);\n      }\n    }\n\n    const importNode = super.parseImport(node);\n\n    if (importNode.importKind === \"type\" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === \"ImportDefaultSpecifier\") {\n      this.raise(importNode.start, TSErrors.TypeImportCannotSpecifyDefaultAndNamed);\n    }\n\n    return importNode;\n  }\n\n  parseExport(node) {\n    if (this.match(types$1._import)) {\n      this.next();\n\n      if (this.isContextual(\"type\") && this.lookaheadCharCode() !== 61) {\n        node.importKind = \"type\";\n        this.next();\n      } else {\n        node.importKind = \"value\";\n      }\n\n      return this.tsParseImportEqualsDeclaration(node, true);\n    } else if (this.eat(types$1.eq)) {\n      const assign = node;\n      assign.expression = this.parseExpression();\n      this.semicolon();\n      return this.finishNode(assign, \"TSExportAssignment\");\n    } else if (this.eatContextual(\"as\")) {\n      const decl = node;\n      this.expectContextual(\"namespace\");\n      decl.id = this.parseIdentifier();\n      this.semicolon();\n      return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n    } else {\n      if (this.isContextual(\"type\") && this.lookahead().type === types$1.braceL) {\n        this.next();\n        node.exportKind = \"type\";\n      } else {\n        node.exportKind = \"value\";\n      }\n\n      return super.parseExport(node);\n    }\n  }\n\n  isAbstractClass() {\n    return this.isContextual(\"abstract\") && this.lookahead().type === types$1._class;\n  }\n\n  parseExportDefaultExpression() {\n    if (this.isAbstractClass()) {\n      const cls = this.startNode();\n      this.next();\n      cls.abstract = true;\n      this.parseClass(cls, true, true);\n      return cls;\n    }\n\n    if (this.state.value === \"interface\") {\n      const interfaceNode = this.startNode();\n      this.next();\n      const result = this.tsParseInterfaceDeclaration(interfaceNode);\n      if (result) return result;\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseStatementContent(context, topLevel) {\n    if (this.state.type === types$1._const) {\n      const ahead = this.lookahead();\n\n      if (ahead.type === types$1.name && ahead.value === \"enum\") {\n        const node = this.startNode();\n        this.expect(types$1._const);\n        this.expectContextual(\"enum\");\n        return this.tsParseEnumDeclaration(node, true);\n      }\n    }\n\n    return super.parseStatementContent(context, topLevel);\n  }\n\n  parseAccessModifier() {\n    return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n  }\n\n  tsHasSomeModifiers(member, modifiers) {\n    return modifiers.some(modifier => {\n      if (tsIsAccessModifier(modifier)) {\n        return member.accessibility === modifier;\n      }\n\n      return !!member[modifier];\n    });\n  }\n\n  parseClassMember(classBody, member, state) {\n    const invalidModifersForStaticBlocks = [\"declare\", \"private\", \"public\", \"protected\", \"override\", \"abstract\", \"readonly\"];\n    this.tsParseModifiers(member, invalidModifersForStaticBlocks.concat([\"static\"]));\n\n    const callParseClassMemberWithIsStatic = () => {\n      const isStatic = !!member.static;\n\n      if (isStatic && this.eat(types$1.braceL)) {\n        if (this.tsHasSomeModifiers(member, invalidModifersForStaticBlocks)) {\n          this.raise(this.state.pos, TSErrors.StaticBlockCannotHaveModifier);\n        }\n\n        this.parseClassStaticBlock(classBody, member);\n      } else {\n        this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n      }\n    };\n\n    if (member.declare) {\n      this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n    } else {\n      callParseClassMemberWithIsStatic();\n    }\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const idx = this.tsTryParseIndexSignature(member);\n\n    if (idx) {\n      classBody.body.push(idx);\n\n      if (member.abstract) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAbstract);\n      }\n\n      if (member.accessibility) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAccessibility, member.accessibility);\n      }\n\n      if (member.declare) {\n        this.raise(member.start, TSErrors.IndexSignatureHasDeclare);\n      }\n\n      if (member.override) {\n        this.raise(member.start, TSErrors.IndexSignatureHasOverride);\n      }\n\n      return;\n    }\n\n    if (!this.state.inAbstractClass && member.abstract) {\n      this.raise(member.start, TSErrors.NonAbstractClassHasAbstractMethod);\n    }\n\n    if (member.override) {\n      if (!state.hadSuperClass) {\n        this.raise(member.start, TSErrors.OverrideNotInSubClass);\n      }\n    }\n\n    super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {\n    const optional = this.eat(types$1.question);\n    if (optional) methodOrProp.optional = true;\n\n    if (methodOrProp.readonly && this.match(types$1.parenL)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);\n    }\n\n    if (methodOrProp.declare && this.match(types$1.parenL)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);\n    }\n  }\n\n  parseExpressionStatement(node, expr) {\n    const decl = expr.type === \"Identifier\" ? this.tsParseExpressionStatement(node, expr) : undefined;\n    return decl || super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.tsIsDeclarationStart()) return true;\n    return super.shouldParseExportDeclaration();\n  }\n\n  parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n    if (!this.state.maybeInArrowParameters || !this.match(types$1.question)) {\n      return super.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n    }\n\n    const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));\n\n    if (!result.node) {\n      if (result.error) {\n        super.setOptionalParametersError(refExpressionErrors, result.error);\n      }\n\n      return expr;\n    }\n\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(types$1.question)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(types$1.colon)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  parseExportDeclaration(node) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isDeclare = this.eatContextual(\"declare\");\n\n    if (isDeclare && (this.isContextual(\"declare\") || !this.shouldParseExportDeclaration())) {\n      throw this.raise(this.state.start, TSErrors.ExpectedAmbientAfterExportDeclare);\n    }\n\n    let declaration;\n\n    if (this.match(types$1.name)) {\n      declaration = this.tsTryParseExportDeclaration();\n    }\n\n    if (!declaration) {\n      declaration = super.parseExportDeclaration(node);\n    }\n\n    if (declaration && (declaration.type === \"TSInterfaceDeclaration\" || declaration.type === \"TSTypeAliasDeclaration\" || isDeclare)) {\n      node.exportKind = \"type\";\n    }\n\n    if (declaration && isDeclare) {\n      this.resetStartLocation(declaration, startPos, startLoc);\n      declaration.declare = true;\n    }\n\n    return declaration;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    if ((!isStatement || optionalId) && this.isContextual(\"implements\")) {\n      return;\n    }\n\n    super.parseClassId(node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n  }\n\n  parseClassPropertyAnnotation(node) {\n    if (!node.optional && this.eat(types$1.bang)) {\n      node.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n  }\n\n  parseClassProperty(node) {\n    this.parseClassPropertyAnnotation(node);\n\n    if (this.state.isAmbientContext && this.match(types$1.eq)) {\n      this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);\n    }\n\n    if (node.abstract && this.match(types$1.eq)) {\n      const {\n        key\n      } = node;\n      this.raise(this.state.start, TSErrors.AbstractPropertyHasInitializer, key.type === \"Identifier\" && !node.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`);\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (node.abstract) {\n      this.raise(node.start, TSErrors.PrivateElementHasAbstract);\n    }\n\n    if (node.accessibility) {\n      this.raise(node.start, TSErrors.PrivateElementHasAccessibility, node.accessibility);\n    }\n\n    this.parseClassPropertyAnnotation(node);\n    return super.parseClassPrivateProperty(node);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    const typeParameters = this.tsTryParseTypeParameters();\n\n    if (typeParameters && isConstructor) {\n      this.raise(typeParameters.start, TSErrors.ConstructorHasTypeParameters);\n    }\n\n    if (method.declare && (method.kind === \"get\" || method.kind === \"set\")) {\n      this.raise(method.start, TSErrors.DeclareAccessor, method.kind);\n    }\n\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.isRelational(\"<\")) {\n      node.superTypeParameters = this.tsParseTypeArguments();\n    }\n\n    if (this.eatContextual(\"implements\")) {\n      node.implements = this.tsParseHeritageClause(\"implements\");\n    }\n  }\n\n  parseObjPropValue(prop, ...args) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) prop.typeParameters = typeParameters;\n    super.parseObjPropValue(prop, ...args);\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (decl.id.type === \"Identifier\" && this.eat(types$1.bang)) {\n      decl.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      decl.id.typeAnnotation = type;\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(types$1.colon)) {\n      node.returnType = this.tsParseTypeAnnotation();\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  parseMaybeAssign(...args) {\n    var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2, _jsx4, _typeCast3;\n\n    let state;\n    let jsx;\n    let typeCast;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(types$1.jsxTagStart) || this.isRelational(\"<\"))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n\n      if (context[context.length - 1] === types.j_oTag) {\n        context.length -= 2;\n      } else if (context[context.length - 1] === types.j_expr) {\n        context.length -= 1;\n      }\n    }\n\n    if (!((_jsx = jsx) != null && _jsx.error) && !this.isRelational(\"<\")) {\n      return super.parseMaybeAssign(...args);\n    }\n\n    let typeParameters;\n    state = state || this.state.clone();\n    const arrow = this.tryParse(abort => {\n      var _expr$extra, _typeParameters;\n\n      typeParameters = this.tsParseTypeParameters();\n      const expr = super.parseMaybeAssign(...args);\n\n      if (expr.type !== \"ArrowFunctionExpression\" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {\n        abort();\n      }\n\n      if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {\n        this.resetStartLocationFromNode(expr, typeParameters);\n      }\n\n      expr.typeParameters = typeParameters;\n      return expr;\n    }, state);\n    if (!arrow.error && !arrow.aborted) return arrow.node;\n\n    if (!jsx) {\n      assert(!this.hasPlugin(\"jsx\"));\n      typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!typeCast.error) return typeCast.node;\n    }\n\n    if ((_jsx2 = jsx) != null && _jsx2.node) {\n      this.state = jsx.failState;\n      return jsx.node;\n    }\n\n    if (arrow.node) {\n      this.state = arrow.failState;\n      return arrow.node;\n    }\n\n    if ((_typeCast = typeCast) != null && _typeCast.node) {\n      this.state = typeCast.failState;\n      return typeCast.node;\n    }\n\n    if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n    if (arrow.thrown) throw arrow.error;\n    if ((_typeCast2 = typeCast) != null && _typeCast2.thrown) throw typeCast.error;\n    throw ((_jsx4 = jsx) == null ? void 0 : _jsx4.error) || arrow.error || ((_typeCast3 = typeCast) == null ? void 0 : _typeCast3.error);\n  }\n\n  parseMaybeUnary(refExpressionErrors) {\n    if (!this.hasPlugin(\"jsx\") && this.isRelational(\"<\")) {\n      return this.tsParseTypeAssertion();\n    } else {\n      return super.parseMaybeUnary(refExpressionErrors);\n    }\n  }\n\n  parseArrow(node) {\n    if (this.match(types$1.colon)) {\n      const result = this.tryParse(abort => {\n        const returnType = this.tsParseTypeOrTypePredicateAnnotation(types$1.colon);\n        if (this.canInsertSemicolon() || !this.match(types$1.arrow)) abort();\n        return returnType;\n      });\n      if (result.aborted) return;\n\n      if (!result.thrown) {\n        if (result.error) this.state = result.failState;\n        node.returnType = result.node;\n      }\n    }\n\n    return super.parseArrow(node);\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(types$1.question)) {\n      if (param.type !== \"Identifier\" && !this.state.isAmbientContext && !this.state.inType) {\n        this.raise(param.start, TSErrors.PatternIsOptional);\n      }\n\n      param.optional = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) param.typeAnnotation = type;\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return this.isAssignable(node.expression, isBinding);\n\n      case \"TSParameterProperty\":\n        return true;\n\n      default:\n        return super.isAssignable(node, isBinding);\n    }\n  }\n\n  toAssignable(node, isLHS = false) {\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return super.toAssignable(this.typeCastToParameter(node), isLHS);\n\n      case \"TSParameterProperty\":\n        return super.toAssignable(node, isLHS);\n\n      case \"ParenthesizedExpression\":\n        return this.toAssignableParenthesizedExpression(node, isLHS);\n\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        node.expression = this.toAssignable(node.expression, isLHS);\n        return node;\n\n      default:\n        return super.toAssignable(node, isLHS);\n    }\n  }\n\n  toAssignableParenthesizedExpression(node, isLHS) {\n    switch (node.expression.type) {\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n      case \"ParenthesizedExpression\":\n        node.expression = this.toAssignable(node.expression, isLHS);\n        return node;\n\n      default:\n        return super.toAssignable(node, isLHS);\n    }\n  }\n\n  checkLVal(expr, contextDescription, ...args) {\n    var _expr$extra2;\n\n    switch (expr.type) {\n      case \"TSTypeCastExpression\":\n        return;\n\n      case \"TSParameterProperty\":\n        this.checkLVal(expr.parameter, \"parameter property\", ...args);\n        return;\n\n      case \"TSAsExpression\":\n      case \"TSTypeAssertion\":\n        if (!args[0] && contextDescription !== \"parenthesized expression\" && !((_expr$extra2 = expr.extra) != null && _expr$extra2.parenthesized)) {\n          this.raise(expr.start, ErrorMessages.InvalidLhs, contextDescription);\n          break;\n        }\n\n        this.checkLVal(expr.expression, \"parenthesized expression\", ...args);\n        return;\n\n      case \"TSNonNullExpression\":\n        this.checkLVal(expr.expression, contextDescription, ...args);\n        return;\n\n      default:\n        super.checkLVal(expr, contextDescription, ...args);\n        return;\n    }\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types$1._this:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsParseTypeArguments();\n\n      if (this.match(types$1.parenL)) {\n        const call = super.parseMaybeDecoratorArguments(expr);\n        call.typeParameters = typeArguments;\n        return call;\n      }\n\n      this.unexpected(this.state.start, types$1.parenL);\n    }\n\n    return super.parseMaybeDecoratorArguments(expr);\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.state.isAmbientContext && this.match(types$1.comma) && this.lookaheadCharCode() === close) {\n      this.next();\n    } else {\n      super.checkCommaAfterRest(close);\n    }\n  }\n\n  isClassMethod() {\n    return this.isRelational(\"<\") || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(types$1.bang) || this.match(types$1.colon) || super.isClassProperty();\n  }\n\n  parseMaybeDefault(...args) {\n    const node = super.parseMaybeDefault(...args);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, TSErrors.TypeAnnotationAfterAssign);\n    }\n\n    return node;\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(types$1.relational, 1);\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  reScan_lt_gt() {\n    if (this.match(types$1.relational)) {\n      const code = this.input.charCodeAt(this.state.start);\n\n      if (code === 60 || code === 62) {\n        this.state.pos -= 1;\n        this.readToken_lt_gt(code);\n      }\n    }\n  }\n\n  toAssignableList(exprList) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n      if (!expr) continue;\n\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          exprList[i] = this.typeCastToParameter(expr);\n          break;\n\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n          if (!this.state.maybeInArrowParameters) {\n            exprList[i] = this.typeCastToParameter(expr);\n          } else {\n            this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);\n          }\n\n          break;\n      }\n    }\n\n    return super.toAssignableList(...arguments);\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  shouldParseArrow(params) {\n    if (this.match(types$1.colon)) {\n      return params.every(expr => this.isAssignable(expr, true));\n    }\n\n    return super.shouldParseArrow(params);\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types$1.colon) || super.shouldParseAsyncArrow();\n  }\n\n  canHaveLeadingDecorator() {\n    return super.canHaveLeadingDecorator() || this.isAbstractClass();\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArguments());\n      if (typeArguments) node.typeParameters = typeArguments;\n    }\n\n    return super.jsxParseOpeningElementAfterName(node);\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    const baseCount = super.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const firstParam = params[0];\n    const hasContextParam = firstParam && this.isThisParam(firstParam);\n    return hasContextParam ? baseCount + 1 : baseCount;\n  }\n\n  parseCatchClauseParam() {\n    const param = super.parseCatchClauseParam();\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      param.typeAnnotation = type;\n      this.resetEndLocation(param);\n    }\n\n    return param;\n  }\n\n  tsInAmbientContext(cb) {\n    const oldIsAmbientContext = this.state.isAmbientContext;\n    this.state.isAmbientContext = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.isAmbientContext = oldIsAmbientContext;\n    }\n  }\n\n  parseClass(node, ...args) {\n    const oldInAbstractClass = this.state.inAbstractClass;\n    this.state.inAbstractClass = !!node.abstract;\n\n    try {\n      return super.parseClass(node, ...args);\n    } finally {\n      this.state.inAbstractClass = oldInAbstractClass;\n    }\n  }\n\n  tsParseAbstractDeclaration(node) {\n    if (this.match(types$1._class)) {\n      node.abstract = true;\n      return this.parseClass(node, true, false);\n    } else if (this.isContextual(\"interface\")) {\n      if (!this.hasFollowingLineBreak()) {\n        node.abstract = true;\n        this.raise(node.start, TSErrors.NonClassMethodPropertyHasAbstractModifer);\n        this.next();\n        return this.tsParseInterfaceDeclaration(node);\n      }\n    } else {\n      this.unexpected(null, types$1._class);\n    }\n  }\n\n  parseMethod(...args) {\n    const method = super.parseMethod(...args);\n\n    if (method.abstract) {\n      const hasBody = this.hasPlugin(\"estree\") ? !!method.value.body : !!method.body;\n\n      if (hasBody) {\n        const {\n          key\n        } = method;\n        this.raise(method.start, TSErrors.AbstractMethodHasImplementation, key.type === \"Identifier\" && !method.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`);\n      }\n    }\n\n    return method;\n  }\n\n  tsParseTypeParameterName() {\n    const typeName = this.parseIdentifier();\n    return typeName.name;\n  }\n\n  shouldParseAsAmbientContext() {\n    return !!this.getPluginOption(\"typescript\", \"dts\");\n  }\n\n  parse() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n\n    return super.parse();\n  }\n\n  getExpression() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n\n    return super.getExpression();\n  }\n\n};\n\ntypes$1.placeholder = new TokenType(\"%%\", {\n  startsExpr: true\n});\nconst PlaceHolderErrors = makeErrorTemplates({\n  ClassNameIsRequired: \"A class name is required.\"\n}, ErrorCodes.SyntaxError);\n\nvar placeholders = superClass => class extends superClass {\n  parsePlaceholder(expectedNode) {\n    if (this.match(types$1.placeholder)) {\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      node.name = super.parseIdentifier(true);\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      this.expect(types$1.placeholder);\n      return this.finishPlaceholder(node, expectedNode);\n    }\n  }\n\n  finishPlaceholder(node, expectedNode) {\n    const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n    node.expectedNode = expectedNode;\n    return isFinished ? node : this.finishNode(node, \"Placeholder\");\n  }\n\n  getTokenFromCode(code) {\n    if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {\n      return this.finishOp(types$1.placeholder, 2);\n    }\n\n    return super.getTokenFromCode(...arguments);\n  }\n\n  parseExprAtom() {\n    return this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments);\n  }\n\n  parseIdentifier() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(...arguments);\n  }\n\n  checkReservedWord(word) {\n    if (word !== undefined) super.checkReservedWord(...arguments);\n  }\n\n  parseBindingAtom() {\n    return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments);\n  }\n\n  checkLVal(expr) {\n    if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n  }\n\n  toAssignable(node) {\n    if (node && node.type === \"Placeholder\" && node.expectedNode === \"Expression\") {\n      node.expectedNode = \"Pattern\";\n      return node;\n    }\n\n    return super.toAssignable(...arguments);\n  }\n\n  isLet(context) {\n    if (super.isLet(context)) {\n      return true;\n    }\n\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n\n    if (context) return false;\n    const nextToken = this.lookahead();\n\n    if (nextToken.type === types$1.placeholder) {\n      return true;\n    }\n\n    return false;\n  }\n\n  verifyBreakContinue(node) {\n    if (node.label && node.label.type === \"Placeholder\") return;\n    super.verifyBreakContinue(...arguments);\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type !== \"Placeholder\" || expr.extra && expr.extra.parenthesized) {\n      return super.parseExpressionStatement(...arguments);\n    }\n\n    if (this.match(types$1.colon)) {\n      const stmt = node;\n      stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n      this.next();\n      stmt.body = this.parseStatement(\"label\");\n      return this.finishNode(stmt, \"LabeledStatement\");\n    }\n\n    this.semicolon();\n    node.name = expr.name;\n    return this.finishPlaceholder(node, \"Statement\");\n  }\n\n  parseBlock() {\n    return this.parsePlaceholder(\"BlockStatement\") || super.parseBlock(...arguments);\n  }\n\n  parseFunctionId() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(...arguments);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n\n    if (placeholder) {\n      if (this.match(types$1._extends) || this.match(types$1.placeholder) || this.match(types$1.braceL)) {\n        node.id = placeholder;\n      } else if (optionalId || !isStatement) {\n        node.id = null;\n        node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n        return this.finishNode(node, type);\n      } else {\n        this.unexpected(null, PlaceHolderErrors.ClassNameIsRequired);\n      }\n    } else {\n      this.parseClassId(node, isStatement, optionalId);\n    }\n\n    this.parseClassSuper(node);\n    node.body = this.parsePlaceholder(\"ClassBody\") || this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, type);\n  }\n\n  parseExport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseExport(...arguments);\n\n    if (!this.isContextual(\"from\") && !this.match(types$1.comma)) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    this.expectPlugin(\"exportDefaultFrom\");\n    const specifier = this.startNode();\n    specifier.exported = placeholder;\n    node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n    return super.parseExport(node);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types$1._default)) {\n      const next = this.nextTokenStart();\n\n      if (this.isUnparsedContextual(next, \"from\")) {\n        if (this.input.startsWith(types$1.placeholder.label, this.nextTokenStartSince(next + 4))) {\n          return true;\n        }\n      }\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (node.specifiers && node.specifiers.length > 0) {\n      return true;\n    }\n\n    return super.maybeParseExportDefaultSpecifier(...arguments);\n  }\n\n  checkExport(node) {\n    const {\n      specifiers\n    } = node;\n\n    if (specifiers != null && specifiers.length) {\n      node.specifiers = specifiers.filter(node => node.exported.type === \"Placeholder\");\n    }\n\n    super.checkExport(node);\n    node.specifiers = specifiers;\n  }\n\n  parseImport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseImport(...arguments);\n    node.specifiers = [];\n\n    if (!this.isContextual(\"from\") && !this.match(types$1.comma)) {\n      node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    const specifier = this.startNodeAtNode(placeholder);\n    specifier.local = placeholder;\n    this.finishNode(specifier, \"ImportDefaultSpecifier\");\n    node.specifiers.push(specifier);\n\n    if (this.eat(types$1.comma)) {\n      const hasStarImport = this.maybeParseStarImportSpecifier(node);\n      if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n    }\n\n    this.expectContextual(\"from\");\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    return this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource(...arguments);\n  }\n\n};\n\nvar v8intrinsic = superClass => class extends superClass {\n  parseV8Intrinsic() {\n    if (this.match(types$1.modulo)) {\n      const v8IntrinsicStart = this.state.start;\n      const node = this.startNode();\n      this.eat(types$1.modulo);\n\n      if (this.match(types$1.name)) {\n        const name = this.parseIdentifierName(this.state.start);\n        const identifier = this.createIdentifier(node, name);\n        identifier.type = \"V8IntrinsicIdentifier\";\n\n        if (this.match(types$1.parenL)) {\n          return identifier;\n        }\n      }\n\n      this.unexpected(v8IntrinsicStart);\n    }\n  }\n\n  parseExprAtom() {\n    return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n  }\n\n};\n\nfunction hasPlugin(plugins, name) {\n  return plugins.some(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n}\n\nfunction getPluginOption(plugins, name, option) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nfunction validatePlugins(plugins) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");\n    }\n\n    const decoratorsBeforeExport = getPluginOption(plugins, \"decorators\", \"decoratorsBeforeExport\");\n\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" + \" whose value must be a boolean. If you are migrating from\" + \" Babylon/Babel 6 or want to use the old decorators proposal, you\" + \" should use the 'decorators-legacy' plugin instead of 'decorators'.\");\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(`\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`);\n    }\n\n    const tupleSyntaxIsHash = hasPlugin(plugins, \"recordAndTuple\") && getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\") === \"hash\";\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\"Cannot combine placeholders plugin and Hack-style pipes.\");\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\"Cannot combine v8intrinsic plugin and Hack-style pipes.\");\n      }\n\n      const topicToken = getPluginOption(plugins, \"pipelineOperator\", \"topicToken\");\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n        throw new Error(`\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`);\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error('Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.');\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error('Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.');\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\"Cannot combine importAssertions and moduleAttributes plugins.\");\n      }\n\n      const moduleAttributesVerionPluginOption = getPluginOption(plugins, \"moduleAttributes\", \"version\");\n\n      if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n        throw new Error(\"The 'moduleAttributes' plugin requires a 'version' option,\" + \" representing the last proposal update. Currently, the\" + \" only supported value is 'may-2020'.\");\n      }\n    }\n  }\n\n  if (hasPlugin(plugins, \"recordAndTuple\") && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"))) {\n    throw new Error(\"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" + RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"));\n  }\n\n  if (hasPlugin(plugins, \"asyncDoExpressions\") && !hasPlugin(plugins, \"doExpressions\")) {\n    const error = new Error(\"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\");\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n}\n\nconst mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders\n};\nconst mixinPluginNames = Object.keys(mixinPlugins);\nconst defaultOptions = {\n  sourceType: \"script\",\n  sourceFilename: undefined,\n  startLine: 1,\n  allowAwaitOutsideFunction: false,\n  allowReturnOutsideFunction: false,\n  allowImportExportEverywhere: false,\n  allowSuperOutsideMethod: false,\n  allowUndeclaredExports: false,\n  plugins: [],\n  strictMode: null,\n  ranges: false,\n  tokens: false,\n  createParenthesizedExpressions: false,\n  errorRecovery: false,\n  attachComment: true\n};\n\nfunction getOptions(opts) {\n  const options = {};\n\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n\n  return options;\n}\n\nconst unwrapParenthesizedExpression = node => {\n  return node.type === \"ParenthesizedExpression\" ? unwrapParenthesizedExpression(node.expression) : node;\n};\n\nclass LValParser extends NodeUtils {\n  toAssignable(node, isLHS = false) {\n    var _node$extra, _node$extra3;\n\n    let parenthesized = undefined;\n\n    if (node.type === \"ParenthesizedExpression\" || (_node$extra = node.extra) != null && _node$extra.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n\n      if (isLHS) {\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordParenthesizedIdentifierError(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n        }\n      } else {\n        this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n\n        for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {\n          var _node$extra2;\n\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (isLast && prop.type === \"RestElement\" && (_node$extra2 = node.extra) != null && _node$extra2.trailingComma) {\n            this.raiseRestNotLast(node.extra.trailingComma);\n          }\n        }\n\n        break;\n\n      case \"ObjectProperty\":\n        this.toAssignable(node.value, isLHS);\n        break;\n\n      case \"SpreadElement\":\n        {\n          this.checkToRestConversion(node);\n          node.type = \"RestElement\";\n          const arg = node.argument;\n          this.toAssignable(arg, isLHS);\n          break;\n        }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingComma, isLHS);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(node.left.end, ErrorMessages.MissingEqInAssignment);\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.toAssignable(parenthesized, isLHS);\n        break;\n    }\n\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(prop, isLast, isLHS) {\n    if (prop.type === \"ObjectMethod\") {\n      const error = prop.kind === \"get\" || prop.kind === \"set\" ? ErrorMessages.PatternHasAccessor : ErrorMessages.PatternHasMethod;\n      this.raise(prop.key.start, error);\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raiseRestNotLast(prop.start);\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaPos, isLHS) {\n    let end = exprList.length;\n\n    if (end) {\n      const last = exprList[end - 1];\n\n      if ((last == null ? void 0 : last.type) === \"RestElement\") {\n        --end;\n      } else if ((last == null ? void 0 : last.type) === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        let arg = last.argument;\n        this.toAssignable(arg, isLHS);\n        arg = unwrapParenthesizedExpression(arg);\n\n        if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\" && arg.type !== \"ObjectPattern\") {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaPos) {\n          this.raiseTrailingCommaAfterRest(trailingCommaPos);\n        }\n\n        --end;\n      }\n    }\n\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n\n      if (elt) {\n        this.toAssignable(elt, isLHS);\n\n        if (elt.type === \"RestElement\") {\n          this.raiseRestNotLast(elt.start);\n        }\n      }\n    }\n\n    return exprList;\n  }\n\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\":\n        {\n          const last = node.properties.length - 1;\n          return node.properties.every((prop, i) => {\n            return prop.type !== \"ObjectMethod\" && (i === last || prop.type !== \"SpreadElement\") && this.isAssignable(prop);\n          });\n        }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(element => element === null || this.isAssignable(element));\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    return exprList;\n  }\n\n  toReferencedListDeep(exprList, isParenthesizedExpr) {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if ((expr == null ? void 0 : expr.type) === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  parseSpread(refExpressionErrors, refNeedsArrowPos) {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined, refNeedsArrowPos);\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  parseRestBinding() {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types$1.bracketL:\n        {\n          const node = this.startNode();\n          this.next();\n          node.elements = this.parseBindingList(types$1.bracketR, 93, true);\n          return this.finishNode(node, \"ArrayPattern\");\n        }\n\n      case types$1.braceL:\n        return this.parseObjectLike(types$1.braceR, true);\n    }\n\n    return this.parseIdentifier();\n  }\n\n  parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma);\n      }\n\n      if (allowEmpty && this.match(types$1.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(types$1.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        this.checkCommaAfterRest(closeCharCode);\n        this.expect(close);\n        break;\n      } else {\n        const decorators = [];\n\n        if (this.match(types$1.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, ErrorMessages.UnsupportedParameterDecorator);\n        }\n\n        while (this.match(types$1.at)) {\n          decorators.push(this.parseDecorator());\n        }\n\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n\n    return elts;\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseAssignableListItemTypes(param) {\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    var _startLoc, _startPos, _left;\n\n    startLoc = (_startLoc = startLoc) != null ? _startLoc : this.state.startLoc;\n    startPos = (_startPos = startPos) != null ? _startPos : this.state.start;\n    left = (_left = left) != null ? _left : this.parseBindingAtom();\n    if (!this.eat(types$1.eq)) return left;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  checkLVal(expr, contextDescription, bindingType = BIND_NONE, checkClashes, disallowLetBinding, strictModeChanged = false) {\n    switch (expr.type) {\n      case \"Identifier\":\n        {\n          const {\n            name\n          } = expr;\n\n          if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(name, this.inModule) : isStrictBindOnlyReservedWord(name))) {\n            this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.StrictEvalArguments : ErrorMessages.StrictEvalArgumentsBinding, name);\n          }\n\n          if (checkClashes) {\n            if (checkClashes.has(name)) {\n              this.raise(expr.start, ErrorMessages.ParamDupe);\n            } else {\n              checkClashes.add(name);\n            }\n          }\n\n          if (disallowLetBinding && name === \"let\") {\n            this.raise(expr.start, ErrorMessages.LetInLexicalBinding);\n          }\n\n          if (!(bindingType & BIND_NONE)) {\n            this.scope.declareName(name, bindingType, expr.start);\n          }\n\n          break;\n        }\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(expr.start, ErrorMessages.InvalidPropertyBindingPattern);\n        }\n\n        break;\n\n      case \"ObjectPattern\":\n        for (let prop of expr.properties) {\n          if (this.isObjectProperty(prop)) prop = prop.value;else if (this.isObjectMethod(prop)) continue;\n          this.checkLVal(prop, \"object destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\n        }\n\n        break;\n\n      case \"ArrayPattern\":\n        for (const elem of expr.elements) {\n          if (elem) {\n            this.checkLVal(elem, \"array destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\n          }\n        }\n\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(expr.left, \"assignment pattern\", bindingType, checkClashes);\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(expr.argument, \"rest element\", bindingType, checkClashes);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(expr.expression, \"parenthesized expression\", bindingType, checkClashes);\n        break;\n\n      default:\n        {\n          this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.InvalidLhs : ErrorMessages.InvalidLhsBinding, contextDescription);\n        }\n    }\n  }\n\n  checkToRestConversion(node) {\n    if (node.argument.type !== \"Identifier\" && node.argument.type !== \"MemberExpression\") {\n      this.raise(node.argument.start, ErrorMessages.InvalidRestAssignmentPattern);\n    }\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.match(types$1.comma)) {\n      if (this.lookaheadCharCode() === close) {\n        this.raiseTrailingCommaAfterRest(this.state.start);\n      } else {\n        this.raiseRestNotLast(this.state.start);\n      }\n    }\n  }\n\n  raiseRestNotLast(pos) {\n    throw this.raise(pos, ErrorMessages.ElementAfterRest);\n  }\n\n  raiseTrailingCommaAfterRest(pos) {\n    this.raise(pos, ErrorMessages.RestTrailingComma);\n  }\n\n}\n\nclass ExpressionParser extends LValParser {\n  checkProto(prop, isRecord, protoRef, refExpressionErrors) {\n    if (prop.type === \"SpreadElement\" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) {\n      return;\n    }\n\n    const key = prop.key;\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(key.start, ErrorMessages.RecordNoProto);\n        return;\n      }\n\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          if (refExpressionErrors.doubleProto === -1) {\n            refExpressionErrors.doubleProto = key.start;\n          }\n        } else {\n          this.raise(key.start, ErrorMessages.DuplicateProto);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr, potentialArrowAt) {\n    return expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt;\n  }\n\n  getExpression() {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n\n    if (!this.match(types$1.eof)) {\n      this.unexpected();\n    }\n\n    this.finalizeRemainingComments();\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n\n    return expr;\n  }\n\n  parseExpression(disallowIn, refExpressionErrors) {\n    if (disallowIn) {\n      return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n    }\n\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  parseExpressionBase(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n\n    if (this.match(types$1.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n\n      while (this.eat(types$1.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n\n    return expr;\n  }\n\n  parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse) {\n    return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));\n  }\n\n  parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse) {\n    return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));\n  }\n\n  setOptionalParametersError(refExpressionErrors, resultError) {\n    var _resultError$pos;\n\n    refExpressionErrors.optionalParameters = (_resultError$pos = resultError == null ? void 0 : resultError.pos) != null ? _resultError$pos : this.state.start;\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    if (this.isContextual(\"yield\")) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n\n    if (this.match(types$1.parenL) || this.match(types$1.name)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n\n    if (this.state.type.isAssign) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n      const leftIsHackPipeExpression = left.type === \"BinaryExpression\" && left.operator === \"|>\" && this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"hack\";\n\n      if (leftIsHackPipeExpression) {\n        throw this.raise(this.state.start, ErrorMessages.PipeBodyIsTighter, operator);\n      }\n\n      if (this.match(types$1.eq)) {\n        node.left = this.toAssignable(left, true);\n        refExpressionErrors.doubleProto = -1;\n      } else {\n        node.left = left;\n      }\n\n      if (refExpressionErrors.shorthandAssign >= node.left.start) {\n        refExpressionErrors.shorthandAssign = -1;\n      }\n\n      this.checkLVal(left, \"assignment expression\");\n      this.next();\n      node.right = this.parseMaybeAssign();\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  parseMaybeConditional(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n    if (this.eat(types$1.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(types$1.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprOps(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnary(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    let prec = this.state.type.binop;\n\n    if (prec != null && (this.prodParam.hasIn || !this.match(types$1._in))) {\n      if (prec > minPrec) {\n        const op = this.state.type;\n\n        if (op === types$1.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n\n          this.checkPipelineAtInfixOperator(left, leftStartPos);\n        }\n\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n        const logical = op === types$1.logicalOR || op === types$1.logicalAND;\n        const coalesce = op === types$1.nullishCoalescing;\n\n        if (coalesce) {\n          prec = types$1.logicalAND.binop;\n        }\n\n        this.next();\n\n        if (op === types$1.pipeline && this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"minimal\") {\n          if (this.match(types$1.name) && this.state.value === \"await\" && this.prodParam.hasAwait) {\n            throw this.raise(this.state.start, ErrorMessages.UnexpectedAwaitAfterPipelineBody);\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(node, logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\");\n        const nextOp = this.state.type;\n\n        if (coalesce && (nextOp === types$1.logicalOR || nextOp === types$1.logicalAND) || logical && nextOp === types$1.nullishCoalescing) {\n          throw this.raise(this.state.start, ErrorMessages.MixingCoalesceWithLogical);\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n\n    return left;\n  }\n\n  parseExprOpRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    switch (op) {\n      case types$1.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              const bodyExpr = this.parseHackPipeBody(op, prec);\n              this.checkHackPipeBodyEarlyErrors(startPos);\n              return bodyExpr;\n            });\n\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              const childExpr = this.parseHackPipeBody(op, prec);\n              return this.parseSmartPipelineBodyInStyle(childExpr, startPos, startLoc);\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  parseExprOpBaseRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, op.rightAssociative ? prec - 1 : prec);\n  }\n\n  parseHackPipeBody(op, prec) {\n    const bodyIsInGeneratorContext = this.prodParam.hasYield;\n    const bodyIsYieldExpression = bodyIsInGeneratorContext && this.isContextual(\"yield\");\n\n    if (bodyIsYieldExpression) {\n      throw this.raise(this.state.start, ErrorMessages.PipeBodyIsTighter, this.state.value);\n    } else {\n      return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  checkExponentialAfterUnary(node) {\n    if (this.match(types$1.exponent)) {\n      this.raise(node.argument.start, ErrorMessages.UnexpectedTokenUnaryExponentiation);\n    }\n  }\n\n  parseMaybeUnary(refExpressionErrors, sawUnary) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(\"await\");\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startPos, startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n\n    const update = this.match(types$1.incDec);\n    const node = this.startNode();\n\n    if (this.state.type.prefix) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(types$1._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n\n      const isDelete = this.match(types$1._delete);\n      this.next();\n      node.argument = this.parseMaybeUnary(null, true);\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(node.start, ErrorMessages.StrictDelete);\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(node.start, ErrorMessages.DeletePrivateField);\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) this.checkExponentialAfterUnary(node);\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(node, update, refExpressionErrors);\n\n    if (isAwait) {\n      const startsExpr = this.hasPlugin(\"v8intrinsic\") ? this.state.type.startsExpr : this.state.type.startsExpr && !this.match(types$1.modulo);\n\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(startPos, ErrorMessages.AwaitNotInAsyncContext);\n        return this.parseAwait(startPos, startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  parseUpdate(node, update, refExpressionErrors) {\n    if (update) {\n      this.checkLVal(node.argument, \"prefix operation\");\n      return this.finishNode(node, \"UpdateExpression\");\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n\n    while (this.state.type.postfix && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprSubscripts(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false\n    };\n\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n\n    return base;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!noCalls && this.eat(types$1.doubleColon)) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (this.match(types$1.backQuote)) {\n      return this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (this.match(types$1.questionDot)) {\n      if (noCalls && this.lookaheadCharCode() === 40) {\n        state.stop = true;\n        return base;\n      }\n\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(types$1.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional);\n    } else if (optional || this.match(types$1.bracketL) || this.eat(types$1.dot)) {\n      return this.parseMember(base, startPos, startLoc, state, optional);\n    } else {\n      state.stop = true;\n      return base;\n    }\n  }\n\n  parseMember(base, startPos, startLoc, state, optional) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const computed = this.eat(types$1.bracketL);\n    node.object = base;\n    node.computed = computed;\n    const privateName = !computed && this.match(types$1.privateName) && this.state.value;\n    const property = computed ? this.parseExpression() : privateName ? this.parsePrivateName() : this.parseIdentifier(true);\n\n    if (privateName !== false) {\n      if (node.object.type === \"Super\") {\n        this.raise(startPos, ErrorMessages.SuperPrivateField);\n      }\n\n      this.classScope.usePrivateName(privateName, property.start);\n    }\n\n    node.property = property;\n\n    if (computed) {\n      this.expect(types$1.bracketR);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  parseBind(base, startPos, startLoc, noCalls, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startPos, startLoc, noCalls);\n  }\n\n  parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional) {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors = null;\n    this.state.maybeInArrowParameters = true;\n    this.next();\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n\n    if (state.maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(types$1.parenR);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(types$1.parenR, base.type === \"Import\", base.type !== \"Super\", node, refExpressionErrors);\n    }\n\n    this.finishCallExpression(node, state.optionalChainMember);\n\n    if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      state.stop = true;\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      node = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);\n    } else {\n      if (state.maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n\n      this.toReferencedArguments(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  toReferencedArguments(node, isParenthesizedExpr) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  parseTaggedTemplateExpression(base, startPos, startLoc, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n\n    if (state.optionalChainMember) {\n      this.raise(startPos, ErrorMessages.OptionalChainingNoTemplate);\n    }\n\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base) {\n    return base.type === \"Identifier\" && base.name === \"async\" && this.state.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;\n  }\n\n  finishCallExpression(node, optional) {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(node.start, ErrorMessages.ImportCallArity, this.hasPlugin(\"importAssertions\") || this.hasPlugin(\"moduleAttributes\") ? \"one or two arguments\" : \"one argument\");\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(arg.start, ErrorMessages.ImportCallSpreadArgument);\n          }\n        }\n      }\n    }\n\n    return this.finishNode(node, optional ? \"OptionalCallExpression\" : \"CallExpression\");\n  }\n\n  parseCallExpressionArguments(close, dynamicImport, allowPlaceholder, nodeForExtra, refExpressionErrors) {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma);\n\n        if (this.match(close)) {\n          if (dynamicImport && !this.hasPlugin(\"importAssertions\") && !this.hasPlugin(\"moduleAttributes\")) {\n            this.raise(this.state.lastTokStart, ErrorMessages.ImportCallArgumentTrailingComma);\n          }\n\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(false, refExpressionErrors, allowPlaceholder));\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return elts;\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types$1.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    var _call$extra;\n\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(types$1.arrow);\n    this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingComma);\n    setInnerComments(node, call.innerComments);\n    setInnerComments(node, call.callee.trailingComments);\n    return node;\n  }\n\n  parseNoCallExpr() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    let node;\n\n    switch (this.state.type) {\n      case types$1._super:\n        return this.parseSuper();\n\n      case types$1._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(types$1.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(types$1.parenL)) {\n          this.raise(this.state.lastTokStart, ErrorMessages.UnsupportedImport);\n        }\n\n        return this.finishNode(node, \"Import\");\n\n      case types$1._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case types$1.name:\n        {\n          if (this.isContextual(\"module\") && this.lookaheadCharCode() === 123 && !this.hasFollowingLineBreak()) {\n            return this.parseModuleExpression();\n          }\n\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (!containsEsc && id.name === \"async\" && !this.canInsertSemicolon()) {\n            if (this.match(types$1._function)) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseFunction(this.startNodeAtNode(id), undefined, true);\n            } else if (this.match(types$1.name)) {\n              if (this.lookaheadCharCode() === 61) {\n                return this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(id));\n              } else {\n                return id;\n              }\n            } else if (this.match(types$1._do)) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (canBeArrow && this.match(types$1.arrow) && !this.canInsertSemicolon()) {\n            this.next();\n            return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);\n          }\n\n          return id;\n        }\n\n      case types$1._do:\n        {\n          return this.parseDo(this.startNode(), false);\n        }\n\n      case types$1.slash:\n      case types$1.slashAssign:\n        {\n          this.readRegexp();\n          return this.parseRegExpLiteral(this.state.value);\n        }\n\n      case types$1.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case types$1.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case types$1.decimal:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case types$1.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case types$1._null:\n        return this.parseNullLiteral();\n\n      case types$1._true:\n        return this.parseBooleanLiteral(true);\n\n      case types$1._false:\n        return this.parseBooleanLiteral(false);\n\n      case types$1.parenL:\n        {\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          return this.parseParenAndDistinguishExpression(canBeArrow);\n        }\n\n      case types$1.bracketBarL:\n      case types$1.bracketHashL:\n        {\n          return this.parseArrayLike(this.state.type === types$1.bracketBarL ? types$1.bracketBarR : types$1.bracketR, false, true, refExpressionErrors);\n        }\n\n      case types$1.bracketL:\n        {\n          return this.parseArrayLike(types$1.bracketR, true, false, refExpressionErrors);\n        }\n\n      case types$1.braceBarL:\n      case types$1.braceHashL:\n        {\n          return this.parseObjectLike(this.state.type === types$1.braceBarL ? types$1.braceBarR : types$1.braceR, false, true, refExpressionErrors);\n        }\n\n      case types$1.braceL:\n        {\n          return this.parseObjectLike(types$1.braceR, false, false, refExpressionErrors);\n        }\n\n      case types$1._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case types$1.at:\n        this.parseDecorators();\n\n      case types$1._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case types$1._new:\n        return this.parseNewOrNewTarget();\n\n      case types$1.backQuote:\n        return this.parseTemplate(false);\n\n      case types$1.doubleColon:\n        {\n          node = this.startNode();\n          this.next();\n          node.object = null;\n          const callee = node.callee = this.parseNoCallExpr();\n\n          if (callee.type === \"MemberExpression\") {\n            return this.finishNode(node, \"BindExpression\");\n          } else {\n            throw this.raise(callee.start, ErrorMessages.UnsupportedBind);\n          }\n        }\n\n      case types$1.privateName:\n        {\n          const {\n            value,\n            start\n          } = this.state;\n          node = this.parsePrivateName();\n\n          if (this.match(types$1._in)) {\n            this.classScope.usePrivateName(value, start);\n          } else {\n            this.raise(start, ErrorMessages.PrivateInExpectedIn, value);\n          }\n\n          return node;\n        }\n\n      case types$1.moduloAssign:\n        if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"hack\" && this.getPluginOption(\"pipelineOperator\", \"topicToken\") === \"%\") {\n          this.state.value = \"%\";\n          this.state.type = types$1.modulo;\n          this.state.pos--;\n          this.state.end--;\n          this.state.endLoc.column--;\n        } else {\n          throw this.unexpected();\n        }\n\n      case types$1.modulo:\n      case types$1.hash:\n        {\n          const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n          if (pipeProposal) {\n            node = this.startNode();\n            const start = this.state.start;\n            const tokenType = this.state.type;\n            this.next();\n            return this.finishTopicReference(node, start, pipeProposal, tokenType);\n          }\n        }\n\n      case types$1.relational:\n        {\n          if (this.state.value === \"<\") {\n            const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n\n            if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {\n              this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n            }\n          }\n        }\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  finishTopicReference(node, start, pipeProposal, tokenType) {\n    if (this.testTopicReferenceConfiguration(pipeProposal, start, tokenType)) {\n      let nodeType;\n\n      if (pipeProposal === \"smart\") {\n        nodeType = \"PipelinePrimaryTopicReference\";\n      } else {\n        nodeType = \"TopicReference\";\n      }\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        if (pipeProposal === \"smart\") {\n          this.raise(start, ErrorMessages.PrimaryTopicNotAllowed);\n        } else {\n          this.raise(start, ErrorMessages.PipeTopicUnbound);\n        }\n      }\n\n      this.registerTopicReference();\n      return this.finishNode(node, nodeType);\n    } else {\n      throw this.raise(start, ErrorMessages.PipeTopicUnconfiguredToken, tokenType.label);\n    }\n  }\n\n  testTopicReferenceConfiguration(pipeProposal, start, tokenType) {\n    switch (pipeProposal) {\n      case \"hack\":\n        {\n          const pluginTopicToken = this.getPluginOption(\"pipelineOperator\", \"topicToken\");\n          return tokenType.label === pluginTopicToken;\n        }\n\n      case \"smart\":\n        return tokenType === types$1.hash;\n\n      default:\n        throw this.raise(start, ErrorMessages.PipeTopicRequiresHackPipes);\n    }\n  }\n\n  parseAsyncArrowUnaryFunction(node) {\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.pos, ErrorMessages.LineTerminatorBeforeArrow);\n    }\n\n    this.expect(types$1.arrow);\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  parseDo(node, isAsync) {\n    this.expectPlugin(\"doExpressions\");\n\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n\n    node.async = isAsync;\n    this.next();\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    if (isAsync) {\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  parseSuper() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(types$1.parenL) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(node.start, ErrorMessages.SuperNotAllowed);\n    } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(node.start, ErrorMessages.UnexpectedSuper);\n    }\n\n    if (!this.match(types$1.parenL) && !this.match(types$1.bracketL) && !this.match(types$1.dot)) {\n      this.raise(node.start, ErrorMessages.UnsupportedSuper);\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parseMaybePrivateName(isPrivateNameAllowed) {\n    const isPrivate = this.match(types$1.privateName);\n\n    if (isPrivate) {\n      if (!isPrivateNameAllowed) {\n        this.raise(this.state.start + 1, ErrorMessages.UnexpectedPrivateField);\n      }\n\n      return this.parsePrivateName();\n    } else {\n      return this.parseIdentifier(true);\n    }\n  }\n\n  parsePrivateName() {\n    const node = this.startNode();\n    const id = this.startNodeAt(this.state.start + 1, new Position(this.state.curLine, this.state.start + 1 - this.state.lineStart));\n    const name = this.state.value;\n    this.next();\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.prodParam.hasYield && this.match(types$1.dot)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"function\");\n      this.next();\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(node, meta, propertyName) {\n    node.meta = meta;\n\n    if (meta.name === \"function\" && propertyName === \"sent\") {\n      if (this.isContextual(propertyName)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        this.unexpected();\n      }\n    }\n\n    const containsEsc = this.state.containsEsc;\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(node.property.start, ErrorMessages.UnsupportedMetaProperty, meta.name, propertyName);\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  parseImportMetaProperty(node) {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next();\n\n    if (this.isContextual(\"meta\")) {\n      if (!this.inModule) {\n        this.raise(id.start, SourceTypeModuleErrorMessages.ImportMetaOutsideModule);\n      }\n\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode(value, type, node) {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n\n  parseLiteral(value, type) {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value) {\n    return this.parseLiteral(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value) {\n    return this.parseLiteral(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value) {\n    return this.parseLiteral(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value) {\n    return this.parseLiteral(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value) {\n    const node = this.parseLiteral(value.value, \"RegExpLiteral\");\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value) {\n    const node = this.startNode();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let val;\n    this.next();\n    this.expressionScope.enter(newArrowHeadScope());\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStart;\n    let optionalCommaStart;\n\n    while (!this.match(types$1.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma, refExpressionErrors.optionalParameters === -1 ? null : refExpressionErrors.optionalParameters);\n\n        if (this.match(types$1.parenR)) {\n          optionalCommaStart = this.state.start;\n          break;\n        }\n      }\n\n      if (this.match(types$1.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStart = this.state.start;\n        exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc));\n        this.checkCommaAfterRest(41);\n        break;\n      } else {\n        exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem));\n      }\n    }\n\n    const innerEndPos = this.state.lastTokEnd;\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(types$1.parenR);\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n\n    if (canBeArrow && this.shouldParseArrow(exprList) && (arrowNode = this.parseArrow(arrowNode))) {\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStart);\n    }\n\n    if (optionalCommaStart) this.unexpected(optionalCommaStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    this.checkExpressionErrors(refExpressionErrors, true);\n    this.toReferencedListDeep(exprList, true);\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNode(val, \"SequenceExpression\");\n      val.end = innerEndPos;\n      val.loc.end = innerEndLoc;\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  shouldParseArrow(params) {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node) {\n    if (this.eat(types$1.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    return node;\n  }\n\n  parseNewOrNewTarget() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(types$1.dot)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(metaProp.start, ErrorMessages.UnexpectedNewTarget);\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  parseNew(node) {\n    node.callee = this.parseNoCallExpr();\n\n    if (node.callee.type === \"Import\") {\n      this.raise(node.callee.start, ErrorMessages.ImportCallNotNewExpression);\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(this.state.lastTokEnd, ErrorMessages.OptionalChainingNoNew);\n    } else if (this.eat(types$1.questionDot)) {\n      this.raise(this.state.start, ErrorMessages.OptionalChainingNoNew);\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node) {\n    if (this.eat(types$1.parenL)) {\n      const args = this.parseExprList(types$1.parenR);\n      this.toReferencedList(args);\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  parseTemplateElement(isTagged) {\n    const elem = this.startNode();\n\n    if (this.state.value === null) {\n      if (!isTagged) {\n        this.raise(this.state.start + 1, ErrorMessages.InvalidEscapeSequenceTemplate);\n      }\n    }\n\n    elem.value = {\n      raw: this.input.slice(this.state.start, this.state.end).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.state.value\n    };\n    this.next();\n    elem.tail = this.match(types$1.backQuote);\n    return this.finishNode(elem, \"TemplateElement\");\n  }\n\n  parseTemplate(isTagged) {\n    const node = this.startNode();\n    this.next();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n\n    while (!curElt.tail) {\n      this.expect(types$1.dollarBraceL);\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.expect(types$1.braceR);\n      node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n    }\n\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  parseTemplateSubstitution() {\n    return this.parseExpression();\n  }\n\n  parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma);\n\n        if (this.match(close)) {\n          this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n          break;\n        }\n      }\n\n      const prop = this.parsePropertyDefinition(isPattern, refExpressionErrors);\n\n      if (!isPattern) {\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (isRecord && !this.isObjectProperty(prop) && prop.type !== \"SpreadElement\") {\n        this.raise(prop.start, ErrorMessages.InvalidRecordProperty);\n      }\n\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    this.next();\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n\n    return this.finishNode(node, type);\n  }\n\n  maybeAsyncOrAccessorProp(prop) {\n    return !prop.computed && prop.key.type === \"Identifier\" && (this.isLiteralPropertyName() || this.match(types$1.bracketL) || this.match(types$1.star));\n  }\n\n  parsePropertyDefinition(isPattern, refExpressionErrors) {\n    let decorators = [];\n\n    if (this.match(types$1.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(this.state.start, ErrorMessages.UnsupportedPropertyDecorator);\n      }\n\n      while (this.match(types$1.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isGenerator = false;\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(types$1.ellipsis)) {\n      if (decorators.length) this.unexpected();\n\n      if (isPattern) {\n        this.next();\n        prop.argument = this.parseIdentifier();\n        this.checkCommaAfterRest(125);\n        return this.finishNode(prop, \"RestElement\");\n      }\n\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (isPattern || refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    if (!isPattern) {\n      isGenerator = this.eat(types$1.star);\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, false);\n\n    if (!isPattern && !isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(types$1.star);\n        this.parsePropertyName(prop, false);\n      }\n\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n\n        if (this.match(types$1.star)) {\n          isGenerator = true;\n          this.raise(this.state.pos, ErrorMessages.AccessorIsGenerator, keyName);\n          this.next();\n        }\n\n        this.parsePropertyName(prop, false);\n      }\n    }\n\n    this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.params;\n  }\n\n  checkGetterSetterParams(method) {\n    var _params;\n\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const start = method.start;\n\n    if (params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, ErrorMessages.BadGetterArity);\n      } else {\n        this.raise(start, ErrorMessages.BadSetterArity);\n      }\n    }\n\n    if (method.kind === \"set\" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === \"RestElement\") {\n      this.raise(start, ErrorMessages.BadSetterRestParameter);\n    }\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    if (isAccessor) {\n      this.parseMethod(prop, isGenerator, false, false, false, \"ObjectMethod\");\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(types$1.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(prop, isGenerator, isAsync, false, false, \"ObjectMethod\");\n    }\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    prop.shorthand = false;\n\n    if (this.eat(types$1.colon)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      this.checkReservedWord(prop.key.name, prop.key.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startPos, startLoc, cloneIdentifier(prop.key));\n      } else if (this.match(types$1.eq) && refExpressionErrors) {\n        if (refExpressionErrors.shorthandAssign === -1) {\n          refExpressionErrors.shorthandAssign = this.state.start;\n        }\n\n        prop.value = this.parseMaybeDefault(startPos, startLoc, cloneIdentifier(prop.key));\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n\n      prop.shorthand = true;\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n    if (!node) this.unexpected();\n    return node;\n  }\n\n  parsePropertyName(prop, isPrivateNameAllowed) {\n    if (this.eat(types$1.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(types$1.bracketR);\n    } else {\n      const oldInPropertyName = this.state.inPropertyName;\n      this.state.inPropertyName = true;\n      const type = this.state.type;\n      prop.key = type === types$1.num || type === types$1.string || type === types$1.bigint || type === types$1.decimal ? this.parseExprAtom() : this.parseMaybePrivateName(isPrivateNameAllowed);\n\n      if (type !== types$1.privateName) {\n        prop.computed = false;\n      }\n\n      this.state.inPropertyName = oldInPropertyName;\n    }\n\n    return prop.key;\n  }\n\n  initFunction(node, isAsync) {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor;\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    return node;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(node, isTuple ? \"TupleExpression\" : \"ArrayExpression\");\n  }\n\n  parseArrowExpression(node, params, isAsync, trailingCommaPos) {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n\n    if (!this.match(types$1.bracketL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaPos);\n    }\n\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(node, params, trailingCommaPos) {\n    node.params = this.toAssignableList(params, trailingCommaPos, false);\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    const isExpression = allowExpression && !this.match(types$1.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(true, false, hasStrictModeDirective => {\n        const nonSimple = !this.isSimpleParamList(node.params);\n\n        if (hasStrictModeDirective && nonSimple) {\n          const errorPos = (node.kind === \"method\" || node.kind === \"constructor\") && !!node.key ? node.key.end : node.start;\n          this.raise(errorPos, ErrorMessages.IllegalLanguageModeDirective);\n        }\n\n        const strictModeChanged = !oldStrict && this.state.strict;\n        this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);\n\n        if (this.state.strict && node.id) {\n          this.checkLVal(node.id, \"function name\", BIND_OUTSIDE, undefined, undefined, strictModeChanged);\n        }\n      });\n      this.prodParam.exit();\n      this.expressionScope.exit();\n      this.state.labels = oldLabels;\n    }\n  }\n\n  isSimpleParamList(params) {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n\n    return true;\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {\n    const checkClashes = new Set();\n\n    for (const param of node.params) {\n      this.checkLVal(param, \"function parameter list\", BIND_VAR, allowDuplicates ? null : checkClashes, undefined, strictModeChanged);\n    }\n  }\n\n  parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma);\n\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n\n    return elts;\n  }\n\n  parseExprListItem(allowEmpty, refExpressionErrors, allowPlaceholder) {\n    let elt;\n\n    if (this.match(types$1.comma)) {\n      if (!allowEmpty) {\n        this.raise(this.state.pos, ErrorMessages.UnexpectedToken, \",\");\n      }\n\n      elt = null;\n    } else if (this.match(types$1.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(this.parseSpread(refExpressionErrors), spreadNodeStartPos, spreadNodeStartLoc);\n    } else if (this.match(types$1.question)) {\n      this.expectPlugin(\"partialApplication\");\n\n      if (!allowPlaceholder) {\n        this.raise(this.state.start, ErrorMessages.UnexpectedArgumentPlaceholder);\n      }\n\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem);\n    }\n\n    return elt;\n  }\n\n  parseIdentifier(liberal) {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node, name) {\n    node.name = name;\n    node.loc.identifierName = name;\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos, liberal) {\n    let name;\n    const {\n      start,\n      type\n    } = this.state;\n\n    if (type === types$1.name) {\n      name = this.state.value;\n    } else if (type.keyword) {\n      name = type.keyword;\n    } else {\n      throw this.unexpected();\n    }\n\n    if (liberal) {\n      this.state.type = types$1.name;\n    } else {\n      this.checkReservedWord(name, start, !!type.keyword, false);\n    }\n\n    this.next();\n    return name;\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (word.length > 10) {\n      return;\n    }\n\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(startLoc, ErrorMessages.YieldBindingIdentifier);\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(startLoc, ErrorMessages.AwaitBindingIdentifier);\n        return;\n      } else if (this.scope.inStaticBlock) {\n        this.raise(startLoc, ErrorMessages.AwaitBindingIdentifierInStaticBlock);\n        return;\n      } else {\n        this.expressionScope.recordAsyncArrowParametersError(startLoc, ErrorMessages.AwaitBindingIdentifier);\n      }\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(startLoc, ErrorMessages.ArgumentsInClass);\n        return;\n      }\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(startLoc, ErrorMessages.UnexpectedKeyword, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(startLoc, ErrorMessages.UnexpectedReservedWord, word);\n    }\n  }\n\n  isAwaitAllowed() {\n    if (this.prodParam.hasAwait) return true;\n\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n\n    return false;\n  }\n\n  parseAwait(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.AwaitExpressionFormalParameter);\n\n    if (this.eat(types$1.star)) {\n      this.raise(node.start, ErrorMessages.ObsoleteAwaitStar);\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait() {\n    return this.hasPrecedingLineBreak() || this.match(types$1.plusMin) || this.match(types$1.parenL) || this.match(types$1.bracketL) || this.match(types$1.backQuote) || this.match(types$1.regexp) || this.match(types$1.slash) || this.hasPlugin(\"v8intrinsic\") && this.match(types$1.modulo);\n  }\n\n  parseYield() {\n    const node = this.startNode();\n    this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.YieldInParameter);\n    this.next();\n    let delegating = false;\n    let argument = null;\n\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(types$1.star);\n\n      switch (this.state.type) {\n        case types$1.semi:\n        case types$1.eof:\n        case types$1.braceR:\n        case types$1.parenR:\n        case types$1.bracketR:\n        case types$1.braceBarR:\n        case types$1.colon:\n        case types$1.comma:\n          if (!delegating) break;\n\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  checkPipelineAtInfixOperator(left, leftStartPos) {\n    if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n      if (left.type === \"SequenceExpression\") {\n        this.raise(leftStartPos, ErrorMessages.PipelineHeadSequenceExpression);\n      }\n    }\n  }\n\n  checkHackPipeBodyEarlyErrors(startPos) {\n    if (this.match(types$1.arrow)) {\n      throw this.raise(this.state.start, ErrorMessages.PipeBodyIsTighter, types$1.arrow.label);\n    } else if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(startPos, ErrorMessages.PipeTopicUnused);\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpr, startPos, startLoc) {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n\n    if (this.isSimpleReference(childExpr)) {\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      this.checkSmartPipeTopicBodyEarlyErrors(startPos);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression) {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return !expression.computed && this.isSimpleReference(expression.object);\n\n      case \"Identifier\":\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  checkSmartPipeTopicBodyEarlyErrors(startPos) {\n    if (this.match(types$1.arrow)) {\n      throw this.raise(this.state.start, ErrorMessages.PipelineBodyNoArrow);\n    } else if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(startPos, ErrorMessages.PipelineTopicUnused);\n    }\n  }\n\n  withTopicBindingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 1,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withSmartMixTopicForbiddingContext(callback) {\n    const proposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (proposal === \"smart\") {\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        maxNumOfResolvableTopics: 0,\n        maxTopicIndex: null\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext(callback) {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  disallowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  registerTopicReference() {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext() {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext() {\n    return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;\n  }\n\n  parseFSharpPipelineBody(prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n    const ret = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, prec);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return ret;\n  }\n\n  parseModuleExpression() {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode();\n    this.next();\n    this.eat(types$1.braceL);\n    const revertScopes = this.initializeScopes(true);\n    this.enterInitialScopes();\n    const program = this.startNode();\n\n    try {\n      node.body = this.parseProgram(program, types$1.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n\n    this.eat(types$1.braceR);\n    return this.finishNode(node, \"ModuleExpression\");\n  }\n\n}\n\nconst loopLabel = {\n  kind: \"loop\"\n},\n      switchLabel = {\n  kind: \"switch\"\n};\nconst FUNC_NO_FLAGS = 0b000,\n      FUNC_STATEMENT = 0b001,\n      FUNC_HANGING_STATEMENT = 0b010,\n      FUNC_NULLABLE_ID = 0b100;\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\nfunction babel7CompatTokens(tokens) {\n  {\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n\n      if (token.type === types$1.privateName) {\n        const {\n          loc,\n          start,\n          value,\n          end\n        } = token;\n        const hashEndPos = start + 1;\n        const hashEndLoc = new Position(loc.start.line, loc.start.column + 1);\n        tokens.splice(i, 1, new Token({\n          type: types$1.hash,\n          value: \"#\",\n          start: start,\n          end: hashEndPos,\n          startLoc: loc.start,\n          endLoc: hashEndLoc\n        }), new Token({\n          type: types$1.name,\n          value: value,\n          start: hashEndPos,\n          end: end,\n          startLoc: hashEndLoc,\n          endLoc: loc.end\n        }));\n      }\n    }\n  }\n  return tokens;\n}\n\nclass StatementParser extends ExpressionParser {\n  parseTopLevel(file, program) {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n    if (this.options.tokens) file.tokens = babel7CompatTokens(this.tokens);\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(program, end = types$1.eof, sourceType = this.options.sourceType) {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n\n    if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {\n      for (const [name] of Array.from(this.scope.undefinedExports)) {\n        const pos = this.scope.undefinedExports.get(name);\n        this.raise(pos, ErrorMessages.ModuleExportUndefined, name);\n      }\n    }\n\n    return this.finishNode(program, \"Program\");\n  }\n\n  stmtToDirective(stmt) {\n    const directive = stmt;\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n    const directiveLiteral = directive.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = directiveLiteral.value = raw.slice(1, -1);\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    directiveLiteral.type = \"DirectiveLiteral\";\n    return directive;\n  }\n\n  parseInterpreterDirective() {\n    if (!this.match(types$1.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context) {\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n\n    return this.isLetKeyword(context);\n  }\n\n  isLetKeyword(context) {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n\n    if (nextCh === 92 || nextCh === 91) {\n      return true;\n    }\n\n    if (context) return false;\n    if (nextCh === 123) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      keywordRelationalOperator.lastIndex = next;\n\n      if (keywordRelationalOperator.test(this.input)) {\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n\n        if (!isIdentifierChar(endCh) && endCh !== 92) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.match(types$1.at)) {\n      this.parseDecorators(true);\n    }\n\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context, topLevel) {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = types$1._var;\n      kind = \"let\";\n    }\n\n    switch (starttype) {\n      case types$1._break:\n      case types$1._continue:\n        return this.parseBreakContinueStatement(node, starttype.keyword);\n\n      case types$1._debugger:\n        return this.parseDebuggerStatement(node);\n\n      case types$1._do:\n        return this.parseDoStatement(node);\n\n      case types$1._for:\n        return this.parseForStatement(node);\n\n      case types$1._function:\n        if (this.lookaheadCharCode() === 46) break;\n\n        if (context) {\n          if (this.state.strict) {\n            this.raise(this.state.start, ErrorMessages.StrictFunction);\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(this.state.start, ErrorMessages.SloppyFunction);\n          }\n        }\n\n        return this.parseFunctionStatement(node, false, !context);\n\n      case types$1._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case types$1._if:\n        return this.parseIfStatement(node);\n\n      case types$1._return:\n        return this.parseReturnStatement(node);\n\n      case types$1._switch:\n        return this.parseSwitchStatement(node);\n\n      case types$1._throw:\n        return this.parseThrowStatement(node);\n\n      case types$1._try:\n        return this.parseTryStatement(node);\n\n      case types$1._const:\n      case types$1._var:\n        kind = kind || this.state.value;\n\n        if (context && kind !== \"var\") {\n          this.raise(this.state.start, ErrorMessages.UnexpectedLexicalDeclaration);\n        }\n\n        return this.parseVarStatement(node, kind);\n\n      case types$1._while:\n        return this.parseWhileStatement(node);\n\n      case types$1._with:\n        return this.parseWithStatement(node);\n\n      case types$1.braceL:\n        return this.parseBlock();\n\n      case types$1.semi:\n        return this.parseEmptyStatement(node);\n\n      case types$1._import:\n        {\n          const nextTokenCharCode = this.lookaheadCharCode();\n\n          if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {\n            break;\n          }\n        }\n\n      case types$1._export:\n        {\n          if (!this.options.allowImportExportEverywhere && !topLevel) {\n            this.raise(this.state.start, ErrorMessages.UnexpectedImportExport);\n          }\n\n          this.next();\n          let result;\n\n          if (starttype === types$1._import) {\n            result = this.parseImport(node);\n\n            if (result.type === \"ImportDeclaration\" && (!result.importKind || result.importKind === \"value\")) {\n              this.sawUnambiguousESM = true;\n            }\n          } else {\n            result = this.parseExport(node);\n\n            if (result.type === \"ExportNamedDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportAllDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportDefaultDeclaration\") {\n              this.sawUnambiguousESM = true;\n            }\n          }\n\n          this.assertModuleNodeAllowed(node);\n          return result;\n        }\n\n      default:\n        {\n          if (this.isAsyncFunction()) {\n            if (context) {\n              this.raise(this.state.start, ErrorMessages.AsyncFunctionInSingleStatementContext);\n            }\n\n            this.next();\n            return this.parseFunctionStatement(node, true, !context);\n          }\n        }\n    }\n\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (starttype === types$1.name && expr.type === \"Identifier\" && this.eat(types$1.colon)) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(node.start, SourceTypeModuleErrorMessages.ImportOutsideModule);\n    }\n  }\n\n  takeDecorators(node) {\n    const decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator() {\n    return this.match(types$1._class);\n  }\n\n  parseDecorators(allowExport) {\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    while (this.match(types$1.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(types$1._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (this.hasPlugin(\"decorators\") && !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, ErrorMessages.DecoratorExportClass);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(this.state.start, ErrorMessages.UnexpectedLeadingDecorator);\n    }\n  }\n\n  parseDecorator() {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      this.state.decoratorStack.push([]);\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr;\n\n      if (this.eat(types$1.parenL)) {\n        expr = this.parseExpression();\n        this.expect(types$1.parenR);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(types$1.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.eat(types$1.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(node, keyword) {\n    const isBreak = keyword === \"break\";\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, keyword);\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n  }\n\n  verifyBreakContinue(node, keyword) {\n    const isBreak = keyword === \"break\";\n    let i;\n\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n\n    if (i === this.state.labels.length) {\n      this.raise(node.start, ErrorMessages.IllegalBreakContinue, keyword);\n    }\n  }\n\n  parseDebuggerStatement(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression() {\n    this.expect(types$1.parenL);\n    const val = this.parseExpression();\n    this.expect(types$1.parenR);\n    return val;\n  }\n\n  parseDoStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"do\"));\n    this.state.labels.pop();\n    this.expect(types$1._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(types$1.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  parseForStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    let awaitAt = -1;\n\n    if (this.isAwaitAllowed() && this.eatContextual(\"await\")) {\n      awaitAt = this.state.lastTokStart;\n    }\n\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(types$1.parenL);\n\n    if (this.match(types$1.semi)) {\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, null);\n    }\n\n    const startsWithLet = this.isContextual(\"let\");\n    const isLet = startsWithLet && this.isLetKeyword();\n\n    if (this.match(types$1._var) || this.match(types$1._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if ((this.match(types$1._in) || this.isContextual(\"of\")) && init.declarations.length === 1) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, init);\n    }\n\n    const startsWithUnescapedName = this.match(types$1.name) && !this.state.containsEsc;\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(\"of\");\n\n    if (isForOf) {\n      if (startsWithLet) {\n        this.raise(init.start, ErrorMessages.ForOfLet);\n      } else if (awaitAt === -1 && startsWithUnescapedName && init.type === \"Identifier\" && init.name === \"async\") {\n        this.raise(init.start, ErrorMessages.ForOfAsync);\n      }\n    }\n\n    if (isForOf || this.match(types$1._in)) {\n      this.toAssignable(init, true);\n      const description = isForOf ? \"for-of statement\" : \"for-in statement\";\n      this.checkLVal(init, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(node, isAsync, declarationPosition) {\n    this.next();\n    return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), isAsync);\n  }\n\n  parseIfStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(types$1._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(this.state.start, ErrorMessages.IllegalReturn);\n    }\n\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = node.cases = [];\n    this.expect(types$1.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n    let cur;\n\n    for (let sawDefault; !this.match(types$1.braceR);) {\n      if (this.match(types$1._case) || this.match(types$1._default)) {\n        const isCase = this.match(types$1._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push(cur = this.startNode());\n        cur.consequent = [];\n        this.next();\n\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(this.state.lastTokStart, ErrorMessages.MultipleDefaultsInSwitch);\n          }\n\n          sawDefault = true;\n          cur.test = null;\n        }\n\n        this.expect(types$1.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next();\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node) {\n    this.next();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.lastTokEnd, ErrorMessages.NewlineAfterThrow);\n    }\n\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam() {\n    const param = this.parseBindingAtom();\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, \"catch clause\", BIND_LEXICAL);\n    return param;\n  }\n\n  parseTryStatement(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(types$1._catch)) {\n      const clause = this.startNode();\n      this.next();\n\n      if (this.match(types$1.parenL)) {\n        this.expect(types$1.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(types$1.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      clause.body = this.withSmartMixTopicForbiddingContext(() => this.parseBlock(false, false));\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(types$1._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(node.start, ErrorMessages.NoCatchOrFinally);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(node, kind) {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"while\"));\n    this.state.labels.pop();\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node) {\n    if (this.state.strict) {\n      this.raise(this.state.start, ErrorMessages.StrictWith);\n    }\n\n    this.next();\n    node.object = this.parseHeaderExpression();\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"with\"));\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(node, maybeName, expr, context) {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(expr.start, ErrorMessages.LabelRedeclaration, maybeName);\n      }\n    }\n\n    const kind = this.state.type.isLoop ? \"loop\" : this.match(types$1._switch) ? \"switch\" : null;\n\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start\n    });\n    node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(node, expr) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {\n    const node = this.startNode();\n\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n\n    this.expect(types$1.braceL);\n\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n\n    this.parseBlockBody(node, allowDirectives, false, types$1.braceR, afterBlockParse);\n\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt) {\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n  }\n\n  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n    const body = node.body = [];\n    const directives = node.directives = [];\n    this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);\n  }\n\n  parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (!hasStrictModeDirective && directive.value.value === \"use strict\") {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n\n        parsedNonDirective = true;\n        this.state.strictErrors.clear();\n      }\n\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  parseFor(node, init) {\n    node.init = init;\n    this.semicolon(false);\n    node.test = this.match(types$1.semi) ? null : this.parseExpression();\n    this.semicolon(false);\n    node.update = this.match(types$1.parenR) ? null : this.parseExpression();\n    this.expect(types$1.parenR);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  parseForIn(node, init, awaitAt) {\n    const isForIn = this.match(types$1._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt > -1) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt > -1;\n    }\n\n    if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || this.state.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n      this.raise(init.start, ErrorMessages.ForInOfLoopInitializer, isForIn ? \"for-in\" : \"for-of\");\n    } else if (init.type === \"AssignmentPattern\") {\n      this.raise(init.start, ErrorMessages.InvalidLhs, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();\n    this.expect(types$1.parenR);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  parseVar(node, isFor, kind) {\n    const declarations = node.declarations = [];\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n\n      if (this.eat(types$1.eq)) {\n        decl.init = isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();\n      } else {\n        if (kind === \"const\" && !(this.match(types$1._in) || this.isContextual(\"of\"))) {\n          if (!isTypescript) {\n            this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Const declarations\");\n          }\n        } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(types$1._in) || this.isContextual(\"of\")))) {\n          this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Complex binding patterns\");\n        }\n\n        decl.init = null;\n      }\n\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(types$1.comma)) break;\n    }\n\n    return node;\n  }\n\n  parseVarId(decl, kind) {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, \"variable declaration\", kind === \"var\" ? BIND_VAR : BIND_LEXICAL, undefined, kind !== \"var\");\n  }\n\n  parseFunction(node, statement = FUNC_NO_FLAGS, isAsync = false) {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n    this.initFunction(node, isAsync);\n\n    if (this.match(types$1.star) && isHangingStatement) {\n      this.raise(this.state.start, ErrorMessages.GeneratorInSingleStatementContext);\n    }\n\n    node.generator = this.eat(types$1.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, false);\n    this.withSmartMixTopicForbiddingContext(() => {\n      this.parseFunctionBodyAndFinish(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n    });\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseFunctionId(requireId) {\n    return requireId || this.match(types$1.name) ? this.parseIdentifier() : null;\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    this.expect(types$1.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(types$1.parenR, 41, false, allowModifiers);\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.id) return;\n    this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.start);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n  }\n\n  isClassProperty() {\n    return this.match(types$1.eq) || this.match(types$1.semi) || this.match(types$1.braceR);\n  }\n\n  isClassMethod() {\n    return this.match(types$1.parenL);\n  }\n\n  isNonstaticConstructor(method) {\n    return !method.computed && !method.static && (method.key.name === \"constructor\" || method.key.value === \"constructor\");\n  }\n\n  parseClassBody(hadSuperClass, oldStrict) {\n    this.classScope.enter();\n    const state = {\n      hadConstructor: false,\n      hadSuperClass\n    };\n    let decorators = [];\n    const classBody = this.startNode();\n    classBody.body = [];\n    this.expect(types$1.braceL);\n    this.withSmartMixTopicForbiddingContext(() => {\n      while (!this.match(types$1.braceR)) {\n        if (this.eat(types$1.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(this.state.lastTokEnd, ErrorMessages.DecoratorSemicolon);\n          }\n\n          continue;\n        }\n\n        if (this.match(types$1.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\n          this.raise(member.start, ErrorMessages.DecoratorConstructor);\n        }\n      }\n    });\n    this.state.strict = oldStrict;\n    this.next();\n\n    if (decorators.length) {\n      throw this.raise(this.state.start, ErrorMessages.TrailingDecorator);\n    }\n\n    this.classScope.exit();\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  parseClassMemberFromModifier(classBody, member) {\n    const key = this.parseIdentifier(true);\n\n    if (this.isClassMethod()) {\n      const method = member;\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(classBody, method, false, false, false, false);\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop = member;\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(classBody, member, state) {\n    const isStatic = this.isContextual(\"static\");\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      if (this.eat(types$1.braceL)) {\n        this.parseClassStaticBlock(classBody, member);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const publicMethod = member;\n    const privateMethod = member;\n    const publicProp = member;\n    const privateProp = member;\n    const method = publicMethod;\n    const publicMember = publicMethod;\n    member.static = isStatic;\n\n    if (this.eat(types$1.star)) {\n      method.kind = \"method\";\n      const isPrivateName = this.match(types$1.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsGenerator);\n      }\n\n      this.pushClassMethod(classBody, publicMethod, true, false, false, false);\n      return;\n    }\n\n    const isContextual = this.match(types$1.name) && !this.state.containsEsc;\n    const isPrivate = this.match(types$1.privateName);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStart = this.state.start;\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(key.start, ErrorMessages.DuplicateConstructor);\n        }\n\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(key.start, ErrorMessages.OverrideOnConstructor);\n        }\n\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (isContextual && key.name === \"async\" && !this.isLineTerminator()) {\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(types$1.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStart);\n      }\n\n      method.kind = \"method\";\n      const isPrivate = this.match(types$1.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAsync);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);\n      }\n    } else if (isContextual && (key.name === \"get\" || key.name === \"set\") && !(this.match(types$1.star) && this.isLineTerminator())) {\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      const isPrivate = this.match(types$1.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAccessor);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, false, false, false, false);\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (this.isLineTerminator()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  parseClassElementName(member) {\n    const {\n      type,\n      value,\n      start\n    } = this.state;\n\n    if ((type === types$1.name || type === types$1.string) && member.static && value === \"prototype\") {\n      this.raise(start, ErrorMessages.StaticPrototype);\n    }\n\n    if (type === types$1.privateName && value === \"constructor\") {\n      this.raise(start, ErrorMessages.ConstructorClassPrivateField);\n    }\n\n    return this.parsePropertyName(member, true);\n  }\n\n  parseClassStaticBlock(classBody, member) {\n    var _member$decorators;\n\n    this.expectPlugin(\"classStaticBlock\", member.start);\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    this.prodParam.enter(PARAM);\n    const body = member.body = [];\n    this.parseBlockOrModuleBlockBody(body, undefined, false, types$1.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode(member, \"StaticBlock\"));\n\n    if ((_member$decorators = member.decorators) != null && _member$decorators.length) {\n      this.raise(member.start, ErrorMessages.DecoratorStaticBlock);\n    }\n  }\n\n  pushClassProperty(classBody, prop) {\n    if (!prop.computed && (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")) {\n      this.raise(prop.key.start, ErrorMessages.ConstructorClassField);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(classBody, prop) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.start);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true));\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const node = this.parseMethod(method, isGenerator, isAsync, false, false, \"ClassPrivateMethod\", true);\n    classBody.body.push(node);\n    const kind = node.kind === \"get\" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === \"set\" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.start);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {}\n\n  parseClassPrivateProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  parseClassProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseInitializer(node) {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(types$1.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(node, isStatement, optionalId, bindingType = BIND_CLASS) {\n    if (this.match(types$1.name)) {\n      node.id = this.parseIdentifier();\n\n      if (isStatement) {\n        this.checkLVal(node.id, \"class name\", bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        this.unexpected(null, ErrorMessages.MissingClassName);\n      }\n    }\n  }\n\n  parseClassSuper(node) {\n    node.superClass = this.eat(types$1._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  parseExport(node) {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(types$1.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(types$1.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {\n      throw this.unexpected(null, types$1.braceL);\n    }\n\n    let hasDeclaration;\n\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(types$1._default)) {\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, types$1.braceL);\n  }\n\n  eatExportStar(node) {\n    return this.eat(types$1.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (this.isExportDefaultSpecifier()) {\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    if (this.isContextual(\"as\")) {\n      if (!node.specifiers) node.specifiers = [];\n      const specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);\n      this.next();\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(this.finishNode(specifier, \"ExportNamespaceSpecifier\"));\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node) {\n    if (this.match(types$1.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      node.specifiers.push(...this.parseExportSpecifiers());\n      node.source = null;\n      node.declaration = null;\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportDeclaration(node) {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n\n    return false;\n  }\n\n  isAsyncFunction() {\n    if (!this.isContextual(\"async\")) return false;\n    const next = this.nextTokenStart();\n    return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, \"function\");\n  }\n\n  parseExportDefaultExpression() {\n    const expr = this.startNode();\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(types$1._function) || isAsync) {\n      this.next();\n\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(expr, FUNC_STATEMENT | FUNC_NULLABLE_ID, isAsync);\n    } else if (this.match(types$1._class)) {\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types$1.at)) {\n      if (this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, ErrorMessages.DecoratorBeforeExport);\n      }\n\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types$1._const) || this.match(types$1._var) || this.isLet()) {\n      throw this.raise(this.state.start, ErrorMessages.UnsupportedDefaultExport);\n    } else {\n      const res = this.parseMaybeAssignAllowIn();\n      this.semicolon();\n      return res;\n    }\n  }\n\n  parseExportDeclaration(node) {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types$1.name)) {\n      const value = this.state.value;\n\n      if (value === \"async\" && !this.state.containsEsc || value === \"let\") {\n        return false;\n      }\n\n      if ((value === \"type\" || value === \"interface\") && !this.state.containsEsc) {\n        const l = this.lookahead();\n\n        if (l.type === types$1.name && l.value !== \"from\" || l.type === types$1.braceL) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(types$1._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n\n    if (this.input.charCodeAt(next) === 44 || this.match(types$1.name) && hasFrom) {\n      return true;\n    }\n\n    if (this.match(types$1._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));\n      return nextAfterFrom === 34 || nextAfterFrom === 39;\n    }\n\n    return false;\n  }\n\n  parseExportFrom(node, expect) {\n    if (this.eatContextual(\"from\")) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n\n      if (assertions) {\n        node.assertions = assertions;\n      }\n    } else {\n      if (expect) {\n        this.unexpected();\n      } else {\n        node.source = null;\n      }\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.match(types$1.at)) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.unexpected(this.state.start, ErrorMessages.DecoratorBeforeExport);\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return this.state.type.keyword === \"var\" || this.state.type.keyword === \"const\" || this.state.type.keyword === \"function\" || this.state.type.keyword === \"class\" || this.isLet() || this.isAsyncFunction();\n  }\n\n  checkExport(node, checkNames, isDefault, isFrom) {\n    if (checkNames) {\n      if (isDefault) {\n        this.checkDuplicateExports(node, \"default\");\n\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          var _declaration$extra;\n\n          const declaration = node.declaration;\n\n          if (declaration.type === \"Identifier\" && declaration.name === \"from\" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) != null && _declaration$extra.parenthesized)) {\n            this.raise(declaration.start, ErrorMessages.ExportDefaultFromAsIdentifier);\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        for (const specifier of node.specifiers) {\n          const {\n            exported\n          } = specifier;\n          const exportedName = exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportedName);\n\n          if (!isFrom && specifier.local) {\n            const {\n              local\n            } = specifier;\n\n            if (local.type !== \"Identifier\") {\n              this.raise(specifier.start, ErrorMessages.ExportBindingIsString, local.value, exportedName);\n            } else {\n              this.checkReservedWord(local.name, local.start, true, false);\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (currentContextDecorators.length) {\n      throw this.raise(node.start, ErrorMessages.UnsupportedDecoratorExport);\n    }\n  }\n\n  checkDeclaration(node) {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(node, name) {\n    if (this.exportedIdentifiers.has(name)) {\n      this.raise(node.start, name === \"default\" ? ErrorMessages.DuplicateDefaultExport : ErrorMessages.DuplicateExport, name);\n    }\n\n    this.exportedIdentifiers.add(name);\n  }\n\n  parseExportSpecifiers() {\n    const nodes = [];\n    let first = true;\n    this.expect(types$1.braceL);\n\n    while (!this.eat(types$1.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma);\n        if (this.eat(types$1.braceR)) break;\n      }\n\n      const node = this.startNode();\n      const isString = this.match(types$1.string);\n      const local = this.parseModuleExportName();\n      node.local = local;\n\n      if (this.eatContextual(\"as\")) {\n        node.exported = this.parseModuleExportName();\n      } else if (isString) {\n        node.exported = cloneStringLiteral(local);\n      } else {\n        node.exported = cloneIdentifier(local);\n      }\n\n      nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n    }\n\n    return nodes;\n  }\n\n  parseModuleExportName() {\n    if (this.match(types$1.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n\n      if (surrogate) {\n        this.raise(result.start, ErrorMessages.ModuleExportNameHasLoneSurrogate, surrogate[0].charCodeAt(0).toString(16));\n      }\n\n      return result;\n    }\n\n    return this.parseIdentifier(true);\n  }\n\n  parseImport(node) {\n    node.specifiers = [];\n\n    if (!this.match(types$1.string)) {\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      const parseNext = !hasDefault || this.eat(types$1.comma);\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(\"from\");\n    }\n\n    node.source = this.parseImportSource();\n    const assertions = this.maybeParseImportAssertions();\n\n    if (assertions) {\n      node.assertions = assertions;\n    } else {\n      const attributes = this.maybeParseModuleAttributes();\n\n      if (attributes) {\n        node.attributes = attributes;\n      }\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    if (!this.match(types$1.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  shouldParseDefaultImport(node) {\n    return this.match(types$1.name);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  parseAssertEntries() {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(types$1.braceR)) {\n        break;\n      }\n\n      const node = this.startNode();\n      const keyName = this.state.value;\n\n      if (attrNames.has(keyName)) {\n        this.raise(this.state.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, keyName);\n      }\n\n      attrNames.add(keyName);\n\n      if (this.match(types$1.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n\n      this.expect(types$1.colon);\n\n      if (!this.match(types$1.string)) {\n        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n      }\n\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(types$1.comma));\n\n    return attrs;\n  }\n\n  maybeParseModuleAttributes() {\n    if (this.match(types$1._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n\n    const attrs = [];\n    const attributes = new Set();\n\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributeDifferentFromType, node.key.name);\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, node.key.name);\n      }\n\n      attributes.add(node.key.name);\n      this.expect(types$1.colon);\n\n      if (!this.match(types$1.string)) {\n        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n      }\n\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(types$1.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    if (this.isContextual(\"assert\") && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n\n    this.eat(types$1.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(types$1.braceR);\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    if (this.shouldParseDefaultImport(node)) {\n      this.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\", \"default import specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node) {\n    if (this.match(types$1.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(\"as\");\n      this.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\", \"import namespace specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node) {\n    let first = true;\n    this.expect(types$1.braceL);\n\n    while (!this.eat(types$1.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        if (this.eat(types$1.colon)) {\n          throw this.raise(this.state.start, ErrorMessages.DestructureNamedImport);\n        }\n\n        this.expect(types$1.comma);\n        if (this.eat(types$1.braceR)) break;\n      }\n\n      this.parseImportSpecifier(node);\n    }\n  }\n\n  parseImportSpecifier(node) {\n    const specifier = this.startNode();\n    const importedIsString = this.match(types$1.string);\n    specifier.imported = this.parseModuleExportName();\n\n    if (this.eatContextual(\"as\")) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const {\n        imported\n      } = specifier;\n\n      if (importedIsString) {\n        throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, imported.value);\n      }\n\n      this.checkReservedWord(imported.name, specifier.start, true, true);\n      specifier.local = cloneIdentifier(imported);\n    }\n\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n  isThisParam(param) {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n\n}\n\nclass Parser extends StatementParser {\n  constructor(options, input) {\n    options = getOptions(options);\n    super(options, input);\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  getScopeHandler() {\n    return ScopeHandler;\n  }\n\n  parse() {\n    this.enterInitialScopes();\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n\n}\n\nfunction pluginsMap(plugins) {\n  const pluginMap = new Map();\n\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n\n  return pluginMap;\n}\n\nfunction parse(input, options) {\n  var _options;\n\n  if (((_options = options) == null ? void 0 : _options.sourceType) === \"unambiguous\") {\n    options = Object.assign({}, options);\n\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch (_unused) {}\n      } else {\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch (_unused2) {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nfunction parseExpression(input, options) {\n  const parser = getParser(options, input);\n\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n\n  return parser.getExpression();\n}\n\nfunction getParser(options, input) {\n  let cls = Parser;\n\n  if (options != null && options.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache = {};\n\nfunction getParserClass(pluginsFromOptions) {\n  const pluginList = mixinPluginNames.filter(name => hasPlugin(pluginsFromOptions, name));\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n\n  if (!cls) {\n    cls = Parser;\n\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n\n    parserClassCache[key] = cls;\n  }\n\n  return cls;\n}\n\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = types$1;","map":{"version":3,"sources":["/Users/sameer/Documents/MelbourneHack/covidgraph/covid/node_modules/@babel/parser/lib/index.js"],"names":["Object","defineProperty","exports","value","beforeExpr","startsExpr","isLoop","isAssign","prefix","postfix","TokenType","constructor","label","conf","keyword","rightAssociative","binop","updateContext","keywords$1","Map","createKeyword","name","options","token","set","createBinop","types$1","num","bigint","decimal","regexp","string","privateName","eof","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","template","ellipsis","backQuote","dollarBraceL","at","hash","interpreterDirective","eq","assign","slashAssign","moduloAssign","incDec","bang","tilde","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","relational","bitShift","plusMin","modulo","star","slash","exponent","_break","_case","_catch","_continue","_debugger","_default","_do","_else","_finally","_for","_function","_if","_return","_switch","_throw","_try","_var","_const","_while","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_in","_instanceof","_typeof","_void","_delete","lineBreak","lineBreakG","RegExp","source","isNewLine","code","skipWhiteSpace","skipWhiteSpaceInLine","skipWhiteSpaceToLineBreak","isWhitespace","Position","line","col","column","SourceLocation","start","end","filename","identifierName","getLineInfo","input","offset","lineStart","match","lastIndex","exec","index","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","hasPlugin","plugins","has","getPluginOption","plugin","get","setTrailingComments","node","comments","trailingComments","undefined","unshift","setInnerComments","innerComments","adjustInnerComments","elements","commentWS","lastElement","i","length","CommentsParser","addComment","comment","loc","state","push","processComment","commentStack","commentStackLength","lastCommentWS","leadingNode","nodeStart","commentEnd","containingNode","finalizeComment","splice","trailingNode","leadingComments","commentStart","charCodeAt","type","properties","arguments","params","specifiers","finalizeRemainingComments","resetPreviousNodeTrailingComments","ErrorCodes","freeze","SyntaxError","SourceTypeModuleError","ErrorMessages","makeErrorTemplates","AccessorIsGenerator","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitBindingIdentifierInStaticBlock","AwaitExpressionFormalParameter","AwaitNotInAsyncContext","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorBeforeExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","DuplicateProto","DuplicateRegExpFlags","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","ForOfAsync","ForOfLet","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportBindingIsString","ImportCallArgumentTrailingComma","ImportCallArity","ImportCallNotNewExpression","ImportCallSpreadArgument","InvalidBigIntLiteral","InvalidCodePoint","InvalidDecimal","InvalidDigit","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","InvalidIdentifier","InvalidLhs","InvalidLhsBinding","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingSemicolon","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","ModuleExportNameHasLoneSurrogate","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","OverrideOnConstructor","ParamDupe","PatternHasAccessor","PatternHasMethod","PipeBodyIsTighter","PipeTopicRequiresHackPipes","PipeTopicUnbound","PipeTopicUnconfiguredToken","PipeTopicUnused","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","StaticPrototype","StrictDelete","StrictEvalArguments","StrictEvalArgumentsBinding","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","UnexpectedTokenUnaryExponentiation","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","SourceTypeModuleErrorMessages","ImportMetaOutsideModule","ImportOutsideModule","messages","templates","keys","forEach","reasonCode","ParserError","getLocationForPosition","pos","startLoc","lastTokStart","lastTokStartLoc","endLoc","lastTokEnd","lastTokEndLoc","raise","raiseWithData","raiseOverwrite","message","replace","_","errorRecovery","errors","error","_raise","data","errorTemplate","errorContext","err","isLookahead","estree","superClass","parseRegExpLiteral","pattern","flags","regex","e","estreeParseLiteral","parseBigIntLiteral","bigInt","BigInt","_unused","String","parseDecimalLiteral","parseLiteral","parseStringLiteral","parseNumericLiteral","parseNullLiteral","parseBooleanLiteral","directiveToStmt","directive","directiveLiteral","stmt","startNodeAt","expression","extra","expressionValue","raw","finishNodeAt","slice","initFunction","isAsync","checkDeclaration","isObjectProperty","getObjectOrClassMethodParams","method","isValidDirective","_stmt$expression$extr","parenthesized","stmtToDirective","addExtra","parseBlockBody","args","directiveStatements","directives","map","d","body","concat","pushClassMethod","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","parseMaybePrivateName","convertPrivateNameToPrivateIdentifier","getPrivateNameSV","id","isPrivateName","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","kind","computed","finishNode","parseClassProperty","propertyNode","parseClassPrivateProperty","parseObjectMethod","prop","isPattern","isAccessor","shorthand","parseObjectProperty","startPos","refExpressionErrors","isAssignable","isBinding","toAssignable","isLHS","toAssignableObjectExpressionProp","key","finishCallExpression","optional","callee","_node$arguments$","attributes","toReferencedArguments","parseExport","exported","parseSubscript","base","noCalls","optionalChainMember","substring","stop","chain","startNodeAtNode","hasPropertyAsPrivateName","isOptionalChain","isObjectMethod","TokContext","preserveSpace","types","brace","context","pop","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","keywords","Set","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","isIteratorStart","current","next","reservedWordLikeSet","canBeReservedWord","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_STATIC_BLOCK","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_FLAGS_FLOW_DECLARE_FN","BIND_CLASS","BIND_LEXICAL","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","BIND_FLOW_DECLARE_FN","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","Scope","var","lexical","functions","ScopeHandler","scopeStack","undefinedExports","undefinedPrivateNames","inFunction","currentVarScopeFlags","allowSuper","currentThisScopeFlags","inClass","inClassAndNotInNonArrowFunction","inStaticBlock","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","currentScope","createScope","enter","exit","scope","declareName","bindingType","checkRedeclarationInScope","add","maybeExportDefined","delete","isRedeclaredInScope","values","checkLocalExport","topLevelScope","FlowScope","declareFunctions","FlowScopeHandler","State","curLine","potentialArrowAt","noArrowAt","noArrowParamsConversionAt","maybeInArrowParameters","inType","noAnonFunctionType","inPropertyName","hasFlowComment","isAmbientContext","inAbstractClass","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","decoratorStack","exprAllowed","containsEsc","strictErrors","tokensLength","init","strictMode","sourceType","startLine","curPosition","clone","skipArrays","val","Array","isArray","_isDigit","isDigit","VALID_REGEX_FLAGS","forbiddenNumericSeparatorSiblings","decBinOct","hex","allowedNumericSeparatorSiblings","bin","oct","dec","Token","Tokenizer","tokens","pushToken","checkKeywordEscapes","nextToken","eat","createLookaheadState","curContext","lookahead","old","curr","nextTokenStart","nextTokenStartSince","lookaheadCharCode","codePointAtPos","cp","trail","setStrict","clear","skipSpace","finishToken","readTmplToken","getTokenFromCode","skipBlockComment","indexOf","skipLineComment","startSkip","ch","spaceStart","loop","attachComment","CommentWhitespace","prevType","readToken_numberSign","readToken_interpreter","nextPos","expectPlugin","readWord1","finishOp","readToken_dot","readNumber","readToken_slash","readToken_mult_modulo","width","readToken_pipe_amp","readToken_caret","readToken_plus_min","readToken_lt_gt","size","readToken_eq_excl","readToken_question","next2","readRadixNumber","readString","readWord","fromCodePoint","str","readRegexp","escaped","content","mods","char","includes","readInt","radix","len","forceLen","allowNumSeparator","forbiddenSiblings","allowedSiblings","invalid","total","Infinity","prev","Number","isNaN","isBigInt","startsWithDot","isFloat","isDecimal","hasExponent","isOctal","hasLeadingZero","integer","recordStrictModeErrors","underscorePos","parseInt","parseFloat","readCodePoint","throwOnInvalid","codePos","readHexChar","quote","out","chunkStart","readEscapedChar","containsInvalid","inTemplate","substr","octalStr","octal","n","firstCode","escStart","identifierCheck","esc","kw","_this$state$type$upda","_this$state$type","call","ClassScope","privateNames","loneAccessors","ClassScopeHandler","stack","oldClassScope","from","declarePrivateName","elementType","classScope","redefined","accessor","oldStatic","newStatic","oldKind","newKind","usePrivateName","kExpression","kMaybeArrowParameterDeclaration","kMaybeAsyncArrowParameterDeclaration","kParameterDeclaration","ExpressionScope","canBeArrowParameterDeclaration","isCertainlyParameterDeclaration","ArrowHeadParsingScope","recordDeclarationError","clearDeclarationError","iterateErrors","iterator","ExpressionScopeHandler","recordParameterInitializerError","recordParenthesizedIdentifierError","recordAsyncArrowParametersError","validateAsPattern","newParameterDeclarationScope","newArrowHeadScope","newAsyncArrowScope","newExpressionScope","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","PARAM_IN","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasYield","hasReturn","hasIn","functionFlags","UtilParser","isRelational","op","expectRelational","unexpected","isContextual","isUnparsedContextual","nameStart","nameEnd","nextCh","isLookaheadContextual","eatContextual","expectContextual","canInsertSemicolon","hasPrecedingLineBreak","hasFollowingLineBreak","isLineTerminator","semicolon","allowAsi","expect","assertNoSpace","messageOrType","missingPlugin","expectOnePlugin","names","some","join","tryParse","fn","oldState","abortSignal","failState","thrown","aborted","checkExpressionErrors","andThrow","shorthandAssign","doubleProto","optionalParameters","isLiteralPropertyName","property","initializeScopes","oldLabels","oldExportedIdentifiers","exportedIdentifiers","oldInModule","oldScope","getScopeHandler","bind","oldProdParam","prodParam","oldExpressionScope","expressionScope","enterInitialScopes","paramFlags","ExpressionErrors","Node","parser","ranges","range","NodePrototype","prototype","__clone","newNode","clonePlaceholder","cloneIdentifier","cloned","create","expectedNode","cloneStringLiteral","NodeUtils","resetStartLocation","resetEndLocation","resetStartLocationFromNode","locationNode","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","GetterMayNotHaveThisParam","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","OptionalBindingPattern","SetterMayNotHaveThisParam","SpreadVariance","ThisParamAnnotationRequired","ThisParamBannedInConstructor","ThisParamMayNotBeOptional","ThisParamMustBeFirst","ThisParamNoDefault","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","declaration","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","flow","flowPragma","shouldParseTypes","shouldParseEnums","matches","Error","flowParseTypeInitialiser","tok","oldInType","flowParseType","flowParsePredicate","moduloPos","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","parseIdentifier","typeNode","typeContainer","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","rest","this","returnType","typeAnnotation","flowParseDeclare","insideModule","flowParseDeclareVariable","flowParseDeclareModuleExports","flowParseDeclareModule","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","flowParseTypeAnnotatableIdentifier","parseExprAtom","bodyNode","parseImport","hasModuleExport","default","isLet","suggestion","exportKind","flowParseTypeAnnotation","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","variance","flowParseVariance","ident","bound","jsxTagStart","defaultRequired","typeParameter","oldNoAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStart","inexactStart","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","argument","proto","flowCheckGetterSetterParams","paramCount","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","first","lh","isThis","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","parseLiteralAtNode","createIdentifier","flowParsePostfixType","seenOptionalIndexedAccess","objectType","indexType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatement","topLevel","flowParseEnumDeclaration","parseExpressionStatement","expr","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","setOptionalParametersError","originalNoArrowAt","consequent","failed","tryParseConditionalConsequent","valid","getArrowLikeExpressions","alternate","parseMaybeAssign","parseMaybeAssignAllowIn","disallowInvalid","arrows","finishArrowValidation","every","_node$extra","toAssignableList","trailingComma","checkParams","parse","result","parseParenItem","typeCastNode","assertModuleNodeAllowed","decl","parseExportDeclaration","declarationNode","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","member","parseClassMemberFromModifier","isIterator","readIterator","fullWord","exprList","trailingCommaPos","toReferencedList","isParenthesizedExpr","_expr$extra","parseArrayLike","close","canBePattern","isTuple","checkLVal","isClassMethod","isClassProperty","isNonstaticConstructor","isThisParam","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","checkGetterSetterParams","parsePropertyName","isPrivateNameAllowed","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","left","shouldParseDefaultImport","parseImportSpecifierLocal","specifier","contextDescription","local","maybeParseDefaultImportSpecifier","parseImportSpecifier","firstIdentIsString","firstIdent","parseModuleExportName","specifierTypeKind","as_ident","imported","nodeIsTypeImport","specifierIsTypeImport","checkReservedWord","parseBindingAtom","parseFunctionParams","allowModifiers","parseVarId","parseAsyncArrowFromCallExpression","shouldParseAsyncArrow","afterLeftParse","_jsx","jsx","j_oTag","j_expr","_jsx2","_jsx3","abort","_arrowExpression$extr","arrowExpression","maybeUnwrapTypeCastExpression","async","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","subscriptState","isLookaheadToken_lt","typeArguments","parseNewArguments","targs","parseArrowExpression","parseTopLevel","file","program","fileNode","skipFlowComment","hasFlowCommentCompletion","shiftToFirstNonWhiteSpace","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","enumName","memberName","flowEnumErrorInvalidMemberName","toUpperCase","flowEnumErrorDuplicateMemberName","flowEnumErrorInconsistentMemberValues","flowEnumErrorInvalidExplicitType","suppliedType","flowEnumErrorInvalidMemberInitializer","explicitType","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumMemberInit","endOfInit","literal","flowEnumMemberRaw","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","hasUnknownMembers","memberNode","flowEnumStringMembers","initializedMembers","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","afterNext","entities","quot","amp","apos","lt","gt","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","HEX_NUMBER","DECIMAL_NUMBER","JsxErrors","AttributeIsEmpty","MissingClosingTagElement","MissingClosingTagFragment","UnexpectedSequenceExpression","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","j_cTag","jsxName","jsxText","jsxTagEnd","isFragment","object","getQualifiedJSXName","namespace","jsxReadToken","jsxReadEntity","jsxReadNewLine","normalizeCRLF","jsxReadString","count","entity","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","jsxParseAttributeValue","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","lookaheadState","TypeScriptScope","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","isConst","wasConst","nonNull","x","assert","TSErrors","AbstractMethodHasImplementation","AbstractPropertyHasInitializer","AccesorCannotDeclareThisParameter","AccesorCannotHaveTypeParameters","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstructorHasTypeParameters","DeclareAccessor","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateAccessibilityModifier","DuplicateModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","ExpectedAmbientAfterExportDeclare","ImportAliasHasImportType","IncompatibleModifiers","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasDeclare","IndexSignatureHasOverride","IndexSignatureHasStatic","InvalidModifierOnTypeMember","InvalidModifiersOrder","InvalidTupleMemberLabel","MissingInterfaceName","MixedLabeledAndUnlabeledElements","NonAbstractClassHasAbstractMethod","NonClassMethodPropertyHasAbstractModifer","OptionalTypeBeforeRequired","OverrideNotInSubClass","PatternIsOptional","PrivateElementHasAbstract","PrivateElementHasAccessibility","ReadonlyForMethodSignature","SetAccesorCannotHaveOptionalParameter","SetAccesorCannotHaveRestParameter","SetAccesorCannotHaveReturnType","StaticBlockCannotHaveModifier","TypeAnnotationAfterAssign","TypeImportCannotSpecifyDefaultAndNamed","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","tsIsAccessModifier","modifier","typescript","tsIsIdentifier","tsTokenCanFollowModifier","tsNextTokenCanFollowModifier","tsParseModifier","allowedModifiers","tsTryParse","tsParseModifiers","modified","disallowedModifiers","enforceOrder","before","after","incompatible","mod1","mod2","accessibility","hasOwnProperty","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","tsParseDelimitedListWorker","expectSuccess","element","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","asserts","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseTypeParameter","tsParseTypeParameterName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsTryNextParseConstantContext","tsFillSignature","returnToken","signature","returnTokenRequired","parameters","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","parseBindingList","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","firstParameter","tsParseTypeMember","idx","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","nameType","tsParseType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","labeledElements","elementNode","_labeledElements","isLabeled","labeled","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","abstract","tsParseLiteralTypeNode","tsParseTemplateLiteralType","parseTemplate","parseTemplateSubstitution","tsParseThisTypeOrThisTypePredicate","thisKeyword","tsParseNonArrayType","parseMaybeUnary","tsParseArrayTypeOrHigher","tsParseTypeOperator","operator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","find","tsParseUnionOrIntersectionType","parseConstituentType","hasLeadingOperator","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","braceStackCounter","tsInType","t","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","eatColon","tsParseNonConditionalType","checkType","extendsType","trueType","falseType","isAbstractConstructorSignature","tsParseTypeAssertion","tsNextThenParseType","tsParseHeritageClause","descriptor","originalStart","delimitedList","tsParseExpressionWithTypeArguments","tsParseInterfaceDeclaration","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","tsDoThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","res","tsTryParseAndCatch","tsTryParseDeclare","nany","starttype","tsInAmbientContext","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminator","tsParseAbstractDeclaration","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","tsIsDeclarationStart","parseAssignableListItem","decorators","override","elt","pp","parameter","bodilessType","registerFunctionStatementId","tsCheckForInvalidTypeCasts","items","isInParens","nonNullExpression","isOptionalCall","missingParenErrorPos","atPossibleAsyncArrow","asyncArrowFn","parseTaggedTemplateExpression","parseExprOp","leftStartPos","leftStartLoc","minPrec","reScan_lt_gt","checkKeywords","checkDuplicateExports","ahead","importNode","isAbstractClass","cls","interfaceNode","parseStatementContent","parseAccessModifier","tsHasSomeModifiers","modifiers","invalidModifersForStaticBlocks","callParseClassMemberWithIsStatic","parseClassStaticBlock","parseClassMemberWithIsStatic","hadSuperClass","parsePostMemberNameModifiers","methodOrProp","isDeclare","parseClassPropertyAnnotation","definite","_typeCast","_typeCast2","_jsx4","_typeCast3","typeCast","_typeParameters","toAssignableParenthesizedExpression","_expr$extra2","parseMaybeDecoratorArguments","checkCommaAfterRest","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parseCatchClauseParam","oldIsAmbientContext","oldInAbstractClass","hasBody","shouldParseAsAmbientContext","getExpression","placeholder","PlaceHolderErrors","ClassNameIsRequired","placeholders","parsePlaceholder","finishPlaceholder","isFinished","verifyBreakContinue","parseBlock","parseFunctionId","takeDecorators","oldStrict","parseClassBody","startsWith","maybeParseExportDefaultSpecifier","checkExport","filter","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","v8intrinsic","parseV8Intrinsic","v8IntrinsicStart","parseIdentifierName","identifier","option","PIPELINE_PROPOSALS","TOPIC_TOKENS","RECORD_AND_TUPLE_SYNTAX_TYPES","validatePlugins","decoratorsBeforeExport","proposal","proposalList","p","tupleSyntaxIsHash","topicToken","tokenList","moduleAttributesVerionPluginOption","missingPlugins","mixinPlugins","mixinPluginNames","defaultOptions","sourceFilename","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","createParenthesizedExpressions","getOptions","opts","unwrapParenthesizedExpression","LValParser","_node$extra3","last","_node$extra2","isLast","raiseRestNotLast","checkToRestConversion","arg","raiseTrailingCommaAfterRest","toReferencedListDeep","parseSpread","refNeedsArrowPos","parseRestBinding","parseObjectLike","closeCharCode","allowEmpty","elts","parseDecorator","_startLoc","_startPos","_left","checkClashes","disallowLetBinding","strictModeChanged","elem","ExpressionParser","checkProto","isRecord","protoRef","used","shouldExitDescending","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","expressions","parseMaybeAssignDisallowIn","resultError","_resultError$pos","parseYield","ownExpressionErrors","parseMaybeConditional","leftIsHackPipeExpression","parseExprOps","prec","checkPipelineAtInfixOperator","logical","coalesce","parseExprOpRightExpr","nextOp","withTopicBindingContext","bodyExpr","parseHackPipeBody","checkHackPipeBodyEarlyErrors","childExpr","parseSmartPipelineBodyInStyle","withSoloAwaitPermittingContext","parseFSharpPipelineBody","parseExprOpBaseRightExpr","bodyIsInGeneratorContext","bodyIsYieldExpression","checkExponentialAfterUnary","sawUnary","isAwait","isAwaitAllowed","parseAwait","update","isDelete","parseUpdate","isAmbiguousAwait","parseExprSubscripts","maybeAsyncArrow","parseBind","parseCoverCallAndAsyncArrowHead","parseMember","parsePrivateName","parseNoCallExpr","tag","quasi","dynamicImport","allowPlaceholder","nodeForExtra","oldInFSharpPipelineDirectBody","parseExprListItem","_call$extra","parseSuper","parseImportMetaProperty","parseModuleExpression","parseFunction","parseAsyncArrowUnaryFunction","parseDo","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","pipeProposal","tokenType","finishTopicReference","lookaheadCh","codePointAt","testTopicReferenceConfiguration","nodeType","topicReferenceIsAllowedInCurrentContext","registerTopicReference","pluginTopicToken","isPrivate","meta","parseMetaProperty","propertyName","innerStartPos","innerStartLoc","spreadStart","optionalCommaStart","spreadNodeStartPos","spreadNodeStartLoc","innerEndPos","innerEndLoc","arrowNode","parenExpression","metaProp","parseNew","parseExprList","parseTemplateElement","isTagged","cooked","tail","curElt","quasis","propHash","parsePropertyDefinition","maybeAsyncOrAccessorProp","keyName","_params","oldInPropertyName","generator","isExpression","hasStrictModeDirective","nonSimple","isSimpleParamList","errorPos","reservedTest","delegating","delegate","topicReferenceWasUsedInCurrentContext","isSimpleReference","checkSmartPipeTopicBodyEarlyErrors","callback","outerContextTopicState","withSmartMixTopicForbiddingContext","outerContextSoloAwaitState","prodParamToSet","prodParamToClear","ret","revertScopes","parseProgram","loopLabel","switchLabel","FUNC_NO_FLAGS","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","FUNC_NULLABLE_ID","loneSurrogate","keywordRelationalOperator","babel7CompatTokens","hashEndPos","hashEndLoc","StatementParser","interpreter","parseInterpreterDirective","isLetKeyword","endCh","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","allowExport","currentContextDecorators","decorator","isBreak","lab","parseHeaderExpression","awaitAt","parseFor","startsWithLet","parseVar","declarations","parseForIn","startsWithUnescapedName","isForOf","description","declarationPosition","discriminant","cases","cur","sawDefault","isCase","simple","block","handler","clause","finalizer","statementStart","allowDirectives","createNewLexicalScope","afterBlockParse","parsedNonDirective","isForIn","await","isFor","isTypescript","statement","isHangingStatement","requireId","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","publicMember","parseClassElementName","maybeQuestionTokenStart","pushClassPrivateProperty","pushClassProperty","_member$decorators","parseInitializer","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","l","hasFrom","nextAfterFrom","assertions","maybeParseImportAssertions","checkNames","isDefault","isFrom","_declaration$extra","exportedName","nodes","isString","surrogate","toString","parseNext","maybeParseModuleAttributes","parseAssertEntries","attrs","attrNames","importedIsString","Parser","pluginsMap","pluginMap","_options","getParser","ast","moduleError","_unused2","getParserClass","parserClassCache","pluginsFromOptions","pluginList","tokTypes"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AAEA,MAAMC,UAAU,GAAG,IAAnB;AACA,MAAMC,UAAU,GAAG,IAAnB;AACA,MAAMC,MAAM,GAAG,IAAf;AACA,MAAMC,QAAQ,GAAG,IAAjB;AACA,MAAMC,MAAM,GAAG,IAAf;AACA,MAAMC,OAAO,GAAG,IAAhB;;AACA,MAAMC,SAAN,CAAgB;AACdC,EAAAA,WAAW,CAACC,KAAD,EAAQC,IAAI,GAAG,EAAf,EAAmB;AAC5B,SAAKD,KAAL,GAAa,KAAK,CAAlB;AACA,SAAKE,OAAL,GAAe,KAAK,CAApB;AACA,SAAKV,UAAL,GAAkB,KAAK,CAAvB;AACA,SAAKC,UAAL,GAAkB,KAAK,CAAvB;AACA,SAAKU,gBAAL,GAAwB,KAAK,CAA7B;AACA,SAAKT,MAAL,GAAc,KAAK,CAAnB;AACA,SAAKC,QAAL,GAAgB,KAAK,CAArB;AACA,SAAKC,MAAL,GAAc,KAAK,CAAnB;AACA,SAAKC,OAAL,GAAe,KAAK,CAApB;AACA,SAAKO,KAAL,GAAa,KAAK,CAAlB;AACA,SAAKC,aAAL,GAAqB,KAAK,CAA1B;AACA,SAAKL,KAAL,GAAaA,KAAb;AACA,SAAKE,OAAL,GAAeD,IAAI,CAACC,OAApB;AACA,SAAKV,UAAL,GAAkB,CAAC,CAACS,IAAI,CAACT,UAAzB;AACA,SAAKC,UAAL,GAAkB,CAAC,CAACQ,IAAI,CAACR,UAAzB;AACA,SAAKU,gBAAL,GAAwB,CAAC,CAACF,IAAI,CAACE,gBAA/B;AACA,SAAKT,MAAL,GAAc,CAAC,CAACO,IAAI,CAACP,MAArB;AACA,SAAKC,QAAL,GAAgB,CAAC,CAACM,IAAI,CAACN,QAAvB;AACA,SAAKC,MAAL,GAAc,CAAC,CAACK,IAAI,CAACL,MAArB;AACA,SAAKC,OAAL,GAAe,CAAC,CAACI,IAAI,CAACJ,OAAtB;AACA,SAAKO,KAAL,GAAaH,IAAI,CAACG,KAAL,IAAc,IAAd,GAAqBH,IAAI,CAACG,KAA1B,GAAkC,IAA/C;AACA,SAAKC,aAAL,GAAqB,IAArB;AACD;;AAxBa;;AA2BhB,MAAMC,UAAU,GAAG,IAAIC,GAAJ,EAAnB;;AAEA,SAASC,aAAT,CAAuBC,IAAvB,EAA6BC,OAAO,GAAG,EAAvC,EAA2C;AACzCA,EAAAA,OAAO,CAACR,OAAR,GAAkBO,IAAlB;AACA,QAAME,KAAK,GAAG,IAAIb,SAAJ,CAAcW,IAAd,EAAoBC,OAApB,CAAd;AACAJ,EAAAA,UAAU,CAACM,GAAX,CAAeH,IAAf,EAAqBE,KAArB;AACA,SAAOA,KAAP;AACD;;AAED,SAASE,WAAT,CAAqBJ,IAArB,EAA2BL,KAA3B,EAAkC;AAChC,SAAO,IAAIN,SAAJ,CAAcW,IAAd,EAAoB;AACzBjB,IAAAA,UADyB;AAEzBY,IAAAA;AAFyB,GAApB,CAAP;AAID;;AAED,MAAMU,OAAO,GAAG;AACdC,EAAAA,GAAG,EAAE,IAAIjB,SAAJ,CAAc,KAAd,EAAqB;AACxBL,IAAAA;AADwB,GAArB,CADS;AAIduB,EAAAA,MAAM,EAAE,IAAIlB,SAAJ,CAAc,QAAd,EAAwB;AAC9BL,IAAAA;AAD8B,GAAxB,CAJM;AAOdwB,EAAAA,OAAO,EAAE,IAAInB,SAAJ,CAAc,SAAd,EAAyB;AAChCL,IAAAA;AADgC,GAAzB,CAPK;AAUdyB,EAAAA,MAAM,EAAE,IAAIpB,SAAJ,CAAc,QAAd,EAAwB;AAC9BL,IAAAA;AAD8B,GAAxB,CAVM;AAad0B,EAAAA,MAAM,EAAE,IAAIrB,SAAJ,CAAc,QAAd,EAAwB;AAC9BL,IAAAA;AAD8B,GAAxB,CAbM;AAgBdgB,EAAAA,IAAI,EAAE,IAAIX,SAAJ,CAAc,MAAd,EAAsB;AAC1BL,IAAAA;AAD0B,GAAtB,CAhBQ;AAmBd2B,EAAAA,WAAW,EAAE,IAAItB,SAAJ,CAAc,OAAd,EAAuB;AAClCL,IAAAA;AADkC,GAAvB,CAnBC;AAsBd4B,EAAAA,GAAG,EAAE,IAAIvB,SAAJ,CAAc,KAAd,CAtBS;AAuBdwB,EAAAA,QAAQ,EAAE,IAAIxB,SAAJ,CAAc,GAAd,EAAmB;AAC3BN,IAAAA,UAD2B;AAE3BC,IAAAA;AAF2B,GAAnB,CAvBI;AA2Bd8B,EAAAA,YAAY,EAAE,IAAIzB,SAAJ,CAAc,IAAd,EAAoB;AAChCN,IAAAA,UADgC;AAEhCC,IAAAA;AAFgC,GAApB,CA3BA;AA+Bd+B,EAAAA,WAAW,EAAE,IAAI1B,SAAJ,CAAc,IAAd,EAAoB;AAC/BN,IAAAA,UAD+B;AAE/BC,IAAAA;AAF+B,GAApB,CA/BC;AAmCdgC,EAAAA,QAAQ,EAAE,IAAI3B,SAAJ,CAAc,GAAd,CAnCI;AAoCd4B,EAAAA,WAAW,EAAE,IAAI5B,SAAJ,CAAc,IAAd,CApCC;AAqCd6B,EAAAA,MAAM,EAAE,IAAI7B,SAAJ,CAAc,GAAd,EAAmB;AACzBN,IAAAA,UADyB;AAEzBC,IAAAA;AAFyB,GAAnB,CArCM;AAyCdmC,EAAAA,SAAS,EAAE,IAAI9B,SAAJ,CAAc,IAAd,EAAoB;AAC7BN,IAAAA,UAD6B;AAE7BC,IAAAA;AAF6B,GAApB,CAzCG;AA6CdoC,EAAAA,UAAU,EAAE,IAAI/B,SAAJ,CAAc,IAAd,EAAoB;AAC9BN,IAAAA,UAD8B;AAE9BC,IAAAA;AAF8B,GAApB,CA7CE;AAiDdqC,EAAAA,MAAM,EAAE,IAAIhC,SAAJ,CAAc,GAAd,EAAmB;AACzBN,IAAAA;AADyB,GAAnB,CAjDM;AAoDduC,EAAAA,SAAS,EAAE,IAAIjC,SAAJ,CAAc,IAAd,CApDG;AAqDdkC,EAAAA,MAAM,EAAE,IAAIlC,SAAJ,CAAc,GAAd,EAAmB;AACzBN,IAAAA,UADyB;AAEzBC,IAAAA;AAFyB,GAAnB,CArDM;AAyDdwC,EAAAA,MAAM,EAAE,IAAInC,SAAJ,CAAc,GAAd,CAzDM;AA0DdoC,EAAAA,KAAK,EAAE,IAAIpC,SAAJ,CAAc,GAAd,EAAmB;AACxBN,IAAAA;AADwB,GAAnB,CA1DO;AA6Dd2C,EAAAA,IAAI,EAAE,IAAIrC,SAAJ,CAAc,GAAd,EAAmB;AACvBN,IAAAA;AADuB,GAAnB,CA7DQ;AAgEd4C,EAAAA,KAAK,EAAE,IAAItC,SAAJ,CAAc,GAAd,EAAmB;AACxBN,IAAAA;AADwB,GAAnB,CAhEO;AAmEd6C,EAAAA,WAAW,EAAE,IAAIvC,SAAJ,CAAc,IAAd,EAAoB;AAC/BN,IAAAA;AAD+B,GAApB,CAnEC;AAsEd8C,EAAAA,GAAG,EAAE,IAAIxC,SAAJ,CAAc,GAAd,CAtES;AAuEdyC,EAAAA,QAAQ,EAAE,IAAIzC,SAAJ,CAAc,GAAd,EAAmB;AAC3BN,IAAAA;AAD2B,GAAnB,CAvEI;AA0EdgD,EAAAA,WAAW,EAAE,IAAI1C,SAAJ,CAAc,IAAd,CA1EC;AA2Ed2C,EAAAA,KAAK,EAAE,IAAI3C,SAAJ,CAAc,IAAd,EAAoB;AACzBN,IAAAA;AADyB,GAApB,CA3EO;AA8EdkD,EAAAA,QAAQ,EAAE,IAAI5C,SAAJ,CAAc,UAAd,CA9EI;AA+Ed6C,EAAAA,QAAQ,EAAE,IAAI7C,SAAJ,CAAc,KAAd,EAAqB;AAC7BN,IAAAA;AAD6B,GAArB,CA/EI;AAkFdoD,EAAAA,SAAS,EAAE,IAAI9C,SAAJ,CAAc,GAAd,EAAmB;AAC5BL,IAAAA;AAD4B,GAAnB,CAlFG;AAqFdoD,EAAAA,YAAY,EAAE,IAAI/C,SAAJ,CAAc,IAAd,EAAoB;AAChCN,IAAAA,UADgC;AAEhCC,IAAAA;AAFgC,GAApB,CArFA;AAyFdqD,EAAAA,EAAE,EAAE,IAAIhD,SAAJ,CAAc,GAAd,CAzFU;AA0FdiD,EAAAA,IAAI,EAAE,IAAIjD,SAAJ,CAAc,GAAd,EAAmB;AACvBL,IAAAA;AADuB,GAAnB,CA1FQ;AA6FduD,EAAAA,oBAAoB,EAAE,IAAIlD,SAAJ,CAAc,OAAd,CA7FR;AA8FdmD,EAAAA,EAAE,EAAE,IAAInD,SAAJ,CAAc,GAAd,EAAmB;AACrBN,IAAAA,UADqB;AAErBG,IAAAA;AAFqB,GAAnB,CA9FU;AAkGduD,EAAAA,MAAM,EAAE,IAAIpD,SAAJ,CAAc,IAAd,EAAoB;AAC1BN,IAAAA,UAD0B;AAE1BG,IAAAA;AAF0B,GAApB,CAlGM;AAsGdwD,EAAAA,WAAW,EAAE,IAAIrD,SAAJ,CAAc,IAAd,EAAoB;AAC/BN,IAAAA,UAD+B;AAE/BG,IAAAA;AAF+B,GAApB,CAtGC;AA0GdyD,EAAAA,YAAY,EAAE,IAAItD,SAAJ,CAAc,IAAd,EAAoB;AAChCN,IAAAA,UADgC;AAEhCG,IAAAA;AAFgC,GAApB,CA1GA;AA8Gd0D,EAAAA,MAAM,EAAE,IAAIvD,SAAJ,CAAc,OAAd,EAAuB;AAC7BF,IAAAA,MAD6B;AAE7BC,IAAAA,OAF6B;AAG7BJ,IAAAA;AAH6B,GAAvB,CA9GM;AAmHd6D,EAAAA,IAAI,EAAE,IAAIxD,SAAJ,CAAc,GAAd,EAAmB;AACvBN,IAAAA,UADuB;AAEvBI,IAAAA,MAFuB;AAGvBH,IAAAA;AAHuB,GAAnB,CAnHQ;AAwHd8D,EAAAA,KAAK,EAAE,IAAIzD,SAAJ,CAAc,GAAd,EAAmB;AACxBN,IAAAA,UADwB;AAExBI,IAAAA,MAFwB;AAGxBH,IAAAA;AAHwB,GAAnB,CAxHO;AA6Hd+D,EAAAA,QAAQ,EAAE3C,WAAW,CAAC,IAAD,EAAO,CAAP,CA7HP;AA8Hd4C,EAAAA,iBAAiB,EAAE5C,WAAW,CAAC,IAAD,EAAO,CAAP,CA9HhB;AA+Hd6C,EAAAA,SAAS,EAAE7C,WAAW,CAAC,IAAD,EAAO,CAAP,CA/HR;AAgId8C,EAAAA,UAAU,EAAE9C,WAAW,CAAC,IAAD,EAAO,CAAP,CAhIT;AAiId+C,EAAAA,SAAS,EAAE/C,WAAW,CAAC,GAAD,EAAM,CAAN,CAjIR;AAkIdgD,EAAAA,UAAU,EAAEhD,WAAW,CAAC,GAAD,EAAM,CAAN,CAlIT;AAmIdiD,EAAAA,UAAU,EAAEjD,WAAW,CAAC,GAAD,EAAM,CAAN,CAnIT;AAoIdkD,EAAAA,QAAQ,EAAElD,WAAW,CAAC,eAAD,EAAkB,CAAlB,CApIP;AAqIdmD,EAAAA,UAAU,EAAEnD,WAAW,CAAC,WAAD,EAAc,CAAd,CArIT;AAsIdoD,EAAAA,QAAQ,EAAEpD,WAAW,CAAC,WAAD,EAAc,CAAd,CAtIP;AAuIdqD,EAAAA,OAAO,EAAE,IAAIpE,SAAJ,CAAc,KAAd,EAAqB;AAC5BN,IAAAA,UAD4B;AAE5BY,IAAAA,KAAK,EAAE,CAFqB;AAG5BR,IAAAA,MAH4B;AAI5BH,IAAAA;AAJ4B,GAArB,CAvIK;AA6Id0E,EAAAA,MAAM,EAAE,IAAIrE,SAAJ,CAAc,GAAd,EAAmB;AACzBM,IAAAA,KAAK,EAAE,EADkB;AAEzBX,IAAAA;AAFyB,GAAnB,CA7IM;AAiJd2E,EAAAA,IAAI,EAAE,IAAItE,SAAJ,CAAc,GAAd,EAAmB;AACvBM,IAAAA,KAAK,EAAE;AADgB,GAAnB,CAjJQ;AAoJdiE,EAAAA,KAAK,EAAExD,WAAW,CAAC,GAAD,EAAM,EAAN,CApJJ;AAqJdyD,EAAAA,QAAQ,EAAE,IAAIxE,SAAJ,CAAc,IAAd,EAAoB;AAC5BN,IAAAA,UAD4B;AAE5BY,IAAAA,KAAK,EAAE,EAFqB;AAG5BD,IAAAA,gBAAgB,EAAE;AAHU,GAApB,CArJI;AA0JdoE,EAAAA,MAAM,EAAE/D,aAAa,CAAC,OAAD,CA1JP;AA2JdgE,EAAAA,KAAK,EAAEhE,aAAa,CAAC,MAAD,EAAS;AAC3BhB,IAAAA;AAD2B,GAAT,CA3JN;AA8JdiF,EAAAA,MAAM,EAAEjE,aAAa,CAAC,OAAD,CA9JP;AA+JdkE,EAAAA,SAAS,EAAElE,aAAa,CAAC,UAAD,CA/JV;AAgKdmE,EAAAA,SAAS,EAAEnE,aAAa,CAAC,UAAD,CAhKV;AAiKdoE,EAAAA,QAAQ,EAAEpE,aAAa,CAAC,SAAD,EAAY;AACjChB,IAAAA;AADiC,GAAZ,CAjKT;AAoKdqF,EAAAA,GAAG,EAAErE,aAAa,CAAC,IAAD,EAAO;AACvBd,IAAAA,MADuB;AAEvBF,IAAAA;AAFuB,GAAP,CApKJ;AAwKdsF,EAAAA,KAAK,EAAEtE,aAAa,CAAC,MAAD,EAAS;AAC3BhB,IAAAA;AAD2B,GAAT,CAxKN;AA2KduF,EAAAA,QAAQ,EAAEvE,aAAa,CAAC,SAAD,CA3KT;AA4KdwE,EAAAA,IAAI,EAAExE,aAAa,CAAC,KAAD,EAAQ;AACzBd,IAAAA;AADyB,GAAR,CA5KL;AA+KduF,EAAAA,SAAS,EAAEzE,aAAa,CAAC,UAAD,EAAa;AACnCf,IAAAA;AADmC,GAAb,CA/KV;AAkLdyF,EAAAA,GAAG,EAAE1E,aAAa,CAAC,IAAD,CAlLJ;AAmLd2E,EAAAA,OAAO,EAAE3E,aAAa,CAAC,QAAD,EAAW;AAC/BhB,IAAAA;AAD+B,GAAX,CAnLR;AAsLd4F,EAAAA,OAAO,EAAE5E,aAAa,CAAC,QAAD,CAtLR;AAuLd6E,EAAAA,MAAM,EAAE7E,aAAa,CAAC,OAAD,EAAU;AAC7BhB,IAAAA,UAD6B;AAE7BI,IAAAA,MAF6B;AAG7BH,IAAAA;AAH6B,GAAV,CAvLP;AA4Ld6F,EAAAA,IAAI,EAAE9E,aAAa,CAAC,KAAD,CA5LL;AA6Ld+E,EAAAA,IAAI,EAAE/E,aAAa,CAAC,KAAD,CA7LL;AA8LdgF,EAAAA,MAAM,EAAEhF,aAAa,CAAC,OAAD,CA9LP;AA+LdiF,EAAAA,MAAM,EAAEjF,aAAa,CAAC,OAAD,EAAU;AAC7Bd,IAAAA;AAD6B,GAAV,CA/LP;AAkMdgG,EAAAA,KAAK,EAAElF,aAAa,CAAC,MAAD,CAlMN;AAmMdmF,EAAAA,IAAI,EAAEnF,aAAa,CAAC,KAAD,EAAQ;AACzBhB,IAAAA,UADyB;AAEzBC,IAAAA;AAFyB,GAAR,CAnML;AAuMdmG,EAAAA,KAAK,EAAEpF,aAAa,CAAC,MAAD,EAAS;AAC3Bf,IAAAA;AAD2B,GAAT,CAvMN;AA0MdoG,EAAAA,MAAM,EAAErF,aAAa,CAAC,OAAD,EAAU;AAC7Bf,IAAAA;AAD6B,GAAV,CA1MP;AA6MdqG,EAAAA,MAAM,EAAEtF,aAAa,CAAC,OAAD,EAAU;AAC7Bf,IAAAA;AAD6B,GAAV,CA7MP;AAgNdsG,EAAAA,QAAQ,EAAEvF,aAAa,CAAC,SAAD,EAAY;AACjChB,IAAAA;AADiC,GAAZ,CAhNT;AAmNdwG,EAAAA,OAAO,EAAExF,aAAa,CAAC,QAAD,CAnNR;AAoNdyF,EAAAA,OAAO,EAAEzF,aAAa,CAAC,QAAD,EAAW;AAC/Bf,IAAAA;AAD+B,GAAX,CApNR;AAuNdyG,EAAAA,KAAK,EAAE1F,aAAa,CAAC,MAAD,EAAS;AAC3Bf,IAAAA;AAD2B,GAAT,CAvNN;AA0Nd0G,EAAAA,KAAK,EAAE3F,aAAa,CAAC,MAAD,EAAS;AAC3Bf,IAAAA;AAD2B,GAAT,CA1NN;AA6Nd2G,EAAAA,MAAM,EAAE5F,aAAa,CAAC,OAAD,EAAU;AAC7Bf,IAAAA;AAD6B,GAAV,CA7NP;AAgOd4G,EAAAA,GAAG,EAAE7F,aAAa,CAAC,IAAD,EAAO;AACvBhB,IAAAA,UADuB;AAEvBY,IAAAA,KAAK,EAAE;AAFgB,GAAP,CAhOJ;AAoOdkG,EAAAA,WAAW,EAAE9F,aAAa,CAAC,YAAD,EAAe;AACvChB,IAAAA,UADuC;AAEvCY,IAAAA,KAAK,EAAE;AAFgC,GAAf,CApOZ;AAwOdmG,EAAAA,OAAO,EAAE/F,aAAa,CAAC,QAAD,EAAW;AAC/BhB,IAAAA,UAD+B;AAE/BI,IAAAA,MAF+B;AAG/BH,IAAAA;AAH+B,GAAX,CAxOR;AA6Od+G,EAAAA,KAAK,EAAEhG,aAAa,CAAC,MAAD,EAAS;AAC3BhB,IAAAA,UAD2B;AAE3BI,IAAAA,MAF2B;AAG3BH,IAAAA;AAH2B,GAAT,CA7ON;AAkPdgH,EAAAA,OAAO,EAAEjG,aAAa,CAAC,QAAD,EAAW;AAC/BhB,IAAAA,UAD+B;AAE/BI,IAAAA,MAF+B;AAG/BH,IAAAA;AAH+B,GAAX;AAlPR,CAAhB;AAyPA,MAAMiH,SAAS,GAAG,wBAAlB;AACA,MAAMC,UAAU,GAAG,IAAIC,MAAJ,CAAWF,SAAS,CAACG,MAArB,EAA6B,GAA7B,CAAnB;;AACA,SAASC,SAAT,CAAmBC,IAAnB,EAAyB;AACvB,UAAQA,IAAR;AACE,SAAK,EAAL;AACA,SAAK,EAAL;AACA,SAAK,IAAL;AACA,SAAK,IAAL;AACE,aAAO,IAAP;;AAEF;AACE,aAAO,KAAP;AARJ;AAUD;;AACD,MAAMC,cAAc,GAAG,+BAAvB;AACA,MAAMC,oBAAoB,GAAG,gDAA7B;AACA,MAAMC,yBAAyB,GAAG,IAAIN,MAAJ,CAAW,SAASK,oBAAoB,CAACJ,MAA9B,GAAuC,OAAvC,GAAiD,2CAA2CA,MAAvG,EAA+G,GAA/G,CAAlC;;AACA,SAASM,YAAT,CAAsBJ,IAAtB,EAA4B;AAC1B,UAAQA,IAAR;AACE,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,EAAL;AACA,SAAK,GAAL;AACA,SAAK,IAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACE,aAAO,IAAP;;AAEF;AACE,aAAO,KAAP;AAzBJ;AA2BD;;AAED,MAAMK,QAAN,CAAe;AACbrH,EAAAA,WAAW,CAACsH,IAAD,EAAOC,GAAP,EAAY;AACrB,SAAKD,IAAL,GAAY,KAAK,CAAjB;AACA,SAAKE,MAAL,GAAc,KAAK,CAAnB;AACA,SAAKF,IAAL,GAAYA,IAAZ;AACA,SAAKE,MAAL,GAAcD,GAAd;AACD;;AANY;;AASf,MAAME,cAAN,CAAqB;AACnBzH,EAAAA,WAAW,CAAC0H,KAAD,EAAQC,GAAR,EAAa;AACtB,SAAKD,KAAL,GAAa,KAAK,CAAlB;AACA,SAAKC,GAAL,GAAW,KAAK,CAAhB;AACA,SAAKC,QAAL,GAAgB,KAAK,CAArB;AACA,SAAKC,cAAL,GAAsB,KAAK,CAA3B;AACA,SAAKH,KAAL,GAAaA,KAAb;AACA,SAAKC,GAAL,GAAWA,GAAX;AACD;;AARkB;;AAWrB,SAASG,WAAT,CAAqBC,KAArB,EAA4BC,MAA5B,EAAoC;AAClC,MAAIV,IAAI,GAAG,CAAX;AACA,MAAIW,SAAS,GAAG,CAAhB;AACA,MAAIC,KAAJ;AACAtB,EAAAA,UAAU,CAACuB,SAAX,GAAuB,CAAvB;;AAEA,SAAO,CAACD,KAAK,GAAGtB,UAAU,CAACwB,IAAX,CAAgBL,KAAhB,CAAT,KAAoCG,KAAK,CAACG,KAAN,GAAcL,MAAzD,EAAiE;AAC/DV,IAAAA,IAAI;AACJW,IAAAA,SAAS,GAAGrB,UAAU,CAACuB,SAAvB;AACD;;AAED,SAAO,IAAId,QAAJ,CAAaC,IAAb,EAAmBU,MAAM,GAAGC,SAA5B,CAAP;AACD;;AAED,MAAMK,UAAN,CAAiB;AACftI,EAAAA,WAAW,GAAG;AACZ,SAAKuI,iBAAL,GAAyB,KAAzB;AACA,SAAKC,2BAAL,GAAmC,KAAnC;AACD;;AAEDC,EAAAA,SAAS,CAAC/H,IAAD,EAAO;AACd,WAAO,KAAKgI,OAAL,CAAaC,GAAb,CAAiBjI,IAAjB,CAAP;AACD;;AAEDkI,EAAAA,eAAe,CAACC,MAAD,EAASnI,IAAT,EAAe;AAC5B,QAAI,KAAK+H,SAAL,CAAeI,MAAf,CAAJ,EAA4B,OAAO,KAAKH,OAAL,CAAaI,GAAb,CAAiBD,MAAjB,EAAyBnI,IAAzB,CAAP;AAC7B;;AAZc;;AAgBjB,SAASqI,mBAAT,CAA6BC,IAA7B,EAAmCC,QAAnC,EAA6C;AAC3C,MAAID,IAAI,CAACE,gBAAL,KAA0BC,SAA9B,EAAyC;AACvCH,IAAAA,IAAI,CAACE,gBAAL,GAAwBD,QAAxB;AACD,GAFD,MAEO;AACLD,IAAAA,IAAI,CAACE,gBAAL,CAAsBE,OAAtB,CAA8B,GAAGH,QAAjC;AACD;AACF;;AAED,SAASI,gBAAT,CAA0BL,IAA1B,EAAgCC,QAAhC,EAA0C;AACxC,MAAID,IAAI,CAACM,aAAL,KAAuBH,SAA3B,EAAsC;AACpCH,IAAAA,IAAI,CAACM,aAAL,GAAqBL,QAArB;AACD,GAFD,MAEO,IAAIA,QAAQ,KAAKE,SAAjB,EAA4B;AACjCH,IAAAA,IAAI,CAACM,aAAL,CAAmBF,OAAnB,CAA2B,GAAGH,QAA9B;AACD;AACF;;AAED,SAASM,mBAAT,CAA6BP,IAA7B,EAAmCQ,QAAnC,EAA6CC,SAA7C,EAAwD;AACtD,MAAIC,WAAW,GAAG,IAAlB;AACA,MAAIC,CAAC,GAAGH,QAAQ,CAACI,MAAjB;;AAEA,SAAOF,WAAW,KAAK,IAAhB,IAAwBC,CAAC,GAAG,CAAnC,EAAsC;AACpCD,IAAAA,WAAW,GAAGF,QAAQ,CAAC,EAAEG,CAAH,CAAtB;AACD;;AAED,MAAID,WAAW,KAAK,IAAhB,IAAwBA,WAAW,CAAChC,KAAZ,GAAoB+B,SAAS,CAAC/B,KAA1D,EAAiE;AAC/D2B,IAAAA,gBAAgB,CAACL,IAAD,EAAOS,SAAS,CAACR,QAAjB,CAAhB;AACD,GAFD,MAEO;AACLF,IAAAA,mBAAmB,CAACW,WAAD,EAAcD,SAAS,CAACR,QAAxB,CAAnB;AACD;AACF;;AAED,MAAMY,cAAN,SAA6BvB,UAA7B,CAAwC;AACtCwB,EAAAA,UAAU,CAACC,OAAD,EAAU;AAClB,QAAI,KAAKnC,QAAT,EAAmBmC,OAAO,CAACC,GAAR,CAAYpC,QAAZ,GAAuB,KAAKA,QAA5B;AACnB,SAAKqC,KAAL,CAAWhB,QAAX,CAAoBiB,IAApB,CAAyBH,OAAzB;AACD;;AAEDI,EAAAA,cAAc,CAACnB,IAAD,EAAO;AACnB,UAAM;AACJoB,MAAAA;AADI,QAEF,KAAKH,KAFT;AAGA,UAAMI,kBAAkB,GAAGD,YAAY,CAACR,MAAxC;AACA,QAAIS,kBAAkB,KAAK,CAA3B,EAA8B;AAC9B,QAAIV,CAAC,GAAGU,kBAAkB,GAAG,CAA7B;AACA,UAAMC,aAAa,GAAGF,YAAY,CAACT,CAAD,CAAlC;;AAEA,QAAIW,aAAa,CAAC5C,KAAd,KAAwBsB,IAAI,CAACrB,GAAjC,EAAsC;AACpC2C,MAAAA,aAAa,CAACC,WAAd,GAA4BvB,IAA5B;AACAW,MAAAA,CAAC;AACF;;AAED,UAAM;AACJjC,MAAAA,KAAK,EAAE8C;AADH,QAEFxB,IAFJ;;AAIA,WAAOW,CAAC,IAAI,CAAZ,EAAeA,CAAC,EAAhB,EAAoB;AAClB,YAAMF,SAAS,GAAGW,YAAY,CAACT,CAAD,CAA9B;AACA,YAAMc,UAAU,GAAGhB,SAAS,CAAC9B,GAA7B;;AAEA,UAAI8C,UAAU,GAAGD,SAAjB,EAA4B;AAC1Bf,QAAAA,SAAS,CAACiB,cAAV,GAA2B1B,IAA3B;AACA,aAAK2B,eAAL,CAAqBlB,SAArB;AACAW,QAAAA,YAAY,CAACQ,MAAb,CAAoBjB,CAApB,EAAuB,CAAvB;AACD,OAJD,MAIO;AACL,YAAIc,UAAU,KAAKD,SAAnB,EAA8B;AAC5Bf,UAAAA,SAAS,CAACoB,YAAV,GAAyB7B,IAAzB;AACD;;AAED;AACD;AACF;AACF;;AAED2B,EAAAA,eAAe,CAAClB,SAAD,EAAY;AACzB,UAAM;AACJR,MAAAA;AADI,QAEFQ,SAFJ;;AAIA,QAAIA,SAAS,CAACc,WAAV,KAA0B,IAA1B,IAAkCd,SAAS,CAACoB,YAAV,KAA2B,IAAjE,EAAuE;AACrE,UAAIpB,SAAS,CAACc,WAAV,KAA0B,IAA9B,EAAoC;AAClCxB,QAAAA,mBAAmB,CAACU,SAAS,CAACc,WAAX,EAAwBtB,QAAxB,CAAnB;AACD;;AAED,UAAIQ,SAAS,CAACoB,YAAV,KAA2B,IAA/B,EAAqC;AACnCpB,QAAAA,SAAS,CAACoB,YAAV,CAAuBC,eAAvB,GAAyC7B,QAAzC;AACD;AACF,KARD,MAQO;AACL,YAAM;AACJyB,QAAAA,cAAc,EAAE1B,IADZ;AAEJtB,QAAAA,KAAK,EAAEqD;AAFH,UAGFtB,SAHJ;;AAKA,UAAI,KAAK1B,KAAL,CAAWiD,UAAX,CAAsBD,YAAY,GAAG,CAArC,MAA4C,EAAhD,EAAoD;AAClD,gBAAQ/B,IAAI,CAACiC,IAAb;AACE,eAAK,kBAAL;AACA,eAAK,eAAL;AACA,eAAK,kBAAL;AACE1B,YAAAA,mBAAmB,CAACP,IAAD,EAAOA,IAAI,CAACkC,UAAZ,EAAwBzB,SAAxB,CAAnB;AACA;;AAEF,eAAK,gBAAL;AACA,eAAK,wBAAL;AACEF,YAAAA,mBAAmB,CAACP,IAAD,EAAOA,IAAI,CAACmC,SAAZ,EAAuB1B,SAAvB,CAAnB;AACA;;AAEF,eAAK,qBAAL;AACA,eAAK,oBAAL;AACA,eAAK,yBAAL;AACA,eAAK,cAAL;AACA,eAAK,aAAL;AACA,eAAK,oBAAL;AACEF,YAAAA,mBAAmB,CAACP,IAAD,EAAOA,IAAI,CAACoC,MAAZ,EAAoB3B,SAApB,CAAnB;AACA;;AAEF,eAAK,iBAAL;AACA,eAAK,cAAL;AACA,eAAK,iBAAL;AACEF,YAAAA,mBAAmB,CAACP,IAAD,EAAOA,IAAI,CAACQ,QAAZ,EAAsBC,SAAtB,CAAnB;AACA;;AAEF,eAAK,wBAAL;AACA,eAAK,mBAAL;AACEF,YAAAA,mBAAmB,CAACP,IAAD,EAAOA,IAAI,CAACqC,UAAZ,EAAwB5B,SAAxB,CAAnB;AACA;;AAEF;AACE;AACEJ,cAAAA,gBAAgB,CAACL,IAAD,EAAOC,QAAP,CAAhB;AACD;AAnCL;AAqCD,OAtCD,MAsCO;AACLI,QAAAA,gBAAgB,CAACL,IAAD,EAAOC,QAAP,CAAhB;AACD;AACF;AACF;;AAEDqC,EAAAA,yBAAyB,GAAG;AAC1B,UAAM;AACJlB,MAAAA;AADI,QAEF,KAAKH,KAFT;;AAIA,SAAK,IAAIN,CAAC,GAAGS,YAAY,CAACR,MAAb,GAAsB,CAAnC,EAAsCD,CAAC,IAAI,CAA3C,EAA8CA,CAAC,EAA/C,EAAmD;AACjD,WAAKgB,eAAL,CAAqBP,YAAY,CAACT,CAAD,CAAjC;AACD;;AAED,SAAKM,KAAL,CAAWG,YAAX,GAA0B,EAA1B;AACD;;AAEDmB,EAAAA,iCAAiC,CAACvC,IAAD,EAAO;AACtC,UAAM;AACJoB,MAAAA;AADI,QAEF,KAAKH,KAFT;AAGA,UAAM;AACJL,MAAAA;AADI,QAEFQ,YAFJ;AAGA,QAAIR,MAAM,KAAK,CAAf,EAAkB;AAClB,UAAMH,SAAS,GAAGW,YAAY,CAACR,MAAM,GAAG,CAAV,CAA9B;;AAEA,QAAIH,SAAS,CAACc,WAAV,KAA0BvB,IAA9B,EAAoC;AAClCS,MAAAA,SAAS,CAACc,WAAV,GAAwB,IAAxB;AACD;AACF;;AAlIqC;;AAsIxC,MAAMiB,UAAU,GAAGnM,MAAM,CAACoM,MAAP,CAAc;AAC/BC,EAAAA,WAAW,EAAE,2BADkB;AAE/BC,EAAAA,qBAAqB,EAAE;AAFQ,CAAd,CAAnB;AAKA,MAAMC,aAAa,GAAGC,kBAAkB,CAAC;AACvCC,EAAAA,mBAAmB,EAAE,gCADkB;AAEvCC,EAAAA,gBAAgB,EAAE,6DAFqB;AAGvCC,EAAAA,qCAAqC,EAAE,0EAHA;AAIvCC,EAAAA,sBAAsB,EAAE,6DAJe;AAKvCC,EAAAA,mCAAmC,EAAE,0DALE;AAMvCC,EAAAA,8BAA8B,EAAE,sDANO;AAOvCC,EAAAA,sBAAsB,EAAE,kFAPe;AAQvCC,EAAAA,uBAAuB,EAAE,iDARc;AASvCC,EAAAA,cAAc,EAAE,sDATuB;AAUvCC,EAAAA,cAAc,EAAE,yDAVuB;AAWvCC,EAAAA,sBAAsB,EAAE,iEAXe;AAYvCC,EAAAA,qBAAqB,EAAE,mDAZgB;AAavCC,EAAAA,4BAA4B,EAAE,4DAbS;AAcvCC,EAAAA,qBAAqB,EAAE,2CAdgB;AAevCC,EAAAA,kBAAkB,EAAE,yCAfmB;AAgBvCC,EAAAA,sBAAsB,EAAE,mCAhBe;AAiBvCC,EAAAA,6BAA6B,EAAE,uCAjBQ;AAkBvCC,EAAAA,qBAAqB,EAAE,mKAlBgB;AAmBvCC,EAAAA,oBAAoB,EAAE,iFAnBiB;AAoBvCC,EAAAA,oBAAoB,EAAE,kHApBiB;AAqBvCC,EAAAA,kBAAkB,EAAE,iDArBmB;AAsBvCC,EAAAA,oBAAoB,EAAE,+CAtBiB;AAuBvCC,EAAAA,kBAAkB,EAAE,0CAvBmB;AAwBvCC,EAAAA,sBAAsB,EAAE,oGAxBe;AAyBvCC,EAAAA,oBAAoB,EAAE,0CAzBiB;AA0BvCC,EAAAA,sBAAsB,EAAE,6CA1Be;AA2BvCC,EAAAA,eAAe,EAAE,sEA3BsB;AA4BvCC,EAAAA,cAAc,EAAE,qCA5BuB;AA6BvCC,EAAAA,oBAAoB,EAAE,oCA7BiB;AA8BvCC,EAAAA,gBAAgB,EAAE,oCA9BqB;AA+BvCC,EAAAA,0BAA0B,EAAE,yBA/BW;AAgCvCC,EAAAA,qBAAqB,EAAE,sIAhCgB;AAiCvCC,EAAAA,6BAA6B,EAAE,gEAjCQ;AAkCvCC,EAAAA,sBAAsB,EAAE,6DAlCe;AAmCvCC,EAAAA,UAAU,EAAE,yDAnC2B;AAoCvCC,EAAAA,QAAQ,EAAE,+DApC6B;AAqCvCC,EAAAA,iCAAiC,EAAE,qEArCI;AAsCvCC,EAAAA,oBAAoB,EAAE,iBAtCiB;AAuCvCC,EAAAA,4BAA4B,EAAE,4EAvCS;AAwCvCC,EAAAA,aAAa,EAAE,+BAxCwB;AAyCvCC,EAAAA,qBAAqB,EAAE,mGAzCgB;AA0CvCC,EAAAA,+BAA+B,EAAE,4DA1CM;AA2CvCC,EAAAA,eAAe,EAAE,iCA3CsB;AA4CvCC,EAAAA,0BAA0B,EAAE,kCA5CW;AA6CvCC,EAAAA,wBAAwB,EAAE,qCA7Ca;AA8CvCC,EAAAA,oBAAoB,EAAE,wBA9CiB;AA+CvCC,EAAAA,gBAAgB,EAAE,2BA/CqB;AAgDvCC,EAAAA,cAAc,EAAE,kBAhDuB;AAiDvCC,EAAAA,YAAY,EAAE,8BAjDyB;AAkDvCC,EAAAA,qBAAqB,EAAE,gCAlDgB;AAmDvCC,EAAAA,6BAA6B,EAAE,sCAnDQ;AAoDvCC,EAAAA,0BAA0B,EAAE,gCApDW;AAqDvCC,EAAAA,iBAAiB,EAAE,wBArDoB;AAsDvCC,EAAAA,UAAU,EAAE,+BAtD2B;AAuDvCC,EAAAA,iBAAiB,EAAE,uCAvDoB;AAwDvCC,EAAAA,aAAa,EAAE,iBAxDwB;AAyDvCC,EAAAA,wBAAwB,EAAE,gEAzDa;AA0DvCC,EAAAA,wBAAwB,EAAE,4BA1Da;AA2DvCC,EAAAA,8BAA8B,EAAE,2CA3DO;AA4DvCC,EAAAA,6BAA6B,EAAE,kCA5DQ;AA6DvCC,EAAAA,6BAA6B,EAAE,4BA7DQ;AA8DvCC,EAAAA,qBAAqB,EAAE,wEA9DgB;AA+DvCC,EAAAA,4BAA4B,EAAE,mCA/DS;AAgEvCC,EAAAA,kBAAkB,EAAE,iCAhEmB;AAiEvCC,EAAAA,mBAAmB,EAAE,6EAjEkB;AAkEvCC,EAAAA,yBAAyB,EAAE,uCAlEY;AAmEvCC,EAAAA,oBAAoB,EAAE,kCAnEiB;AAoEvCC,EAAAA,gBAAgB,EAAE,2BApEqB;AAqEvCC,EAAAA,qBAAqB,EAAE,6DArEgB;AAsEvCC,EAAAA,gBAAgB,EAAE,oBAtEqB;AAuEvCC,EAAAA,oBAAoB,EAAE,4CAvEiB;AAwEvCC,EAAAA,yBAAyB,EAAE,qFAxEY;AAyEvCC,EAAAA,gCAAgC,EAAE,+CAzEK;AA0EvCC,EAAAA,2BAA2B,EAAE,8DA1EU;AA2EvCC,EAAAA,iCAAiC,EAAE,yDA3EI;AA4EvCC,EAAAA,gCAAgC,EAAE,gEA5EK;AA6EvCC,EAAAA,qBAAqB,EAAE,6BA7EgB;AA8EvCC,EAAAA,wBAAwB,EAAE,2BA9Ea;AA+EvCC,EAAAA,iBAAiB,EAAE,8BA/EoB;AAgFvCC,EAAAA,gBAAgB,EAAE,kCAhFqB;AAiFvCC,EAAAA,gBAAgB,EAAE,mCAjFqB;AAkFvCC,EAAAA,gCAAgC,EAAE,6FAlFK;AAmFvCC,EAAAA,iBAAiB,EAAE,yFAnFoB;AAoFvCC,EAAAA,qBAAqB,EAAE,0DApFgB;AAqFvCC,EAAAA,0BAA0B,EAAE,4DArFW;AAsFvCC,EAAAA,qBAAqB,EAAE,iEAtFgB;AAuFvCC,EAAAA,SAAS,EAAE,sBAvF4B;AAwFvCC,EAAAA,kBAAkB,EAAE,gDAxFmB;AAyFvCC,EAAAA,gBAAgB,EAAE,uCAzFqB;AA0FvCC,EAAAA,iBAAiB,EAAE,iJA1FoB;AA2FvCC,EAAAA,0BAA0B,EAAE,iHA3FW;AA4FvCC,EAAAA,gBAAgB,EAAE,4DA5FqB;AA6FvCC,EAAAA,0BAA0B,EAAE,kKA7FW;AA8FvCC,EAAAA,eAAe,EAAE,yGA9FsB;AA+FvCC,EAAAA,mBAAmB,EAAE,mGA/FkB;AAgGvCC,EAAAA,8BAA8B,EAAE,iEAhGO;AAiGvCC,EAAAA,8BAA8B,EAAE,oEAjGO;AAkGvCC,EAAAA,mBAAmB,EAAE,8DAlGkB;AAmGvCC,EAAAA,sBAAsB,EAAE,sEAnGe;AAoGvCC,EAAAA,iCAAiC,EAAE,iHApGI;AAqGvCC,EAAAA,mBAAmB,EAAE,wGArGkB;AAsGvCC,EAAAA,wBAAwB,EAAE,6BAtGa;AAuGvCC,EAAAA,yCAAyC,EAAE,mIAvGJ;AAwGvCC,EAAAA,2CAA2C,EAAE,qIAxGN;AAyGvCC,EAAAA,4CAA4C,EAAE,sIAzGP;AA0GvCC,EAAAA,aAAa,EAAE,mDA1GwB;AA2GvCC,EAAAA,iBAAiB,EAAE,+CA3GoB;AA4GvCC,EAAAA,cAAc,EAAE,0HA5GuB;AA6GvCC,EAAAA,eAAe,EAAE,uDA7GsB;AA8GvCC,EAAAA,YAAY,EAAE,yCA9GyB;AA+GvCC,EAAAA,mBAAmB,EAAE,mCA/GkB;AAgHvCC,EAAAA,0BAA0B,EAAE,8BAhHW;AAiHvCC,EAAAA,cAAc,EAAE,qFAjHuB;AAkHvCC,EAAAA,mBAAmB,EAAE,wDAlHkB;AAmHvCC,EAAAA,kBAAkB,EAAE,uDAnHmB;AAoHvCC,EAAAA,UAAU,EAAE,wBApH2B;AAqHvCC,EAAAA,eAAe,EAAE,mJArHsB;AAsHvCC,EAAAA,iBAAiB,EAAE,4CAtHoB;AAuHvCC,EAAAA,iBAAiB,EAAE,iDAvHoB;AAwHvCC,EAAAA,wCAAwC,EAAE,kIAxHH;AAyHvCC,EAAAA,0CAA0C,EAAE,oIAzHL;AA0HvCC,EAAAA,2CAA2C,EAAE,qIA1HN;AA2HvCC,EAAAA,6BAA6B,EAAE,kCA3HQ;AA4HvCC,EAAAA,gCAAgC,EAAE,0FA5HK;AA6HvCC,EAAAA,wBAAwB,EAAE,oCA7Ha;AA8HvCC,EAAAA,sBAAsB,EAAE,yDA9He;AA+HvCC,EAAAA,iBAAiB,EAAE,0BA/HoB;AAgIvCC,EAAAA,0BAA0B,EAAE,6DAhIW;AAiIvCC,EAAAA,4BAA4B,EAAE,kEAjIS;AAkIvCC,EAAAA,mBAAmB,EAAE,iEAlIkB;AAmIvCC,EAAAA,0BAA0B,EAAE,yDAnIW;AAoIvCC,EAAAA,sBAAsB,EAAE,yJApIe;AAqIvCC,EAAAA,sBAAsB,EAAE,gCArIe;AAsIvCC,EAAAA,eAAe,EAAE,wDAtIsB;AAuIvCC,EAAAA,eAAe,EAAE,wBAvIsB;AAwIvCC,EAAAA,kCAAkC,EAAE,kFAxIG;AAyIvCC,EAAAA,eAAe,EAAE,iDAzIsB;AA0IvCC,EAAAA,0BAA0B,EAAE,qDA1IW;AA2IvCC,EAAAA,wBAAwB,EAAE,6EA3Ia;AA4IvCC,EAAAA,iBAAiB,EAAE,2DA5IoB;AA6IvCC,EAAAA,uBAAuB,EAAE,+CA7Ic;AA8IvCC,EAAAA,6BAA6B,EAAE,mDA9IQ;AA+IvCC,EAAAA,4BAA4B,EAAE,kEA/IS;AAgJvCC,EAAAA,gBAAgB,EAAE,uHAhJqB;AAiJvCC,EAAAA,mBAAmB,EAAE,uBAjJkB;AAkJvCC,EAAAA,kBAAkB,EAAE,kCAlJmB;AAmJvCC,EAAAA,kBAAkB,EAAE,+BAnJmB;AAoJvCC,EAAAA,oBAAoB,EAAE,wBApJiB;AAqJvCC,EAAAA,gBAAgB,EAAE,4CArJqB;AAsJvCC,EAAAA,sBAAsB,EAAE,uDAtJe;AAuJvCC,EAAAA,gBAAgB,EAAE,uDAvJqB;AAwJvCC,EAAAA,yBAAyB,EAAE;AAxJY,CAAD,EAyJrC7J,UAAU,CAACE,WAzJ0B,CAAxC;AA0JA,MAAM4J,6BAA6B,GAAGzJ,kBAAkB,CAAC;AACvD0J,EAAAA,uBAAuB,EAAG,yDAD6B;AAEvDC,EAAAA,mBAAmB,EAAG;AAFiC,CAAD,EAGrDhK,UAAU,CAACG,qBAH0C,CAAxD;;AAKA,SAASE,kBAAT,CAA4B4J,QAA5B,EAAsCzO,IAAtC,EAA4C;AAC1C,QAAM0O,SAAS,GAAG,EAAlB;AACArW,EAAAA,MAAM,CAACsW,IAAP,CAAYF,QAAZ,EAAsBG,OAAtB,CAA8BC,UAAU,IAAI;AAC1CH,IAAAA,SAAS,CAACG,UAAD,CAAT,GAAwBxW,MAAM,CAACoM,MAAP,CAAc;AACpCzE,MAAAA,IADoC;AAEpC6O,MAAAA,UAFoC;AAGpClT,MAAAA,QAAQ,EAAE8S,QAAQ,CAACI,UAAD;AAHkB,KAAd,CAAxB;AAKD,GAND;AAOA,SAAOxW,MAAM,CAACoM,MAAP,CAAciK,SAAd,CAAP;AACD;;AACD,MAAMI,WAAN,SAA0BjM,cAA1B,CAAyC;AACvCkM,EAAAA,sBAAsB,CAACC,GAAD,EAAM;AAC1B,QAAIhM,GAAJ;AACA,QAAIgM,GAAG,KAAK,KAAK/L,KAAL,CAAWvC,KAAvB,EAA8BsC,GAAG,GAAG,KAAKC,KAAL,CAAWgM,QAAjB,CAA9B,KAA6D,IAAID,GAAG,KAAK,KAAK/L,KAAL,CAAWiM,YAAvB,EAAqClM,GAAG,GAAG,KAAKC,KAAL,CAAWkM,eAAjB,CAArC,KAA2E,IAAIH,GAAG,KAAK,KAAK/L,KAAL,CAAWtC,GAAvB,EAA4BqC,GAAG,GAAG,KAAKC,KAAL,CAAWmM,MAAjB,CAA5B,KAAyD,IAAIJ,GAAG,KAAK,KAAK/L,KAAL,CAAWoM,UAAvB,EAAmCrM,GAAG,GAAG,KAAKC,KAAL,CAAWqM,aAAjB,CAAnC,KAAuEtM,GAAG,GAAGlC,WAAW,CAAC,KAAKC,KAAN,EAAaiO,GAAb,CAAjB;AACxQ,WAAOhM,GAAP;AACD;;AAEDuM,EAAAA,KAAK,CAACP,GAAD,EAAM;AACThP,IAAAA,IADS;AAET6O,IAAAA,UAFS;AAGTlT,IAAAA;AAHS,GAAN,EAIF,GAAGyI,MAJD,EAIS;AACZ,WAAO,KAAKoL,aAAL,CAAmBR,GAAnB,EAAwB;AAC7BhP,MAAAA,IAD6B;AAE7B6O,MAAAA;AAF6B,KAAxB,EAGJlT,QAHI,EAGM,GAAGyI,MAHT,CAAP;AAID;;AAEDqL,EAAAA,cAAc,CAACT,GAAD,EAAM;AAClBhP,IAAAA,IADkB;AAElBrE,IAAAA;AAFkB,GAAN,EAGX,GAAGyI,MAHQ,EAGA;AACZ,UAAMpB,GAAG,GAAG,KAAK+L,sBAAL,CAA4BC,GAA5B,CAAZ;AACA,UAAMU,OAAO,GAAG/T,QAAQ,CAACgU,OAAT,CAAiB,SAAjB,EAA4B,CAACC,CAAD,EAAIjN,CAAJ,KAAUyB,MAAM,CAACzB,CAAD,CAA5C,IAAoD,KAAIK,GAAG,CAAC1C,IAAK,IAAG0C,GAAG,CAACxC,MAAO,GAA/F;;AAEA,QAAI,KAAK7G,OAAL,CAAakW,aAAjB,EAAgC;AAC9B,YAAMC,MAAM,GAAG,KAAK7M,KAAL,CAAW6M,MAA1B;;AAEA,WAAK,IAAInN,CAAC,GAAGmN,MAAM,CAAClN,MAAP,GAAgB,CAA7B,EAAgCD,CAAC,IAAI,CAArC,EAAwCA,CAAC,EAAzC,EAA6C;AAC3C,cAAMoN,KAAK,GAAGD,MAAM,CAACnN,CAAD,CAApB;;AAEA,YAAIoN,KAAK,CAACf,GAAN,KAAcA,GAAlB,EAAuB;AACrB,iBAAO3W,MAAM,CAAC8D,MAAP,CAAc4T,KAAd,EAAqB;AAC1BL,YAAAA;AAD0B,WAArB,CAAP;AAGD,SAJD,MAIO,IAAIK,KAAK,CAACf,GAAN,GAAYA,GAAhB,EAAqB;AAC1B;AACD;AACF;AACF;;AAED,WAAO,KAAKgB,MAAL,CAAY;AACjBhQ,MAAAA,IADiB;AAEjBgD,MAAAA,GAFiB;AAGjBgM,MAAAA;AAHiB,KAAZ,EAIJU,OAJI,CAAP;AAKD;;AAEDF,EAAAA,aAAa,CAACR,GAAD,EAAMiB,IAAN,EAAYC,aAAZ,EAA2B,GAAG9L,MAA9B,EAAsC;AACjD,UAAMpB,GAAG,GAAG,KAAK+L,sBAAL,CAA4BC,GAA5B,CAAZ;AACA,UAAMU,OAAO,GAAGQ,aAAa,CAACP,OAAd,CAAsB,SAAtB,EAAiC,CAACC,CAAD,EAAIjN,CAAJ,KAAUyB,MAAM,CAACzB,CAAD,CAAjD,IAAyD,KAAIK,GAAG,CAAC1C,IAAK,IAAG0C,GAAG,CAACxC,MAAO,GAApG;AACA,WAAO,KAAKwP,MAAL,CAAY3X,MAAM,CAAC8D,MAAP,CAAc;AAC/B6G,MAAAA,GAD+B;AAE/BgM,MAAAA;AAF+B,KAAd,EAGhBiB,IAHgB,CAAZ,EAGGP,OAHH,CAAP;AAID;;AAEDM,EAAAA,MAAM,CAACG,YAAD,EAAeT,OAAf,EAAwB;AAC5B,UAAMU,GAAG,GAAG,IAAI1L,WAAJ,CAAgBgL,OAAhB,CAAZ;AACArX,IAAAA,MAAM,CAAC8D,MAAP,CAAciU,GAAd,EAAmBD,YAAnB;;AAEA,QAAI,KAAKxW,OAAL,CAAakW,aAAjB,EAAgC;AAC9B,UAAI,CAAC,KAAKQ,WAAV,EAAuB,KAAKpN,KAAL,CAAW6M,MAAX,CAAkB5M,IAAlB,CAAuBkN,GAAvB;AACvB,aAAOA,GAAP;AACD,KAHD,MAGO;AACL,YAAMA,GAAN;AACD;AACF;;AAnEsC;;AAuEzC,IAAIE,MAAM,GAAIC,UAAU,IAAI,cAAcA,UAAd,CAAyB;AACnDC,EAAAA,kBAAkB,CAAC;AACjBC,IAAAA,OADiB;AAEjBC,IAAAA;AAFiB,GAAD,EAGf;AACD,QAAIC,KAAK,GAAG,IAAZ;;AAEA,QAAI;AACFA,MAAAA,KAAK,GAAG,IAAI9Q,MAAJ,CAAW4Q,OAAX,EAAoBC,KAApB,CAAR;AACD,KAFD,CAEE,OAAOE,CAAP,EAAU,CAAE;;AAEd,UAAM5O,IAAI,GAAG,KAAK6O,kBAAL,CAAwBF,KAAxB,CAAb;AACA3O,IAAAA,IAAI,CAAC2O,KAAL,GAAa;AACXF,MAAAA,OADW;AAEXC,MAAAA;AAFW,KAAb;AAIA,WAAO1O,IAAP;AACD;;AAED8O,EAAAA,kBAAkB,CAACtY,KAAD,EAAQ;AACxB,QAAIuY,MAAJ;;AAEA,QAAI;AACFA,MAAAA,MAAM,GAAGC,MAAM,CAACxY,KAAD,CAAf;AACD,KAFD,CAEE,OAAOyY,OAAP,EAAgB;AAChBF,MAAAA,MAAM,GAAG,IAAT;AACD;;AAED,UAAM/O,IAAI,GAAG,KAAK6O,kBAAL,CAAwBE,MAAxB,CAAb;AACA/O,IAAAA,IAAI,CAAC/H,MAAL,GAAciX,MAAM,CAAClP,IAAI,CAACxJ,KAAL,IAAcA,KAAf,CAApB;AACA,WAAOwJ,IAAP;AACD;;AAEDmP,EAAAA,mBAAmB,CAAC3Y,KAAD,EAAQ;AACzB,UAAM0B,OAAO,GAAG,IAAhB;AACA,UAAM8H,IAAI,GAAG,KAAK6O,kBAAL,CAAwB3W,OAAxB,CAAb;AACA8H,IAAAA,IAAI,CAAC9H,OAAL,GAAegX,MAAM,CAAClP,IAAI,CAACxJ,KAAL,IAAcA,KAAf,CAArB;AACA,WAAOwJ,IAAP;AACD;;AAED6O,EAAAA,kBAAkB,CAACrY,KAAD,EAAQ;AACxB,WAAO,KAAK4Y,YAAL,CAAkB5Y,KAAlB,EAAyB,SAAzB,CAAP;AACD;;AAED6Y,EAAAA,kBAAkB,CAAC7Y,KAAD,EAAQ;AACxB,WAAO,KAAKqY,kBAAL,CAAwBrY,KAAxB,CAAP;AACD;;AAED8Y,EAAAA,mBAAmB,CAAC9Y,KAAD,EAAQ;AACzB,WAAO,KAAKqY,kBAAL,CAAwBrY,KAAxB,CAAP;AACD;;AAED+Y,EAAAA,gBAAgB,GAAG;AACjB,WAAO,KAAKV,kBAAL,CAAwB,IAAxB,CAAP;AACD;;AAEDW,EAAAA,mBAAmB,CAAChZ,KAAD,EAAQ;AACzB,WAAO,KAAKqY,kBAAL,CAAwBrY,KAAxB,CAAP;AACD;;AAEDiZ,EAAAA,eAAe,CAACC,SAAD,EAAY;AACzB,UAAMC,gBAAgB,GAAGD,SAAS,CAAClZ,KAAnC;AACA,UAAMoZ,IAAI,GAAG,KAAKC,WAAL,CAAiBH,SAAS,CAAChR,KAA3B,EAAkCgR,SAAS,CAAC1O,GAAV,CAActC,KAAhD,CAAb;AACA,UAAMoR,UAAU,GAAG,KAAKD,WAAL,CAAiBF,gBAAgB,CAACjR,KAAlC,EAAyCiR,gBAAgB,CAAC3O,GAAjB,CAAqBtC,KAA9D,CAAnB;AACAoR,IAAAA,UAAU,CAACtZ,KAAX,GAAmBmZ,gBAAgB,CAACI,KAAjB,CAAuBC,eAA1C;AACAF,IAAAA,UAAU,CAACG,GAAX,GAAiBN,gBAAgB,CAACI,KAAjB,CAAuBE,GAAxC;AACAL,IAAAA,IAAI,CAACE,UAAL,GAAkB,KAAKI,YAAL,CAAkBJ,UAAlB,EAA8B,SAA9B,EAAyCH,gBAAgB,CAAChR,GAA1D,EAA+DgR,gBAAgB,CAAC3O,GAAjB,CAAqBrC,GAApF,CAAlB;AACAiR,IAAAA,IAAI,CAACF,SAAL,GAAiBC,gBAAgB,CAACI,KAAjB,CAAuBE,GAAvB,CAA2BE,KAA3B,CAAiC,CAAjC,EAAoC,CAAC,CAArC,CAAjB;AACA,WAAO,KAAKD,YAAL,CAAkBN,IAAlB,EAAwB,qBAAxB,EAA+CF,SAAS,CAAC/Q,GAAzD,EAA8D+Q,SAAS,CAAC1O,GAAV,CAAcrC,GAA5E,CAAP;AACD;;AAEDyR,EAAAA,YAAY,CAACpQ,IAAD,EAAOqQ,OAAP,EAAgB;AAC1B,UAAMD,YAAN,CAAmBpQ,IAAnB,EAAyBqQ,OAAzB;AACArQ,IAAAA,IAAI,CAAC8P,UAAL,GAAkB,KAAlB;AACD;;AAEDQ,EAAAA,gBAAgB,CAACtQ,IAAD,EAAO;AACrB,QAAIA,IAAI,IAAI,IAAR,IAAgB,KAAKuQ,gBAAL,CAAsBvQ,IAAtB,CAApB,EAAiD;AAC/C,WAAKsQ,gBAAL,CAAsBtQ,IAAI,CAACxJ,KAA3B;AACD,KAFD,MAEO;AACL,YAAM8Z,gBAAN,CAAuBtQ,IAAvB;AACD;AACF;;AAEDwQ,EAAAA,4BAA4B,CAACC,MAAD,EAAS;AACnC,WAAOA,MAAM,CAACja,KAAP,CAAa4L,MAApB;AACD;;AAEDsO,EAAAA,gBAAgB,CAACd,IAAD,EAAO;AACrB,QAAIe,qBAAJ;;AAEA,WAAOf,IAAI,CAAC3N,IAAL,KAAc,qBAAd,IAAuC2N,IAAI,CAACE,UAAL,CAAgB7N,IAAhB,KAAyB,SAAhE,IAA6E,OAAO2N,IAAI,CAACE,UAAL,CAAgBtZ,KAAvB,KAAiC,QAA9G,IAA0H,EAAE,CAACma,qBAAqB,GAAGf,IAAI,CAACE,UAAL,CAAgBC,KAAzC,KAAmD,IAAnD,IAA2DY,qBAAqB,CAACC,aAAnF,CAAjI;AACD;;AAEDC,EAAAA,eAAe,CAACjB,IAAD,EAAO;AACpB,UAAMpZ,KAAK,GAAGoZ,IAAI,CAACE,UAAL,CAAgBtZ,KAA9B;AACA,UAAMkZ,SAAS,GAAG,MAAMmB,eAAN,CAAsBjB,IAAtB,CAAlB;AACA,SAAKkB,QAAL,CAAcpB,SAAS,CAAClZ,KAAxB,EAA+B,iBAA/B,EAAkDA,KAAlD;AACA,WAAOkZ,SAAP;AACD;;AAEDqB,EAAAA,cAAc,CAAC/Q,IAAD,EAAO,GAAGgR,IAAV,EAAgB;AAC5B,UAAMD,cAAN,CAAqB/Q,IAArB,EAA2B,GAAGgR,IAA9B;AACA,UAAMC,mBAAmB,GAAGjR,IAAI,CAACkR,UAAL,CAAgBC,GAAhB,CAAoBC,CAAC,IAAI,KAAK3B,eAAL,CAAqB2B,CAArB,CAAzB,CAA5B;AACApR,IAAAA,IAAI,CAACqR,IAAL,GAAYJ,mBAAmB,CAACK,MAApB,CAA2BtR,IAAI,CAACqR,IAAhC,CAAZ;AACA,WAAOrR,IAAI,CAACkR,UAAZ;AACD;;AAEDK,EAAAA,eAAe,CAACC,SAAD,EAAYf,MAAZ,EAAoBgB,WAApB,EAAiCpB,OAAjC,EAA0CqB,aAA1C,EAAyDC,iBAAzD,EAA4E;AACzF,SAAKC,WAAL,CAAiBnB,MAAjB,EAAyBgB,WAAzB,EAAsCpB,OAAtC,EAA+CqB,aAA/C,EAA8DC,iBAA9D,EAAiF,aAAjF,EAAgG,IAAhG;;AAEA,QAAIlB,MAAM,CAACoB,cAAX,EAA2B;AACzBpB,MAAAA,MAAM,CAACja,KAAP,CAAaqb,cAAb,GAA8BpB,MAAM,CAACoB,cAArC;AACA,aAAOpB,MAAM,CAACoB,cAAd;AACD;;AAEDL,IAAAA,SAAS,CAACH,IAAV,CAAenQ,IAAf,CAAoBuP,MAApB;AACD;;AAEDqB,EAAAA,qBAAqB,CAAC,GAAGd,IAAJ,EAAU;AAC7B,UAAMhR,IAAI,GAAG,MAAM8R,qBAAN,CAA4B,GAAGd,IAA/B,CAAb;;AAEA,QAAIhR,IAAI,CAACiC,IAAL,KAAc,aAAd,IAA+B,KAAKrC,eAAL,CAAqB,QAArB,EAA+B,eAA/B,CAAnC,EAAoF;AAClF,aAAO,KAAKmS,qCAAL,CAA2C/R,IAA3C,CAAP;AACD;;AAED,WAAOA,IAAP;AACD;;AAED+R,EAAAA,qCAAqC,CAAC/R,IAAD,EAAO;AAC1C,UAAMtI,IAAI,GAAG,MAAMsa,gBAAN,CAAuBhS,IAAvB,CAAb;AACAA,IAAAA,IAAI,GAAGA,IAAP;AACA,WAAOA,IAAI,CAACiS,EAAZ;AACAjS,IAAAA,IAAI,CAACtI,IAAL,GAAYA,IAAZ;AACAsI,IAAAA,IAAI,CAACiC,IAAL,GAAY,mBAAZ;AACA,WAAOjC,IAAP;AACD;;AAEDkS,EAAAA,aAAa,CAAClS,IAAD,EAAO;AAClB,QAAI,CAAC,KAAKJ,eAAL,CAAqB,QAArB,EAA+B,eAA/B,CAAL,EAAsD;AACpD,aAAO,MAAMsS,aAAN,CAAoBlS,IAApB,CAAP;AACD;;AAED,WAAOA,IAAI,CAACiC,IAAL,KAAc,mBAArB;AACD;;AAED+P,EAAAA,gBAAgB,CAAChS,IAAD,EAAO;AACrB,QAAI,CAAC,KAAKJ,eAAL,CAAqB,QAArB,EAA+B,eAA/B,CAAL,EAAsD;AACpD,aAAO,MAAMoS,gBAAN,CAAuBhS,IAAvB,CAAP;AACD;;AAED,WAAOA,IAAI,CAACtI,IAAZ;AACD;;AAED0X,EAAAA,YAAY,CAAC5Y,KAAD,EAAQyL,IAAR,EAAc;AACxB,UAAMjC,IAAI,GAAG,MAAMoP,YAAN,CAAmB5Y,KAAnB,EAA0ByL,IAA1B,CAAb;AACAjC,IAAAA,IAAI,CAACiQ,GAAL,GAAWjQ,IAAI,CAAC+P,KAAL,CAAWE,GAAtB;AACA,WAAOjQ,IAAI,CAAC+P,KAAZ;AACA,WAAO/P,IAAP;AACD;;AAEDmS,EAAAA,iBAAiB,CAACnS,IAAD,EAAOoS,eAAP,EAAwBC,QAAQ,GAAG,KAAnC,EAA0C;AACzD,UAAMF,iBAAN,CAAwBnS,IAAxB,EAA8BoS,eAA9B,EAA+CC,QAA/C;AACArS,IAAAA,IAAI,CAAC8P,UAAL,GAAkB9P,IAAI,CAACqR,IAAL,CAAUpP,IAAV,KAAmB,gBAArC;AACD;;AAED2P,EAAAA,WAAW,CAAC5R,IAAD,EAAOyR,WAAP,EAAoBpB,OAApB,EAA6BqB,aAA7B,EAA4CY,gBAA5C,EAA8DrQ,IAA9D,EAAoEsQ,YAAY,GAAG,KAAnF,EAA0F;AACnG,QAAIC,QAAQ,GAAG,KAAKC,SAAL,EAAf;AACAD,IAAAA,QAAQ,CAACE,IAAT,GAAgB1S,IAAI,CAAC0S,IAArB;AACAF,IAAAA,QAAQ,GAAG,MAAMZ,WAAN,CAAkBY,QAAlB,EAA4Bf,WAA5B,EAAyCpB,OAAzC,EAAkDqB,aAAlD,EAAiEY,gBAAjE,EAAmFrQ,IAAnF,EAAyFsQ,YAAzF,CAAX;AACAC,IAAAA,QAAQ,CAACvQ,IAAT,GAAgB,oBAAhB;AACA,WAAOuQ,QAAQ,CAACE,IAAhB;AACA1S,IAAAA,IAAI,CAACxJ,KAAL,GAAagc,QAAb;;AAEA,QAAIvQ,IAAI,KAAK,oBAAb,EAAmC;AACjCjC,MAAAA,IAAI,CAAC2S,QAAL,GAAgB,KAAhB;AACD;;AAED1Q,IAAAA,IAAI,GAAG,kBAAP;AACA,WAAO,KAAK2Q,UAAL,CAAgB5S,IAAhB,EAAsBiC,IAAtB,CAAP;AACD;;AAED4Q,EAAAA,kBAAkB,CAAC,GAAG7B,IAAJ,EAAU;AAC1B,UAAM8B,YAAY,GAAG,MAAMD,kBAAN,CAAyB,GAAG7B,IAA5B,CAArB;;AAEA,QAAI,KAAKpR,eAAL,CAAqB,QAArB,EAA+B,eAA/B,CAAJ,EAAqD;AACnDkT,MAAAA,YAAY,CAAC7Q,IAAb,GAAoB,oBAApB;AACD;;AAED,WAAO6Q,YAAP;AACD;;AAEDC,EAAAA,yBAAyB,CAAC,GAAG/B,IAAJ,EAAU;AACjC,UAAM8B,YAAY,GAAG,MAAMC,yBAAN,CAAgC,GAAG/B,IAAnC,CAArB;;AAEA,QAAI,KAAKpR,eAAL,CAAqB,QAArB,EAA+B,eAA/B,CAAJ,EAAqD;AACnDkT,MAAAA,YAAY,CAAC7Q,IAAb,GAAoB,oBAApB;AACA6Q,MAAAA,YAAY,CAACH,QAAb,GAAwB,KAAxB;AACD;;AAED,WAAOG,YAAP;AACD;;AAEDE,EAAAA,iBAAiB,CAACC,IAAD,EAAOxB,WAAP,EAAoBpB,OAApB,EAA6B6C,SAA7B,EAAwCC,UAAxC,EAAoD;AACnE,UAAMnT,IAAI,GAAG,MAAMgT,iBAAN,CAAwBC,IAAxB,EAA8BxB,WAA9B,EAA2CpB,OAA3C,EAAoD6C,SAApD,EAA+DC,UAA/D,CAAb;;AAEA,QAAInT,IAAJ,EAAU;AACRA,MAAAA,IAAI,CAACiC,IAAL,GAAY,UAAZ;AACA,UAAIjC,IAAI,CAAC0S,IAAL,KAAc,QAAlB,EAA4B1S,IAAI,CAAC0S,IAAL,GAAY,MAAZ;AAC5B1S,MAAAA,IAAI,CAACoT,SAAL,GAAiB,KAAjB;AACD;;AAED,WAAOpT,IAAP;AACD;;AAEDqT,EAAAA,mBAAmB,CAACJ,IAAD,EAAOK,QAAP,EAAiBrG,QAAjB,EAA2BiG,SAA3B,EAAsCK,mBAAtC,EAA2D;AAC5E,UAAMvT,IAAI,GAAG,MAAMqT,mBAAN,CAA0BJ,IAA1B,EAAgCK,QAAhC,EAA0CrG,QAA1C,EAAoDiG,SAApD,EAA+DK,mBAA/D,CAAb;;AAEA,QAAIvT,IAAJ,EAAU;AACRA,MAAAA,IAAI,CAAC0S,IAAL,GAAY,MAAZ;AACA1S,MAAAA,IAAI,CAACiC,IAAL,GAAY,UAAZ;AACD;;AAED,WAAOjC,IAAP;AACD;;AAEDwT,EAAAA,YAAY,CAACxT,IAAD,EAAOyT,SAAP,EAAkB;AAC5B,QAAIzT,IAAI,IAAI,IAAR,IAAgB,KAAKuQ,gBAAL,CAAsBvQ,IAAtB,CAApB,EAAiD;AAC/C,aAAO,KAAKwT,YAAL,CAAkBxT,IAAI,CAACxJ,KAAvB,EAA8Bid,SAA9B,CAAP;AACD;;AAED,WAAO,MAAMD,YAAN,CAAmBxT,IAAnB,EAAyByT,SAAzB,CAAP;AACD;;AAEDC,EAAAA,YAAY,CAAC1T,IAAD,EAAO2T,KAAK,GAAG,KAAf,EAAsB;AAChC,QAAI3T,IAAI,IAAI,IAAR,IAAgB,KAAKuQ,gBAAL,CAAsBvQ,IAAtB,CAApB,EAAiD;AAC/C,WAAK0T,YAAL,CAAkB1T,IAAI,CAACxJ,KAAvB,EAA8Bmd,KAA9B;AACA,aAAO3T,IAAP;AACD;;AAED,WAAO,MAAM0T,YAAN,CAAmB1T,IAAnB,EAAyB2T,KAAzB,CAAP;AACD;;AAEDC,EAAAA,gCAAgC,CAACX,IAAD,EAAO,GAAGjC,IAAV,EAAgB;AAC9C,QAAIiC,IAAI,CAACP,IAAL,KAAc,KAAd,IAAuBO,IAAI,CAACP,IAAL,KAAc,KAAzC,EAAgD;AAC9C,WAAKnF,KAAL,CAAW0F,IAAI,CAACY,GAAL,CAASnV,KAApB,EAA2BkE,aAAa,CAACyF,kBAAzC;AACD,KAFD,MAEO,IAAI4K,IAAI,CAACxC,MAAT,EAAiB;AACtB,WAAKlD,KAAL,CAAW0F,IAAI,CAACY,GAAL,CAASnV,KAApB,EAA2BkE,aAAa,CAAC0F,gBAAzC;AACD,KAFM,MAEA;AACL,YAAMsL,gCAAN,CAAuCX,IAAvC,EAA6C,GAAGjC,IAAhD;AACD;AACF;;AAED8C,EAAAA,oBAAoB,CAAC9T,IAAD,EAAO+T,QAAP,EAAiB;AACnC,UAAMD,oBAAN,CAA2B9T,IAA3B,EAAiC+T,QAAjC;;AAEA,QAAI/T,IAAI,CAACgU,MAAL,CAAY/R,IAAZ,KAAqB,QAAzB,EAAmC;AACjCjC,MAAAA,IAAI,CAACiC,IAAL,GAAY,kBAAZ;AACAjC,MAAAA,IAAI,CAAClC,MAAL,GAAckC,IAAI,CAACmC,SAAL,CAAe,CAAf,CAAd;;AAEA,UAAI,KAAK1C,SAAL,CAAe,kBAAf,CAAJ,EAAwC;AACtC,YAAIwU,gBAAJ;;AAEAjU,QAAAA,IAAI,CAACkU,UAAL,GAAkB,CAACD,gBAAgB,GAAGjU,IAAI,CAACmC,SAAL,CAAe,CAAf,CAApB,KAA0C,IAA1C,GAAiD8R,gBAAjD,GAAoE,IAAtF;AACD;;AAED,aAAOjU,IAAI,CAACmC,SAAZ;AACA,aAAOnC,IAAI,CAACgU,MAAZ;AACD;;AAED,WAAOhU,IAAP;AACD;;AAEDmU,EAAAA,qBAAqB,CAACnU,IAAD,EAAO;AAC1B,QAAIA,IAAI,CAACiC,IAAL,KAAc,kBAAlB,EAAsC;AACpC;AACD;;AAED,UAAMkS,qBAAN,CAA4BnU,IAA5B;AACD;;AAEDoU,EAAAA,WAAW,CAACpU,IAAD,EAAO;AAChB,UAAMoU,WAAN,CAAkBpU,IAAlB;;AAEA,YAAQA,IAAI,CAACiC,IAAb;AACE,WAAK,sBAAL;AACEjC,QAAAA,IAAI,CAACqU,QAAL,GAAgB,IAAhB;AACA;;AAEF,WAAK,wBAAL;AACE,YAAIrU,IAAI,CAACqC,UAAL,CAAgBzB,MAAhB,KAA2B,CAA3B,IAAgCZ,IAAI,CAACqC,UAAL,CAAgB,CAAhB,EAAmBJ,IAAnB,KAA4B,0BAAhE,EAA4F;AAC1FjC,UAAAA,IAAI,CAACiC,IAAL,GAAY,sBAAZ;AACAjC,UAAAA,IAAI,CAACqU,QAAL,GAAgBrU,IAAI,CAACqC,UAAL,CAAgB,CAAhB,EAAmBgS,QAAnC;AACA,iBAAOrU,IAAI,CAACqC,UAAZ;AACD;;AAED;AAZJ;;AAeA,WAAOrC,IAAP;AACD;;AAEDsU,EAAAA,cAAc,CAACC,IAAD,EAAOjB,QAAP,EAAiBrG,QAAjB,EAA2BuH,OAA3B,EAAoCvT,KAApC,EAA2C;AACvD,UAAMjB,IAAI,GAAG,MAAMsU,cAAN,CAAqBC,IAArB,EAA2BjB,QAA3B,EAAqCrG,QAArC,EAA+CuH,OAA/C,EAAwDvT,KAAxD,CAAb;;AAEA,QAAIA,KAAK,CAACwT,mBAAV,EAA+B;AAC7B,UAAIzU,IAAI,CAACiC,IAAL,KAAc,0BAAd,IAA4CjC,IAAI,CAACiC,IAAL,KAAc,wBAA9D,EAAwF;AACtFjC,QAAAA,IAAI,CAACiC,IAAL,GAAYjC,IAAI,CAACiC,IAAL,CAAUyS,SAAV,CAAoB,CAApB,CAAZ;AACD;;AAED,UAAIzT,KAAK,CAAC0T,IAAV,EAAgB;AACd,cAAMC,KAAK,GAAG,KAAKC,eAAL,CAAqB7U,IAArB,CAAd;AACA4U,QAAAA,KAAK,CAAC9E,UAAN,GAAmB9P,IAAnB;AACA,eAAO,KAAK4S,UAAL,CAAgBgC,KAAhB,EAAuB,iBAAvB,CAAP;AACD;AACF,KAVD,MAUO,IAAI5U,IAAI,CAACiC,IAAL,KAAc,kBAAd,IAAoCjC,IAAI,CAACiC,IAAL,KAAc,gBAAtD,EAAwE;AAC7EjC,MAAAA,IAAI,CAAC+T,QAAL,GAAgB,KAAhB;AACD;;AAED,WAAO/T,IAAP;AACD;;AAED8U,EAAAA,wBAAwB,CAAC9U,IAAD,EAAO;AAC7B,QAAIA,IAAI,CAACiC,IAAL,KAAc,iBAAlB,EAAqC;AACnCjC,MAAAA,IAAI,GAAGA,IAAI,CAAC8P,UAAZ;AACD;;AAED,WAAO,MAAMgF,wBAAN,CAA+B9U,IAA/B,CAAP;AACD;;AAED+U,EAAAA,eAAe,CAAC/U,IAAD,EAAO;AACpB,WAAOA,IAAI,CAACiC,IAAL,KAAc,iBAArB;AACD;;AAEDsO,EAAAA,gBAAgB,CAACvQ,IAAD,EAAO;AACrB,WAAOA,IAAI,CAACiC,IAAL,KAAc,UAAd,IAA4BjC,IAAI,CAAC0S,IAAL,KAAc,MAA1C,IAAoD,CAAC1S,IAAI,CAACyQ,MAAjE;AACD;;AAEDuE,EAAAA,cAAc,CAAChV,IAAD,EAAO;AACnB,WAAOA,IAAI,CAACyQ,MAAL,IAAezQ,IAAI,CAAC0S,IAAL,KAAc,KAA7B,IAAsC1S,IAAI,CAAC0S,IAAL,KAAc,KAA3D;AACD;;AApVkD,CAArD;;AAwVA,MAAMuC,UAAN,CAAiB;AACfje,EAAAA,WAAW,CAACY,KAAD,EAAQsd,aAAR,EAAuB;AAChC,SAAKtd,KAAL,GAAa,KAAK,CAAlB;AACA,SAAKsd,aAAL,GAAqB,KAAK,CAA1B;AACA,SAAKtd,KAAL,GAAaA,KAAb;AACA,SAAKsd,aAAL,GAAqB,CAAC,CAACA,aAAvB;AACD;;AANc;;AASjB,MAAMC,KAAK,GAAG;AACZC,EAAAA,KAAK,EAAE,IAAIH,UAAJ,CAAe,GAAf,CADK;AAEZtb,EAAAA,QAAQ,EAAE,IAAIsb,UAAJ,CAAe,GAAf,EAAoB,IAApB;AAFE,CAAd;;AAKAld,OAAO,CAACgB,MAAR,CAAezB,aAAf,GAA+B+d,OAAO,IAAI;AACxCA,EAAAA,OAAO,CAACC,GAAR;AACD,CAFD;;AAIAvd,OAAO,CAACa,MAAR,CAAetB,aAAf,GAA+BS,OAAO,CAACe,UAAR,CAAmBxB,aAAnB,GAAmCS,OAAO,CAAC+B,YAAR,CAAqBxC,aAArB,GAAqC+d,OAAO,IAAI;AAChHA,EAAAA,OAAO,CAACnU,IAAR,CAAaiU,KAAK,CAACC,KAAnB;AACD,CAFD;;AAIArd,OAAO,CAAC8B,SAAR,CAAkBvC,aAAlB,GAAkC+d,OAAO,IAAI;AAC3C,MAAIA,OAAO,CAACA,OAAO,CAACzU,MAAR,GAAiB,CAAlB,CAAP,KAAgCuU,KAAK,CAACxb,QAA1C,EAAoD;AAClD0b,IAAAA,OAAO,CAACC,GAAR;AACD,GAFD,MAEO;AACLD,IAAAA,OAAO,CAACnU,IAAR,CAAaiU,KAAK,CAACxb,QAAnB;AACD;AACF,CAND;;AAQA,IAAI4b,4BAA4B,GAAG,urIAAnC;AACA,IAAIC,uBAAuB,GAAG,sjFAA9B;AACA,MAAMC,uBAAuB,GAAG,IAAI5X,MAAJ,CAAW,MAAM0X,4BAAN,GAAqC,GAAhD,CAAhC;AACA,MAAMG,kBAAkB,GAAG,IAAI7X,MAAJ,CAAW,MAAM0X,4BAAN,GAAqCC,uBAArC,GAA+D,GAA1E,CAA3B;AACAD,4BAA4B,GAAGC,uBAAuB,GAAG,IAAzD;AACA,MAAMG,0BAA0B,GAAG,CAAC,CAAD,EAAI,EAAJ,EAAQ,CAAR,EAAW,EAAX,EAAe,CAAf,EAAkB,EAAlB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,EAA/B,EAAmC,CAAnC,EAAsC,EAAtC,EAA0C,EAA1C,EAA8C,GAA9C,EAAmD,EAAnD,EAAuD,EAAvD,EAA2D,GAA3D,EAAgE,EAAhE,EAAoE,CAApE,EAAuE,EAAvE,EAA2E,EAA3E,EAA+E,EAA/E,EAAmF,EAAnF,EAAuF,EAAvF,EAA2F,CAA3F,EAA8F,EAA9F,EAAkG,EAAlG,EAAsG,EAAtG,EAA0G,CAA1G,EAA6G,EAA7G,EAAiH,CAAjH,EAAoH,CAApH,EAAuH,CAAvH,EAA0H,CAA1H,EAA6H,EAA7H,EAAiI,GAAjI,EAAsI,EAAtI,EAA0I,EAA1I,EAA8I,CAA9I,EAAiJ,EAAjJ,EAAqJ,CAArJ,EAAwJ,EAAxJ,EAA4J,CAA5J,EAA+J,EAA/J,EAAmK,GAAnK,EAAwK,GAAxK,EAA6K,EAA7K,EAAiL,EAAjL,EAAqL,EAArL,EAAyL,CAAzL,EAA4L,GAA5L,EAAiM,CAAjM,EAAoM,CAApM,EAAuM,CAAvM,EAA0M,CAA1M,EAA6M,EAA7M,EAAiN,CAAjN,EAAoN,CAApN,EAAuN,CAAvN,EAA0N,CAA1N,EAA6N,CAA7N,EAAgO,EAAhO,EAAoO,EAApO,EAAwO,EAAxO,EAA4O,EAA5O,EAAgP,EAAhP,EAAoP,EAApP,EAAwP,EAAxP,EAA4P,CAA5P,EAA+P,CAA/P,EAAkQ,EAAlQ,EAAsQ,EAAtQ,EAA0Q,EAA1Q,EAA8Q,EAA9Q,EAAkR,EAAlR,EAAsR,EAAtR,EAA0R,CAA1R,EAA6R,CAA7R,EAAgS,EAAhS,EAAoS,CAApS,EAAuS,EAAvS,EAA2S,CAA3S,EAA8S,CAA9S,EAAiT,CAAjT,EAAoT,CAApT,EAAuT,EAAvT,EAA2T,EAA3T,EAA+T,EAA/T,EAAmU,CAAnU,EAAsU,EAAtU,EAA0U,EAA1U,EAA8U,CAA9U,EAAiV,CAAjV,EAAoV,EAApV,EAAwV,EAAxV,EAA4V,EAA5V,EAAgW,EAAhW,EAAoW,EAApW,EAAwW,EAAxW,EAA4W,EAA5W,EAAgX,EAAhX,EAAoX,EAApX,EAAwX,GAAxX,EAA6X,EAA7X,EAAiY,EAAjY,EAAqY,EAArY,EAAyY,EAAzY,EAA6Y,EAA7Y,EAAiZ,EAAjZ,EAAqZ,EAArZ,EAAyZ,GAAzZ,EAA8Z,EAA9Z,EAAka,CAAla,EAAqa,CAAra,EAAwa,EAAxa,EAA4a,EAA5a,EAAgb,EAAhb,EAAob,CAApb,EAAub,CAAvb,EAA0b,EAA1b,EAA8b,GAA9b,EAAmc,EAAnc,EAAuc,EAAvc,EAA2c,EAA3c,EAA+c,EAA/c,EAAmd,EAAnd,EAAud,EAAvd,EAA2d,EAA3d,EAA+d,EAA/d,EAAme,EAAne,EAAue,EAAve,EAA2e,EAA3e,EAA+e,EAA/e,EAAmf,CAAnf,EAAsf,CAAtf,EAAyf,CAAzf,EAA4f,CAA5f,EAA+f,EAA/f,EAAmgB,CAAngB,EAAsgB,CAAtgB,EAAygB,EAAzgB,EAA6gB,EAA7gB,EAAihB,EAAjhB,EAAqhB,CAArhB,EAAwhB,EAAxhB,EAA4hB,CAA5hB,EAA+hB,CAA/hB,EAAkiB,CAAliB,EAAqiB,EAAriB,EAAyiB,EAAziB,EAA6iB,CAA7iB,EAAgjB,EAAhjB,EAAojB,EAApjB,EAAwjB,CAAxjB,EAA2jB,CAA3jB,EAA8jB,CAA9jB,EAAikB,CAAjkB,EAAokB,CAApkB,EAAukB,CAAvkB,EAA0kB,EAA1kB,EAA8kB,CAA9kB,EAAilB,CAAjlB,EAAolB,CAAplB,EAAulB,EAAvlB,EAA2lB,EAA3lB,EAA+lB,CAA/lB,EAAkmB,CAAlmB,EAAqmB,CAArmB,EAAwmB,CAAxmB,EAA2mB,EAA3mB,EAA+mB,CAA/mB,EAAknB,CAAlnB,EAAqnB,CAArnB,EAAwnB,CAAxnB,EAA2nB,CAA3nB,EAA8nB,CAA9nB,EAAioB,CAAjoB,EAAooB,CAApoB,EAAuoB,EAAvoB,EAA2oB,CAA3oB,EAA8oB,EAA9oB,EAAkpB,CAAlpB,EAAqpB,GAArpB,EAA0pB,EAA1pB,EAA8pB,EAA9pB,EAAkqB,CAAlqB,EAAqqB,EAArqB,EAAyqB,CAAzqB,EAA4qB,EAA5qB,EAAgrB,EAAhrB,EAAorB,EAAprB,EAAwrB,CAAxrB,EAA2rB,CAA3rB,EAA8rB,CAA9rB,EAAisB,GAAjsB,EAAssB,EAAtsB,EAA0sB,EAA1sB,EAA8sB,CAA9sB,EAAitB,EAAjtB,EAAqtB,EAArtB,EAAytB,EAAztB,EAA6tB,CAA7tB,EAAguB,EAAhuB,EAAouB,EAApuB,EAAwuB,EAAxuB,EAA4uB,CAA5uB,EAA+uB,EAA/uB,EAAmvB,EAAnvB,EAAuvB,GAAvvB,EAA4vB,EAA5vB,EAAgwB,GAAhwB,EAAqwB,EAArwB,EAAywB,EAAzwB,EAA6wB,CAA7wB,EAAgxB,CAAhxB,EAAmxB,CAAnxB,EAAsxB,CAAtxB,EAAyxB,CAAzxB,EAA4xB,CAA5xB,EAA+xB,CAA/xB,EAAkyB,CAAlyB,EAAqyB,EAAryB,EAAyyB,EAAzyB,EAA6yB,CAA7yB,EAAgzB,CAAhzB,EAAmzB,CAAnzB,EAAszB,EAAtzB,EAA0zB,CAA1zB,EAA6zB,CAA7zB,EAAg0B,EAAh0B,EAAo0B,EAAp0B,EAAw0B,CAAx0B,EAA20B,CAA30B,EAA80B,CAA90B,EAAi1B,EAAj1B,EAAq1B,CAAr1B,EAAw1B,EAAx1B,EAA41B,EAA51B,EAAg2B,CAAh2B,EAAm2B,CAAn2B,EAAs2B,EAAt2B,EAA02B,CAA12B,EAA62B,EAA72B,EAAi3B,EAAj3B,EAAq3B,EAAr3B,EAAy3B,CAAz3B,EAA43B,EAA53B,EAAg4B,EAAh4B,EAAo4B,GAAp4B,EAAy4B,CAAz4B,EAA44B,CAA54B,EAA+4B,EAA/4B,EAAm5B,EAAn5B,EAAu5B,CAAv5B,EAA05B,EAA15B,EAA85B,EAA95B,EAAk6B,GAAl6B,EAAu6B,CAAv6B,EAA06B,CAA16B,EAA66B,CAA76B,EAAg7B,CAAh7B,EAAm7B,EAAn7B,EAAu7B,EAAv7B,EAA27B,CAA37B,EAA87B,EAA97B,EAAk8B,CAAl8B,EAAq8B,CAAr8B,EAAw8B,CAAx8B,EAA28B,CAA38B,EAA88B,EAA98B,EAAk9B,EAAl9B,EAAs9B,CAAt9B,EAAy9B,GAAz9B,EAA89B,EAA99B,EAAk+B,GAAl+B,EAAu+B,CAAv+B,EAA0+B,EAA1+B,EAA8+B,GAA9+B,EAAm/B,GAAn/B,EAAw/B,GAAx/B,EAA6/B,EAA7/B,EAAigC,GAAjgC,EAAsgC,IAAtgC,EAA4gC,IAA5gC,EAAkhC,IAAlhC,EAAwhC,GAAxhC,EAA6hC,IAA7hC,EAAmiC,GAAniC,EAAwiC,CAAxiC,EAA2iC,EAA3iC,EAA+iC,GAA/iC,EAAojC,EAApjC,EAAwjC,EAAxjC,EAA4jC,EAA5jC,EAAgkC,EAAhkC,EAAokC,CAApkC,EAAukC,EAAvkC,EAA2kC,EAA3kC,EAA+kC,CAA/kC,EAAklC,EAAllC,EAAslC,GAAtlC,EAA2lC,EAA3lC,EAA+lC,GAA/lC,EAAomC,EAApmC,EAAwmC,CAAxmC,EAA2mC,CAA3mC,EAA8mC,EAA9mC,EAAknC,EAAlnC,EAAsnC,EAAtnC,EAA0nC,CAA1nC,EAA6nC,CAA7nC,EAAgoC,CAAhoC,EAAmoC,EAAnoC,EAAuoC,IAAvoC,EAA6oC,CAA7oC,EAAgpC,IAAhpC,EAAspC,EAAtpC,EAA0pC,CAA1pC,EAA6pC,IAA7pC,EAAmqC,GAAnqC,EAAwqC,EAAxqC,EAA4qC,CAA5qC,EAA+qC,EAA/qC,EAAmrC,CAAnrC,EAAsrC,CAAtrC,EAAyrC,GAAzrC,EAA8rC,IAA9rC,EAAosC,GAApsC,EAAysC,CAAzsC,EAA4sC,EAA5sC,EAAgtC,CAAhtC,EAAmtC,CAAntC,EAAstC,CAAttC,EAAytC,CAAztC,EAA4tC,IAA5tC,EAAkuC,EAAluC,EAAsuC,CAAtuC,EAAyuC,EAAzuC,EAA6uC,CAA7uC,EAAgvC,CAAhvC,EAAmvC,CAAnvC,EAAsvC,CAAtvC,EAAyvC,CAAzvC,EAA4vC,CAA5vC,EAA+vC,CAA/vC,EAAkwC,CAAlwC,EAAqwC,CAArwC,EAAwwC,EAAxwC,EAA4wC,CAA5wC,EAA+wC,CAA/wC,EAAkxC,CAAlxC,EAAqxC,CAArxC,EAAwxC,CAAxxC,EAA2xC,EAA3xC,EAA+xC,CAA/xC,EAAkyC,CAAlyC,EAAqyC,CAAryC,EAAwyC,CAAxyC,EAA2yC,CAA3yC,EAA8yC,CAA9yC,EAAizC,CAAjzC,EAAozC,EAApzC,EAAwzC,CAAxzC,EAA2zC,CAA3zC,EAA8zC,CAA9zC,EAAi0C,CAAj0C,EAAo0C,CAAp0C,EAAu0C,CAAv0C,EAA00C,CAA10C,EAA60C,CAA70C,EAAg1C,CAAh1C,EAAm1C,GAAn1C,EAAw1C,CAAx1C,EAA21C,EAA31C,EAA+1C,CAA/1C,EAAk2C,EAAl2C,EAAs2C,CAAt2C,EAAy2C,EAAz2C,EAA62C,CAA72C,EAAg3C,EAAh3C,EAAo3C,CAAp3C,EAAu3C,EAAv3C,EAA23C,CAA33C,EAA83C,EAA93C,EAAk4C,CAAl4C,EAAq4C,EAAr4C,EAAy4C,CAAz4C,EAA44C,EAA54C,EAAg5C,CAAh5C,EAAm5C,EAAn5C,EAAu5C,CAAv5C,EAA05C,EAA15C,EAA85C,CAA95C,EAAi6C,CAAj6C,EAAo6C,IAAp6C,EAA06C,EAA16C,EAA86C,EAA96C,EAAk7C,CAAl7C,EAAq7C,EAAr7C,EAAy7C,CAAz7C,EAA47C,GAA57C,EAAi8C,EAAj8C,EAAq8C,IAAr8C,EAA28C,GAA38C,EAAg9C,EAAh9C,EAAo9C,EAAp9C,EAAw9C,CAAx9C,EAA29C,CAA39C,EAA89C,IAA99C,EAAo+C,CAAp+C,EAAu+C,CAAv+C,EAA0+C,EAA1+C,EAA8+C,CAA9+C,EAAi/C,CAAj/C,EAAo/C,CAAp/C,EAAu/C,CAAv/C,EAA0/C,CAA1/C,EAA6/C,CAA7/C,EAAggD,CAAhgD,EAAmgD,CAAngD,EAAsgD,CAAtgD,EAAygD,CAAzgD,EAA4gD,CAA5gD,EAA+gD,CAA/gD,EAAkhD,CAAlhD,EAAqhD,CAArhD,EAAwhD,CAAxhD,EAA2hD,CAA3hD,EAA8hD,CAA9hD,EAAiiD,CAAjiD,EAAoiD,CAApiD,EAAuiD,CAAviD,EAA0iD,CAA1iD,EAA6iD,CAA7iD,EAAgjD,CAAhjD,EAAmjD,CAAnjD,EAAsjD,CAAtjD,EAAyjD,CAAzjD,EAA4jD,CAA5jD,EAA+jD,CAA/jD,EAAkkD,CAAlkD,EAAqkD,CAArkD,EAAwkD,CAAxkD,EAA2kD,CAA3kD,EAA8kD,CAA9kD,EAAilD,CAAjlD,EAAolD,CAAplD,EAAulD,CAAvlD,EAA0lD,CAA1lD,EAA6lD,CAA7lD,EAAgmD,CAAhmD,EAAmmD,CAAnmD,EAAsmD,CAAtmD,EAAymD,CAAzmD,EAA4mD,CAA5mD,EAA+mD,CAA/mD,EAAknD,CAAlnD,EAAqnD,CAArnD,EAAwnD,CAAxnD,EAA2nD,CAA3nD,EAA8nD,CAA9nD,EAAioD,CAAjoD,EAAooD,CAApoD,EAAuoD,CAAvoD,EAA0oD,CAA1oD,EAA6oD,CAA7oD,EAAgpD,CAAhpD,EAAmpD,EAAnpD,EAAupD,CAAvpD,EAA0pD,CAA1pD,EAA6pD,CAA7pD,EAAgqD,CAAhqD,EAAmqD,CAAnqD,EAAsqD,EAAtqD,EAA0qD,IAA1qD,EAAgrD,KAAhrD,EAAurD,EAAvrD,EAA2rD,IAA3rD,EAAisD,EAAjsD,EAAqsD,GAArsD,EAA0sD,CAA1sD,EAA6sD,IAA7sD,EAAmtD,EAAntD,EAAutD,IAAvtD,EAA6tD,IAA7tD,EAAmuD,GAAnuD,EAAwuD,IAAxuD,EAA8uD,IAA9uD,CAAnC;AACA,MAAMC,qBAAqB,GAAG,CAAC,GAAD,EAAM,CAAN,EAAS,GAAT,EAAc,CAAd,EAAiB,GAAjB,EAAsB,CAAtB,EAAyB,GAAzB,EAA8B,CAA9B,EAAiC,IAAjC,EAAuC,CAAvC,EAA0C,CAA1C,EAA6C,CAA7C,EAAgD,CAAhD,EAAmD,CAAnD,EAAsD,EAAtD,EAA0D,CAA1D,EAA6D,CAA7D,EAAgE,CAAhE,EAAmE,GAAnE,EAAwE,CAAxE,EAA2E,GAA3E,EAAgF,CAAhF,EAAmF,CAAnF,EAAsF,CAAtF,EAAyF,GAAzF,EAA8F,CAA9F,EAAiG,GAAjG,EAAsG,EAAtG,EAA0G,GAA1G,EAA+G,CAA/G,EAAkH,EAAlH,EAAsH,EAAtH,EAA0H,EAA1H,EAA8H,CAA9H,EAAiI,EAAjI,EAAqI,CAArI,EAAwI,EAAxI,EAA4I,EAA5I,EAAgJ,EAAhJ,EAAoJ,CAApJ,EAAuJ,CAAvJ,EAA0J,CAA1J,EAA6J,EAA7J,EAAiK,EAAjK,EAAqK,CAArK,EAAwK,CAAxK,EAA2K,CAA3K,EAA8K,CAA9K,EAAiL,EAAjL,EAAqL,CAArL,EAAwL,EAAxL,EAA4L,CAA5L,EAA+L,EAA/L,EAAmM,EAAnM,EAAuM,CAAvM,EAA0M,CAA1M,EAA6M,CAA7M,EAAgN,EAAhN,EAAoN,EAApN,EAAwN,EAAxN,EAA4N,CAA5N,EAA+N,CAA/N,EAAkO,GAAlO,EAAuO,EAAvO,EAA2O,CAA3O,EAA8O,CAA9O,EAAiP,CAAjP,EAAoP,CAApP,EAAuP,EAAvP,EAA2P,CAA3P,EAA8P,CAA9P,EAAiQ,CAAjQ,EAAoQ,CAApQ,EAAuQ,CAAvQ,EAA0Q,CAA1Q,EAA6Q,CAA7Q,EAAgR,EAAhR,EAAoR,CAApR,EAAuR,EAAvR,EAA2R,CAA3R,EAA8R,CAA9R,EAAiS,CAAjS,EAAoS,CAApS,EAAuS,CAAvS,EAA0S,GAA1S,EAA+S,EAA/S,EAAmT,EAAnT,EAAuT,CAAvT,EAA0T,CAA1T,EAA6T,CAA7T,EAAgU,EAAhU,EAAoU,EAApU,EAAwU,EAAxU,EAA4U,CAA5U,EAA+U,GAA/U,EAAoV,CAApV,EAAuV,CAAvV,EAA0V,CAA1V,EAA6V,EAA7V,EAAiW,CAAjW,EAAoW,EAApW,EAAwW,EAAxW,EAA4W,EAA5W,EAAgX,CAAhX,EAAmX,EAAnX,EAAuX,EAAvX,EAA2X,CAA3X,EAA8X,CAA9X,EAAiY,EAAjY,EAAqY,EAArY,EAAyY,CAAzY,EAA4Y,CAA5Y,EAA+Y,GAA/Y,EAAoZ,EAApZ,EAAwZ,GAAxZ,EAA6Z,CAA7Z,EAAga,EAAha,EAAoa,CAApa,EAAua,CAAva,EAA0a,CAA1a,EAA6a,CAA7a,EAAgb,CAAhb,EAAmb,CAAnb,EAAsb,CAAtb,EAAyb,CAAzb,EAA4b,CAA5b,EAA+b,EAA/b,EAAmc,CAAnc,EAAsc,GAAtc,EAA2c,CAA3c,EAA8c,CAA9c,EAAid,CAAjd,EAAod,CAApd,EAAud,CAAvd,EAA0d,EAA1d,EAA8d,CAA9d,EAAie,EAAje,EAAqe,CAAre,EAAwe,CAAxe,EAA2e,CAA3e,EAA8e,CAA9e,EAAif,CAAjf,EAAof,EAApf,EAAwf,EAAxf,EAA4f,EAA5f,EAAggB,EAAhgB,EAAogB,GAApgB,EAAygB,CAAzgB,EAA4gB,CAA5gB,EAA+gB,CAA/gB,EAAkhB,EAAlhB,EAAshB,CAAthB,EAAyhB,EAAzhB,EAA6hB,EAA7hB,EAAiiB,CAAjiB,EAAoiB,EAApiB,EAAwiB,GAAxiB,EAA6iB,CAA7iB,EAAgjB,CAAhjB,EAAmjB,CAAnjB,EAAsjB,CAAtjB,EAAyjB,CAAzjB,EAA4jB,CAA5jB,EAA+jB,CAA/jB,EAAkkB,CAAlkB,EAAqkB,CAArkB,EAAwkB,CAAxkB,EAA2kB,CAA3kB,EAA8kB,EAA9kB,EAAklB,CAAllB,EAAqlB,CAArlB,EAAwlB,CAAxlB,EAA2lB,CAA3lB,EAA8lB,CAA9lB,EAAimB,CAAjmB,EAAomB,CAApmB,EAAumB,GAAvmB,EAA4mB,CAA5mB,EAA+mB,KAA/mB,EAAsnB,CAAtnB,EAAynB,GAAznB,EAA8nB,CAA9nB,EAAioB,EAAjoB,EAAqoB,CAAroB,EAAwoB,EAAxoB,EAA4oB,CAA5oB,EAA+oB,IAA/oB,EAAqpB,CAArpB,EAAwpB,CAAxpB,EAA2pB,EAA3pB,EAA+pB,CAA/pB,EAAkqB,CAAlqB,EAAqqB,EAArqB,EAAyqB,CAAzqB,EAA4qB,EAA5qB,EAAgrB,CAAhrB,EAAmrB,KAAnrB,EAA0rB,CAA1rB,EAA6rB,IAA7rB,EAAmsB,CAAnsB,EAAssB,CAAtsB,EAAysB,CAAzsB,EAA4sB,CAA5sB,EAA+sB,CAA/sB,EAAktB,CAAltB,EAAqtB,CAArtB,EAAwtB,EAAxtB,EAA4tB,CAA5tB,EAA+tB,GAA/tB,EAAouB,CAApuB,EAAuuB,IAAvuB,EAA6uB,EAA7uB,EAAivB,GAAjvB,EAAsvB,EAAtvB,EAA0vB,CAA1vB,EAA6vB,EAA7vB,EAAiwB,CAAjwB,EAAowB,CAApwB,EAAuwB,EAAvwB,EAA2wB,CAA3wB,EAA8wB,EAA9wB,EAAkxB,CAAlxB,EAAqxB,CAArxB,EAAwxB,EAAxxB,EAA4xB,IAA5xB,EAAkyB,CAAlyB,EAAqyB,CAAryB,EAAwyB,EAAxyB,EAA4yB,CAA5yB,EAA+yB,CAA/yB,EAAkzB,CAAlzB,EAAqzB,CAArzB,EAAwzB,CAAxzB,EAA2zB,CAA3zB,EAA8zB,GAA9zB,EAAm0B,CAAn0B,EAAs0B,EAAt0B,EAA00B,CAA10B,EAA60B,GAA70B,EAAk1B,EAAl1B,EAAs1B,IAAt1B,EAA41B,CAA51B,EAA+1B,GAA/1B,EAAo2B,CAAp2B,EAAu2B,CAAv2B,EAA02B,CAA12B,EAA62B,IAA72B,EAAm3B,CAAn3B,EAAs3B,MAAt3B,EAA83B,GAA93B,CAA9B;;AAEA,SAASC,aAAT,CAAuB7X,IAAvB,EAA6BnG,GAA7B,EAAkC;AAChC,MAAImV,GAAG,GAAG,OAAV;;AAEA,OAAK,IAAIrM,CAAC,GAAG,CAAR,EAAWC,MAAM,GAAG/I,GAAG,CAAC+I,MAA7B,EAAqCD,CAAC,GAAGC,MAAzC,EAAiDD,CAAC,IAAI,CAAtD,EAAyD;AACvDqM,IAAAA,GAAG,IAAInV,GAAG,CAAC8I,CAAD,CAAV;AACA,QAAIqM,GAAG,GAAGhP,IAAV,EAAgB,OAAO,KAAP;AAChBgP,IAAAA,GAAG,IAAInV,GAAG,CAAC8I,CAAC,GAAG,CAAL,CAAV;AACA,QAAIqM,GAAG,IAAIhP,IAAX,EAAiB,OAAO,IAAP;AAClB;;AAED,SAAO,KAAP;AACD;;AAED,SAAS8X,iBAAT,CAA2B9X,IAA3B,EAAiC;AAC/B,MAAIA,IAAI,GAAG,EAAX,EAAe,OAAOA,IAAI,KAAK,EAAhB;AACf,MAAIA,IAAI,IAAI,EAAZ,EAAgB,OAAO,IAAP;AAChB,MAAIA,IAAI,GAAG,EAAX,EAAe,OAAOA,IAAI,KAAK,EAAhB;AACf,MAAIA,IAAI,IAAI,GAAZ,EAAiB,OAAO,IAAP;;AAEjB,MAAIA,IAAI,IAAI,MAAZ,EAAoB;AAClB,WAAOA,IAAI,IAAI,IAAR,IAAgByX,uBAAuB,CAACM,IAAxB,CAA6B7G,MAAM,CAAC8G,YAAP,CAAoBhY,IAApB,CAA7B,CAAvB;AACD;;AAED,SAAO6X,aAAa,CAAC7X,IAAD,EAAO2X,0BAAP,CAApB;AACD;;AACD,SAASM,gBAAT,CAA0BjY,IAA1B,EAAgC;AAC9B,MAAIA,IAAI,GAAG,EAAX,EAAe,OAAOA,IAAI,KAAK,EAAhB;AACf,MAAIA,IAAI,GAAG,EAAX,EAAe,OAAO,IAAP;AACf,MAAIA,IAAI,GAAG,EAAX,EAAe,OAAO,KAAP;AACf,MAAIA,IAAI,IAAI,EAAZ,EAAgB,OAAO,IAAP;AAChB,MAAIA,IAAI,GAAG,EAAX,EAAe,OAAOA,IAAI,KAAK,EAAhB;AACf,MAAIA,IAAI,IAAI,GAAZ,EAAiB,OAAO,IAAP;;AAEjB,MAAIA,IAAI,IAAI,MAAZ,EAAoB;AAClB,WAAOA,IAAI,IAAI,IAAR,IAAgB0X,kBAAkB,CAACK,IAAnB,CAAwB7G,MAAM,CAAC8G,YAAP,CAAoBhY,IAApB,CAAxB,CAAvB;AACD;;AAED,SAAO6X,aAAa,CAAC7X,IAAD,EAAO2X,0BAAP,CAAb,IAAmDE,aAAa,CAAC7X,IAAD,EAAO4X,qBAAP,CAAvE;AACD;;AAED,MAAMM,aAAa,GAAG;AACpB/e,EAAAA,OAAO,EAAE,CAAC,OAAD,EAAU,MAAV,EAAkB,OAAlB,EAA2B,UAA3B,EAAuC,UAAvC,EAAmD,SAAnD,EAA8D,IAA9D,EAAoE,MAApE,EAA4E,SAA5E,EAAuF,KAAvF,EAA8F,UAA9F,EAA0G,IAA1G,EAAgH,QAAhH,EAA0H,QAA1H,EAAoI,OAApI,EAA6I,KAA7I,EAAoJ,KAApJ,EAA2J,OAA3J,EAAoK,OAApK,EAA6K,MAA7K,EAAqL,KAArL,EAA4L,MAA5L,EAAoM,OAApM,EAA6M,OAA7M,EAAsN,SAAtN,EAAiO,QAAjO,EAA2O,QAA3O,EAAqP,MAArP,EAA6P,MAA7P,EAAqQ,OAArQ,EAA8Q,IAA9Q,EAAoR,YAApR,EAAkS,QAAlS,EAA4S,MAA5S,EAAoT,QAApT,CADW;AAEpBgf,EAAAA,MAAM,EAAE,CAAC,YAAD,EAAe,WAAf,EAA4B,KAA5B,EAAmC,SAAnC,EAA8C,SAA9C,EAAyD,WAAzD,EAAsE,QAAtE,EAAgF,QAAhF,EAA0F,OAA1F,CAFY;AAGpBC,EAAAA,UAAU,EAAE,CAAC,MAAD,EAAS,WAAT;AAHQ,CAAtB;AAKA,MAAMC,QAAQ,GAAG,IAAIC,GAAJ,CAAQJ,aAAa,CAAC/e,OAAtB,CAAjB;AACA,MAAMof,sBAAsB,GAAG,IAAID,GAAJ,CAAQJ,aAAa,CAACC,MAAtB,CAA/B;AACA,MAAMK,0BAA0B,GAAG,IAAIF,GAAJ,CAAQJ,aAAa,CAACE,UAAtB,CAAnC;;AACA,SAASK,cAAT,CAAwBC,IAAxB,EAA8BC,QAA9B,EAAwC;AACtC,SAAOA,QAAQ,IAAID,IAAI,KAAK,OAArB,IAAgCA,IAAI,KAAK,MAAhD;AACD;;AACD,SAASE,oBAAT,CAA8BF,IAA9B,EAAoCC,QAApC,EAA8C;AAC5C,SAAOF,cAAc,CAACC,IAAD,EAAOC,QAAP,CAAd,IAAkCJ,sBAAsB,CAAC5W,GAAvB,CAA2B+W,IAA3B,CAAzC;AACD;;AACD,SAASG,4BAAT,CAAsCH,IAAtC,EAA4C;AAC1C,SAAOF,0BAA0B,CAAC7W,GAA3B,CAA+B+W,IAA/B,CAAP;AACD;;AACD,SAASI,wBAAT,CAAkCJ,IAAlC,EAAwCC,QAAxC,EAAkD;AAChD,SAAOC,oBAAoB,CAACF,IAAD,EAAOC,QAAP,CAApB,IAAwCE,4BAA4B,CAACH,IAAD,CAA3E;AACD;;AACD,SAASK,SAAT,CAAmBL,IAAnB,EAAyB;AACvB,SAAOL,QAAQ,CAAC1W,GAAT,CAAa+W,IAAb,CAAP;AACD;;AAED,SAASM,eAAT,CAAyBC,OAAzB,EAAkCC,IAAlC,EAAwC;AACtC,SAAOD,OAAO,KAAK,EAAZ,IAAkBC,IAAI,KAAK,EAAlC;AACD;;AACD,MAAMC,mBAAmB,GAAG,IAAIb,GAAJ,CAAQ,CAAC,OAAD,EAAU,MAAV,EAAkB,OAAlB,EAA2B,UAA3B,EAAuC,UAAvC,EAAmD,SAAnD,EAA8D,IAA9D,EAAoE,MAApE,EAA4E,SAA5E,EAAuF,KAAvF,EAA8F,UAA9F,EAA0G,IAA1G,EAAgH,QAAhH,EAA0H,QAA1H,EAAoI,OAApI,EAA6I,KAA7I,EAAoJ,KAApJ,EAA2J,OAA3J,EAAoK,OAApK,EAA6K,MAA7K,EAAqL,KAArL,EAA4L,MAA5L,EAAoM,OAApM,EAA6M,OAA7M,EAAsN,SAAtN,EAAiO,QAAjO,EAA2O,QAA3O,EAAqP,MAArP,EAA6P,MAA7P,EAAqQ,OAArQ,EAA8Q,IAA9Q,EAAoR,YAApR,EAAkS,QAAlS,EAA4S,MAA5S,EAAoT,QAApT,EAA8T,YAA9T,EAA4U,WAA5U,EAAyV,KAAzV,EAAgW,SAAhW,EAA2W,SAA3W,EAAsX,WAAtX,EAAmY,QAAnY,EAA6Y,QAA7Y,EAAuZ,OAAvZ,EAAga,MAAha,EAAwa,WAAxa,EAAqb,MAArb,EAA6b,OAA7b,CAAR,CAA5B;;AACA,SAASc,iBAAT,CAA2BV,IAA3B,EAAiC;AAC/B,SAAOS,mBAAmB,CAACxX,GAApB,CAAwB+W,IAAxB,CAAP;AACD;;AAED,MAAMW,WAAW,GAAG,WAApB;AAAA,MACMC,aAAa,GAAG,WADtB;AAAA,MAEMC,cAAc,GAAG,WAFvB;AAAA,MAGMC,WAAW,GAAG,WAHpB;AAAA,MAIMC,kBAAkB,GAAG,WAJ3B;AAAA,MAKMC,WAAW,GAAG,WALpB;AAAA,MAMMC,kBAAkB,GAAG,WAN3B;AAAA,MAOMC,WAAW,GAAG,WAPpB;AAAA,MAQMC,kBAAkB,GAAG,WAR3B;AAAA,MASMC,eAAe,GAAG,WATxB;AAAA,MAUMC,SAAS,GAAGT,aAAa,GAAGC,cAAhB,GAAiCO,eAVnD;AAWA,MAAME,eAAe,GAAG,cAAxB;AAAA,MACMC,cAAc,GAAG,cADvB;AAAA,MAEMC,cAAc,GAAG,cAFvB;AAAA,MAGMC,kBAAkB,GAAG,cAH3B;AAAA,MAIMC,mBAAmB,GAAG,cAJ5B;AAAA,MAKMC,eAAe,GAAG,cALxB;AAAA,MAMMC,gBAAgB,GAAG,cANzB;AAAA,MAOMC,kBAAkB,GAAG,cAP3B;AAAA,MAQMC,wBAAwB,GAAG,cARjC;AAAA,MASMC,yBAAyB,GAAG,cATlC;AAAA,MAUMC,0BAA0B,GAAG,cAVnC;AAWA,MAAMC,UAAU,GAAGX,eAAe,GAAGC,cAAlB,GAAmCE,kBAAnC,GAAwDG,gBAA3E;AAAA,MACMM,YAAY,GAAGZ,eAAe,GAAG,CAAlB,GAAsBG,kBAAtB,GAA2C,CADhE;AAAA,MAEMU,QAAQ,GAAGb,eAAe,GAAG,CAAlB,GAAsBE,cAAtB,GAAuC,CAFxD;AAAA,MAGMY,aAAa,GAAGd,eAAe,GAAG,CAAlB,GAAsBI,mBAAtB,GAA4C,CAHlE;AAAA,MAIMW,iBAAiB,GAAG,IAAId,cAAJ,GAAqB,CAArB,GAAyBK,gBAJnD;AAAA,MAKMU,YAAY,GAAG,IAAIf,cAAJ,GAAqB,CAArB,GAAyB,CAL9C;AAAA,MAMMgB,YAAY,GAAGjB,eAAe,GAAGC,cAAlB,GAAmCE,kBAAnC,GAAwDI,kBAN7E;AAAA,MAOMW,eAAe,GAAG,IAAI,CAAJ,GAAQ,CAAR,GAAYT,yBAPpC;AAAA,MAQMU,SAAS,GAAG,IAAI,CAAJ,GAAQ,CAAR,GAAYd,eAR9B;AAAA,MASMe,YAAY,GAAGpB,eAAe,GAAG,CAAlB,GAAsB,CAAtB,GAA0BK,eAT/C;AAAA,MAUMgB,kBAAkB,GAAGJ,YAAY,GAAGT,wBAV1C;AAAA,MAWMc,iBAAiB,GAAG,IAAI,CAAJ,GAAQ,CAAR,GAAYb,yBAXtC;AAAA,MAYMc,oBAAoB,GAAGb,0BAZ7B;AAaA,MAAMc,yBAAyB,GAAG,KAAlC;AAAA,MACMC,yBAAyB,GAAG,KADlC;AAAA,MAEMC,yBAAyB,GAAG,KAFlC;AAAA,MAGMC,2BAA2B,GAAGF,yBAAyB,GAAGC,yBAHhE;AAIA,MAAME,2BAA2B,GAAGH,yBAAyB,GAAGD,yBAAhE;AAAA,MACMK,2BAA2B,GAAGH,yBAAyB,GAAGF,yBADhE;AAAA,MAEMM,6BAA6B,GAAGL,yBAFtC;AAAA,MAGMM,6BAA6B,GAAGL,yBAHtC;AAAA,MAIMM,mBAAmB,GAAG,CAJ5B;;AAMA,MAAMC,KAAN,CAAY;AACVjjB,EAAAA,WAAW,CAAC0X,KAAD,EAAQ;AACjB,SAAKwL,GAAL,GAAW,IAAI5D,GAAJ,EAAX;AACA,SAAK6D,OAAL,GAAe,IAAI7D,GAAJ,EAAf;AACA,SAAK8D,SAAL,GAAiB,IAAI9D,GAAJ,EAAjB;AACA,SAAK5H,KAAL,GAAaA,KAAb;AACD;;AANS;;AASZ,MAAM2L,YAAN,CAAmB;AACjBrjB,EAAAA,WAAW,CAACuW,KAAD,EAAQoJ,QAAR,EAAkB;AAC3B,SAAK2D,UAAL,GAAkB,EAAlB;AACA,SAAKC,gBAAL,GAAwB,IAAI/iB,GAAJ,EAAxB;AACA,SAAKgjB,qBAAL,GAA6B,IAAIhjB,GAAJ,EAA7B;AACA,SAAK+V,KAAL,GAAaA,KAAb;AACA,SAAKoJ,QAAL,GAAgBA,QAAhB;AACD;;AAEa,MAAV8D,UAAU,GAAG;AACf,WAAO,CAAC,KAAKC,oBAAL,KAA8BnD,cAA/B,IAAiD,CAAxD;AACD;;AAEa,MAAVoD,UAAU,GAAG;AACf,WAAO,CAAC,KAAKC,qBAAL,KAA+BlD,WAAhC,IAA+C,CAAtD;AACD;;AAEmB,MAAhBpF,gBAAgB,GAAG;AACrB,WAAO,CAAC,KAAKsI,qBAAL,KAA+BjD,kBAAhC,IAAsD,CAA7D;AACD;;AAEU,MAAPkD,OAAO,GAAG;AACZ,WAAO,CAAC,KAAKD,qBAAL,KAA+BhD,WAAhC,IAA+C,CAAtD;AACD;;AAEkC,MAA/BkD,+BAA+B,GAAG;AACpC,UAAMpM,KAAK,GAAG,KAAKkM,qBAAL,EAAd;AACA,WAAO,CAAClM,KAAK,GAAGkJ,WAAT,IAAwB,CAAxB,IAA6B,CAAClJ,KAAK,GAAG6I,cAAT,MAA6B,CAAjE;AACD;;AAEgB,MAAbwD,aAAa,GAAG;AAClB,SAAK,IAAIpa,CAAC,GAAG,KAAK2Z,UAAL,CAAgB1Z,MAAhB,GAAyB,CAAtC,GAA0CD,CAAC,EAA3C,EAA+C;AAC7C,YAAM;AACJ+N,QAAAA;AADI,UAEF,KAAK4L,UAAL,CAAgB3Z,CAAhB,CAFJ;;AAIA,UAAI+N,KAAK,GAAGmJ,kBAAZ,EAAgC;AAC9B,eAAO,IAAP;AACD;;AAED,UAAInJ,KAAK,IAAIqJ,SAAS,GAAGH,WAAhB,CAAT,EAAuC;AACrC,eAAO,KAAP;AACD;AACF;AACF;;AAEqB,MAAlBoD,kBAAkB,GAAG;AACvB,WAAO,CAAC,KAAKJ,qBAAL,KAA+BrD,cAAhC,IAAkD,CAAzD;AACD;;AAEsB,MAAnB0D,mBAAmB,GAAG;AACxB,WAAO,KAAKC,0BAAL,CAAgC,KAAKC,YAAL,EAAhC,CAAP;AACD;;AAEDC,EAAAA,WAAW,CAAC1M,KAAD,EAAQ;AACjB,WAAO,IAAIuL,KAAJ,CAAUvL,KAAV,CAAP;AACD;;AAED2M,EAAAA,KAAK,CAAC3M,KAAD,EAAQ;AACX,SAAK4L,UAAL,CAAgBpZ,IAAhB,CAAqB,KAAKka,WAAL,CAAiB1M,KAAjB,CAArB;AACD;;AAED4M,EAAAA,IAAI,GAAG;AACL,SAAKhB,UAAL,CAAgBhF,GAAhB;AACD;;AAED4F,EAAAA,0BAA0B,CAACK,KAAD,EAAQ;AAChC,WAAO,CAAC,EAAEA,KAAK,CAAC7M,KAAN,GAAc6I,cAAd,IAAgC,CAAC,KAAKZ,QAAN,IAAkB4E,KAAK,CAAC7M,KAAN,GAAc4I,aAAlE,CAAR;AACD;;AAEDkE,EAAAA,WAAW,CAAC9jB,IAAD,EAAO+jB,WAAP,EAAoBzO,GAApB,EAAyB;AAClC,QAAIuO,KAAK,GAAG,KAAKJ,YAAL,EAAZ;;AAEA,QAAIM,WAAW,GAAGtD,kBAAd,IAAoCsD,WAAW,GAAGrD,mBAAtD,EAA2E;AACzE,WAAKsD,yBAAL,CAA+BH,KAA/B,EAAsC7jB,IAAtC,EAA4C+jB,WAA5C,EAAyDzO,GAAzD;;AAEA,UAAIyO,WAAW,GAAGrD,mBAAlB,EAAuC;AACrCmD,QAAAA,KAAK,CAACnB,SAAN,CAAgBuB,GAAhB,CAAoBjkB,IAApB;AACD,OAFD,MAEO;AACL6jB,QAAAA,KAAK,CAACpB,OAAN,CAAcwB,GAAd,CAAkBjkB,IAAlB;AACD;;AAED,UAAI+jB,WAAW,GAAGtD,kBAAlB,EAAsC;AACpC,aAAKyD,kBAAL,CAAwBL,KAAxB,EAA+B7jB,IAA/B;AACD;AACF,KAZD,MAYO,IAAI+jB,WAAW,GAAGvD,cAAlB,EAAkC;AACvC,WAAK,IAAIvX,CAAC,GAAG,KAAK2Z,UAAL,CAAgB1Z,MAAhB,GAAyB,CAAtC,EAAyCD,CAAC,IAAI,CAA9C,EAAiD,EAAEA,CAAnD,EAAsD;AACpD4a,QAAAA,KAAK,GAAG,KAAKjB,UAAL,CAAgB3Z,CAAhB,CAAR;AACA,aAAK+a,yBAAL,CAA+BH,KAA/B,EAAsC7jB,IAAtC,EAA4C+jB,WAA5C,EAAyDzO,GAAzD;AACAuO,QAAAA,KAAK,CAACrB,GAAN,CAAUyB,GAAV,CAAcjkB,IAAd;AACA,aAAKkkB,kBAAL,CAAwBL,KAAxB,EAA+B7jB,IAA/B;AACA,YAAI6jB,KAAK,CAAC7M,KAAN,GAAcqJ,SAAlB,EAA6B;AAC9B;AACF;;AAED,QAAI,KAAKpB,QAAL,IAAiB4E,KAAK,CAAC7M,KAAN,GAAc4I,aAAnC,EAAkD;AAChD,WAAKiD,gBAAL,CAAsBsB,MAAtB,CAA6BnkB,IAA7B;AACD;AACF;;AAEDkkB,EAAAA,kBAAkB,CAACL,KAAD,EAAQ7jB,IAAR,EAAc;AAC9B,QAAI,KAAKif,QAAL,IAAiB4E,KAAK,CAAC7M,KAAN,GAAc4I,aAAnC,EAAkD;AAChD,WAAKiD,gBAAL,CAAsBsB,MAAtB,CAA6BnkB,IAA7B;AACD;AACF;;AAEDgkB,EAAAA,yBAAyB,CAACH,KAAD,EAAQ7jB,IAAR,EAAc+jB,WAAd,EAA2BzO,GAA3B,EAAgC;AACvD,QAAI,KAAK8O,mBAAL,CAAyBP,KAAzB,EAAgC7jB,IAAhC,EAAsC+jB,WAAtC,CAAJ,EAAwD;AACtD,WAAKlO,KAAL,CAAWP,GAAX,EAAgBpK,aAAa,CAACsJ,gBAA9B,EAAgDxU,IAAhD;AACD;AACF;;AAEDokB,EAAAA,mBAAmB,CAACP,KAAD,EAAQ7jB,IAAR,EAAc+jB,WAAd,EAA2B;AAC5C,QAAI,EAAEA,WAAW,GAAGzD,eAAhB,CAAJ,EAAsC,OAAO,KAAP;;AAEtC,QAAIyD,WAAW,GAAGtD,kBAAlB,EAAsC;AACpC,aAAOoD,KAAK,CAACpB,OAAN,CAAcxa,GAAd,CAAkBjI,IAAlB,KAA2B6jB,KAAK,CAACnB,SAAN,CAAgBza,GAAhB,CAAoBjI,IAApB,CAA3B,IAAwD6jB,KAAK,CAACrB,GAAN,CAAUva,GAAV,CAAcjI,IAAd,CAA/D;AACD;;AAED,QAAI+jB,WAAW,GAAGrD,mBAAlB,EAAuC;AACrC,aAAOmD,KAAK,CAACpB,OAAN,CAAcxa,GAAd,CAAkBjI,IAAlB,KAA2B,CAAC,KAAKwjB,0BAAL,CAAgCK,KAAhC,CAAD,IAA2CA,KAAK,CAACrB,GAAN,CAAUva,GAAV,CAAcjI,IAAd,CAA7E;AACD;;AAED,WAAO6jB,KAAK,CAACpB,OAAN,CAAcxa,GAAd,CAAkBjI,IAAlB,KAA2B,EAAE6jB,KAAK,CAAC7M,KAAN,GAAc+I,kBAAd,IAAoC8D,KAAK,CAACpB,OAAN,CAAc4B,MAAd,GAAuB7E,IAAvB,GAA8B1gB,KAA9B,KAAwCkB,IAA9E,CAA3B,IAAkH,CAAC,KAAKwjB,0BAAL,CAAgCK,KAAhC,CAAD,IAA2CA,KAAK,CAACnB,SAAN,CAAgBza,GAAhB,CAAoBjI,IAApB,CAApK;AACD;;AAEDskB,EAAAA,gBAAgB,CAAC/J,EAAD,EAAK;AACnB,UAAM;AACJva,MAAAA;AADI,QAEFua,EAFJ;AAGA,UAAMgK,aAAa,GAAG,KAAK3B,UAAL,CAAgB,CAAhB,CAAtB;;AAEA,QAAI,CAAC2B,aAAa,CAAC9B,OAAd,CAAsBxa,GAAtB,CAA0BjI,IAA1B,CAAD,IAAoC,CAACukB,aAAa,CAAC/B,GAAd,CAAkBva,GAAlB,CAAsBjI,IAAtB,CAArC,IAAoE,CAACukB,aAAa,CAAC7B,SAAd,CAAwBza,GAAxB,CAA4BjI,IAA5B,CAAzE,EAA4G;AAC1G,WAAK6iB,gBAAL,CAAsB1iB,GAAtB,CAA0BH,IAA1B,EAAgCua,EAAE,CAACvT,KAAnC;AACD;AACF;;AAEDyc,EAAAA,YAAY,GAAG;AACb,WAAO,KAAKb,UAAL,CAAgB,KAAKA,UAAL,CAAgB1Z,MAAhB,GAAyB,CAAzC,CAAP;AACD;;AAED8Z,EAAAA,oBAAoB,GAAG;AACrB,SAAK,IAAI/Z,CAAC,GAAG,KAAK2Z,UAAL,CAAgB1Z,MAAhB,GAAyB,CAAtC,GAA0CD,CAAC,EAA3C,EAA+C;AAC7C,YAAM;AACJ+N,QAAAA;AADI,UAEF,KAAK4L,UAAL,CAAgB3Z,CAAhB,CAFJ;;AAIA,UAAI+N,KAAK,GAAGqJ,SAAZ,EAAuB;AACrB,eAAOrJ,KAAP;AACD;AACF;AACF;;AAEDkM,EAAAA,qBAAqB,GAAG;AACtB,SAAK,IAAIja,CAAC,GAAG,KAAK2Z,UAAL,CAAgB1Z,MAAhB,GAAyB,CAAtC,GAA0CD,CAAC,EAA3C,EAA+C;AAC7C,YAAM;AACJ+N,QAAAA;AADI,UAEF,KAAK4L,UAAL,CAAgB3Z,CAAhB,CAFJ;;AAIA,UAAI+N,KAAK,IAAIqJ,SAAS,GAAGH,WAAhB,CAAL,IAAqC,EAAElJ,KAAK,GAAG8I,WAAV,CAAzC,EAAiE;AAC/D,eAAO9I,KAAP;AACD;AACF;AACF;;AAnKgB;;AAuKnB,MAAMwN,SAAN,SAAwBjC,KAAxB,CAA8B;AAC5BjjB,EAAAA,WAAW,CAAC,GAAGga,IAAJ,EAAU;AACnB,UAAM,GAAGA,IAAT;AACA,SAAKmL,gBAAL,GAAwB,IAAI7F,GAAJ,EAAxB;AACD;;AAJ2B;;AAQ9B,MAAM8F,gBAAN,SAA+B/B,YAA/B,CAA4C;AAC1Ce,EAAAA,WAAW,CAAC1M,KAAD,EAAQ;AACjB,WAAO,IAAIwN,SAAJ,CAAcxN,KAAd,CAAP;AACD;;AAED8M,EAAAA,WAAW,CAAC9jB,IAAD,EAAO+jB,WAAP,EAAoBzO,GAApB,EAAyB;AAClC,UAAMuO,KAAK,GAAG,KAAKJ,YAAL,EAAd;;AAEA,QAAIM,WAAW,GAAG/C,0BAAlB,EAA8C;AAC5C,WAAKgD,yBAAL,CAA+BH,KAA/B,EAAsC7jB,IAAtC,EAA4C+jB,WAA5C,EAAyDzO,GAAzD;AACA,WAAK4O,kBAAL,CAAwBL,KAAxB,EAA+B7jB,IAA/B;AACA6jB,MAAAA,KAAK,CAACY,gBAAN,CAAuBR,GAAvB,CAA2BjkB,IAA3B;AACA;AACD;;AAED,UAAM8jB,WAAN,CAAkB,GAAGrZ,SAArB;AACD;;AAED2Z,EAAAA,mBAAmB,CAACP,KAAD,EAAQ7jB,IAAR,EAAc+jB,WAAd,EAA2B;AAC5C,QAAI,MAAMK,mBAAN,CAA0B,GAAG3Z,SAA7B,CAAJ,EAA6C,OAAO,IAAP;;AAE7C,QAAIsZ,WAAW,GAAG/C,0BAAlB,EAA8C;AAC5C,aAAO,CAAC6C,KAAK,CAACY,gBAAN,CAAuBxc,GAAvB,CAA2BjI,IAA3B,CAAD,KAAsC6jB,KAAK,CAACpB,OAAN,CAAcxa,GAAd,CAAkBjI,IAAlB,KAA2B6jB,KAAK,CAACnB,SAAN,CAAgBza,GAAhB,CAAoBjI,IAApB,CAAjE,CAAP;AACD;;AAED,WAAO,KAAP;AACD;;AAEDskB,EAAAA,gBAAgB,CAAC/J,EAAD,EAAK;AACnB,QAAI,CAAC,KAAKqI,UAAL,CAAgB,CAAhB,EAAmB6B,gBAAnB,CAAoCxc,GAApC,CAAwCsS,EAAE,CAACva,IAA3C,CAAL,EAAuD;AACrD,YAAMskB,gBAAN,CAAuB/J,EAAvB;AACD;AACF;;AAhCyC;;AAoC5C,MAAMoK,KAAN,CAAY;AACVrlB,EAAAA,WAAW,GAAG;AACZ,SAAKmf,MAAL,GAAc,KAAK,CAAnB;AACA,SAAKmG,OAAL,GAAe,KAAK,CAApB;AACA,SAAKrP,QAAL,GAAgB,KAAK,CAArB;AACA,SAAKG,MAAL,GAAc,KAAK,CAAnB;AACA,SAAKU,MAAL,GAAc,EAAd;AACA,SAAKyO,gBAAL,GAAwB,CAAC,CAAzB;AACA,SAAKC,SAAL,GAAiB,EAAjB;AACA,SAAKC,yBAAL,GAAiC,EAAjC;AACA,SAAKC,sBAAL,GAA8B,KAA9B;AACA,SAAKC,MAAL,GAAc,KAAd;AACA,SAAKC,kBAAL,GAA0B,KAA1B;AACA,SAAKC,cAAL,GAAsB,KAAtB;AACA,SAAKC,cAAL,GAAsB,KAAtB;AACA,SAAKC,gBAAL,GAAwB,KAAxB;AACA,SAAKC,eAAL,GAAuB,KAAvB;AACA,SAAKC,YAAL,GAAoB;AAClBC,MAAAA,wBAAwB,EAAE,CADR;AAElBC,MAAAA,aAAa,EAAE;AAFG,KAApB;AAIA,SAAKC,SAAL,GAAiB,KAAjB;AACA,SAAKC,0BAAL,GAAkC,KAAlC;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,cAAL,GAAsB,CAAC,EAAD,CAAtB;AACA,SAAKtd,QAAL,GAAgB,EAAhB;AACA,SAAKmB,YAAL,GAAoB,EAApB;AACA,SAAK4L,GAAL,GAAW,CAAX;AACA,SAAK/N,SAAL,GAAiB,CAAjB;AACA,SAAKgD,IAAL,GAAYlK,OAAO,CAACO,GAApB;AACA,SAAK9B,KAAL,GAAa,IAAb;AACA,SAAKkI,KAAL,GAAa,CAAb;AACA,SAAKC,GAAL,GAAW,CAAX;AACA,SAAK2O,aAAL,GAAqB,IAArB;AACA,SAAKH,eAAL,GAAuB,IAAvB;AACA,SAAKD,YAAL,GAAoB,CAApB;AACA,SAAKG,UAAL,GAAkB,CAAlB;AACA,SAAKgI,OAAL,GAAe,CAACF,KAAK,CAACC,KAAP,CAAf;AACA,SAAKoI,WAAL,GAAmB,IAAnB;AACA,SAAKC,WAAL,GAAmB,KAAnB;AACA,SAAKC,YAAL,GAAoB,IAAIlmB,GAAJ,EAApB;AACA,SAAKmmB,YAAL,GAAoB,CAApB;AACD;;AAEDC,EAAAA,IAAI,CAACjmB,OAAD,EAAU;AACZ,SAAKwe,MAAL,GAAcxe,OAAO,CAACkmB,UAAR,KAAuB,KAAvB,GAA+B,KAA/B,GAAuClmB,OAAO,CAACkmB,UAAR,KAAuB,IAAvB,GAA8B,IAA9B,GAAqClmB,OAAO,CAACmmB,UAAR,KAAuB,QAAjH;AACA,SAAKxB,OAAL,GAAe3kB,OAAO,CAAComB,SAAvB;AACA,SAAK9Q,QAAL,GAAgB,KAAKG,MAAL,GAAc,KAAK4Q,WAAL,EAA9B;AACD;;AAEDA,EAAAA,WAAW,GAAG;AACZ,WAAO,IAAI3f,QAAJ,CAAa,KAAKie,OAAlB,EAA2B,KAAKtP,GAAL,GAAW,KAAK/N,SAA3C,CAAP;AACD;;AAEDgf,EAAAA,KAAK,CAACC,UAAD,EAAa;AAChB,UAAMjd,KAAK,GAAG,IAAIob,KAAJ,EAAd;AACA,UAAM1P,IAAI,GAAGtW,MAAM,CAACsW,IAAP,CAAY,IAAZ,CAAb;;AAEA,SAAK,IAAIhM,CAAC,GAAG,CAAR,EAAWC,MAAM,GAAG+L,IAAI,CAAC/L,MAA9B,EAAsCD,CAAC,GAAGC,MAA1C,EAAkDD,CAAC,EAAnD,EAAuD;AACrD,YAAMkT,GAAG,GAAGlH,IAAI,CAAChM,CAAD,CAAhB;AACA,UAAIwd,GAAG,GAAG,KAAKtK,GAAL,CAAV;;AAEA,UAAI,CAACqK,UAAD,IAAeE,KAAK,CAACC,OAAN,CAAcF,GAAd,CAAnB,EAAuC;AACrCA,QAAAA,GAAG,GAAGA,GAAG,CAAChO,KAAJ,EAAN;AACD;;AAEDlP,MAAAA,KAAK,CAAC4S,GAAD,CAAL,GAAasK,GAAb;AACD;;AAED,WAAOld,KAAP;AACD;;AAtES;;AA0EZ,IAAIqd,QAAQ,GAAG,SAASC,OAAT,CAAiBvgB,IAAjB,EAAuB;AACpC,SAAOA,IAAI,IAAI,EAAR,IAAcA,IAAI,IAAI,EAA7B;AACD,CAFD;;AAGA,MAAMwgB,iBAAiB,GAAG,IAAIlI,GAAJ,CAAQ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,CAAR,CAA1B;AACA,MAAMmI,iCAAiC,GAAG;AACxCC,EAAAA,SAAS,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,GAAzB,EAA8B,GAA9B,CAD6B;AAExCC,EAAAA,GAAG,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,GAAb;AAFmC,CAA1C;AAIA,MAAMC,+BAA+B,GAAG,EAAxC;AACAA,+BAA+B,CAACC,GAAhC,GAAsC,CAAC,EAAD,EAAK,EAAL,CAAtC;AACAD,+BAA+B,CAACE,GAAhC,GAAsC,CAAC,GAAGF,+BAA+B,CAACC,GAApC,EAAyC,EAAzC,EAA6C,EAA7C,EAAiD,EAAjD,EAAqD,EAArD,EAAyD,EAAzD,EAA6D,EAA7D,CAAtC;AACAD,+BAA+B,CAACG,GAAhC,GAAsC,CAAC,GAAGH,+BAA+B,CAACE,GAApC,EAAyC,EAAzC,EAA6C,EAA7C,CAAtC;AACAF,+BAA+B,CAACD,GAAhC,GAAsC,CAAC,GAAGC,+BAA+B,CAACG,GAApC,EAAyC,EAAzC,EAA6C,EAA7C,EAAiD,EAAjD,EAAqD,EAArD,EAAyD,EAAzD,EAA6D,EAA7D,EAAiE,EAAjE,EAAqE,EAArE,EAAyE,EAAzE,EAA6E,GAA7E,EAAkF,GAAlF,EAAuF,GAAvF,CAAtC;;AACA,MAAMC,KAAN,CAAY;AACVhoB,EAAAA,WAAW,CAACiK,KAAD,EAAQ;AACjB,SAAKgB,IAAL,GAAYhB,KAAK,CAACgB,IAAlB;AACA,SAAKzL,KAAL,GAAayK,KAAK,CAACzK,KAAnB;AACA,SAAKkI,KAAL,GAAauC,KAAK,CAACvC,KAAnB;AACA,SAAKC,GAAL,GAAWsC,KAAK,CAACtC,GAAjB;AACA,SAAKqC,GAAL,GAAW,IAAIvC,cAAJ,CAAmBwC,KAAK,CAACgM,QAAzB,EAAmChM,KAAK,CAACmM,MAAzC,CAAX;AACD;;AAPS;;AAUZ,MAAM6R,SAAN,SAAwBnS,WAAxB,CAAoC;AAClC9V,EAAAA,WAAW,CAACW,OAAD,EAAUoH,KAAV,EAAiB;AAC1B;AACA,SAAKsP,WAAL,GAAmB,KAAK,CAAxB;AACA,SAAK6Q,MAAL,GAAc,EAAd;AACA,SAAKje,KAAL,GAAa,IAAIob,KAAJ,EAAb;AACA,SAAKpb,KAAL,CAAW2c,IAAX,CAAgBjmB,OAAhB;AACA,SAAKoH,KAAL,GAAaA,KAAb;AACA,SAAK6B,MAAL,GAAc7B,KAAK,CAAC6B,MAApB;AACA,SAAKyN,WAAL,GAAmB,KAAnB;AACD;;AAED8Q,EAAAA,SAAS,CAACvnB,KAAD,EAAQ;AACf,SAAKsnB,MAAL,CAAYte,MAAZ,GAAqB,KAAKK,KAAL,CAAW0c,YAAhC;AACA,SAAKuB,MAAL,CAAYhe,IAAZ,CAAiBtJ,KAAjB;AACA,MAAE,KAAKqJ,KAAL,CAAW0c,YAAb;AACD;;AAEDzG,EAAAA,IAAI,GAAG;AACL,SAAKkI,mBAAL;;AAEA,QAAI,KAAKznB,OAAL,CAAaunB,MAAjB,EAAyB;AACvB,WAAKC,SAAL,CAAe,IAAIH,KAAJ,CAAU,KAAK/d,KAAf,CAAf;AACD;;AAED,SAAKA,KAAL,CAAWoM,UAAX,GAAwB,KAAKpM,KAAL,CAAWtC,GAAnC;AACA,SAAKsC,KAAL,CAAWiM,YAAX,GAA0B,KAAKjM,KAAL,CAAWvC,KAArC;AACA,SAAKuC,KAAL,CAAWqM,aAAX,GAA2B,KAAKrM,KAAL,CAAWmM,MAAtC;AACA,SAAKnM,KAAL,CAAWkM,eAAX,GAA6B,KAAKlM,KAAL,CAAWgM,QAAxC;AACA,SAAKoS,SAAL;AACD;;AAEDC,EAAAA,GAAG,CAACrd,IAAD,EAAO;AACR,QAAI,KAAK/C,KAAL,CAAW+C,IAAX,CAAJ,EAAsB;AACpB,WAAKiV,IAAL;AACA,aAAO,IAAP;AACD,KAHD,MAGO;AACL,aAAO,KAAP;AACD;AACF;;AAEDhY,EAAAA,KAAK,CAAC+C,IAAD,EAAO;AACV,WAAO,KAAKhB,KAAL,CAAWgB,IAAX,KAAoBA,IAA3B;AACD;;AAEDsd,EAAAA,oBAAoB,CAACte,KAAD,EAAQ;AAC1B,WAAO;AACL+L,MAAAA,GAAG,EAAE/L,KAAK,CAAC+L,GADN;AAELxW,MAAAA,KAAK,EAAE,IAFF;AAGLyL,MAAAA,IAAI,EAAEhB,KAAK,CAACgB,IAHP;AAILvD,MAAAA,KAAK,EAAEuC,KAAK,CAACvC,KAJR;AAKLC,MAAAA,GAAG,EAAEsC,KAAK,CAACtC,GALN;AAML0O,MAAAA,UAAU,EAAEpM,KAAK,CAACtC,GANb;AAOL0W,MAAAA,OAAO,EAAE,CAAC,KAAKmK,UAAL,EAAD,CAPJ;AAQL7C,MAAAA,MAAM,EAAE1b,KAAK,CAAC0b;AART,KAAP;AAUD;;AAED8C,EAAAA,SAAS,GAAG;AACV,UAAMC,GAAG,GAAG,KAAKze,KAAjB;AACA,SAAKA,KAAL,GAAa,KAAKse,oBAAL,CAA0BG,GAA1B,CAAb;AACA,SAAKrR,WAAL,GAAmB,IAAnB;AACA,SAAKgR,SAAL;AACA,SAAKhR,WAAL,GAAmB,KAAnB;AACA,UAAMsR,IAAI,GAAG,KAAK1e,KAAlB;AACA,SAAKA,KAAL,GAAaye,GAAb;AACA,WAAOC,IAAP;AACD;;AAEDC,EAAAA,cAAc,GAAG;AACf,WAAO,KAAKC,mBAAL,CAAyB,KAAK5e,KAAL,CAAW+L,GAApC,CAAP;AACD;;AAED6S,EAAAA,mBAAmB,CAAC7S,GAAD,EAAM;AACvB/O,IAAAA,cAAc,CAACkB,SAAf,GAA2B6N,GAA3B;AACA,WAAO/O,cAAc,CAAC8X,IAAf,CAAoB,KAAKhX,KAAzB,IAAkCd,cAAc,CAACkB,SAAjD,GAA6D6N,GAApE;AACD;;AAED8S,EAAAA,iBAAiB,GAAG;AAClB,WAAO,KAAK/gB,KAAL,CAAWiD,UAAX,CAAsB,KAAK4d,cAAL,EAAtB,CAAP;AACD;;AAEDG,EAAAA,cAAc,CAAC/S,GAAD,EAAM;AAClB,QAAIgT,EAAE,GAAG,KAAKjhB,KAAL,CAAWiD,UAAX,CAAsBgL,GAAtB,CAAT;;AAEA,QAAI,CAACgT,EAAE,GAAG,MAAN,MAAkB,MAAlB,IAA4B,EAAEhT,GAAF,GAAQ,KAAKjO,KAAL,CAAW6B,MAAnD,EAA2D;AACzD,YAAMqf,KAAK,GAAG,KAAKlhB,KAAL,CAAWiD,UAAX,CAAsBgL,GAAtB,CAAd;;AAEA,UAAI,CAACiT,KAAK,GAAG,MAAT,MAAqB,MAAzB,EAAiC;AAC/BD,QAAAA,EAAE,GAAG,WAAW,CAACA,EAAE,GAAG,KAAN,KAAgB,EAA3B,KAAkCC,KAAK,GAAG,KAA1C,CAAL;AACD;AACF;;AAED,WAAOD,EAAP;AACD;;AAEDE,EAAAA,SAAS,CAAC/J,MAAD,EAAS;AAChB,SAAKlV,KAAL,CAAWkV,MAAX,GAAoBA,MAApB;;AAEA,QAAIA,MAAJ,EAAY;AACV,WAAKlV,KAAL,CAAWyc,YAAX,CAAwB9Q,OAAxB,CAAgC,CAACc,OAAD,EAAUV,GAAV,KAAkB,KAAKO,KAAL,CAAWP,GAAX,EAAgBU,OAAhB,CAAlD;AACA,WAAKzM,KAAL,CAAWyc,YAAX,CAAwByC,KAAxB;AACD;AACF;;AAEDX,EAAAA,UAAU,GAAG;AACX,WAAO,KAAKve,KAAL,CAAWoU,OAAX,CAAmB,KAAKpU,KAAL,CAAWoU,OAAX,CAAmBzU,MAAnB,GAA4B,CAA/C,CAAP;AACD;;AAEDye,EAAAA,SAAS,GAAG;AACV,UAAMG,UAAU,GAAG,KAAKA,UAAL,EAAnB;AACA,QAAI,CAACA,UAAU,CAACtK,aAAhB,EAA+B,KAAKkL,SAAL;AAC/B,SAAKnf,KAAL,CAAWvC,KAAX,GAAmB,KAAKuC,KAAL,CAAW+L,GAA9B;AACA,QAAI,CAAC,KAAKqB,WAAV,EAAuB,KAAKpN,KAAL,CAAWgM,QAAX,GAAsB,KAAKhM,KAAL,CAAW+c,WAAX,EAAtB;;AAEvB,QAAI,KAAK/c,KAAL,CAAW+L,GAAX,IAAkB,KAAKpM,MAA3B,EAAmC;AACjC,WAAKyf,WAAL,CAAiBtoB,OAAO,CAACO,GAAzB;AACA;AACD;;AAED,QAAIknB,UAAU,KAAKrK,KAAK,CAACxb,QAAzB,EAAmC;AACjC,WAAK2mB,aAAL;AACD,KAFD,MAEO;AACL,WAAKC,gBAAL,CAAsB,KAAKR,cAAL,CAAoB,KAAK9e,KAAL,CAAW+L,GAA/B,CAAtB;AACD;AACF;;AAEDwT,EAAAA,gBAAgB,GAAG;AACjB,QAAIvT,QAAJ;AACA,QAAI,CAAC,KAAKoB,WAAV,EAAuBpB,QAAQ,GAAG,KAAKhM,KAAL,CAAW+c,WAAX,EAAX;AACvB,UAAMtf,KAAK,GAAG,KAAKuC,KAAL,CAAW+L,GAAzB;AACA,UAAMrO,GAAG,GAAG,KAAKI,KAAL,CAAW0hB,OAAX,CAAmB,IAAnB,EAAyB/hB,KAAK,GAAG,CAAjC,CAAZ;AACA,QAAIC,GAAG,KAAK,CAAC,CAAb,EAAgB,MAAM,KAAK4O,KAAL,CAAW7O,KAAX,EAAkBkE,aAAa,CAACkJ,mBAAhC,CAAN;AAChB,SAAK7K,KAAL,CAAW+L,GAAX,GAAiBrO,GAAG,GAAG,CAAvB;AACAf,IAAAA,UAAU,CAACuB,SAAX,GAAuBT,KAAK,GAAG,CAA/B;;AAEA,WAAOd,UAAU,CAACmY,IAAX,CAAgB,KAAKhX,KAArB,KAA+BnB,UAAU,CAACuB,SAAX,IAAwBR,GAA9D,EAAmE;AACjE,QAAE,KAAKsC,KAAL,CAAWqb,OAAb;AACA,WAAKrb,KAAL,CAAWhC,SAAX,GAAuBrB,UAAU,CAACuB,SAAlC;AACD;;AAED,QAAI,KAAKkP,WAAT,EAAsB;AACtB,UAAMtN,OAAO,GAAG;AACdkB,MAAAA,IAAI,EAAE,cADQ;AAEdzL,MAAAA,KAAK,EAAE,KAAKuI,KAAL,CAAWoR,KAAX,CAAiBzR,KAAK,GAAG,CAAzB,EAA4BC,GAA5B,CAFO;AAGdD,MAAAA,KAHc;AAIdC,MAAAA,GAAG,EAAEA,GAAG,GAAG,CAJG;AAKdqC,MAAAA,GAAG,EAAE,IAAIvC,cAAJ,CAAmBwO,QAAnB,EAA6B,KAAKhM,KAAL,CAAW+c,WAAX,EAA7B;AALS,KAAhB;AAOA,QAAI,KAAKrmB,OAAL,CAAaunB,MAAjB,EAAyB,KAAKC,SAAL,CAAepe,OAAf;AACzB,WAAOA,OAAP;AACD;;AAED2f,EAAAA,eAAe,CAACC,SAAD,EAAY;AACzB,UAAMjiB,KAAK,GAAG,KAAKuC,KAAL,CAAW+L,GAAzB;AACA,QAAIC,QAAJ;AACA,QAAI,CAAC,KAAKoB,WAAV,EAAuBpB,QAAQ,GAAG,KAAKhM,KAAL,CAAW+c,WAAX,EAAX;AACvB,QAAI4C,EAAE,GAAG,KAAK7hB,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAX,IAAkB2T,SAAxC,CAAT;;AAEA,QAAI,KAAK1f,KAAL,CAAW+L,GAAX,GAAiB,KAAKpM,MAA1B,EAAkC;AAChC,aAAO,CAAC7C,SAAS,CAAC6iB,EAAD,CAAV,IAAkB,EAAE,KAAK3f,KAAL,CAAW+L,GAAb,GAAmB,KAAKpM,MAAjD,EAAyD;AACvDggB,QAAAA,EAAE,GAAG,KAAK7hB,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAjC,CAAL;AACD;AACF;;AAED,QAAI,KAAKqB,WAAT,EAAsB;AACtB,UAAM1P,GAAG,GAAG,KAAKsC,KAAL,CAAW+L,GAAvB;AACA,UAAMxW,KAAK,GAAG,KAAKuI,KAAL,CAAWoR,KAAX,CAAiBzR,KAAK,GAAGiiB,SAAzB,EAAoChiB,GAApC,CAAd;AACA,UAAMoC,OAAO,GAAG;AACdkB,MAAAA,IAAI,EAAE,aADQ;AAEdzL,MAAAA,KAFc;AAGdkI,MAAAA,KAHc;AAIdC,MAAAA,GAJc;AAKdqC,MAAAA,GAAG,EAAE,IAAIvC,cAAJ,CAAmBwO,QAAnB,EAA6B,KAAKhM,KAAL,CAAW+c,WAAX,EAA7B;AALS,KAAhB;AAOA,QAAI,KAAKrmB,OAAL,CAAaunB,MAAjB,EAAyB,KAAKC,SAAL,CAAepe,OAAf;AACzB,WAAOA,OAAP;AACD;;AAEDqf,EAAAA,SAAS,GAAG;AACV,UAAMS,UAAU,GAAG,KAAK5f,KAAL,CAAW+L,GAA9B;AACA,UAAM/M,QAAQ,GAAG,EAAjB;;AAEA6gB,IAAAA,IAAI,EAAE,OAAO,KAAK7f,KAAL,CAAW+L,GAAX,GAAiB,KAAKpM,MAA7B,EAAqC;AACzC,YAAMggB,EAAE,GAAG,KAAK7hB,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAjC,CAAX;;AAEA,cAAQ4T,EAAR;AACE,aAAK,EAAL;AACA,aAAK,GAAL;AACA,aAAK,CAAL;AACE,YAAE,KAAK3f,KAAL,CAAW+L,GAAb;AACA;;AAEF,aAAK,EAAL;AACE,cAAI,KAAKjO,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAX,GAAiB,CAAvC,MAA8C,EAAlD,EAAsD;AACpD,cAAE,KAAK/L,KAAL,CAAW+L,GAAb;AACD;;AAEH,aAAK,EAAL;AACA,aAAK,IAAL;AACA,aAAK,IAAL;AACE,YAAE,KAAK/L,KAAL,CAAW+L,GAAb;AACA,YAAE,KAAK/L,KAAL,CAAWqb,OAAb;AACA,eAAKrb,KAAL,CAAWhC,SAAX,GAAuB,KAAKgC,KAAL,CAAW+L,GAAlC;AACA;;AAEF,aAAK,EAAL;AACE,kBAAQ,KAAKjO,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAX,GAAiB,CAAvC,CAAR;AACE,iBAAK,EAAL;AACE;AACE,sBAAMjM,OAAO,GAAG,KAAKyf,gBAAL,EAAhB;;AAEA,oBAAIzf,OAAO,KAAKZ,SAAhB,EAA2B;AACzB,uBAAKW,UAAL,CAAgBC,OAAhB;AACA,sBAAI,KAAKpJ,OAAL,CAAaopB,aAAjB,EAAgC9gB,QAAQ,CAACiB,IAAT,CAAcH,OAAd;AACjC;;AAED;AACD;;AAEH,iBAAK,EAAL;AACE;AACE,sBAAMA,OAAO,GAAG,KAAK2f,eAAL,CAAqB,CAArB,CAAhB;;AAEA,oBAAI3f,OAAO,KAAKZ,SAAhB,EAA2B;AACzB,uBAAKW,UAAL,CAAgBC,OAAhB;AACA,sBAAI,KAAKpJ,OAAL,CAAaopB,aAAjB,EAAgC9gB,QAAQ,CAACiB,IAAT,CAAcH,OAAd;AACjC;;AAED;AACD;;AAEH;AACE,oBAAM+f,IAAN;AA1BJ;;AA6BA;;AAEF;AACE,cAAI1iB,YAAY,CAACwiB,EAAD,CAAhB,EAAsB;AACpB,cAAE,KAAK3f,KAAL,CAAW+L,GAAb;AACD,WAFD,MAEO,IAAI4T,EAAE,KAAK,EAAP,IAAa,CAAC,KAAKjK,QAAvB,EAAiC;AACtC,kBAAM3J,GAAG,GAAG,KAAK/L,KAAL,CAAW+L,GAAvB;;AAEA,gBAAI,KAAKjO,KAAL,CAAWiD,UAAX,CAAsBgL,GAAG,GAAG,CAA5B,MAAmC,EAAnC,IAAyC,KAAKjO,KAAL,CAAWiD,UAAX,CAAsBgL,GAAG,GAAG,CAA5B,MAAmC,EAA5E,KAAmF6T,UAAU,KAAK,CAAf,IAAoB,KAAK5f,KAAL,CAAWhC,SAAX,GAAuB4hB,UAA9H,CAAJ,EAA+I;AAC7I,oBAAM9f,OAAO,GAAG,KAAK2f,eAAL,CAAqB,CAArB,CAAhB;;AAEA,kBAAI3f,OAAO,KAAKZ,SAAhB,EAA2B;AACzB,qBAAKW,UAAL,CAAgBC,OAAhB;AACA,oBAAI,KAAKpJ,OAAL,CAAaopB,aAAjB,EAAgC9gB,QAAQ,CAACiB,IAAT,CAAcH,OAAd;AACjC;AACF,aAPD,MAOO;AACL,oBAAM+f,IAAN;AACD;AACF,WAbM,MAaA,IAAIF,EAAE,KAAK,EAAP,IAAa,CAAC,KAAKjK,QAAvB,EAAiC;AACtC,kBAAM3J,GAAG,GAAG,KAAK/L,KAAL,CAAW+L,GAAvB;;AAEA,gBAAI,KAAKjO,KAAL,CAAWiD,UAAX,CAAsBgL,GAAG,GAAG,CAA5B,MAAmC,EAAnC,IAAyC,KAAKjO,KAAL,CAAWiD,UAAX,CAAsBgL,GAAG,GAAG,CAA5B,MAAmC,EAA5E,IAAkF,KAAKjO,KAAL,CAAWiD,UAAX,CAAsBgL,GAAG,GAAG,CAA5B,MAAmC,EAAzH,EAA6H;AAC3H,oBAAMjM,OAAO,GAAG,KAAK2f,eAAL,CAAqB,CAArB,CAAhB;;AAEA,kBAAI3f,OAAO,KAAKZ,SAAhB,EAA2B;AACzB,qBAAKW,UAAL,CAAgBC,OAAhB;AACA,oBAAI,KAAKpJ,OAAL,CAAaopB,aAAjB,EAAgC9gB,QAAQ,CAACiB,IAAT,CAAcH,OAAd;AACjC;AACF,aAPD,MAOO;AACL,oBAAM+f,IAAN;AACD;AACF,WAbM,MAaA;AACL,kBAAMA,IAAN;AACD;;AAnFL;AAsFD;;AAED,QAAI7gB,QAAQ,CAACW,MAAT,GAAkB,CAAtB,EAAyB;AACvB,YAAMjC,GAAG,GAAG,KAAKsC,KAAL,CAAW+L,GAAvB;AACA,YAAMgU,iBAAiB,GAAG;AACxBtiB,QAAAA,KAAK,EAAEmiB,UADiB;AAExBliB,QAAAA,GAFwB;AAGxBsB,QAAAA,QAHwB;AAIxBsB,QAAAA,WAAW,EAAE,IAJW;AAKxBM,QAAAA,YAAY,EAAE,IALU;AAMxBH,QAAAA,cAAc,EAAE;AANQ,OAA1B;AAQA,WAAKT,KAAL,CAAWG,YAAX,CAAwBF,IAAxB,CAA6B8f,iBAA7B;AACD;AACF;;AAEDX,EAAAA,WAAW,CAACpe,IAAD,EAAOkc,GAAP,EAAY;AACrB,SAAKld,KAAL,CAAWtC,GAAX,GAAiB,KAAKsC,KAAL,CAAW+L,GAA5B;AACA,UAAMiU,QAAQ,GAAG,KAAKhgB,KAAL,CAAWgB,IAA5B;AACA,SAAKhB,KAAL,CAAWgB,IAAX,GAAkBA,IAAlB;AACA,SAAKhB,KAAL,CAAWzK,KAAX,GAAmB2nB,GAAnB;;AAEA,QAAI,CAAC,KAAK9P,WAAV,EAAuB;AACrB,WAAKpN,KAAL,CAAWmM,MAAX,GAAoB,KAAKnM,KAAL,CAAW+c,WAAX,EAApB;AACA,WAAK1mB,aAAL,CAAmB2pB,QAAnB;AACD;AACF;;AAEDC,EAAAA,oBAAoB,GAAG;AACrB,QAAI,KAAKjgB,KAAL,CAAW+L,GAAX,KAAmB,CAAnB,IAAwB,KAAKmU,qBAAL,EAA5B,EAA0D;AACxD;AACD;;AAED,UAAMC,OAAO,GAAG,KAAKngB,KAAL,CAAW+L,GAAX,GAAiB,CAAjC;AACA,UAAMkK,IAAI,GAAG,KAAK6I,cAAL,CAAoBqB,OAApB,CAAb;;AAEA,QAAIlK,IAAI,IAAI,EAAR,IAAcA,IAAI,IAAI,EAA1B,EAA8B;AAC5B,YAAM,KAAK3J,KAAL,CAAW,KAAKtM,KAAL,CAAW+L,GAAtB,EAA2BpK,aAAa,CAAC8H,wBAAzC,CAAN;AACD;;AAED,QAAIwM,IAAI,KAAK,GAAT,IAAgBA,IAAI,KAAK,EAAT,IAAe,KAAKzX,SAAL,CAAe,gBAAf,CAAnC,EAAqE;AACnE,WAAK4hB,YAAL,CAAkB,gBAAlB;;AAEA,UAAI,KAAKzhB,eAAL,CAAqB,gBAArB,EAAuC,YAAvC,MAAyD,MAA7D,EAAqE;AACnE,cAAM,KAAK2N,KAAL,CAAW,KAAKtM,KAAL,CAAW+L,GAAtB,EAA2BkK,IAAI,KAAK,GAAT,GAAetU,aAAa,CAAC0G,4CAA7B,GAA4E1G,aAAa,CAAC2H,2CAArH,CAAN;AACD;;AAED,WAAKtJ,KAAL,CAAW+L,GAAX,IAAkB,CAAlB;;AAEA,UAAIkK,IAAI,KAAK,GAAb,EAAkB;AAChB,aAAKmJ,WAAL,CAAiBtoB,OAAO,CAACe,UAAzB;AACD,OAFD,MAEO;AACL,aAAKunB,WAAL,CAAiBtoB,OAAO,CAACS,YAAzB;AACD;AACF,KAdD,MAcO,IAAIsd,iBAAiB,CAACoB,IAAD,CAArB,EAA6B;AAClC,QAAE,KAAKjW,KAAL,CAAW+L,GAAb;AACA,WAAKqT,WAAL,CAAiBtoB,OAAO,CAACM,WAAzB,EAAsC,KAAKipB,SAAL,CAAepK,IAAf,CAAtC;AACD,KAHM,MAGA,IAAIA,IAAI,KAAK,EAAb,EAAiB;AACtB,QAAE,KAAKjW,KAAL,CAAW+L,GAAb;AACA,WAAKqT,WAAL,CAAiBtoB,OAAO,CAACM,WAAzB,EAAsC,KAAKipB,SAAL,EAAtC;AACD,KAHM,MAGA;AACL,WAAKC,QAAL,CAAcxpB,OAAO,CAACiC,IAAtB,EAA4B,CAA5B;AACD;AACF;;AAEDwnB,EAAAA,aAAa,GAAG;AACd,UAAMtK,IAAI,GAAG,KAAKnY,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAX,GAAiB,CAAvC,CAAb;;AAEA,QAAIkK,IAAI,IAAI,EAAR,IAAcA,IAAI,IAAI,EAA1B,EAA8B;AAC5B,WAAKuK,UAAL,CAAgB,IAAhB;AACA;AACD;;AAED,QAAIvK,IAAI,KAAK,EAAT,IAAe,KAAKnY,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAX,GAAiB,CAAvC,MAA8C,EAAjE,EAAqE;AACnE,WAAK/L,KAAL,CAAW+L,GAAX,IAAkB,CAAlB;AACA,WAAKqT,WAAL,CAAiBtoB,OAAO,CAAC6B,QAAzB;AACD,KAHD,MAGO;AACL,QAAE,KAAKqH,KAAL,CAAW+L,GAAb;AACA,WAAKqT,WAAL,CAAiBtoB,OAAO,CAACwB,GAAzB;AACD;AACF;;AAEDmoB,EAAAA,eAAe,GAAG;AAChB,UAAMxK,IAAI,GAAG,KAAKnY,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAX,GAAiB,CAAvC,CAAb;;AAEA,QAAIkK,IAAI,KAAK,EAAb,EAAiB;AACf,WAAKqK,QAAL,CAAcxpB,OAAO,CAACqC,WAAtB,EAAmC,CAAnC;AACD,KAFD,MAEO;AACL,WAAKmnB,QAAL,CAAcxpB,OAAO,CAACuD,KAAtB,EAA6B,CAA7B;AACD;AACF;;AAED6lB,EAAAA,qBAAqB,GAAG;AACtB,QAAI,KAAKlgB,KAAL,CAAW+L,GAAX,KAAmB,CAAnB,IAAwB,KAAKpM,MAAL,GAAc,CAA1C,EAA6C,OAAO,KAAP;AAC7C,QAAIggB,EAAE,GAAG,KAAK7hB,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAX,GAAiB,CAAvC,CAAT;AACA,QAAI4T,EAAE,KAAK,EAAX,EAAe,OAAO,KAAP;AACf,UAAMliB,KAAK,GAAG,KAAKuC,KAAL,CAAW+L,GAAzB;AACA,SAAK/L,KAAL,CAAW+L,GAAX,IAAkB,CAAlB;;AAEA,WAAO,CAACjP,SAAS,CAAC6iB,EAAD,CAAV,IAAkB,EAAE,KAAK3f,KAAL,CAAW+L,GAAb,GAAmB,KAAKpM,MAAjD,EAAyD;AACvDggB,MAAAA,EAAE,GAAG,KAAK7hB,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAjC,CAAL;AACD;;AAED,UAAMxW,KAAK,GAAG,KAAKuI,KAAL,CAAWoR,KAAX,CAAiBzR,KAAK,GAAG,CAAzB,EAA4B,KAAKuC,KAAL,CAAW+L,GAAvC,CAAd;AACA,SAAKqT,WAAL,CAAiBtoB,OAAO,CAACkC,oBAAzB,EAA+CzD,KAA/C;AACA,WAAO,IAAP;AACD;;AAEDmrB,EAAAA,qBAAqB,CAAC3jB,IAAD,EAAO;AAC1B,QAAIiE,IAAI,GAAGjE,IAAI,KAAK,EAAT,GAAcjG,OAAO,CAACsD,IAAtB,GAA6BtD,OAAO,CAACqD,MAAhD;AACA,QAAIwmB,KAAK,GAAG,CAAZ;AACA,QAAI1K,IAAI,GAAG,KAAKnY,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAX,GAAiB,CAAvC,CAAX;;AAEA,QAAIhP,IAAI,KAAK,EAAT,IAAekZ,IAAI,KAAK,EAA5B,EAAgC;AAC9B0K,MAAAA,KAAK;AACL1K,MAAAA,IAAI,GAAG,KAAKnY,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAX,GAAiB,CAAvC,CAAP;AACA/K,MAAAA,IAAI,GAAGlK,OAAO,CAACwD,QAAf;AACD;;AAED,QAAI2b,IAAI,KAAK,EAAT,IAAe,CAAC,KAAKjW,KAAL,CAAW0b,MAA/B,EAAuC;AACrCiF,MAAAA,KAAK;AACL3f,MAAAA,IAAI,GAAGjE,IAAI,KAAK,EAAT,GAAcjG,OAAO,CAACsC,YAAtB,GAAqCtC,OAAO,CAACoC,MAApD;AACD;;AAED,SAAKonB,QAAL,CAActf,IAAd,EAAoB2f,KAApB;AACD;;AAEDC,EAAAA,kBAAkB,CAAC7jB,IAAD,EAAO;AACvB,UAAMkZ,IAAI,GAAG,KAAKnY,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAX,GAAiB,CAAvC,CAAb;;AAEA,QAAIkK,IAAI,KAAKlZ,IAAb,EAAmB;AACjB,UAAI,KAAKe,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAX,GAAiB,CAAvC,MAA8C,EAAlD,EAAsD;AACpD,aAAKuU,QAAL,CAAcxpB,OAAO,CAACoC,MAAtB,EAA8B,CAA9B;AACD,OAFD,MAEO;AACL,aAAKonB,QAAL,CAAcvjB,IAAI,KAAK,GAAT,GAAejG,OAAO,CAAC4C,SAAvB,GAAmC5C,OAAO,CAAC6C,UAAzD,EAAqE,CAArE;AACD;;AAED;AACD;;AAED,QAAIoD,IAAI,KAAK,GAAb,EAAkB;AAChB,UAAIkZ,IAAI,KAAK,EAAb,EAAiB;AACf,aAAKqK,QAAL,CAAcxpB,OAAO,CAAC0C,QAAtB,EAAgC,CAAhC;AACA;AACD;;AAED,UAAI,KAAKgF,SAAL,CAAe,gBAAf,KAAoCyX,IAAI,KAAK,GAAjD,EAAsD;AACpD,YAAI,KAAKtX,eAAL,CAAqB,gBAArB,EAAuC,YAAvC,MAAyD,KAA7D,EAAoE;AAClE,gBAAM,KAAK2N,KAAL,CAAW,KAAKtM,KAAL,CAAW+L,GAAtB,EAA2BpK,aAAa,CAACwG,yCAAzC,CAAN;AACD;;AAED,aAAKnI,KAAL,CAAW+L,GAAX,IAAkB,CAAlB;AACA,aAAKqT,WAAL,CAAiBtoB,OAAO,CAACiB,SAAzB;AACA;AACD;;AAED,UAAI,KAAKyG,SAAL,CAAe,gBAAf,KAAoCyX,IAAI,KAAK,EAAjD,EAAqD;AACnD,YAAI,KAAKtX,eAAL,CAAqB,gBAArB,EAAuC,YAAvC,MAAyD,KAA7D,EAAoE;AAClE,gBAAM,KAAK2N,KAAL,CAAW,KAAKtM,KAAL,CAAW+L,GAAtB,EAA2BpK,aAAa,CAACyH,wCAAzC,CAAN;AACD;;AAED,aAAKpJ,KAAL,CAAW+L,GAAX,IAAkB,CAAlB;AACA,aAAKqT,WAAL,CAAiBtoB,OAAO,CAACY,WAAzB;AACA;AACD;AACF;;AAED,QAAIue,IAAI,KAAK,EAAb,EAAiB;AACf,WAAKqK,QAAL,CAAcxpB,OAAO,CAACoC,MAAtB,EAA8B,CAA9B;AACA;AACD;;AAED,SAAKonB,QAAL,CAAcvjB,IAAI,KAAK,GAAT,GAAejG,OAAO,CAAC8C,SAAvB,GAAmC9C,OAAO,CAACgD,UAAzD,EAAqE,CAArE;AACD;;AAED+mB,EAAAA,eAAe,GAAG;AAChB,UAAM5K,IAAI,GAAG,KAAKnY,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAX,GAAiB,CAAvC,CAAb;;AAEA,QAAIkK,IAAI,KAAK,EAAb,EAAiB;AACf,WAAKqK,QAAL,CAAcxpB,OAAO,CAACoC,MAAtB,EAA8B,CAA9B;AACD,KAFD,MAEO;AACL,WAAKonB,QAAL,CAAcxpB,OAAO,CAAC+C,UAAtB,EAAkC,CAAlC;AACD;AACF;;AAEDinB,EAAAA,kBAAkB,CAAC/jB,IAAD,EAAO;AACvB,UAAMkZ,IAAI,GAAG,KAAKnY,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAX,GAAiB,CAAvC,CAAb;;AAEA,QAAIkK,IAAI,KAAKlZ,IAAb,EAAmB;AACjB,WAAKujB,QAAL,CAAcxpB,OAAO,CAACuC,MAAtB,EAA8B,CAA9B;AACA;AACD;;AAED,QAAI4c,IAAI,KAAK,EAAb,EAAiB;AACf,WAAKqK,QAAL,CAAcxpB,OAAO,CAACoC,MAAtB,EAA8B,CAA9B;AACD,KAFD,MAEO;AACL,WAAKonB,QAAL,CAAcxpB,OAAO,CAACoD,OAAtB,EAA+B,CAA/B;AACD;AACF;;AAED6mB,EAAAA,eAAe,CAAChkB,IAAD,EAAO;AACpB,UAAMkZ,IAAI,GAAG,KAAKnY,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAX,GAAiB,CAAvC,CAAb;AACA,QAAIiV,IAAI,GAAG,CAAX;;AAEA,QAAI/K,IAAI,KAAKlZ,IAAb,EAAmB;AACjBikB,MAAAA,IAAI,GAAGjkB,IAAI,KAAK,EAAT,IAAe,KAAKe,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAX,GAAiB,CAAvC,MAA8C,EAA7D,GAAkE,CAAlE,GAAsE,CAA7E;;AAEA,UAAI,KAAKjO,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAX,GAAiBiV,IAAvC,MAAiD,EAArD,EAAyD;AACvD,aAAKV,QAAL,CAAcxpB,OAAO,CAACoC,MAAtB,EAA8B8nB,IAAI,GAAG,CAArC;AACA;AACD;;AAED,WAAKV,QAAL,CAAcxpB,OAAO,CAACmD,QAAtB,EAAgC+mB,IAAhC;AACA;AACD;;AAED,QAAI/K,IAAI,KAAK,EAAb,EAAiB;AACf+K,MAAAA,IAAI,GAAG,CAAP;AACD;;AAED,SAAKV,QAAL,CAAcxpB,OAAO,CAACkD,UAAtB,EAAkCgnB,IAAlC;AACD;;AAEDC,EAAAA,iBAAiB,CAAClkB,IAAD,EAAO;AACtB,UAAMkZ,IAAI,GAAG,KAAKnY,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAX,GAAiB,CAAvC,CAAb;;AAEA,QAAIkK,IAAI,KAAK,EAAb,EAAiB;AACf,WAAKqK,QAAL,CAAcxpB,OAAO,CAACiD,QAAtB,EAAgC,KAAK+D,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAX,GAAiB,CAAvC,MAA8C,EAA9C,GAAmD,CAAnD,GAAuD,CAAvF;AACA;AACD;;AAED,QAAIhP,IAAI,KAAK,EAAT,IAAekZ,IAAI,KAAK,EAA5B,EAAgC;AAC9B,WAAKjW,KAAL,CAAW+L,GAAX,IAAkB,CAAlB;AACA,WAAKqT,WAAL,CAAiBtoB,OAAO,CAAC2B,KAAzB;AACA;AACD;;AAED,SAAK6nB,QAAL,CAAcvjB,IAAI,KAAK,EAAT,GAAcjG,OAAO,CAACmC,EAAtB,GAA2BnC,OAAO,CAACwC,IAAjD,EAAuD,CAAvD;AACD;;AAED4nB,EAAAA,kBAAkB,GAAG;AACnB,UAAMjL,IAAI,GAAG,KAAKnY,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAX,GAAiB,CAAvC,CAAb;AACA,UAAMoV,KAAK,GAAG,KAAKrjB,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAX,GAAiB,CAAvC,CAAd;;AAEA,QAAIkK,IAAI,KAAK,EAAb,EAAiB;AACf,UAAIkL,KAAK,KAAK,EAAd,EAAkB;AAChB,aAAKb,QAAL,CAAcxpB,OAAO,CAACoC,MAAtB,EAA8B,CAA9B;AACD,OAFD,MAEO;AACL,aAAKonB,QAAL,CAAcxpB,OAAO,CAAC2C,iBAAtB,EAAyC,CAAzC;AACD;AACF,KAND,MAMO,IAAIwc,IAAI,KAAK,EAAT,IAAe,EAAEkL,KAAK,IAAI,EAAT,IAAeA,KAAK,IAAI,EAA1B,CAAnB,EAAkD;AACvD,WAAKnhB,KAAL,CAAW+L,GAAX,IAAkB,CAAlB;AACA,WAAKqT,WAAL,CAAiBtoB,OAAO,CAAC0B,WAAzB;AACD,KAHM,MAGA;AACL,QAAE,KAAKwH,KAAL,CAAW+L,GAAb;AACA,WAAKqT,WAAL,CAAiBtoB,OAAO,CAACyB,QAAzB;AACD;AACF;;AAED+mB,EAAAA,gBAAgB,CAACviB,IAAD,EAAO;AACrB,YAAQA,IAAR;AACE,WAAK,EAAL;AACE,aAAKwjB,aAAL;AACA;;AAEF,WAAK,EAAL;AACE,UAAE,KAAKvgB,KAAL,CAAW+L,GAAb;AACA,aAAKqT,WAAL,CAAiBtoB,OAAO,CAACkB,MAAzB;AACA;;AAEF,WAAK,EAAL;AACE,UAAE,KAAKgI,KAAL,CAAW+L,GAAb;AACA,aAAKqT,WAAL,CAAiBtoB,OAAO,CAACmB,MAAzB;AACA;;AAEF,WAAK,EAAL;AACE,UAAE,KAAK+H,KAAL,CAAW+L,GAAb;AACA,aAAKqT,WAAL,CAAiBtoB,OAAO,CAACqB,IAAzB;AACA;;AAEF,WAAK,EAAL;AACE,UAAE,KAAK6H,KAAL,CAAW+L,GAAb;AACA,aAAKqT,WAAL,CAAiBtoB,OAAO,CAACoB,KAAzB;AACA;;AAEF,WAAK,EAAL;AACE,YAAI,KAAKsG,SAAL,CAAe,gBAAf,KAAoC,KAAKV,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAX,GAAiB,CAAvC,MAA8C,GAAtF,EAA2F;AACzF,cAAI,KAAKpN,eAAL,CAAqB,gBAArB,EAAuC,YAAvC,MAAyD,KAA7D,EAAoE;AAClE,kBAAM,KAAK2N,KAAL,CAAW,KAAKtM,KAAL,CAAW+L,GAAtB,EAA2BpK,aAAa,CAAC0H,0CAAzC,CAAN;AACD;;AAED,eAAKrJ,KAAL,CAAW+L,GAAX,IAAkB,CAAlB;AACA,eAAKqT,WAAL,CAAiBtoB,OAAO,CAACU,WAAzB;AACD,SAPD,MAOO;AACL,YAAE,KAAKwI,KAAL,CAAW+L,GAAb;AACA,eAAKqT,WAAL,CAAiBtoB,OAAO,CAACQ,QAAzB;AACD;;AAED;;AAEF,WAAK,EAAL;AACE,UAAE,KAAK0I,KAAL,CAAW+L,GAAb;AACA,aAAKqT,WAAL,CAAiBtoB,OAAO,CAACW,QAAzB;AACA;;AAEF,WAAK,GAAL;AACE,YAAI,KAAK+G,SAAL,CAAe,gBAAf,KAAoC,KAAKV,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAX,GAAiB,CAAvC,MAA8C,GAAtF,EAA2F;AACzF,cAAI,KAAKpN,eAAL,CAAqB,gBAArB,EAAuC,YAAvC,MAAyD,KAA7D,EAAoE;AAClE,kBAAM,KAAK2N,KAAL,CAAW,KAAKtM,KAAL,CAAW+L,GAAtB,EAA2BpK,aAAa,CAACyG,2CAAzC,CAAN;AACD;;AAED,eAAKpI,KAAL,CAAW+L,GAAX,IAAkB,CAAlB;AACA,eAAKqT,WAAL,CAAiBtoB,OAAO,CAACc,SAAzB;AACD,SAPD,MAOO;AACL,YAAE,KAAKoI,KAAL,CAAW+L,GAAb;AACA,eAAKqT,WAAL,CAAiBtoB,OAAO,CAACa,MAAzB;AACD;;AAED;;AAEF,WAAK,GAAL;AACE,UAAE,KAAKqI,KAAL,CAAW+L,GAAb;AACA,aAAKqT,WAAL,CAAiBtoB,OAAO,CAACgB,MAAzB;AACA;;AAEF,WAAK,EAAL;AACE,YAAI,KAAK0G,SAAL,CAAe,cAAf,KAAkC,KAAKV,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAX,GAAiB,CAAvC,MAA8C,EAApF,EAAwF;AACtF,eAAKuU,QAAL,CAAcxpB,OAAO,CAACuB,WAAtB,EAAmC,CAAnC;AACD,SAFD,MAEO;AACL,YAAE,KAAK2H,KAAL,CAAW+L,GAAb;AACA,eAAKqT,WAAL,CAAiBtoB,OAAO,CAACsB,KAAzB;AACD;;AAED;;AAEF,WAAK,EAAL;AACE,aAAK8oB,kBAAL;AACA;;AAEF,WAAK,EAAL;AACE,UAAE,KAAKlhB,KAAL,CAAW+L,GAAb;AACA,aAAKqT,WAAL,CAAiBtoB,OAAO,CAAC8B,SAAzB;AACA;;AAEF,WAAK,EAAL;AACE;AACE,gBAAMqd,IAAI,GAAG,KAAKnY,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAX,GAAiB,CAAvC,CAAb;;AAEA,cAAIkK,IAAI,KAAK,GAAT,IAAgBA,IAAI,KAAK,EAA7B,EAAiC;AAC/B,iBAAKmL,eAAL,CAAqB,EAArB;AACA;AACD;;AAED,cAAInL,IAAI,KAAK,GAAT,IAAgBA,IAAI,KAAK,EAA7B,EAAiC;AAC/B,iBAAKmL,eAAL,CAAqB,CAArB;AACA;AACD;;AAED,cAAInL,IAAI,KAAK,EAAT,IAAeA,IAAI,KAAK,EAA5B,EAAgC;AAC9B,iBAAKmL,eAAL,CAAqB,CAArB;AACA;AACD;AACF;;AAEH,WAAK,EAAL;AACA,WAAK,EAAL;AACA,WAAK,EAAL;AACA,WAAK,EAAL;AACA,WAAK,EAAL;AACA,WAAK,EAAL;AACA,WAAK,EAAL;AACA,WAAK,EAAL;AACA,WAAK,EAAL;AACE,aAAKZ,UAAL,CAAgB,KAAhB;AACA;;AAEF,WAAK,EAAL;AACA,WAAK,EAAL;AACE,aAAKa,UAAL,CAAgBtkB,IAAhB;AACA;;AAEF,WAAK,EAAL;AACE,aAAK0jB,eAAL;AACA;;AAEF,WAAK,EAAL;AACA,WAAK,EAAL;AACE,aAAKC,qBAAL,CAA2B3jB,IAA3B;AACA;;AAEF,WAAK,GAAL;AACA,WAAK,EAAL;AACE,aAAK6jB,kBAAL,CAAwB7jB,IAAxB;AACA;;AAEF,WAAK,EAAL;AACE,aAAK8jB,eAAL;AACA;;AAEF,WAAK,EAAL;AACA,WAAK,EAAL;AACE,aAAKC,kBAAL,CAAwB/jB,IAAxB;AACA;;AAEF,WAAK,EAAL;AACA,WAAK,EAAL;AACE,aAAKgkB,eAAL,CAAqBhkB,IAArB;AACA;;AAEF,WAAK,EAAL;AACA,WAAK,EAAL;AACE,aAAKkkB,iBAAL,CAAuBlkB,IAAvB;AACA;;AAEF,WAAK,GAAL;AACE,aAAKujB,QAAL,CAAcxpB,OAAO,CAACyC,KAAtB,EAA6B,CAA7B;AACA;;AAEF,WAAK,EAAL;AACE,UAAE,KAAKyG,KAAL,CAAW+L,GAAb;AACA,aAAKqT,WAAL,CAAiBtoB,OAAO,CAACgC,EAAzB;AACA;;AAEF,WAAK,EAAL;AACE,aAAKmnB,oBAAL;AACA;;AAEF,WAAK,EAAL;AACE,aAAKqB,QAAL;AACA;;AAEF;AACE,YAAIzM,iBAAiB,CAAC9X,IAAD,CAArB,EAA6B;AAC3B,eAAKukB,QAAL,CAAcvkB,IAAd;AACA;AACD;;AA/KL;;AAmLA,UAAM,KAAKuP,KAAL,CAAW,KAAKtM,KAAL,CAAW+L,GAAtB,EAA2BpK,aAAa,CAAC2D,wBAAzC,EAAmE2I,MAAM,CAACsT,aAAP,CAAqBxkB,IAArB,CAAnE,CAAN;AACD;;AAEDujB,EAAAA,QAAQ,CAACtf,IAAD,EAAOggB,IAAP,EAAa;AACnB,UAAMQ,GAAG,GAAG,KAAK1jB,KAAL,CAAWoR,KAAX,CAAiB,KAAKlP,KAAL,CAAW+L,GAA5B,EAAiC,KAAK/L,KAAL,CAAW+L,GAAX,GAAiBiV,IAAlD,CAAZ;AACA,SAAKhhB,KAAL,CAAW+L,GAAX,IAAkBiV,IAAlB;AACA,SAAK5B,WAAL,CAAiBpe,IAAjB,EAAuBwgB,GAAvB;AACD;;AAEDC,EAAAA,UAAU,GAAG;AACX,UAAMhkB,KAAK,GAAG,KAAKuC,KAAL,CAAWvC,KAAX,GAAmB,CAAjC;AACA,QAAIikB,OAAJ,EAAa9H,OAAb;AACA,QAAI;AACF7N,MAAAA;AADE,QAEA,KAAK/L,KAFT;;AAIA,YAAQ,EAAE+L,GAAV,EAAe;AACb,UAAIA,GAAG,IAAI,KAAKpM,MAAhB,EAAwB;AACtB,cAAM,KAAK2M,KAAL,CAAW7O,KAAX,EAAkBkE,aAAa,CAACmJ,kBAAhC,CAAN;AACD;;AAED,YAAM6U,EAAE,GAAG,KAAK7hB,KAAL,CAAWiD,UAAX,CAAsBgL,GAAtB,CAAX;;AAEA,UAAIjP,SAAS,CAAC6iB,EAAD,CAAb,EAAmB;AACjB,cAAM,KAAKrT,KAAL,CAAW7O,KAAX,EAAkBkE,aAAa,CAACmJ,kBAAhC,CAAN;AACD;;AAED,UAAI4W,OAAJ,EAAa;AACXA,QAAAA,OAAO,GAAG,KAAV;AACD,OAFD,MAEO;AACL,YAAI/B,EAAE,KAAK,EAAX,EAAe;AACb/F,UAAAA,OAAO,GAAG,IAAV;AACD,SAFD,MAEO,IAAI+F,EAAE,KAAK,EAAP,IAAa/F,OAAjB,EAA0B;AAC/BA,UAAAA,OAAO,GAAG,KAAV;AACD,SAFM,MAEA,IAAI+F,EAAE,KAAK,EAAP,IAAa,CAAC/F,OAAlB,EAA2B;AAChC;AACD;;AAED8H,QAAAA,OAAO,GAAG/B,EAAE,KAAK,EAAjB;AACD;AACF;;AAED,UAAMgC,OAAO,GAAG,KAAK7jB,KAAL,CAAWoR,KAAX,CAAiBzR,KAAjB,EAAwBsO,GAAxB,CAAhB;AACA,MAAEA,GAAF;AACA,QAAI6V,IAAI,GAAG,EAAX;;AAEA,WAAO7V,GAAG,GAAG,KAAKpM,MAAlB,EAA0B;AACxB,YAAMof,EAAE,GAAG,KAAKD,cAAL,CAAoB/S,GAApB,CAAX;AACA,YAAM8V,IAAI,GAAG5T,MAAM,CAAC8G,YAAP,CAAoBgK,EAApB,CAAb;;AAEA,UAAIxB,iBAAiB,CAAC7e,GAAlB,CAAsBqgB,EAAtB,CAAJ,EAA+B;AAC7B,YAAI6C,IAAI,CAACE,QAAL,CAAcD,IAAd,CAAJ,EAAyB;AACvB,eAAKvV,KAAL,CAAWP,GAAG,GAAG,CAAjB,EAAoBpK,aAAa,CAAC8B,oBAAlC;AACD;AACF,OAJD,MAIO,IAAIuR,gBAAgB,CAAC+J,EAAD,CAAhB,IAAwBA,EAAE,KAAK,EAAnC,EAAuC;AAC5C,aAAKzS,KAAL,CAAWP,GAAG,GAAG,CAAjB,EAAoBpK,aAAa,CAACoE,oBAAlC;AACD,OAFM,MAEA;AACL;AACD;;AAED,QAAEgG,GAAF;AACA6V,MAAAA,IAAI,IAAIC,IAAR;AACD;;AAED,SAAK7hB,KAAL,CAAW+L,GAAX,GAAiBA,GAAjB;AACA,SAAKqT,WAAL,CAAiBtoB,OAAO,CAACI,MAAzB,EAAiC;AAC/BsW,MAAAA,OAAO,EAAEmU,OADsB;AAE/BlU,MAAAA,KAAK,EAAEmU;AAFwB,KAAjC;AAID;;AAEDG,EAAAA,OAAO,CAACC,KAAD,EAAQC,GAAR,EAAaC,QAAb,EAAuBC,iBAAiB,GAAG,IAA3C,EAAiD;AACtD,UAAM1kB,KAAK,GAAG,KAAKuC,KAAL,CAAW+L,GAAzB;AACA,UAAMqW,iBAAiB,GAAGJ,KAAK,KAAK,EAAV,GAAexE,iCAAiC,CAACE,GAAjD,GAAuDF,iCAAiC,CAACC,SAAnH;AACA,UAAM4E,eAAe,GAAGL,KAAK,KAAK,EAAV,GAAerE,+BAA+B,CAACD,GAA/C,GAAqDsE,KAAK,KAAK,EAAV,GAAerE,+BAA+B,CAACG,GAA/C,GAAqDkE,KAAK,KAAK,CAAV,GAAcrE,+BAA+B,CAACE,GAA9C,GAAoDF,+BAA+B,CAACC,GAAtN;AACA,QAAI0E,OAAO,GAAG,KAAd;AACA,QAAIC,KAAK,GAAG,CAAZ;;AAEA,SAAK,IAAI7iB,CAAC,GAAG,CAAR,EAAWiO,CAAC,GAAGsU,GAAG,IAAI,IAAP,GAAcO,QAAd,GAAyBP,GAA7C,EAAkDviB,CAAC,GAAGiO,CAAtD,EAAyD,EAAEjO,CAA3D,EAA8D;AAC5D,YAAM3C,IAAI,GAAG,KAAKe,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAjC,CAAb;AACA,UAAImR,GAAJ;;AAEA,UAAIngB,IAAI,KAAK,EAAb,EAAiB;AACf,cAAM0lB,IAAI,GAAG,KAAK3kB,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAX,GAAiB,CAAvC,CAAb;AACA,cAAMkK,IAAI,GAAG,KAAKnY,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAX,GAAiB,CAAvC,CAAb;;AAEA,YAAIsW,eAAe,CAAC7C,OAAhB,CAAwBvJ,IAAxB,MAAkC,CAAC,CAAvC,EAA0C;AACxC,eAAK3J,KAAL,CAAW,KAAKtM,KAAL,CAAW+L,GAAtB,EAA2BpK,aAAa,CAACoI,0BAAzC;AACD,SAFD,MAEO,IAAIqY,iBAAiB,CAAC5C,OAAlB,CAA0BiD,IAA1B,IAAkC,CAAC,CAAnC,IAAwCL,iBAAiB,CAAC5C,OAAlB,CAA0BvJ,IAA1B,IAAkC,CAAC,CAA3E,IAAgFyM,MAAM,CAACC,KAAP,CAAa1M,IAAb,CAApF,EAAwG;AAC7G,eAAK3J,KAAL,CAAW,KAAKtM,KAAL,CAAW+L,GAAtB,EAA2BpK,aAAa,CAACoI,0BAAzC;AACD;;AAED,YAAI,CAACoY,iBAAL,EAAwB;AACtB,eAAK7V,KAAL,CAAW,KAAKtM,KAAL,CAAW+L,GAAtB,EAA2BpK,aAAa,CAACmF,gCAAzC;AACD;;AAED,UAAE,KAAK9G,KAAL,CAAW+L,GAAb;AACA;AACD;;AAED,UAAIhP,IAAI,IAAI,EAAZ,EAAgB;AACdmgB,QAAAA,GAAG,GAAGngB,IAAI,GAAG,EAAP,GAAY,EAAlB;AACD,OAFD,MAEO,IAAIA,IAAI,IAAI,EAAZ,EAAgB;AACrBmgB,QAAAA,GAAG,GAAGngB,IAAI,GAAG,EAAP,GAAY,EAAlB;AACD,OAFM,MAEA,IAAIsgB,QAAQ,CAACtgB,IAAD,CAAZ,EAAoB;AACzBmgB,QAAAA,GAAG,GAAGngB,IAAI,GAAG,EAAb;AACD,OAFM,MAEA;AACLmgB,QAAAA,GAAG,GAAGsF,QAAN;AACD;;AAED,UAAItF,GAAG,IAAI8E,KAAX,EAAkB;AAChB,YAAI,KAAKtrB,OAAL,CAAakW,aAAb,IAA8BsQ,GAAG,IAAI,CAAzC,EAA4C;AAC1CA,UAAAA,GAAG,GAAG,CAAN;AACA,eAAK5Q,KAAL,CAAW,KAAKtM,KAAL,CAAWvC,KAAX,GAAmBiC,CAAnB,GAAuB,CAAlC,EAAqCiC,aAAa,CAACkD,YAAnD,EAAiEmd,KAAjE;AACD,SAHD,MAGO,IAAIE,QAAJ,EAAc;AACnBhF,UAAAA,GAAG,GAAG,CAAN;AACAoF,UAAAA,OAAO,GAAG,IAAV;AACD,SAHM,MAGA;AACL;AACD;AACF;;AAED,QAAE,KAAKtiB,KAAL,CAAW+L,GAAb;AACAwW,MAAAA,KAAK,GAAGA,KAAK,GAAGP,KAAR,GAAgB9E,GAAxB;AACD;;AAED,QAAI,KAAKld,KAAL,CAAW+L,GAAX,KAAmBtO,KAAnB,IAA4BwkB,GAAG,IAAI,IAAP,IAAe,KAAKjiB,KAAL,CAAW+L,GAAX,GAAiBtO,KAAjB,KAA2BwkB,GAAtE,IAA6EK,OAAjF,EAA0F;AACxF,aAAO,IAAP;AACD;;AAED,WAAOC,KAAP;AACD;;AAEDnB,EAAAA,eAAe,CAACY,KAAD,EAAQ;AACrB,UAAMvkB,KAAK,GAAG,KAAKuC,KAAL,CAAW+L,GAAzB;AACA,QAAI6W,QAAQ,GAAG,KAAf;AACA,SAAK5iB,KAAL,CAAW+L,GAAX,IAAkB,CAAlB;AACA,UAAMmR,GAAG,GAAG,KAAK6E,OAAL,CAAaC,KAAb,CAAZ;;AAEA,QAAI9E,GAAG,IAAI,IAAX,EAAiB;AACf,WAAK5Q,KAAL,CAAW,KAAKtM,KAAL,CAAWvC,KAAX,GAAmB,CAA9B,EAAiCkE,aAAa,CAACkD,YAA/C,EAA6Dmd,KAA7D;AACD;;AAED,UAAM/L,IAAI,GAAG,KAAKnY,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAjC,CAAb;;AAEA,QAAIkK,IAAI,KAAK,GAAb,EAAkB;AAChB,QAAE,KAAKjW,KAAL,CAAW+L,GAAb;AACA6W,MAAAA,QAAQ,GAAG,IAAX;AACD,KAHD,MAGO,IAAI3M,IAAI,KAAK,GAAb,EAAkB;AACvB,YAAM,KAAK3J,KAAL,CAAW7O,KAAX,EAAkBkE,aAAa,CAACiD,cAAhC,CAAN;AACD;;AAED,QAAIiQ,iBAAiB,CAAC,KAAKiK,cAAL,CAAoB,KAAK9e,KAAL,CAAW+L,GAA/B,CAAD,CAArB,EAA4D;AAC1D,YAAM,KAAKO,KAAL,CAAW,KAAKtM,KAAL,CAAW+L,GAAtB,EAA2BpK,aAAa,CAACkF,gBAAzC,CAAN;AACD;;AAED,QAAI+b,QAAJ,EAAc;AACZ,YAAMpB,GAAG,GAAG,KAAK1jB,KAAL,CAAWoR,KAAX,CAAiBzR,KAAjB,EAAwB,KAAKuC,KAAL,CAAW+L,GAAnC,EAAwCW,OAAxC,CAAgD,OAAhD,EAAyD,EAAzD,CAAZ;AACA,WAAK0S,WAAL,CAAiBtoB,OAAO,CAACE,MAAzB,EAAiCwqB,GAAjC;AACA;AACD;;AAED,SAAKpC,WAAL,CAAiBtoB,OAAO,CAACC,GAAzB,EAA8BmmB,GAA9B;AACD;;AAEDsD,EAAAA,UAAU,CAACqC,aAAD,EAAgB;AACxB,UAAMplB,KAAK,GAAG,KAAKuC,KAAL,CAAW+L,GAAzB;AACA,QAAI+W,OAAO,GAAG,KAAd;AACA,QAAIF,QAAQ,GAAG,KAAf;AACA,QAAIG,SAAS,GAAG,KAAhB;AACA,QAAIC,WAAW,GAAG,KAAlB;AACA,QAAIC,OAAO,GAAG,KAAd;;AAEA,QAAI,CAACJ,aAAD,IAAkB,KAAKd,OAAL,CAAa,EAAb,MAAqB,IAA3C,EAAiD;AAC/C,WAAKzV,KAAL,CAAW7O,KAAX,EAAkBkE,aAAa,CAACyD,aAAhC;AACD;;AAED,UAAM8d,cAAc,GAAG,KAAKljB,KAAL,CAAW+L,GAAX,GAAiBtO,KAAjB,IAA0B,CAA1B,IAA+B,KAAKK,KAAL,CAAWiD,UAAX,CAAsBtD,KAAtB,MAAiC,EAAvF;;AAEA,QAAIylB,cAAJ,EAAoB;AAClB,YAAMC,OAAO,GAAG,KAAKrlB,KAAL,CAAWoR,KAAX,CAAiBzR,KAAjB,EAAwB,KAAKuC,KAAL,CAAW+L,GAAnC,CAAhB;AACA,WAAKqX,sBAAL,CAA4B3lB,KAA5B,EAAmCkE,aAAa,CAACoH,kBAAjD;;AAEA,UAAI,CAAC,KAAK/I,KAAL,CAAWkV,MAAhB,EAAwB;AACtB,cAAMmO,aAAa,GAAGF,OAAO,CAAC3D,OAAR,CAAgB,GAAhB,CAAtB;;AAEA,YAAI6D,aAAa,GAAG,CAApB,EAAuB;AACrB,eAAK/W,KAAL,CAAW+W,aAAa,GAAG5lB,KAA3B,EAAkCkE,aAAa,CAACyJ,yBAAhD;AACD;AACF;;AAED6X,MAAAA,OAAO,GAAGC,cAAc,IAAI,CAAC,OAAOpO,IAAP,CAAYqO,OAAZ,CAA7B;AACD;;AAED,QAAIlN,IAAI,GAAG,KAAKnY,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAjC,CAAX;;AAEA,QAAIkK,IAAI,KAAK,EAAT,IAAe,CAACgN,OAApB,EAA6B;AAC3B,QAAE,KAAKjjB,KAAL,CAAW+L,GAAb;AACA,WAAKgW,OAAL,CAAa,EAAb;AACAe,MAAAA,OAAO,GAAG,IAAV;AACA7M,MAAAA,IAAI,GAAG,KAAKnY,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAjC,CAAP;AACD;;AAED,QAAI,CAACkK,IAAI,KAAK,EAAT,IAAeA,IAAI,KAAK,GAAzB,KAAiC,CAACgN,OAAtC,EAA+C;AAC7ChN,MAAAA,IAAI,GAAG,KAAKnY,KAAL,CAAWiD,UAAX,CAAsB,EAAE,KAAKf,KAAL,CAAW+L,GAAnC,CAAP;;AAEA,UAAIkK,IAAI,KAAK,EAAT,IAAeA,IAAI,KAAK,EAA5B,EAAgC;AAC9B,UAAE,KAAKjW,KAAL,CAAW+L,GAAb;AACD;;AAED,UAAI,KAAKgW,OAAL,CAAa,EAAb,MAAqB,IAAzB,EAA+B;AAC7B,aAAKzV,KAAL,CAAW7O,KAAX,EAAkBkE,aAAa,CAAC0D,wBAAhC;AACD;;AAEDyd,MAAAA,OAAO,GAAG,IAAV;AACAE,MAAAA,WAAW,GAAG,IAAd;AACA/M,MAAAA,IAAI,GAAG,KAAKnY,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAjC,CAAP;AACD;;AAED,QAAIkK,IAAI,KAAK,GAAb,EAAkB;AAChB,UAAI6M,OAAO,IAAII,cAAf,EAA+B;AAC7B,aAAK5W,KAAL,CAAW7O,KAAX,EAAkBkE,aAAa,CAAC+C,oBAAhC;AACD;;AAED,QAAE,KAAK1E,KAAL,CAAW+L,GAAb;AACA6W,MAAAA,QAAQ,GAAG,IAAX;AACD;;AAED,QAAI3M,IAAI,KAAK,GAAb,EAAkB;AAChB,WAAKmK,YAAL,CAAkB,SAAlB,EAA6B,KAAKpgB,KAAL,CAAW+L,GAAxC;;AAEA,UAAIiX,WAAW,IAAIE,cAAnB,EAAmC;AACjC,aAAK5W,KAAL,CAAW7O,KAAX,EAAkBkE,aAAa,CAACiD,cAAhC;AACD;;AAED,QAAE,KAAK5E,KAAL,CAAW+L,GAAb;AACAgX,MAAAA,SAAS,GAAG,IAAZ;AACD;;AAED,QAAIlO,iBAAiB,CAAC,KAAKiK,cAAL,CAAoB,KAAK9e,KAAL,CAAW+L,GAA/B,CAAD,CAArB,EAA4D;AAC1D,YAAM,KAAKO,KAAL,CAAW,KAAKtM,KAAL,CAAW+L,GAAtB,EAA2BpK,aAAa,CAACkF,gBAAzC,CAAN;AACD;;AAED,UAAM2a,GAAG,GAAG,KAAK1jB,KAAL,CAAWoR,KAAX,CAAiBzR,KAAjB,EAAwB,KAAKuC,KAAL,CAAW+L,GAAnC,EAAwCW,OAAxC,CAAgD,QAAhD,EAA0D,EAA1D,CAAZ;;AAEA,QAAIkW,QAAJ,EAAc;AACZ,WAAKxD,WAAL,CAAiBtoB,OAAO,CAACE,MAAzB,EAAiCwqB,GAAjC;AACA;AACD;;AAED,QAAIuB,SAAJ,EAAe;AACb,WAAK3D,WAAL,CAAiBtoB,OAAO,CAACG,OAAzB,EAAkCuqB,GAAlC;AACA;AACD;;AAED,UAAMtE,GAAG,GAAG+F,OAAO,GAAGK,QAAQ,CAAC9B,GAAD,EAAM,CAAN,CAAX,GAAsB+B,UAAU,CAAC/B,GAAD,CAAnD;AACA,SAAKpC,WAAL,CAAiBtoB,OAAO,CAACC,GAAzB,EAA8BmmB,GAA9B;AACD;;AAEDsG,EAAAA,aAAa,CAACC,cAAD,EAAiB;AAC5B,UAAM9D,EAAE,GAAG,KAAK7hB,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAjC,CAAX;AACA,QAAIhP,IAAJ;;AAEA,QAAI4iB,EAAE,KAAK,GAAX,EAAgB;AACd,YAAM+D,OAAO,GAAG,EAAE,KAAK1jB,KAAL,CAAW+L,GAA7B;AACAhP,MAAAA,IAAI,GAAG,KAAK4mB,WAAL,CAAiB,KAAK7lB,KAAL,CAAW0hB,OAAX,CAAmB,GAAnB,EAAwB,KAAKxf,KAAL,CAAW+L,GAAnC,IAA0C,KAAK/L,KAAL,CAAW+L,GAAtE,EAA2E,IAA3E,EAAiF0X,cAAjF,CAAP;AACA,QAAE,KAAKzjB,KAAL,CAAW+L,GAAb;;AAEA,UAAIhP,IAAI,KAAK,IAAT,IAAiBA,IAAI,GAAG,QAA5B,EAAsC;AACpC,YAAI0mB,cAAJ,EAAoB;AAClB,eAAKnX,KAAL,CAAWoX,OAAX,EAAoB/hB,aAAa,CAACgD,gBAAlC;AACD,SAFD,MAEO;AACL,iBAAO,IAAP;AACD;AACF;AACF,KAZD,MAYO;AACL5H,MAAAA,IAAI,GAAG,KAAK4mB,WAAL,CAAiB,CAAjB,EAAoB,KAApB,EAA2BF,cAA3B,CAAP;AACD;;AAED,WAAO1mB,IAAP;AACD;;AAEDskB,EAAAA,UAAU,CAACuC,KAAD,EAAQ;AAChB,QAAIC,GAAG,GAAG,EAAV;AAAA,QACIC,UAAU,GAAG,EAAE,KAAK9jB,KAAL,CAAW+L,GAD9B;;AAGA,aAAS;AACP,UAAI,KAAK/L,KAAL,CAAW+L,GAAX,IAAkB,KAAKpM,MAA3B,EAAmC;AACjC,cAAM,KAAK2M,KAAL,CAAW,KAAKtM,KAAL,CAAWvC,KAAtB,EAA6BkE,aAAa,CAACoJ,kBAA3C,CAAN;AACD;;AAED,YAAM4U,EAAE,GAAG,KAAK7hB,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAjC,CAAX;AACA,UAAI4T,EAAE,KAAKiE,KAAX,EAAkB;;AAElB,UAAIjE,EAAE,KAAK,EAAX,EAAe;AACbkE,QAAAA,GAAG,IAAI,KAAK/lB,KAAL,CAAWoR,KAAX,CAAiB4U,UAAjB,EAA6B,KAAK9jB,KAAL,CAAW+L,GAAxC,CAAP;AACA8X,QAAAA,GAAG,IAAI,KAAKE,eAAL,CAAqB,KAArB,CAAP;AACAD,QAAAA,UAAU,GAAG,KAAK9jB,KAAL,CAAW+L,GAAxB;AACD,OAJD,MAIO,IAAI4T,EAAE,KAAK,IAAP,IAAeA,EAAE,KAAK,IAA1B,EAAgC;AACrC,UAAE,KAAK3f,KAAL,CAAW+L,GAAb;AACA,UAAE,KAAK/L,KAAL,CAAWqb,OAAb;AACA,aAAKrb,KAAL,CAAWhC,SAAX,GAAuB,KAAKgC,KAAL,CAAW+L,GAAlC;AACD,OAJM,MAIA,IAAIjP,SAAS,CAAC6iB,EAAD,CAAb,EAAmB;AACxB,cAAM,KAAKrT,KAAL,CAAW,KAAKtM,KAAL,CAAWvC,KAAtB,EAA6BkE,aAAa,CAACoJ,kBAA3C,CAAN;AACD,OAFM,MAEA;AACL,UAAE,KAAK/K,KAAL,CAAW+L,GAAb;AACD;AACF;;AAED8X,IAAAA,GAAG,IAAI,KAAK/lB,KAAL,CAAWoR,KAAX,CAAiB4U,UAAjB,EAA6B,KAAK9jB,KAAL,CAAW+L,GAAX,EAA7B,CAAP;AACA,SAAKqT,WAAL,CAAiBtoB,OAAO,CAACK,MAAzB,EAAiC0sB,GAAjC;AACD;;AAEDxE,EAAAA,aAAa,GAAG;AACd,QAAIwE,GAAG,GAAG,EAAV;AAAA,QACIC,UAAU,GAAG,KAAK9jB,KAAL,CAAW+L,GAD5B;AAAA,QAEIiY,eAAe,GAAG,KAFtB;;AAIA,aAAS;AACP,UAAI,KAAKhkB,KAAL,CAAW+L,GAAX,IAAkB,KAAKpM,MAA3B,EAAmC;AACjC,cAAM,KAAK2M,KAAL,CAAW,KAAKtM,KAAL,CAAWvC,KAAtB,EAA6BkE,aAAa,CAACqJ,oBAA3C,CAAN;AACD;;AAED,YAAM2U,EAAE,GAAG,KAAK7hB,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAjC,CAAX;;AAEA,UAAI4T,EAAE,KAAK,EAAP,IAAaA,EAAE,KAAK,EAAP,IAAa,KAAK7hB,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAX,GAAiB,CAAvC,MAA8C,GAA5E,EAAiF;AAC/E,YAAI,KAAK/L,KAAL,CAAW+L,GAAX,KAAmB,KAAK/L,KAAL,CAAWvC,KAA9B,IAAuC,KAAKQ,KAAL,CAAWnH,OAAO,CAAC4B,QAAnB,CAA3C,EAAyE;AACvE,cAAIinB,EAAE,KAAK,EAAX,EAAe;AACb,iBAAK3f,KAAL,CAAW+L,GAAX,IAAkB,CAAlB;AACA,iBAAKqT,WAAL,CAAiBtoB,OAAO,CAAC+B,YAAzB;AACA;AACD,WAJD,MAIO;AACL,cAAE,KAAKmH,KAAL,CAAW+L,GAAb;AACA,iBAAKqT,WAAL,CAAiBtoB,OAAO,CAAC8B,SAAzB;AACA;AACD;AACF;;AAEDirB,QAAAA,GAAG,IAAI,KAAK/lB,KAAL,CAAWoR,KAAX,CAAiB4U,UAAjB,EAA6B,KAAK9jB,KAAL,CAAW+L,GAAxC,CAAP;AACA,aAAKqT,WAAL,CAAiBtoB,OAAO,CAAC4B,QAAzB,EAAmCsrB,eAAe,GAAG,IAAH,GAAUH,GAA5D;AACA;AACD;;AAED,UAAIlE,EAAE,KAAK,EAAX,EAAe;AACbkE,QAAAA,GAAG,IAAI,KAAK/lB,KAAL,CAAWoR,KAAX,CAAiB4U,UAAjB,EAA6B,KAAK9jB,KAAL,CAAW+L,GAAxC,CAAP;AACA,cAAM2V,OAAO,GAAG,KAAKqC,eAAL,CAAqB,IAArB,CAAhB;;AAEA,YAAIrC,OAAO,KAAK,IAAhB,EAAsB;AACpBsC,UAAAA,eAAe,GAAG,IAAlB;AACD,SAFD,MAEO;AACLH,UAAAA,GAAG,IAAInC,OAAP;AACD;;AAEDoC,QAAAA,UAAU,GAAG,KAAK9jB,KAAL,CAAW+L,GAAxB;AACD,OAXD,MAWO,IAAIjP,SAAS,CAAC6iB,EAAD,CAAb,EAAmB;AACxBkE,QAAAA,GAAG,IAAI,KAAK/lB,KAAL,CAAWoR,KAAX,CAAiB4U,UAAjB,EAA6B,KAAK9jB,KAAL,CAAW+L,GAAxC,CAAP;AACA,UAAE,KAAK/L,KAAL,CAAW+L,GAAb;;AAEA,gBAAQ4T,EAAR;AACE,eAAK,EAAL;AACE,gBAAI,KAAK7hB,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAjC,MAA0C,EAA9C,EAAkD;AAChD,gBAAE,KAAK/L,KAAL,CAAW+L,GAAb;AACD;;AAEH,eAAK,EAAL;AACE8X,YAAAA,GAAG,IAAI,IAAP;AACA;;AAEF;AACEA,YAAAA,GAAG,IAAI5V,MAAM,CAAC8G,YAAP,CAAoB4K,EAApB,CAAP;AACA;AAZJ;;AAeA,UAAE,KAAK3f,KAAL,CAAWqb,OAAb;AACA,aAAKrb,KAAL,CAAWhC,SAAX,GAAuB,KAAKgC,KAAL,CAAW+L,GAAlC;AACA+X,QAAAA,UAAU,GAAG,KAAK9jB,KAAL,CAAW+L,GAAxB;AACD,OAtBM,MAsBA;AACL,UAAE,KAAK/L,KAAL,CAAW+L,GAAb;AACD;AACF;AACF;;AAEDqX,EAAAA,sBAAsB,CAACrX,GAAD,EAAMU,OAAN,EAAe;AACnC,QAAI,KAAKzM,KAAL,CAAWkV,MAAX,IAAqB,CAAC,KAAKlV,KAAL,CAAWyc,YAAX,CAAwB/d,GAAxB,CAA4BqN,GAA5B,CAA1B,EAA4D;AAC1D,WAAKO,KAAL,CAAWP,GAAX,EAAgBU,OAAhB;AACD,KAFD,MAEO;AACL,WAAKzM,KAAL,CAAWyc,YAAX,CAAwB7lB,GAAxB,CAA4BmV,GAA5B,EAAiCU,OAAjC;AACD;AACF;;AAEDsX,EAAAA,eAAe,CAACE,UAAD,EAAa;AAC1B,UAAMR,cAAc,GAAG,CAACQ,UAAxB;AACA,UAAMtE,EAAE,GAAG,KAAK7hB,KAAL,CAAWiD,UAAX,CAAsB,EAAE,KAAKf,KAAL,CAAW+L,GAAnC,CAAX;AACA,MAAE,KAAK/L,KAAL,CAAW+L,GAAb;;AAEA,YAAQ4T,EAAR;AACE,WAAK,GAAL;AACE,eAAO,IAAP;;AAEF,WAAK,GAAL;AACE,eAAO,IAAP;;AAEF,WAAK,GAAL;AACE;AACE,gBAAM5iB,IAAI,GAAG,KAAK4mB,WAAL,CAAiB,CAAjB,EAAoB,KAApB,EAA2BF,cAA3B,CAAb;AACA,iBAAO1mB,IAAI,KAAK,IAAT,GAAgB,IAAhB,GAAuBkR,MAAM,CAAC8G,YAAP,CAAoBhY,IAApB,CAA9B;AACD;;AAEH,WAAK,GAAL;AACE;AACE,gBAAMA,IAAI,GAAG,KAAKymB,aAAL,CAAmBC,cAAnB,CAAb;AACA,iBAAO1mB,IAAI,KAAK,IAAT,GAAgB,IAAhB,GAAuBkR,MAAM,CAACsT,aAAP,CAAqBxkB,IAArB,CAA9B;AACD;;AAEH,WAAK,GAAL;AACE,eAAO,IAAP;;AAEF,WAAK,EAAL;AACE,eAAO,IAAP;;AAEF,WAAK,GAAL;AACE,eAAO,QAAP;;AAEF,WAAK,GAAL;AACE,eAAO,IAAP;;AAEF,WAAK,EAAL;AACE,YAAI,KAAKe,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAjC,MAA0C,EAA9C,EAAkD;AAChD,YAAE,KAAK/L,KAAL,CAAW+L,GAAb;AACD;;AAEH,WAAK,EAAL;AACE,aAAK/L,KAAL,CAAWhC,SAAX,GAAuB,KAAKgC,KAAL,CAAW+L,GAAlC;AACA,UAAE,KAAK/L,KAAL,CAAWqb,OAAb;;AAEF,WAAK,IAAL;AACA,WAAK,IAAL;AACE,eAAO,EAAP;;AAEF,WAAK,EAAL;AACA,WAAK,EAAL;AACE,YAAI4I,UAAJ,EAAgB;AACd,iBAAO,IAAP;AACD,SAFD,MAEO;AACL,eAAKb,sBAAL,CAA4B,KAAKpjB,KAAL,CAAW+L,GAAX,GAAiB,CAA7C,EAAgDpK,aAAa,CAACmH,mBAA9D;AACD;;AAEH;AACE,YAAI6W,EAAE,IAAI,EAAN,IAAYA,EAAE,IAAI,EAAtB,EAA0B;AACxB,gBAAM+D,OAAO,GAAG,KAAK1jB,KAAL,CAAW+L,GAAX,GAAiB,CAAjC;AACA,gBAAM9N,KAAK,GAAG,KAAKH,KAAL,CAAWomB,MAAX,CAAkB,KAAKlkB,KAAL,CAAW+L,GAAX,GAAiB,CAAnC,EAAsC,CAAtC,EAAyC9N,KAAzC,CAA+C,SAA/C,CAAd;AACA,cAAIkmB,QAAQ,GAAGlmB,KAAK,CAAC,CAAD,CAApB;AACA,cAAImmB,KAAK,GAAGd,QAAQ,CAACa,QAAD,EAAW,CAAX,CAApB;;AAEA,cAAIC,KAAK,GAAG,GAAZ,EAAiB;AACfD,YAAAA,QAAQ,GAAGA,QAAQ,CAACjV,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAnB,CAAX;AACAkV,YAAAA,KAAK,GAAGd,QAAQ,CAACa,QAAD,EAAW,CAAX,CAAhB;AACD;;AAED,eAAKnkB,KAAL,CAAW+L,GAAX,IAAkBoY,QAAQ,CAACxkB,MAAT,GAAkB,CAApC;AACA,gBAAMsW,IAAI,GAAG,KAAKnY,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAjC,CAAb;;AAEA,cAAIoY,QAAQ,KAAK,GAAb,IAAoBlO,IAAI,KAAK,EAA7B,IAAmCA,IAAI,KAAK,EAAhD,EAAoD;AAClD,gBAAIgO,UAAJ,EAAgB;AACd,qBAAO,IAAP;AACD,aAFD,MAEO;AACL,mBAAKb,sBAAL,CAA4BM,OAA5B,EAAqC/hB,aAAa,CAACmH,mBAAnD;AACD;AACF;;AAED,iBAAOmF,MAAM,CAAC8G,YAAP,CAAoBqP,KAApB,CAAP;AACD;;AAED,eAAOnW,MAAM,CAAC8G,YAAP,CAAoB4K,EAApB,CAAP;AA9EJ;AAgFD;;AAEDgE,EAAAA,WAAW,CAAC1B,GAAD,EAAMC,QAAN,EAAgBuB,cAAhB,EAAgC;AACzC,UAAMC,OAAO,GAAG,KAAK1jB,KAAL,CAAW+L,GAA3B;AACA,UAAMsY,CAAC,GAAG,KAAKtC,OAAL,CAAa,EAAb,EAAiBE,GAAjB,EAAsBC,QAAtB,EAAgC,KAAhC,CAAV;;AAEA,QAAImC,CAAC,KAAK,IAAV,EAAgB;AACd,UAAIZ,cAAJ,EAAoB;AAClB,aAAKnX,KAAL,CAAWoX,OAAX,EAAoB/hB,aAAa,CAACmD,qBAAlC;AACD,OAFD,MAEO;AACL,aAAK9E,KAAL,CAAW+L,GAAX,GAAiB2X,OAAO,GAAG,CAA3B;AACD;AACF;;AAED,WAAOW,CAAP;AACD;;AAEDhE,EAAAA,SAAS,CAACiE,SAAD,EAAY;AACnB,SAAKtkB,KAAL,CAAWwc,WAAX,GAAyB,KAAzB;AACA,QAAI/G,IAAI,GAAG,EAAX;AACA,UAAMhY,KAAK,GAAG,KAAKuC,KAAL,CAAW+L,GAAzB;AACA,QAAI+X,UAAU,GAAG,KAAK9jB,KAAL,CAAW+L,GAA5B;;AAEA,QAAIuY,SAAS,KAAKplB,SAAlB,EAA6B;AAC3B,WAAKc,KAAL,CAAW+L,GAAX,IAAkBuY,SAAS,IAAI,MAAb,GAAsB,CAAtB,GAA0B,CAA5C;AACD;;AAED,WAAO,KAAKtkB,KAAL,CAAW+L,GAAX,GAAiB,KAAKpM,MAA7B,EAAqC;AACnC,YAAMggB,EAAE,GAAG,KAAKb,cAAL,CAAoB,KAAK9e,KAAL,CAAW+L,GAA/B,CAAX;;AAEA,UAAIiJ,gBAAgB,CAAC2K,EAAD,CAApB,EAA0B;AACxB,aAAK3f,KAAL,CAAW+L,GAAX,IAAkB4T,EAAE,IAAI,MAAN,GAAe,CAAf,GAAmB,CAArC;AACD,OAFD,MAEO,IAAIA,EAAE,KAAK,EAAX,EAAe;AACpB,aAAK3f,KAAL,CAAWwc,WAAX,GAAyB,IAAzB;AACA/G,QAAAA,IAAI,IAAI,KAAK3X,KAAL,CAAWoR,KAAX,CAAiB4U,UAAjB,EAA6B,KAAK9jB,KAAL,CAAW+L,GAAxC,CAAR;AACA,cAAMwY,QAAQ,GAAG,KAAKvkB,KAAL,CAAW+L,GAA5B;AACA,cAAMyY,eAAe,GAAG,KAAKxkB,KAAL,CAAW+L,GAAX,KAAmBtO,KAAnB,GAA2BoX,iBAA3B,GAA+CG,gBAAvE;;AAEA,YAAI,KAAKlX,KAAL,CAAWiD,UAAX,CAAsB,EAAE,KAAKf,KAAL,CAAW+L,GAAnC,MAA4C,GAAhD,EAAqD;AACnD,eAAKO,KAAL,CAAW,KAAKtM,KAAL,CAAW+L,GAAtB,EAA2BpK,aAAa,CAACwE,oBAAzC;AACA2d,UAAAA,UAAU,GAAG,KAAK9jB,KAAL,CAAW+L,GAAX,GAAiB,CAA9B;AACA;AACD;;AAED,UAAE,KAAK/L,KAAL,CAAW+L,GAAb;AACA,cAAM0Y,GAAG,GAAG,KAAKjB,aAAL,CAAmB,IAAnB,CAAZ;;AAEA,YAAIiB,GAAG,KAAK,IAAZ,EAAkB;AAChB,cAAI,CAACD,eAAe,CAACC,GAAD,CAApB,EAA2B;AACzB,iBAAKnY,KAAL,CAAWiY,QAAX,EAAqB5iB,aAAa,CAACgC,0BAAnC;AACD;;AAED8R,UAAAA,IAAI,IAAIxH,MAAM,CAACsT,aAAP,CAAqBkD,GAArB,CAAR;AACD;;AAEDX,QAAAA,UAAU,GAAG,KAAK9jB,KAAL,CAAW+L,GAAxB;AACD,OAxBM,MAwBA;AACL;AACD;AACF;;AAED,WAAO0J,IAAI,GAAG,KAAK3X,KAAL,CAAWoR,KAAX,CAAiB4U,UAAjB,EAA6B,KAAK9jB,KAAL,CAAW+L,GAAxC,CAAd;AACD;;AAEDuV,EAAAA,QAAQ,CAACgD,SAAD,EAAY;AAClB,UAAM7O,IAAI,GAAG,KAAK4K,SAAL,CAAeiE,SAAf,CAAb;AACA,UAAMtjB,IAAI,GAAG1K,UAAU,CAACuI,GAAX,CAAe4W,IAAf,KAAwB3e,OAAO,CAACL,IAA7C;AACA,SAAK2oB,WAAL,CAAiBpe,IAAjB,EAAuByU,IAAvB;AACD;;AAED0I,EAAAA,mBAAmB,GAAG;AACpB,UAAMuG,EAAE,GAAG,KAAK1kB,KAAL,CAAWgB,IAAX,CAAgB9K,OAA3B;;AAEA,QAAIwuB,EAAE,IAAI,KAAK1kB,KAAL,CAAWwc,WAArB,EAAkC;AAChC,WAAKlQ,KAAL,CAAW,KAAKtM,KAAL,CAAWvC,KAAtB,EAA6BkE,aAAa,CAACqD,0BAA3C,EAAuE0f,EAAvE;AACD;AACF;;AAEDruB,EAAAA,aAAa,CAAC2pB,QAAD,EAAW;AACtB,QAAI2E,qBAAJ,EAA2BC,gBAA3B;;AAEA,KAACD,qBAAqB,GAAG,CAACC,gBAAgB,GAAG,KAAK5kB,KAAL,CAAWgB,IAA/B,EAAqC3K,aAA9D,KAAgF,IAAhF,GAAuF,KAAK,CAA5F,GAAgGsuB,qBAAqB,CAACE,IAAtB,CAA2BD,gBAA3B,EAA6C,KAAK5kB,KAAL,CAAWoU,OAAxD,CAAhG;AACD;;AApvCiC;;AAwvCpC,MAAM0Q,UAAN,CAAiB;AACf/uB,EAAAA,WAAW,GAAG;AACZ,SAAKgvB,YAAL,GAAoB,IAAI1P,GAAJ,EAApB;AACA,SAAK2P,aAAL,GAAqB,IAAIzuB,GAAJ,EAArB;AACA,SAAKgjB,qBAAL,GAA6B,IAAIhjB,GAAJ,EAA7B;AACD;;AALc;;AAQjB,MAAM0uB,iBAAN,CAAwB;AACtBlvB,EAAAA,WAAW,CAACuW,KAAD,EAAQ;AACjB,SAAK4Y,KAAL,GAAa,EAAb;AACA,SAAK3L,qBAAL,GAA6B,IAAIhjB,GAAJ,EAA7B;AACA,SAAK+V,KAAL,GAAaA,KAAb;AACD;;AAED0J,EAAAA,OAAO,GAAG;AACR,WAAO,KAAKkP,KAAL,CAAW,KAAKA,KAAL,CAAWvlB,MAAX,GAAoB,CAA/B,CAAP;AACD;;AAEDya,EAAAA,KAAK,GAAG;AACN,SAAK8K,KAAL,CAAWjlB,IAAX,CAAgB,IAAI6kB,UAAJ,EAAhB;AACD;;AAEDzK,EAAAA,IAAI,GAAG;AACL,UAAM8K,aAAa,GAAG,KAAKD,KAAL,CAAW7Q,GAAX,EAAtB;AACA,UAAM2B,OAAO,GAAG,KAAKA,OAAL,EAAhB;;AAEA,SAAK,MAAM,CAACvf,IAAD,EAAOsV,GAAP,CAAX,IAA0BoR,KAAK,CAACiI,IAAN,CAAWD,aAAa,CAAC5L,qBAAzB,CAA1B,EAA2E;AACzE,UAAIvD,OAAJ,EAAa;AACX,YAAI,CAACA,OAAO,CAACuD,qBAAR,CAA8B7a,GAA9B,CAAkCjI,IAAlC,CAAL,EAA8C;AAC5Cuf,UAAAA,OAAO,CAACuD,qBAAR,CAA8B3iB,GAA9B,CAAkCH,IAAlC,EAAwCsV,GAAxC;AACD;AACF,OAJD,MAIO;AACL,aAAKO,KAAL,CAAWP,GAAX,EAAgBpK,aAAa,CAAC6D,6BAA9B,EAA6D/O,IAA7D;AACD;AACF;AACF;;AAED4uB,EAAAA,kBAAkB,CAAC5uB,IAAD,EAAO6uB,WAAP,EAAoBvZ,GAApB,EAAyB;AACzC,UAAMwZ,UAAU,GAAG,KAAKvP,OAAL,EAAnB;AACA,QAAIwP,SAAS,GAAGD,UAAU,CAACR,YAAX,CAAwBrmB,GAAxB,CAA4BjI,IAA5B,CAAhB;;AAEA,QAAI6uB,WAAW,GAAG5M,2BAAlB,EAA+C;AAC7C,YAAM+M,QAAQ,GAAGD,SAAS,IAAID,UAAU,CAACP,aAAX,CAAyBnmB,GAAzB,CAA6BpI,IAA7B,CAA9B;;AAEA,UAAIgvB,QAAJ,EAAc;AACZ,cAAMC,SAAS,GAAGD,QAAQ,GAAGlN,yBAA7B;AACA,cAAMoN,SAAS,GAAGL,WAAW,GAAG/M,yBAAhC;AACA,cAAMqN,OAAO,GAAGH,QAAQ,GAAG/M,2BAA3B;AACA,cAAMmN,OAAO,GAAGP,WAAW,GAAG5M,2BAA9B;AACA8M,QAAAA,SAAS,GAAGI,OAAO,KAAKC,OAAZ,IAAuBH,SAAS,KAAKC,SAAjD;AACA,YAAI,CAACH,SAAL,EAAgBD,UAAU,CAACP,aAAX,CAAyBpK,MAAzB,CAAgCnkB,IAAhC;AACjB,OAPD,MAOO,IAAI,CAAC+uB,SAAL,EAAgB;AACrBD,QAAAA,UAAU,CAACP,aAAX,CAAyBpuB,GAAzB,CAA6BH,IAA7B,EAAmC6uB,WAAnC;AACD;AACF;;AAED,QAAIE,SAAJ,EAAe;AACb,WAAKlZ,KAAL,CAAWP,GAAX,EAAgBpK,aAAa,CAACuG,wBAA9B,EAAwDzR,IAAxD;AACD;;AAED8uB,IAAAA,UAAU,CAACR,YAAX,CAAwBrK,GAAxB,CAA4BjkB,IAA5B;AACA8uB,IAAAA,UAAU,CAAChM,qBAAX,CAAiCqB,MAAjC,CAAwCnkB,IAAxC;AACD;;AAEDqvB,EAAAA,cAAc,CAACrvB,IAAD,EAAOsV,GAAP,EAAY;AACxB,QAAIwZ,UAAJ;;AAEA,SAAKA,UAAL,IAAmB,KAAKL,KAAxB,EAA+B;AAC7B,UAAIK,UAAU,CAACR,YAAX,CAAwBrmB,GAAxB,CAA4BjI,IAA5B,CAAJ,EAAuC;AACxC;;AAED,QAAI8uB,UAAJ,EAAgB;AACdA,MAAAA,UAAU,CAAChM,qBAAX,CAAiC3iB,GAAjC,CAAqCH,IAArC,EAA2CsV,GAA3C;AACD,KAFD,MAEO;AACL,WAAKO,KAAL,CAAWP,GAAX,EAAgBpK,aAAa,CAAC6D,6BAA9B,EAA6D/O,IAA7D;AACD;AACF;;AArEqB;;AAyExB,MAAMsvB,WAAW,GAAG,CAApB;AAAA,MACMC,+BAA+B,GAAG,CADxC;AAAA,MAEMC,oCAAoC,GAAG,CAF7C;AAAA,MAGMC,qBAAqB,GAAG,CAH9B;;AAKA,MAAMC,eAAN,CAAsB;AACpBpwB,EAAAA,WAAW,CAACiL,IAAI,GAAG+kB,WAAR,EAAqB;AAC9B,SAAK/kB,IAAL,GAAY,KAAK,CAAjB;AACA,SAAKA,IAAL,GAAYA,IAAZ;AACD;;AAEDolB,EAAAA,8BAA8B,GAAG;AAC/B,WAAO,KAAKplB,IAAL,KAAcilB,oCAAd,IAAsD,KAAKjlB,IAAL,KAAcglB,+BAA3E;AACD;;AAEDK,EAAAA,+BAA+B,GAAG;AAChC,WAAO,KAAKrlB,IAAL,KAAcklB,qBAArB;AACD;;AAZmB;;AAgBtB,MAAMI,qBAAN,SAAoCH,eAApC,CAAoD;AAClDpwB,EAAAA,WAAW,CAACiL,IAAD,EAAO;AAChB,UAAMA,IAAN;AACA,SAAK6L,MAAL,GAAc,IAAItW,GAAJ,EAAd;AACD;;AAEDgwB,EAAAA,sBAAsB,CAACxa,GAAD,EAAMrT,QAAN,EAAgB;AACpC,SAAKmU,MAAL,CAAYjW,GAAZ,CAAgBmV,GAAhB,EAAqBrT,QAArB;AACD;;AAED8tB,EAAAA,qBAAqB,CAACza,GAAD,EAAM;AACzB,SAAKc,MAAL,CAAY+N,MAAZ,CAAmB7O,GAAnB;AACD;;AAED0a,EAAAA,aAAa,CAACC,QAAD,EAAW;AACtB,SAAK7Z,MAAL,CAAYlB,OAAZ,CAAoB+a,QAApB;AACD;;AAhBiD;;AAoBpD,MAAMC,sBAAN,CAA6B;AAC3B5wB,EAAAA,WAAW,CAACuW,KAAD,EAAQ;AACjB,SAAK4Y,KAAL,GAAa,CAAC,IAAIiB,eAAJ,EAAD,CAAb;AACA,SAAK7Z,KAAL,GAAaA,KAAb;AACD;;AAED8N,EAAAA,KAAK,CAACE,KAAD,EAAQ;AACX,SAAK4K,KAAL,CAAWjlB,IAAX,CAAgBqa,KAAhB;AACD;;AAEDD,EAAAA,IAAI,GAAG;AACL,SAAK6K,KAAL,CAAW7Q,GAAX;AACD;;AAEDuS,EAAAA,+BAA+B,CAAC7a,GAAD,EAAMrT,QAAN,EAAgB;AAC7C,UAAM;AACJwsB,MAAAA;AADI,QAEF,IAFJ;AAGA,QAAIxlB,CAAC,GAAGwlB,KAAK,CAACvlB,MAAN,GAAe,CAAvB;AACA,QAAI2a,KAAK,GAAG4K,KAAK,CAACxlB,CAAD,CAAjB;;AAEA,WAAO,CAAC4a,KAAK,CAAC+L,+BAAN,EAAR,EAAiD;AAC/C,UAAI/L,KAAK,CAAC8L,8BAAN,EAAJ,EAA4C;AAC1C9L,QAAAA,KAAK,CAACiM,sBAAN,CAA6Bxa,GAA7B,EAAkCrT,QAAlC;AACD,OAFD,MAEO;AACL;AACD;;AAED4hB,MAAAA,KAAK,GAAG4K,KAAK,CAAC,EAAExlB,CAAH,CAAb;AACD;;AAED,SAAK4M,KAAL,CAAWP,GAAX,EAAgBrT,QAAhB;AACD;;AAEDmuB,EAAAA,kCAAkC,CAAC9a,GAAD,EAAMrT,QAAN,EAAgB;AAChD,UAAM;AACJwsB,MAAAA;AADI,QAEF,IAFJ;AAGA,UAAM5K,KAAK,GAAG4K,KAAK,CAACA,KAAK,CAACvlB,MAAN,GAAe,CAAhB,CAAnB;;AAEA,QAAI2a,KAAK,CAAC+L,+BAAN,EAAJ,EAA6C;AAC3C,WAAK/Z,KAAL,CAAWP,GAAX,EAAgBrT,QAAhB;AACD,KAFD,MAEO,IAAI4hB,KAAK,CAAC8L,8BAAN,EAAJ,EAA4C;AACjD9L,MAAAA,KAAK,CAACiM,sBAAN,CAA6Bxa,GAA7B,EAAkCrT,QAAlC;AACD,KAFM,MAEA;AACL;AACD;AACF;;AAEDouB,EAAAA,+BAA+B,CAAC/a,GAAD,EAAMrT,QAAN,EAAgB;AAC7C,UAAM;AACJwsB,MAAAA;AADI,QAEF,IAFJ;AAGA,QAAIxlB,CAAC,GAAGwlB,KAAK,CAACvlB,MAAN,GAAe,CAAvB;AACA,QAAI2a,KAAK,GAAG4K,KAAK,CAACxlB,CAAD,CAAjB;;AAEA,WAAO4a,KAAK,CAAC8L,8BAAN,EAAP,EAA+C;AAC7C,UAAI9L,KAAK,CAACtZ,IAAN,KAAeilB,oCAAnB,EAAyD;AACvD3L,QAAAA,KAAK,CAACiM,sBAAN,CAA6Bxa,GAA7B,EAAkCrT,QAAlC;AACD;;AAED4hB,MAAAA,KAAK,GAAG4K,KAAK,CAAC,EAAExlB,CAAH,CAAb;AACD;AACF;;AAEDqnB,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AACJ7B,MAAAA;AADI,QAEF,IAFJ;AAGA,UAAMhL,YAAY,GAAGgL,KAAK,CAACA,KAAK,CAACvlB,MAAN,GAAe,CAAhB,CAA1B;AACA,QAAI,CAACua,YAAY,CAACkM,8BAAb,EAAL,EAAoD;AACpDlM,IAAAA,YAAY,CAACuM,aAAb,CAA2B,CAAC/tB,QAAD,EAAWqT,GAAX,KAAmB;AAC5C,WAAKO,KAAL,CAAWP,GAAX,EAAgBrT,QAAhB;AACA,UAAIgH,CAAC,GAAGwlB,KAAK,CAACvlB,MAAN,GAAe,CAAvB;AACA,UAAI2a,KAAK,GAAG4K,KAAK,CAACxlB,CAAD,CAAjB;;AAEA,aAAO4a,KAAK,CAAC8L,8BAAN,EAAP,EAA+C;AAC7C9L,QAAAA,KAAK,CAACkM,qBAAN,CAA4Bza,GAA5B;AACAuO,QAAAA,KAAK,GAAG4K,KAAK,CAAC,EAAExlB,CAAH,CAAb;AACD;AACF,KATD;AAUD;;AAjF0B;;AAoF7B,SAASsnB,4BAAT,GAAwC;AACtC,SAAO,IAAIb,eAAJ,CAAoBD,qBAApB,CAAP;AACD;;AACD,SAASe,iBAAT,GAA6B;AAC3B,SAAO,IAAIX,qBAAJ,CAA0BN,+BAA1B,CAAP;AACD;;AACD,SAASkB,kBAAT,GAA8B;AAC5B,SAAO,IAAIZ,qBAAJ,CAA0BL,oCAA1B,CAAP;AACD;;AACD,SAASkB,kBAAT,GAA8B;AAC5B,SAAO,IAAIhB,eAAJ,EAAP;AACD;;AAED,MAAMiB,KAAK,GAAG,MAAd;AAAA,MACMC,WAAW,GAAG,MADpB;AAAA,MAEMC,WAAW,GAAG,MAFpB;AAAA,MAGMC,YAAY,GAAG,MAHrB;AAAA,MAIMC,QAAQ,GAAG,MAJjB;;AAKA,MAAMC,0BAAN,CAAiC;AAC/B1xB,EAAAA,WAAW,GAAG;AACZ,SAAK2xB,MAAL,GAAc,EAAd;AACD;;AAEDtN,EAAAA,KAAK,CAAC3M,KAAD,EAAQ;AACX,SAAKia,MAAL,CAAYznB,IAAZ,CAAiBwN,KAAjB;AACD;;AAED4M,EAAAA,IAAI,GAAG;AACL,SAAKqN,MAAL,CAAYrT,GAAZ;AACD;;AAEDsT,EAAAA,YAAY,GAAG;AACb,WAAO,KAAKD,MAAL,CAAY,KAAKA,MAAL,CAAY/nB,MAAZ,GAAqB,CAAjC,CAAP;AACD;;AAEW,MAARioB,QAAQ,GAAG;AACb,WAAO,CAAC,KAAKD,YAAL,KAAsBL,WAAvB,IAAsC,CAA7C;AACD;;AAEW,MAARO,QAAQ,GAAG;AACb,WAAO,CAAC,KAAKF,YAAL,KAAsBN,WAAvB,IAAsC,CAA7C;AACD;;AAEY,MAATS,SAAS,GAAG;AACd,WAAO,CAAC,KAAKH,YAAL,KAAsBJ,YAAvB,IAAuC,CAA9C;AACD;;AAEQ,MAALQ,KAAK,GAAG;AACV,WAAO,CAAC,KAAKJ,YAAL,KAAsBH,QAAvB,IAAmC,CAA1C;AACD;;AA/B8B;;AAkCjC,SAASQ,aAAT,CAAuB5Y,OAAvB,EAAgCoB,WAAhC,EAA6C;AAC3C,SAAO,CAACpB,OAAO,GAAGkY,WAAH,GAAiB,CAAzB,KAA+B9W,WAAW,GAAG6W,WAAH,GAAiB,CAA3D,CAAP;AACD;;AAED,MAAMY,UAAN,SAAyBjK,SAAzB,CAAmC;AACjCnO,EAAAA,QAAQ,CAAC9Q,IAAD,EAAO6T,GAAP,EAAYsK,GAAZ,EAAiB;AACvB,QAAI,CAACne,IAAL,EAAW;AACX,UAAM+P,KAAK,GAAG/P,IAAI,CAAC+P,KAAL,GAAa/P,IAAI,CAAC+P,KAAL,IAAc,EAAzC;AACAA,IAAAA,KAAK,CAAC8D,GAAD,CAAL,GAAasK,GAAb;AACD;;AAEDgL,EAAAA,YAAY,CAACC,EAAD,EAAK;AACf,WAAO,KAAKlqB,KAAL,CAAWnH,OAAO,CAACkD,UAAnB,KAAkC,KAAKgG,KAAL,CAAWzK,KAAX,KAAqB4yB,EAA9D;AACD;;AAEDC,EAAAA,gBAAgB,CAACD,EAAD,EAAK;AACnB,QAAI,KAAKD,YAAL,CAAkBC,EAAlB,CAAJ,EAA2B;AACzB,WAAKlS,IAAL;AACD,KAFD,MAEO;AACL,WAAKoS,UAAL,CAAgB,IAAhB,EAAsBvxB,OAAO,CAACkD,UAA9B;AACD;AACF;;AAEDsuB,EAAAA,YAAY,CAAC7xB,IAAD,EAAO;AACjB,WAAO,KAAKwH,KAAL,CAAWnH,OAAO,CAACL,IAAnB,KAA4B,KAAKuJ,KAAL,CAAWzK,KAAX,KAAqBkB,IAAjD,IAAyD,CAAC,KAAKuJ,KAAL,CAAWwc,WAA5E;AACD;;AAED+L,EAAAA,oBAAoB,CAACC,SAAD,EAAY/xB,IAAZ,EAAkB;AACpC,UAAMgyB,OAAO,GAAGD,SAAS,GAAG/xB,IAAI,CAACkJ,MAAjC;;AAEA,QAAI,KAAK7B,KAAL,CAAWoR,KAAX,CAAiBsZ,SAAjB,EAA4BC,OAA5B,MAAyChyB,IAA7C,EAAmD;AACjD,YAAMiyB,MAAM,GAAG,KAAK5qB,KAAL,CAAWiD,UAAX,CAAsB0nB,OAAtB,CAAf;AACA,aAAO,EAAEzT,gBAAgB,CAAC0T,MAAD,CAAhB,IAA4B,CAACA,MAAM,GAAG,MAAV,MAAsB,MAApD,CAAP;AACD;;AAED,WAAO,KAAP;AACD;;AAEDC,EAAAA,qBAAqB,CAAClyB,IAAD,EAAO;AAC1B,UAAMwf,IAAI,GAAG,KAAK0I,cAAL,EAAb;AACA,WAAO,KAAK4J,oBAAL,CAA0BtS,IAA1B,EAAgCxf,IAAhC,CAAP;AACD;;AAEDmyB,EAAAA,aAAa,CAACnyB,IAAD,EAAO;AAClB,WAAO,KAAK6xB,YAAL,CAAkB7xB,IAAlB,KAA2B,KAAK4nB,GAAL,CAASvnB,OAAO,CAACL,IAAjB,CAAlC;AACD;;AAEDoyB,EAAAA,gBAAgB,CAACpyB,IAAD,EAAOiC,QAAP,EAAiB;AAC/B,QAAI,CAAC,KAAKkwB,aAAL,CAAmBnyB,IAAnB,CAAL,EAA+B,KAAK4xB,UAAL,CAAgB,IAAhB,EAAsB3vB,QAAtB;AAChC;;AAEDowB,EAAAA,kBAAkB,GAAG;AACnB,WAAO,KAAK7qB,KAAL,CAAWnH,OAAO,CAACO,GAAnB,KAA2B,KAAK4G,KAAL,CAAWnH,OAAO,CAACgB,MAAnB,CAA3B,IAAyD,KAAKixB,qBAAL,EAAhE;AACD;;AAEDA,EAAAA,qBAAqB,GAAG;AACtB,WAAOrsB,SAAS,CAACoY,IAAV,CAAe,KAAKhX,KAAL,CAAWoR,KAAX,CAAiB,KAAKlP,KAAL,CAAWoM,UAA5B,EAAwC,KAAKpM,KAAL,CAAWvC,KAAnD,CAAf,CAAP;AACD;;AAEDurB,EAAAA,qBAAqB,GAAG;AACtB9rB,IAAAA,yBAAyB,CAACgB,SAA1B,GAAsC,KAAK8B,KAAL,CAAWtC,GAAjD;AACA,WAAOR,yBAAyB,CAAC4X,IAA1B,CAA+B,KAAKhX,KAApC,CAAP;AACD;;AAEDmrB,EAAAA,gBAAgB,GAAG;AACjB,WAAO,KAAK5K,GAAL,CAASvnB,OAAO,CAACqB,IAAjB,KAA0B,KAAK2wB,kBAAL,EAAjC;AACD;;AAEDI,EAAAA,SAAS,CAACC,QAAQ,GAAG,IAAZ,EAAkB;AACzB,QAAIA,QAAQ,GAAG,KAAKF,gBAAL,EAAH,GAA6B,KAAK5K,GAAL,CAASvnB,OAAO,CAACqB,IAAjB,CAAzC,EAAiE;AACjE,SAAKmU,KAAL,CAAW,KAAKtM,KAAL,CAAWoM,UAAtB,EAAkCzK,aAAa,CAACuE,gBAAhD;AACD;;AAEDkjB,EAAAA,MAAM,CAACpoB,IAAD,EAAO+K,GAAP,EAAY;AAChB,SAAKsS,GAAL,CAASrd,IAAT,KAAkB,KAAKqnB,UAAL,CAAgBtc,GAAhB,EAAqB/K,IAArB,CAAlB;AACD;;AAEDqoB,EAAAA,aAAa,CAAC5c,OAAO,GAAG,mBAAX,EAAgC;AAC3C,QAAI,KAAKzM,KAAL,CAAWvC,KAAX,GAAmB,KAAKuC,KAAL,CAAWoM,UAAlC,EAA8C;AAC5C,WAAKE,KAAL,CAAW,KAAKtM,KAAL,CAAWoM,UAAtB,EAAkC;AAChCrP,QAAAA,IAAI,EAAEwE,UAAU,CAACE,WADe;AAEhCmK,QAAAA,UAAU,EAAE,iBAFoB;AAGhClT,QAAAA,QAAQ,EAAE+T;AAHsB,OAAlC;AAKD;AACF;;AAED4b,EAAAA,UAAU,CAACtc,GAAD,EAAMud,aAAa,GAAG;AAC9BvsB,IAAAA,IAAI,EAAEwE,UAAU,CAACE,WADa;AAE9BmK,IAAAA,UAAU,EAAE,iBAFkB;AAG9BlT,IAAAA,QAAQ,EAAE;AAHoB,GAAtB,EAIP;AACD,QAAI4wB,aAAa,YAAYxzB,SAA7B,EAAwC;AACtCwzB,MAAAA,aAAa,GAAG;AACdvsB,QAAAA,IAAI,EAAEwE,UAAU,CAACE,WADH;AAEdmK,QAAAA,UAAU,EAAE,iBAFE;AAGdlT,QAAAA,QAAQ,EAAG,+BAA8B4wB,aAAa,CAACtzB,KAAM;AAH/C,OAAhB;AAKD;;AAED,UAAM,KAAKsW,KAAL,CAAWP,GAAG,IAAI,IAAP,GAAcA,GAAd,GAAoB,KAAK/L,KAAL,CAAWvC,KAA1C,EAAiD6rB,aAAjD,CAAN;AACD;;AAEDlJ,EAAAA,YAAY,CAAC3pB,IAAD,EAAOsV,GAAP,EAAY;AACtB,QAAI,CAAC,KAAKvN,SAAL,CAAe/H,IAAf,CAAL,EAA2B;AACzB,YAAM,KAAK8V,aAAL,CAAmBR,GAAG,IAAI,IAAP,GAAcA,GAAd,GAAoB,KAAK/L,KAAL,CAAWvC,KAAlD,EAAyD;AAC7D8rB,QAAAA,aAAa,EAAE,CAAC9yB,IAAD;AAD8C,OAAzD,EAEF,kEAAiEA,IAAK,GAFpE,CAAN;AAGD;;AAED,WAAO,IAAP;AACD;;AAED+yB,EAAAA,eAAe,CAACC,KAAD,EAAQ1d,GAAR,EAAa;AAC1B,QAAI,CAAC0d,KAAK,CAACC,IAAN,CAAWrF,CAAC,IAAI,KAAK7lB,SAAL,CAAe6lB,CAAf,CAAhB,CAAL,EAAyC;AACvC,YAAM,KAAK9X,aAAL,CAAmBR,GAAG,IAAI,IAAP,GAAcA,GAAd,GAAoB,KAAK/L,KAAL,CAAWvC,KAAlD,EAAyD;AAC7D8rB,QAAAA,aAAa,EAAEE;AAD8C,OAAzD,EAEF,sFAAqFA,KAAK,CAACE,IAAN,CAAW,IAAX,CAAiB,GAFpG,CAAN;AAGD;AACF;;AAEDC,EAAAA,QAAQ,CAACC,EAAD,EAAKC,QAAQ,GAAG,KAAK9pB,KAAL,CAAWgd,KAAX,EAAhB,EAAoC;AAC1C,UAAM+M,WAAW,GAAG;AAClBhrB,MAAAA,IAAI,EAAE;AADY,KAApB;;AAIA,QAAI;AACF,YAAMA,IAAI,GAAG8qB,EAAE,CAAC,CAAC9qB,IAAI,GAAG,IAAR,KAAiB;AAC/BgrB,QAAAA,WAAW,CAAChrB,IAAZ,GAAmBA,IAAnB;AACA,cAAMgrB,WAAN;AACD,OAHc,CAAf;;AAKA,UAAI,KAAK/pB,KAAL,CAAW6M,MAAX,CAAkBlN,MAAlB,GAA2BmqB,QAAQ,CAACjd,MAAT,CAAgBlN,MAA/C,EAAuD;AACrD,cAAMqqB,SAAS,GAAG,KAAKhqB,KAAvB;AACA,aAAKA,KAAL,GAAa8pB,QAAb;AACA,aAAK9pB,KAAL,CAAW0c,YAAX,GAA0BsN,SAAS,CAACtN,YAApC;AACA,eAAO;AACL3d,UAAAA,IADK;AAEL+N,UAAAA,KAAK,EAAEkd,SAAS,CAACnd,MAAV,CAAiBid,QAAQ,CAACjd,MAAT,CAAgBlN,MAAjC,CAFF;AAGLsqB,UAAAA,MAAM,EAAE,KAHH;AAILC,UAAAA,OAAO,EAAE,KAJJ;AAKLF,UAAAA;AALK,SAAP;AAOD;;AAED,aAAO;AACLjrB,QAAAA,IADK;AAEL+N,QAAAA,KAAK,EAAE,IAFF;AAGLmd,QAAAA,MAAM,EAAE,KAHH;AAILC,QAAAA,OAAO,EAAE,KAJJ;AAKLF,QAAAA,SAAS,EAAE;AALN,OAAP;AAOD,KA1BD,CA0BE,OAAOld,KAAP,EAAc;AACd,YAAMkd,SAAS,GAAG,KAAKhqB,KAAvB;AACA,WAAKA,KAAL,GAAa8pB,QAAb;;AAEA,UAAIhd,KAAK,YAAYrL,WAArB,EAAkC;AAChC,eAAO;AACL1C,UAAAA,IAAI,EAAE,IADD;AAEL+N,UAAAA,KAFK;AAGLmd,UAAAA,MAAM,EAAE,IAHH;AAILC,UAAAA,OAAO,EAAE,KAJJ;AAKLF,UAAAA;AALK,SAAP;AAOD;;AAED,UAAIld,KAAK,KAAKid,WAAd,EAA2B;AACzB,eAAO;AACLhrB,UAAAA,IAAI,EAAEgrB,WAAW,CAAChrB,IADb;AAEL+N,UAAAA,KAAK,EAAE,IAFF;AAGLmd,UAAAA,MAAM,EAAE,KAHH;AAILC,UAAAA,OAAO,EAAE,IAJJ;AAKLF,UAAAA;AALK,SAAP;AAOD;;AAED,YAAMld,KAAN;AACD;AACF;;AAEDqd,EAAAA,qBAAqB,CAAC7X,mBAAD,EAAsB8X,QAAtB,EAAgC;AACnD,QAAI,CAAC9X,mBAAL,EAA0B,OAAO,KAAP;AAC1B,UAAM;AACJ+X,MAAAA,eADI;AAEJC,MAAAA,WAFI;AAGJC,MAAAA;AAHI,QAIFjY,mBAJJ;;AAMA,QAAI,CAAC8X,QAAL,EAAe;AACb,aAAOC,eAAe,IAAI,CAAnB,IAAwBC,WAAW,IAAI,CAAvC,IAA4CC,kBAAkB,IAAI,CAAzE;AACD;;AAED,QAAIF,eAAe,IAAI,CAAvB,EAA0B;AACxB,WAAKhC,UAAL,CAAgBgC,eAAhB;AACD;;AAED,QAAIC,WAAW,IAAI,CAAnB,EAAsB;AACpB,WAAKhe,KAAL,CAAWge,WAAX,EAAwB3oB,aAAa,CAAC6B,cAAtC;AACD;;AAED,QAAI+mB,kBAAkB,IAAI,CAA1B,EAA6B;AAC3B,WAAKlC,UAAL,CAAgBkC,kBAAhB;AACD;AACF;;AAEDC,EAAAA,qBAAqB,GAAG;AACtB,WAAO,KAAKvsB,KAAL,CAAWnH,OAAO,CAACL,IAAnB,KAA4B,CAAC,CAAC,KAAKuJ,KAAL,CAAWgB,IAAX,CAAgB9K,OAA9C,IAAyD,KAAK+H,KAAL,CAAWnH,OAAO,CAACK,MAAnB,CAAzD,IAAuF,KAAK8G,KAAL,CAAWnH,OAAO,CAACC,GAAnB,CAAvF,IAAkH,KAAKkH,KAAL,CAAWnH,OAAO,CAACE,MAAnB,CAAlH,IAAgJ,KAAKiH,KAAL,CAAWnH,OAAO,CAACG,OAAnB,CAAvJ;AACD;;AAEDga,EAAAA,aAAa,CAAClS,IAAD,EAAO;AAClB,WAAOA,IAAI,CAACiC,IAAL,KAAc,aAArB;AACD;;AAED+P,EAAAA,gBAAgB,CAAChS,IAAD,EAAO;AACrB,WAAOA,IAAI,CAACiS,EAAL,CAAQva,IAAf;AACD;;AAEDod,EAAAA,wBAAwB,CAAC9U,IAAD,EAAO;AAC7B,WAAO,CAACA,IAAI,CAACiC,IAAL,KAAc,kBAAd,IAAoCjC,IAAI,CAACiC,IAAL,KAAc,0BAAnD,KAAkF,KAAKiQ,aAAL,CAAmBlS,IAAI,CAAC0rB,QAAxB,CAAzF;AACD;;AAED3W,EAAAA,eAAe,CAAC/U,IAAD,EAAO;AACpB,WAAOA,IAAI,CAACiC,IAAL,KAAc,0BAAd,IAA4CjC,IAAI,CAACiC,IAAL,KAAc,wBAAjE;AACD;;AAEDsO,EAAAA,gBAAgB,CAACvQ,IAAD,EAAO;AACrB,WAAOA,IAAI,CAACiC,IAAL,KAAc,gBAArB;AACD;;AAED+S,EAAAA,cAAc,CAAChV,IAAD,EAAO;AACnB,WAAOA,IAAI,CAACiC,IAAL,KAAc,cAArB;AACD;;AAED0pB,EAAAA,gBAAgB,CAAChV,QAAQ,GAAG,KAAKhf,OAAL,CAAammB,UAAb,KAA4B,QAAxC,EAAkD;AAChE,UAAM8N,SAAS,GAAG,KAAK3qB,KAAL,CAAWqc,MAA7B;AACA,SAAKrc,KAAL,CAAWqc,MAAX,GAAoB,EAApB;AACA,UAAMuO,sBAAsB,GAAG,KAAKC,mBAApC;AACA,SAAKA,mBAAL,GAA2B,IAAIxV,GAAJ,EAA3B;AACA,UAAMyV,WAAW,GAAG,KAAKpV,QAAzB;AACA,SAAKA,QAAL,GAAgBA,QAAhB;AACA,UAAMqV,QAAQ,GAAG,KAAKzQ,KAAtB;AACA,UAAMlB,YAAY,GAAG,KAAK4R,eAAL,EAArB;AACA,SAAK1Q,KAAL,GAAa,IAAIlB,YAAJ,CAAiB,KAAK9M,KAAL,CAAW2e,IAAX,CAAgB,IAAhB,CAAjB,EAAwC,KAAKvV,QAA7C,CAAb;AACA,UAAMwV,YAAY,GAAG,KAAKC,SAA1B;AACA,SAAKA,SAAL,GAAiB,IAAI1D,0BAAJ,EAAjB;AACA,UAAMtC,aAAa,GAAG,KAAKI,UAA3B;AACA,SAAKA,UAAL,GAAkB,IAAIN,iBAAJ,CAAsB,KAAK3Y,KAAL,CAAW2e,IAAX,CAAgB,IAAhB,CAAtB,CAAlB;AACA,UAAMG,kBAAkB,GAAG,KAAKC,eAAhC;AACA,SAAKA,eAAL,GAAuB,IAAI1E,sBAAJ,CAA2B,KAAKra,KAAL,CAAW2e,IAAX,CAAgB,IAAhB,CAA3B,CAAvB;AACA,WAAO,MAAM;AACX,WAAKjrB,KAAL,CAAWqc,MAAX,GAAoBsO,SAApB;AACA,WAAKE,mBAAL,GAA2BD,sBAA3B;AACA,WAAKlV,QAAL,GAAgBoV,WAAhB;AACA,WAAKxQ,KAAL,GAAayQ,QAAb;AACA,WAAKI,SAAL,GAAiBD,YAAjB;AACA,WAAK3F,UAAL,GAAkBJ,aAAlB;AACA,WAAKkG,eAAL,GAAuBD,kBAAvB;AACD,KARD;AASD;;AAEDE,EAAAA,kBAAkB,GAAG;AACnB,QAAIC,UAAU,GAAGnE,KAAjB;;AAEA,QAAI,KAAK1R,QAAT,EAAmB;AACjB6V,MAAAA,UAAU,IAAIjE,WAAd;AACD;;AAED,SAAKhN,KAAL,CAAWF,KAAX,CAAiB/D,aAAjB;AACA,SAAK8U,SAAL,CAAe/Q,KAAf,CAAqBmR,UAArB;AACD;;AAzQgC;;AA4QnC,MAAMC,gBAAN,CAAuB;AACrBz1B,EAAAA,WAAW,GAAG;AACZ,SAAKs0B,eAAL,GAAuB,CAAC,CAAxB;AACA,SAAKC,WAAL,GAAmB,CAAC,CAApB;AACA,SAAKC,kBAAL,GAA0B,CAAC,CAA3B;AACD;;AALoB;;AASvB,MAAMkB,IAAN,CAAW;AACT11B,EAAAA,WAAW,CAAC21B,MAAD,EAAS3f,GAAT,EAAchM,GAAd,EAAmB;AAC5B,SAAKiB,IAAL,GAAY,EAAZ;AACA,SAAKvD,KAAL,GAAasO,GAAb;AACA,SAAKrO,GAAL,GAAW,CAAX;AACA,SAAKqC,GAAL,GAAW,IAAIvC,cAAJ,CAAmBuC,GAAnB,CAAX;AACA,QAAI2rB,MAAM,IAAI,IAAV,IAAkBA,MAAM,CAACh1B,OAAP,CAAei1B,MAArC,EAA6C,KAAKC,KAAL,GAAa,CAAC7f,GAAD,EAAM,CAAN,CAAb;AAC7C,QAAI2f,MAAM,IAAI,IAAV,IAAkBA,MAAM,CAAC/tB,QAA7B,EAAuC,KAAKoC,GAAL,CAASpC,QAAT,GAAoB+tB,MAAM,CAAC/tB,QAA3B;AACxC;;AARQ;;AAYX,MAAMkuB,aAAa,GAAGJ,IAAI,CAACK,SAA3B;AACA;AACED,EAAAA,aAAa,CAACE,OAAd,GAAwB,YAAY;AAClC,UAAMC,OAAO,GAAG,IAAIP,IAAJ,EAAhB;AACA,UAAM/f,IAAI,GAAGtW,MAAM,CAACsW,IAAP,CAAY,IAAZ,CAAb;;AAEA,SAAK,IAAIhM,CAAC,GAAG,CAAR,EAAWC,MAAM,GAAG+L,IAAI,CAAC/L,MAA9B,EAAsCD,CAAC,GAAGC,MAA1C,EAAkDD,CAAC,EAAnD,EAAuD;AACrD,YAAMkT,GAAG,GAAGlH,IAAI,CAAChM,CAAD,CAAhB;;AAEA,UAAIkT,GAAG,KAAK,iBAAR,IAA6BA,GAAG,KAAK,kBAArC,IAA2DA,GAAG,KAAK,eAAvE,EAAwF;AACtFoZ,QAAAA,OAAO,CAACpZ,GAAD,CAAP,GAAe,KAAKA,GAAL,CAAf;AACD;AACF;;AAED,WAAOoZ,OAAP;AACD,GAbD;AAcD;;AAED,SAASC,gBAAT,CAA0BltB,IAA1B,EAAgC;AAC9B,SAAOmtB,eAAe,CAACntB,IAAD,CAAtB;AACD;;AAED,SAASmtB,eAAT,CAAyBntB,IAAzB,EAA+B;AAC7B,QAAM;AACJiC,IAAAA,IADI;AAEJvD,IAAAA,KAFI;AAGJC,IAAAA,GAHI;AAIJqC,IAAAA,GAJI;AAKJ6rB,IAAAA,KALI;AAMJ9c,IAAAA,KANI;AAOJrY,IAAAA;AAPI,MAQFsI,IARJ;AASA,QAAMotB,MAAM,GAAG/2B,MAAM,CAACg3B,MAAP,CAAcP,aAAd,CAAf;AACAM,EAAAA,MAAM,CAACnrB,IAAP,GAAcA,IAAd;AACAmrB,EAAAA,MAAM,CAAC1uB,KAAP,GAAeA,KAAf;AACA0uB,EAAAA,MAAM,CAACzuB,GAAP,GAAaA,GAAb;AACAyuB,EAAAA,MAAM,CAACpsB,GAAP,GAAaA,GAAb;AACAosB,EAAAA,MAAM,CAACP,KAAP,GAAeA,KAAf;AACAO,EAAAA,MAAM,CAACrd,KAAP,GAAeA,KAAf;AACAqd,EAAAA,MAAM,CAAC11B,IAAP,GAAcA,IAAd;;AAEA,MAAIuK,IAAI,KAAK,aAAb,EAA4B;AAC1BmrB,IAAAA,MAAM,CAACE,YAAP,GAAsBttB,IAAI,CAACstB,YAA3B;AACD;;AAED,SAAOF,MAAP;AACD;;AACD,SAASG,kBAAT,CAA4BvtB,IAA5B,EAAkC;AAChC,QAAM;AACJiC,IAAAA,IADI;AAEJvD,IAAAA,KAFI;AAGJC,IAAAA,GAHI;AAIJqC,IAAAA,GAJI;AAKJ6rB,IAAAA,KALI;AAMJ9c,IAAAA;AANI,MAOF/P,IAPJ;;AASA,MAAIiC,IAAI,KAAK,aAAb,EAA4B;AAC1B,WAAOirB,gBAAgB,CAACltB,IAAD,CAAvB;AACD;;AAED,QAAMotB,MAAM,GAAG/2B,MAAM,CAACg3B,MAAP,CAAcP,aAAd,CAAf;AACAM,EAAAA,MAAM,CAACnrB,IAAP,GAAc,eAAd;AACAmrB,EAAAA,MAAM,CAAC1uB,KAAP,GAAeA,KAAf;AACA0uB,EAAAA,MAAM,CAACzuB,GAAP,GAAaA,GAAb;AACAyuB,EAAAA,MAAM,CAACpsB,GAAP,GAAaA,GAAb;AACAosB,EAAAA,MAAM,CAACP,KAAP,GAAeA,KAAf;AACAO,EAAAA,MAAM,CAACrd,KAAP,GAAeA,KAAf;AACAqd,EAAAA,MAAM,CAAC52B,KAAP,GAAewJ,IAAI,CAACxJ,KAApB;AACA,SAAO42B,MAAP;AACD;;AACD,MAAMI,SAAN,SAAwBtE,UAAxB,CAAmC;AACjCzW,EAAAA,SAAS,GAAG;AACV,WAAO,IAAIia,IAAJ,CAAS,IAAT,EAAe,KAAKzrB,KAAL,CAAWvC,KAA1B,EAAiC,KAAKuC,KAAL,CAAWgM,QAA5C,CAAP;AACD;;AAED4C,EAAAA,WAAW,CAAC7C,GAAD,EAAMhM,GAAN,EAAW;AACpB,WAAO,IAAI0rB,IAAJ,CAAS,IAAT,EAAe1f,GAAf,EAAoBhM,GAApB,CAAP;AACD;;AAED6T,EAAAA,eAAe,CAAC5S,IAAD,EAAO;AACpB,WAAO,KAAK4N,WAAL,CAAiB5N,IAAI,CAACvD,KAAtB,EAA6BuD,IAAI,CAACjB,GAAL,CAAStC,KAAtC,CAAP;AACD;;AAEDkU,EAAAA,UAAU,CAAC5S,IAAD,EAAOiC,IAAP,EAAa;AACrB,WAAO,KAAKiO,YAAL,CAAkBlQ,IAAlB,EAAwBiC,IAAxB,EAA8B,KAAKhB,KAAL,CAAWoM,UAAzC,EAAqD,KAAKpM,KAAL,CAAWqM,aAAhE,CAAP;AACD;;AAED4C,EAAAA,YAAY,CAAClQ,IAAD,EAAOiC,IAAP,EAAa+K,GAAb,EAAkBhM,GAAlB,EAAuB;AAEjChB,IAAAA,IAAI,CAACiC,IAAL,GAAYA,IAAZ;AACAjC,IAAAA,IAAI,CAACrB,GAAL,GAAWqO,GAAX;AACAhN,IAAAA,IAAI,CAACgB,GAAL,CAASrC,GAAT,GAAeqC,GAAf;AACA,QAAI,KAAKrJ,OAAL,CAAai1B,MAAjB,EAAyB5sB,IAAI,CAAC6sB,KAAL,CAAW,CAAX,IAAgB7f,GAAhB;AACzB,QAAI,KAAKrV,OAAL,CAAaopB,aAAjB,EAAgC,KAAK5f,cAAL,CAAoBnB,IAApB;AAChC,WAAOA,IAAP;AACD;;AAEDytB,EAAAA,kBAAkB,CAACztB,IAAD,EAAOtB,KAAP,EAAcuO,QAAd,EAAwB;AACxCjN,IAAAA,IAAI,CAACtB,KAAL,GAAaA,KAAb;AACAsB,IAAAA,IAAI,CAACgB,GAAL,CAAStC,KAAT,GAAiBuO,QAAjB;AACA,QAAI,KAAKtV,OAAL,CAAai1B,MAAjB,EAAyB5sB,IAAI,CAAC6sB,KAAL,CAAW,CAAX,IAAgBnuB,KAAhB;AAC1B;;AAEDgvB,EAAAA,gBAAgB,CAAC1tB,IAAD,EAAOrB,GAAG,GAAG,KAAKsC,KAAL,CAAWoM,UAAxB,EAAoCD,MAAM,GAAG,KAAKnM,KAAL,CAAWqM,aAAxD,EAAuE;AACrFtN,IAAAA,IAAI,CAACrB,GAAL,GAAWA,GAAX;AACAqB,IAAAA,IAAI,CAACgB,GAAL,CAASrC,GAAT,GAAeyO,MAAf;AACA,QAAI,KAAKzV,OAAL,CAAai1B,MAAjB,EAAyB5sB,IAAI,CAAC6sB,KAAL,CAAW,CAAX,IAAgBluB,GAAhB;AAC1B;;AAEDgvB,EAAAA,0BAA0B,CAAC3tB,IAAD,EAAO4tB,YAAP,EAAqB;AAC7C,SAAKH,kBAAL,CAAwBztB,IAAxB,EAA8B4tB,YAAY,CAAClvB,KAA3C,EAAkDkvB,YAAY,CAAC5sB,GAAb,CAAiBtC,KAAnE;AACD;;AAzCgC;;AA6CnC,MAAMmvB,aAAa,GAAG,IAAIvX,GAAJ,CAAQ,CAAC,GAAD,EAAM,KAAN,EAAa,MAAb,EAAqB,SAArB,EAAgC,OAAhC,EAAyC,SAAzC,EAAoD,OAApD,EAA6D,WAA7D,EAA0E,OAA1E,EAAmF,MAAnF,EAA2F,QAA3F,EAAqG,QAArG,EAA+G,QAA/G,EAAyH,MAAzH,EAAiI,QAAjI,EAA2I,MAA3I,CAAR,CAAtB;AACA,MAAMwX,UAAU,GAAGjrB,kBAAkB,CAAC;AACpCkrB,EAAAA,yBAAyB,EAAE,gFADS;AAEpCC,EAAAA,0BAA0B,EAAE,wKAFQ;AAGpCC,EAAAA,kBAAkB,EAAE,oCAHgB;AAIpCC,EAAAA,mBAAmB,EAAE,yDAJe;AAKpCC,EAAAA,4BAA4B,EAAE,qEALM;AAMpCC,EAAAA,6BAA6B,EAAE,+CANK;AAOpCC,EAAAA,+BAA+B,EAAE,qGAPG;AAQpCC,EAAAA,uBAAuB,EAAE,mGARW;AASpCC,EAAAA,4BAA4B,EAAE,8KATM;AAUpCC,EAAAA,uBAAuB,EAAE,kGAVW;AAWpCC,EAAAA,sCAAsC,EAAE,sGAXJ;AAYpCC,EAAAA,uCAAuC,EAAE,+EAZL;AAapCC,EAAAA,sCAAsC,EAAE,oEAbJ;AAcpCC,EAAAA,uCAAuC,EAAE,gHAdL;AAepCC,EAAAA,qBAAqB,EAAE,0HAfa;AAgBpCC,EAAAA,8BAA8B,EAAE,yEAhBI;AAiBpCC,EAAAA,yCAAyC,EAAE,6GAjBP;AAkBpCC,EAAAA,yBAAyB,EAAE,0CAlBS;AAmBpCC,EAAAA,mCAAmC,EAAE,wKAnBD;AAoBpCC,EAAAA,kBAAkB,EAAE,6EApBgB;AAqBpCC,EAAAA,sBAAsB,EAAE,0EArBY;AAsBpCC,EAAAA,eAAe,EAAE,+CAtBmB;AAuBpCC,EAAAA,mCAAmC,EAAE,yFAvBD;AAwBpCC,EAAAA,uBAAuB,EAAE,yGAxBW;AAyBpCC,EAAAA,mBAAmB,EAAE,kEAzBe;AA0BpCC,EAAAA,iBAAiB,EAAE,yDA1BiB;AA2BpCC,EAAAA,sBAAsB,EAAE,gFA3BY;AA4BpCC,EAAAA,yBAAyB,EAAE,0CA5BS;AA6BpCC,EAAAA,cAAc,EAAE,yCA7BoB;AA8BpCC,EAAAA,2BAA2B,EAAE,yDA9BO;AA+BpCC,EAAAA,4BAA4B,EAAE,mGA/BM;AAgCpCC,EAAAA,yBAAyB,EAAE,0CAhCS;AAiCpCC,EAAAA,oBAAoB,EAAE,4DAjCc;AAkCpCC,EAAAA,kBAAkB,EAAE,oDAlCgB;AAmCpCC,EAAAA,qBAAqB,EAAE,mHAnCa;AAoCpCC,EAAAA,iBAAiB,EAAE,sEApCiB;AAqCpCC,EAAAA,iCAAiC,EAAE,sEArCC;AAsCpCC,EAAAA,sBAAsB,EAAE,8BAtCY;AAuCpCC,EAAAA,4BAA4B,EAAE,wDAvCM;AAwCpCC,EAAAA,kCAAkC,EAAE,uDAxCA;AAyCpCC,EAAAA,oBAAoB,EAAE,kEAzCc;AA0CpCC,EAAAA,4BAA4B,EAAE,kDA1CM;AA2CpCC,EAAAA,iCAAiC,EAAE,mEA3CC;AA4CpCC,EAAAA,+CAA+C,EAAE,mHA5Cb;AA6CpCC,EAAAA,4BAA4B,EAAE,yDA7CM;AA8CpCC,EAAAA,mCAAmC,EAAE,mEA9CD;AA+CpCC,EAAAA,uBAAuB,EAAE;AA/CW,CAAD,EAgDlCruB,UAAU,CAACE,WAhDuB,CAArC;;AAkDA,SAASouB,cAAT,CAAwBC,WAAxB,EAAqC;AACnC,SAAOA,WAAW,CAAC9uB,IAAZ,KAAqB,6BAArB,IAAsD8uB,WAAW,CAAC9uB,IAAZ,KAAqB,0BAArB,KAAoD,CAAC8uB,WAAW,CAACC,WAAb,IAA4BD,WAAW,CAACC,WAAZ,CAAwB/uB,IAAxB,KAAiC,WAAjC,IAAgD8uB,WAAW,CAACC,WAAZ,CAAwB/uB,IAAxB,KAAiC,sBAAjK,CAA7D;AACD;;AAED,SAASgvB,iBAAT,CAA2BjxB,IAA3B,EAAiC;AAC/B,SAAOA,IAAI,CAACkxB,UAAL,KAAoB,MAApB,IAA8BlxB,IAAI,CAACkxB,UAAL,KAAoB,QAAzD;AACD;;AAED,SAASC,oBAAT,CAA8BlwB,KAA9B,EAAqC;AACnC,SAAO,CAACA,KAAK,CAACgB,IAAN,KAAelK,OAAO,CAACL,IAAvB,IAA+B,CAAC,CAACuJ,KAAK,CAACgB,IAAN,CAAW9K,OAA7C,KAAyD8J,KAAK,CAACzK,KAAN,KAAgB,MAAhF;AACD;;AAED,MAAM46B,iBAAiB,GAAG;AACxBC,EAAAA,KAAK,EAAE,oBADiB;AAExBC,EAAAA,GAAG,EAAE,oBAFmB;AAGxBrvB,EAAAA,IAAI,EAAE,aAHkB;AAIxBsvB,EAAAA,SAAS,EAAE;AAJa,CAA1B;;AAOA,SAASC,SAAT,CAAmBC,IAAnB,EAAyB1b,IAAzB,EAA+B;AAC7B,QAAM2b,KAAK,GAAG,EAAd;AACA,QAAMC,KAAK,GAAG,EAAd;;AAEA,OAAK,IAAIhxB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8wB,IAAI,CAAC7wB,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,KAACoV,IAAI,CAAC0b,IAAI,CAAC9wB,CAAD,CAAL,EAAUA,CAAV,EAAa8wB,IAAb,CAAJ,GAAyBC,KAAzB,GAAiCC,KAAlC,EAAyCzwB,IAAzC,CAA8CuwB,IAAI,CAAC9wB,CAAD,CAAlD;AACD;;AAED,SAAO,CAAC+wB,KAAD,EAAQC,KAAR,CAAP;AACD;;AAED,MAAMC,iBAAiB,GAAG,wBAA1B;;AACA,IAAIC,IAAI,GAAItjB,UAAU,IAAI,cAAcA,UAAd,CAAyB;AACjDvX,EAAAA,WAAW,CAAC,GAAGga,IAAJ,EAAU;AACnB,UAAM,GAAGA,IAAT;AACA,SAAK8gB,UAAL,GAAkB3xB,SAAlB;AACD;;AAED8rB,EAAAA,eAAe,GAAG;AAChB,WAAO7P,gBAAP;AACD;;AAED2V,EAAAA,gBAAgB,GAAG;AACjB,WAAO,KAAKnyB,eAAL,CAAqB,MAArB,EAA6B,KAA7B,KAAuC,KAAKkyB,UAAL,KAAoB,MAAlE;AACD;;AAEDE,EAAAA,gBAAgB,GAAG;AACjB,WAAO,CAAC,CAAC,KAAKpyB,eAAL,CAAqB,MAArB,EAA6B,OAA7B,CAAT;AACD;;AAEDygB,EAAAA,WAAW,CAACpe,IAAD,EAAOkc,GAAP,EAAY;AACrB,QAAIlc,IAAI,KAAKlK,OAAO,CAACK,MAAjB,IAA2B6J,IAAI,KAAKlK,OAAO,CAACqB,IAA5C,IAAoD6I,IAAI,KAAKlK,OAAO,CAACkC,oBAAzE,EAA+F;AAC7F,UAAI,KAAK63B,UAAL,KAAoB3xB,SAAxB,EAAmC;AACjC,aAAK2xB,UAAL,GAAkB,IAAlB;AACD;AACF;;AAED,WAAO,MAAMzR,WAAN,CAAkBpe,IAAlB,EAAwBkc,GAAxB,CAAP;AACD;;AAEDrd,EAAAA,UAAU,CAACC,OAAD,EAAU;AAClB,QAAI,KAAK+wB,UAAL,KAAoB3xB,SAAxB,EAAmC;AACjC,YAAM8xB,OAAO,GAAGL,iBAAiB,CAACxyB,IAAlB,CAAuB2B,OAAO,CAACvK,KAA/B,CAAhB;AAEA,UAAI,CAACy7B,OAAL,EAAc,CAAd,KAAqB,IAAIA,OAAO,CAAC,CAAD,CAAP,KAAe,MAAnB,EAA2B;AAC9C,aAAKH,UAAL,GAAkB,MAAlB;AACD,OAFoB,MAEd,IAAIG,OAAO,CAAC,CAAD,CAAP,KAAe,QAAnB,EAA6B;AAClC,aAAKH,UAAL,GAAkB,QAAlB;AACD,OAFM,MAEA;AACL,cAAM,IAAII,KAAJ,CAAU,wBAAV,CAAN;AACD;AACF;;AAED,WAAO,MAAMpxB,UAAN,CAAiBC,OAAjB,CAAP;AACD;;AAEDoxB,EAAAA,wBAAwB,CAACC,GAAD,EAAM;AAC5B,UAAMC,SAAS,GAAG,KAAKpxB,KAAL,CAAW0b,MAA7B;AACA,SAAK1b,KAAL,CAAW0b,MAAX,GAAoB,IAApB;AACA,SAAK0N,MAAL,CAAY+H,GAAG,IAAIr6B,OAAO,CAACsB,KAA3B;AACA,UAAM4I,IAAI,GAAG,KAAKqwB,aAAL,EAAb;AACA,SAAKrxB,KAAL,CAAW0b,MAAX,GAAoB0V,SAApB;AACA,WAAOpwB,IAAP;AACD;;AAEDswB,EAAAA,kBAAkB,GAAG;AACnB,UAAMvyB,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACA,UAAM+f,SAAS,GAAG,KAAKvxB,KAAL,CAAWvC,KAA7B;AACA,SAAKwY,IAAL;AACA,SAAK4S,gBAAL,CAAsB,QAAtB;;AAEA,QAAI,KAAK7oB,KAAL,CAAWiM,YAAX,GAA0BslB,SAAS,GAAG,CAA1C,EAA6C;AAC3C,WAAKjlB,KAAL,CAAWilB,SAAX,EAAsB1E,UAAU,CAACwC,kCAAjC;AACD;;AAED,QAAI,KAAKhR,GAAL,CAASvnB,OAAO,CAACkB,MAAjB,CAAJ,EAA8B;AAC5B+G,MAAAA,IAAI,CAACxJ,KAAL,GAAa,KAAKi8B,eAAL,EAAb;AACA,WAAKpI,MAAL,CAAYtyB,OAAO,CAACmB,MAApB;AACA,aAAO,KAAK0Z,UAAL,CAAgB5S,IAAhB,EAAsB,mBAAtB,CAAP;AACD,KAJD,MAIO;AACL,aAAO,KAAK4S,UAAL,CAAgB5S,IAAhB,EAAsB,mBAAtB,CAAP;AACD;AACF;;AAED0yB,EAAAA,oCAAoC,GAAG;AACrC,UAAML,SAAS,GAAG,KAAKpxB,KAAL,CAAW0b,MAA7B;AACA,SAAK1b,KAAL,CAAW0b,MAAX,GAAoB,IAApB;AACA,SAAK0N,MAAL,CAAYtyB,OAAO,CAACsB,KAApB;AACA,QAAI4I,IAAI,GAAG,IAAX;AACA,QAAI0wB,SAAS,GAAG,IAAhB;;AAEA,QAAI,KAAKzzB,KAAL,CAAWnH,OAAO,CAACqD,MAAnB,CAAJ,EAAgC;AAC9B,WAAK6F,KAAL,CAAW0b,MAAX,GAAoB0V,SAApB;AACAM,MAAAA,SAAS,GAAG,KAAKJ,kBAAL,EAAZ;AACD,KAHD,MAGO;AACLtwB,MAAAA,IAAI,GAAG,KAAKqwB,aAAL,EAAP;AACA,WAAKrxB,KAAL,CAAW0b,MAAX,GAAoB0V,SAApB;;AAEA,UAAI,KAAKnzB,KAAL,CAAWnH,OAAO,CAACqD,MAAnB,CAAJ,EAAgC;AAC9Bu3B,QAAAA,SAAS,GAAG,KAAKJ,kBAAL,EAAZ;AACD;AACF;;AAED,WAAO,CAACtwB,IAAD,EAAO0wB,SAAP,CAAP;AACD;;AAEDC,EAAAA,qBAAqB,CAAC5yB,IAAD,EAAO;AAC1B,SAAKkX,IAAL;AACA,SAAK2b,qBAAL,CAA2B7yB,IAA3B,EAAiC,IAAjC;AACA,WAAO,KAAK4S,UAAL,CAAgB5S,IAAhB,EAAsB,cAAtB,CAAP;AACD;;AAED8yB,EAAAA,wBAAwB,CAAC9yB,IAAD,EAAO;AAC7B,SAAKkX,IAAL;AACA,UAAMjF,EAAE,GAAGjS,IAAI,CAACiS,EAAL,GAAU,KAAK8gB,eAAL,EAArB;AACA,UAAMC,QAAQ,GAAG,KAAKvgB,SAAL,EAAjB;AACA,UAAMwgB,aAAa,GAAG,KAAKxgB,SAAL,EAAtB;;AAEA,QAAI,KAAK0W,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1B6J,MAAAA,QAAQ,CAACnhB,cAAT,GAA0B,KAAKqhB,iCAAL,EAA1B;AACD,KAFD,MAEO;AACLF,MAAAA,QAAQ,CAACnhB,cAAT,GAA0B,IAA1B;AACD;;AAED,SAAKwY,MAAL,CAAYtyB,OAAO,CAACkB,MAApB;AACA,UAAMk6B,GAAG,GAAG,KAAKC,2BAAL,EAAZ;AACAJ,IAAAA,QAAQ,CAAC5wB,MAAT,GAAkB+wB,GAAG,CAAC/wB,MAAtB;AACA4wB,IAAAA,QAAQ,CAACK,IAAT,GAAgBF,GAAG,CAACE,IAApB;AACAL,IAAAA,QAAQ,CAACM,IAAT,GAAgBH,GAAG,CAACt2B,KAApB;AACA,SAAKwtB,MAAL,CAAYtyB,OAAO,CAACmB,MAApB;AACA,KAAC85B,QAAQ,CAACO,UAAV,EAAsBvzB,IAAI,CAAC2yB,SAA3B,IAAwC,KAAKD,oCAAL,EAAxC;AACAO,IAAAA,aAAa,CAACO,cAAd,GAA+B,KAAK5gB,UAAL,CAAgBogB,QAAhB,EAA0B,wBAA1B,CAA/B;AACA/gB,IAAAA,EAAE,CAACuhB,cAAH,GAAoB,KAAK5gB,UAAL,CAAgBqgB,aAAhB,EAA+B,gBAA/B,CAApB;AACA,SAAKvF,gBAAL,CAAsBzb,EAAtB;AACA,SAAKkY,SAAL;AACA,SAAK5O,KAAL,CAAWC,WAAX,CAAuBxb,IAAI,CAACiS,EAAL,CAAQva,IAA/B,EAAqC6hB,oBAArC,EAA2DvZ,IAAI,CAACiS,EAAL,CAAQvT,KAAnE;AACA,WAAO,KAAKkU,UAAL,CAAgB5S,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAEDyzB,EAAAA,gBAAgB,CAACzzB,IAAD,EAAO0zB,YAAP,EAAqB;AACnC,QAAI,KAAKx0B,KAAL,CAAWnH,OAAO,CAACgF,MAAnB,CAAJ,EAAgC;AAC9B,aAAO,KAAK61B,qBAAL,CAA2B5yB,IAA3B,CAAP;AACD,KAFD,MAEO,IAAI,KAAKd,KAAL,CAAWnH,OAAO,CAACmE,SAAnB,CAAJ,EAAmC;AACxC,aAAO,KAAK42B,wBAAL,CAA8B9yB,IAA9B,CAAP;AACD,KAFM,MAEA,IAAI,KAAKd,KAAL,CAAWnH,OAAO,CAACyE,IAAnB,CAAJ,EAA8B;AACnC,aAAO,KAAKm3B,wBAAL,CAA8B3zB,IAA9B,CAAP;AACD,KAFM,MAEA,IAAI,KAAK6pB,aAAL,CAAmB,QAAnB,CAAJ,EAAkC;AACvC,UAAI,KAAK3qB,KAAL,CAAWnH,OAAO,CAACwB,GAAnB,CAAJ,EAA6B;AAC3B,eAAO,KAAKq6B,6BAAL,CAAmC5zB,IAAnC,CAAP;AACD,OAFD,MAEO;AACL,YAAI0zB,YAAJ,EAAkB;AAChB,eAAKnmB,KAAL,CAAW,KAAKtM,KAAL,CAAWiM,YAAtB,EAAoC4gB,UAAU,CAACyB,mBAA/C;AACD;;AAED,eAAO,KAAKsE,sBAAL,CAA4B7zB,IAA5B,CAAP;AACD;AACF,KAVM,MAUA,IAAI,KAAKupB,YAAL,CAAkB,MAAlB,CAAJ,EAA+B;AACpC,aAAO,KAAKuK,yBAAL,CAA+B9zB,IAA/B,CAAP;AACD,KAFM,MAEA,IAAI,KAAKupB,YAAL,CAAkB,QAAlB,CAAJ,EAAiC;AACtC,aAAO,KAAKwK,0BAAL,CAAgC/zB,IAAhC,CAAP;AACD,KAFM,MAEA,IAAI,KAAKupB,YAAL,CAAkB,WAAlB,CAAJ,EAAoC;AACzC,aAAO,KAAKyK,yBAAL,CAA+Bh0B,IAA/B,CAAP;AACD,KAFM,MAEA,IAAI,KAAKd,KAAL,CAAWnH,OAAO,CAACkF,OAAnB,CAAJ,EAAiC;AACtC,aAAO,KAAKg3B,iCAAL,CAAuCj0B,IAAvC,EAA6C0zB,YAA7C,CAAP;AACD,KAFM,MAEA;AACL,YAAM,KAAKpK,UAAL,EAAN;AACD;AACF;;AAEDqK,EAAAA,wBAAwB,CAAC3zB,IAAD,EAAO;AAC7B,SAAKkX,IAAL;AACAlX,IAAAA,IAAI,CAACiS,EAAL,GAAU,KAAKiiB,kCAAL,CAAwC,IAAxC,CAAV;AACA,SAAK3Y,KAAL,CAAWC,WAAX,CAAuBxb,IAAI,CAACiS,EAAL,CAAQva,IAA/B,EAAqCmhB,QAArC,EAA+C7Y,IAAI,CAACiS,EAAL,CAAQvT,KAAvD;AACA,SAAKyrB,SAAL;AACA,WAAO,KAAKvX,UAAL,CAAgB5S,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAED6zB,EAAAA,sBAAsB,CAAC7zB,IAAD,EAAO;AAC3B,SAAKub,KAAL,CAAWF,KAAX,CAAiBhE,WAAjB;;AAEA,QAAI,KAAKnY,KAAL,CAAWnH,OAAO,CAACK,MAAnB,CAAJ,EAAgC;AAC9B4H,MAAAA,IAAI,CAACiS,EAAL,GAAU,KAAKkiB,aAAL,EAAV;AACD,KAFD,MAEO;AACLn0B,MAAAA,IAAI,CAACiS,EAAL,GAAU,KAAK8gB,eAAL,EAAV;AACD;;AAED,UAAMqB,QAAQ,GAAGp0B,IAAI,CAACqR,IAAL,GAAY,KAAKoB,SAAL,EAA7B;AACA,UAAMpB,IAAI,GAAG+iB,QAAQ,CAAC/iB,IAAT,GAAgB,EAA7B;AACA,SAAKgZ,MAAL,CAAYtyB,OAAO,CAACa,MAApB;;AAEA,WAAO,CAAC,KAAKsG,KAAL,CAAWnH,OAAO,CAACgB,MAAnB,CAAR,EAAoC;AAClC,UAAIq7B,QAAQ,GAAG,KAAK3hB,SAAL,EAAf;;AAEA,UAAI,KAAKvT,KAAL,CAAWnH,OAAO,CAACmF,OAAnB,CAAJ,EAAiC;AAC/B,aAAKga,IAAL;;AAEA,YAAI,CAAC,KAAKqS,YAAL,CAAkB,MAAlB,CAAD,IAA8B,CAAC,KAAKrqB,KAAL,CAAWnH,OAAO,CAACyF,OAAnB,CAAnC,EAAgE;AAC9D,eAAK+P,KAAL,CAAW,KAAKtM,KAAL,CAAWiM,YAAtB,EAAoC4gB,UAAU,CAACuB,mCAA/C;AACD;;AAED,aAAKgF,WAAL,CAAiBD,QAAjB;AACD,OARD,MAQO;AACL,aAAKtK,gBAAL,CAAsB,SAAtB,EAAiCgE,UAAU,CAAC8C,mCAA5C;AACAwD,QAAAA,QAAQ,GAAG,KAAKX,gBAAL,CAAsBW,QAAtB,EAAgC,IAAhC,CAAX;AACD;;AAED/iB,MAAAA,IAAI,CAACnQ,IAAL,CAAUkzB,QAAV;AACD;;AAED,SAAK7Y,KAAL,CAAWD,IAAX;AACA,SAAK+O,MAAL,CAAYtyB,OAAO,CAACgB,MAApB;AACA,SAAK6Z,UAAL,CAAgBwhB,QAAhB,EAA0B,gBAA1B;AACA,QAAI1hB,IAAI,GAAG,IAAX;AACA,QAAI4hB,eAAe,GAAG,KAAtB;AACAjjB,IAAAA,IAAI,CAACzE,OAAL,CAAamkB,WAAW,IAAI;AAC1B,UAAID,cAAc,CAACC,WAAD,CAAlB,EAAiC;AAC/B,YAAIre,IAAI,KAAK,UAAb,EAAyB;AACvB,eAAKnF,KAAL,CAAWwjB,WAAW,CAACryB,KAAvB,EAA8BovB,UAAU,CAACE,0BAAzC;AACD;;AAEDtb,QAAAA,IAAI,GAAG,IAAP;AACD,OAND,MAMO,IAAIqe,WAAW,CAAC9uB,IAAZ,KAAqB,sBAAzB,EAAiD;AACtD,YAAIqyB,eAAJ,EAAqB;AACnB,eAAK/mB,KAAL,CAAWwjB,WAAW,CAACryB,KAAvB,EAA8BovB,UAAU,CAACM,6BAAzC;AACD;;AAED,YAAI1b,IAAI,KAAK,IAAb,EAAmB;AACjB,eAAKnF,KAAL,CAAWwjB,WAAW,CAACryB,KAAvB,EAA8BovB,UAAU,CAACE,0BAAzC;AACD;;AAEDtb,QAAAA,IAAI,GAAG,UAAP;AACA4hB,QAAAA,eAAe,GAAG,IAAlB;AACD;AACF,KAnBD;AAoBAt0B,IAAAA,IAAI,CAAC0S,IAAL,GAAYA,IAAI,IAAI,UAApB;AACA,WAAO,KAAKE,UAAL,CAAgB5S,IAAhB,EAAsB,eAAtB,CAAP;AACD;;AAEDi0B,EAAAA,iCAAiC,CAACj0B,IAAD,EAAO0zB,YAAP,EAAqB;AACpD,SAAKrJ,MAAL,CAAYtyB,OAAO,CAACkF,OAApB;;AAEA,QAAI,KAAKqiB,GAAL,CAASvnB,OAAO,CAAC8D,QAAjB,CAAJ,EAAgC;AAC9B,UAAI,KAAKqD,KAAL,CAAWnH,OAAO,CAACmE,SAAnB,KAAiC,KAAKgD,KAAL,CAAWnH,OAAO,CAACgF,MAAnB,CAArC,EAAiE;AAC/DiD,QAAAA,IAAI,CAACgxB,WAAL,GAAmB,KAAKyC,gBAAL,CAAsB,KAAKhhB,SAAL,EAAtB,CAAnB;AACD,OAFD,MAEO;AACLzS,QAAAA,IAAI,CAACgxB,WAAL,GAAmB,KAAKsB,aAAL,EAAnB;AACA,aAAKnI,SAAL;AACD;;AAEDnqB,MAAAA,IAAI,CAACu0B,OAAL,GAAe,IAAf;AACA,aAAO,KAAK3hB,UAAL,CAAgB5S,IAAhB,EAAsB,0BAAtB,CAAP;AACD,KAVD,MAUO;AACL,UAAI,KAAKd,KAAL,CAAWnH,OAAO,CAAC0E,MAAnB,KAA8B,KAAK+3B,KAAL,EAA9B,IAA8C,CAAC,KAAKjL,YAAL,CAAkB,MAAlB,KAA6B,KAAKA,YAAL,CAAkB,WAAlB,CAA9B,KAAiE,CAACmK,YAApH,EAAkI;AAChI,cAAMz8B,KAAK,GAAG,KAAKgK,KAAL,CAAWzK,KAAzB;AACA,cAAMi+B,UAAU,GAAGrD,iBAAiB,CAACn6B,KAAD,CAApC;AACA,cAAM,KAAKsW,KAAL,CAAW,KAAKtM,KAAL,CAAWvC,KAAtB,EAA6BovB,UAAU,CAAC6C,4BAAxC,EAAsE15B,KAAtE,EAA6Ew9B,UAA7E,CAAN;AACD;;AAED,UAAI,KAAKv1B,KAAL,CAAWnH,OAAO,CAACyE,IAAnB,KAA4B,KAAK0C,KAAL,CAAWnH,OAAO,CAACmE,SAAnB,CAA5B,IAA6D,KAAKgD,KAAL,CAAWnH,OAAO,CAACgF,MAAnB,CAA7D,IAA2F,KAAKwsB,YAAL,CAAkB,QAAlB,CAA/F,EAA4H;AAC1HvpB,QAAAA,IAAI,CAACgxB,WAAL,GAAmB,KAAKyC,gBAAL,CAAsB,KAAKhhB,SAAL,EAAtB,CAAnB;AACAzS,QAAAA,IAAI,CAACu0B,OAAL,GAAe,KAAf;AACA,eAAO,KAAK3hB,UAAL,CAAgB5S,IAAhB,EAAsB,0BAAtB,CAAP;AACD,OAJD,MAIO,IAAI,KAAKd,KAAL,CAAWnH,OAAO,CAACsD,IAAnB,KAA4B,KAAK6D,KAAL,CAAWnH,OAAO,CAACa,MAAnB,CAA5B,IAA0D,KAAK2wB,YAAL,CAAkB,WAAlB,CAA1D,IAA4F,KAAKA,YAAL,CAAkB,MAAlB,CAA5F,IAAyH,KAAKA,YAAL,CAAkB,QAAlB,CAA7H,EAA0J;AAC/JvpB,QAAAA,IAAI,GAAG,KAAKoU,WAAL,CAAiBpU,IAAjB,CAAP;;AAEA,YAAIA,IAAI,CAACiC,IAAL,KAAc,wBAAlB,EAA4C;AAC1CjC,UAAAA,IAAI,CAACiC,IAAL,GAAY,mBAAZ;AACAjC,UAAAA,IAAI,CAACu0B,OAAL,GAAe,KAAf;AACA,iBAAOv0B,IAAI,CAAC00B,UAAZ;AACD;;AAED10B,QAAAA,IAAI,CAACiC,IAAL,GAAY,YAAYjC,IAAI,CAACiC,IAA7B;AACA,eAAOjC,IAAP;AACD;AACF;;AAED,UAAM,KAAKspB,UAAL,EAAN;AACD;;AAEDsK,EAAAA,6BAA6B,CAAC5zB,IAAD,EAAO;AAClC,SAAKkX,IAAL;AACA,SAAK4S,gBAAL,CAAsB,SAAtB;AACA9pB,IAAAA,IAAI,CAACwzB,cAAL,GAAsB,KAAKmB,uBAAL,EAAtB;AACA,SAAKxK,SAAL;AACA,WAAO,KAAKvX,UAAL,CAAgB5S,IAAhB,EAAsB,sBAAtB,CAAP;AACD;;AAED8zB,EAAAA,yBAAyB,CAAC9zB,IAAD,EAAO;AAC9B,SAAKkX,IAAL;AACA,SAAK0d,kBAAL,CAAwB50B,IAAxB;AACAA,IAAAA,IAAI,CAACiC,IAAL,GAAY,kBAAZ;AACA,WAAOjC,IAAP;AACD;;AAED+zB,EAAAA,0BAA0B,CAAC/zB,IAAD,EAAO;AAC/B,SAAKkX,IAAL;AACA,SAAK2d,mBAAL,CAAyB70B,IAAzB,EAA+B,IAA/B;AACAA,IAAAA,IAAI,CAACiC,IAAL,GAAY,mBAAZ;AACA,WAAOjC,IAAP;AACD;;AAEDg0B,EAAAA,yBAAyB,CAACh0B,IAAD,EAAO;AAC9B,SAAKkX,IAAL;AACA,SAAK2b,qBAAL,CAA2B7yB,IAA3B;AACA,WAAO,KAAK4S,UAAL,CAAgB5S,IAAhB,EAAsB,kBAAtB,CAAP;AACD;;AAED6yB,EAAAA,qBAAqB,CAAC7yB,IAAD,EAAO80B,OAAO,GAAG,KAAjB,EAAwB;AAC3C90B,IAAAA,IAAI,CAACiS,EAAL,GAAU,KAAK8iB,6BAAL,CAAmC,CAACD,OAApC,EAA6C,IAA7C,CAAV;AACA,SAAKvZ,KAAL,CAAWC,WAAX,CAAuBxb,IAAI,CAACiS,EAAL,CAAQva,IAA/B,EAAqCo9B,OAAO,GAAGhc,aAAH,GAAmBF,YAA/D,EAA6E5Y,IAAI,CAACiS,EAAL,CAAQvT,KAArF;;AAEA,QAAI,KAAKyqB,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BnpB,MAAAA,IAAI,CAAC6R,cAAL,GAAsB,KAAKqhB,iCAAL,EAAtB;AACD,KAFD,MAEO;AACLlzB,MAAAA,IAAI,CAAC6R,cAAL,GAAsB,IAAtB;AACD;;AAED7R,IAAAA,IAAI,CAACg1B,OAAL,GAAe,EAAf;AACAh1B,IAAAA,IAAI,CAACi1B,UAAL,GAAkB,EAAlB;AACAj1B,IAAAA,IAAI,CAACk1B,MAAL,GAAc,EAAd;;AAEA,QAAI,KAAK5V,GAAL,CAASvnB,OAAO,CAACiF,QAAjB,CAAJ,EAAgC;AAC9B,SAAG;AACDgD,QAAAA,IAAI,CAACg1B,OAAL,CAAa9zB,IAAb,CAAkB,KAAKi0B,yBAAL,EAAlB;AACD,OAFD,QAES,CAACL,OAAD,IAAY,KAAKxV,GAAL,CAASvnB,OAAO,CAACoB,KAAjB,CAFrB;AAGD;;AAED,QAAI,KAAKowB,YAAL,CAAkB,QAAlB,CAAJ,EAAiC;AAC/B,WAAKrS,IAAL;;AAEA,SAAG;AACDlX,QAAAA,IAAI,CAACk1B,MAAL,CAAYh0B,IAAZ,CAAiB,KAAKi0B,yBAAL,EAAjB;AACD,OAFD,QAES,KAAK7V,GAAL,CAASvnB,OAAO,CAACoB,KAAjB,CAFT;AAGD;;AAED,QAAI,KAAKowB,YAAL,CAAkB,YAAlB,CAAJ,EAAqC;AACnC,WAAKrS,IAAL;;AAEA,SAAG;AACDlX,QAAAA,IAAI,CAACi1B,UAAL,CAAgB/zB,IAAhB,CAAqB,KAAKi0B,yBAAL,EAArB;AACD,OAFD,QAES,KAAK7V,GAAL,CAASvnB,OAAO,CAACoB,KAAjB,CAFT;AAGD;;AAED6G,IAAAA,IAAI,CAACqR,IAAL,GAAY,KAAK+jB,mBAAL,CAAyB;AACnCC,MAAAA,WAAW,EAAEP,OADsB;AAEnCQ,MAAAA,UAAU,EAAE,KAFuB;AAGnCC,MAAAA,WAAW,EAAE,KAHsB;AAInCC,MAAAA,UAAU,EAAEV,OAJuB;AAKnCW,MAAAA,YAAY,EAAE;AALqB,KAAzB,CAAZ;AAOD;;AAEDN,EAAAA,yBAAyB,GAAG;AAC1B,UAAMn1B,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACAzS,IAAAA,IAAI,CAACiS,EAAL,GAAU,KAAKyjB,gCAAL,EAAV;;AAEA,QAAI,KAAKvM,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BnpB,MAAAA,IAAI,CAAC6R,cAAL,GAAsB,KAAK8jB,mCAAL,EAAtB;AACD,KAFD,MAEO;AACL31B,MAAAA,IAAI,CAAC6R,cAAL,GAAsB,IAAtB;AACD;;AAED,WAAO,KAAKe,UAAL,CAAgB5S,IAAhB,EAAsB,kBAAtB,CAAP;AACD;;AAED41B,EAAAA,kBAAkB,CAAC51B,IAAD,EAAO;AACvB,SAAK6yB,qBAAL,CAA2B7yB,IAA3B;AACA,WAAO,KAAK4S,UAAL,CAAgB5S,IAAhB,EAAsB,sBAAtB,CAAP;AACD;;AAED61B,EAAAA,kBAAkB,CAACnf,IAAD,EAAO;AACvB,QAAIA,IAAI,KAAK,GAAb,EAAkB;AAChB,WAAKnJ,KAAL,CAAW,KAAKtM,KAAL,CAAWvC,KAAtB,EAA6BovB,UAAU,CAACuC,4BAAxC;AACD;AACF;;AAEDyF,EAAAA,iBAAiB,CAACpf,IAAD,EAAOzJ,QAAP,EAAiB+jB,WAAjB,EAA8B;AAC7C,QAAI,CAACnD,aAAa,CAACluB,GAAd,CAAkB+W,IAAlB,CAAL,EAA8B;AAC9B,SAAKnJ,KAAL,CAAWN,QAAX,EAAqB+jB,WAAW,GAAGlD,UAAU,CAACG,kBAAd,GAAmCH,UAAU,CAACsC,sBAA9E,EAAsG1Z,IAAtG;AACD;;AAEDqe,EAAAA,6BAA6B,CAACgB,OAAD,EAAU/E,WAAV,EAAuB;AAClD,SAAK8E,iBAAL,CAAuB,KAAK70B,KAAL,CAAWzK,KAAlC,EAAyC,KAAKyK,KAAL,CAAWvC,KAApD,EAA2DsyB,WAA3D;AACA,WAAO,KAAK+B,eAAL,CAAqBgD,OAArB,CAAP;AACD;;AAEDnB,EAAAA,kBAAkB,CAAC50B,IAAD,EAAO;AACvBA,IAAAA,IAAI,CAACiS,EAAL,GAAU,KAAK8iB,6BAAL,CAAmC,KAAnC,EAA0C,IAA1C,CAAV;AACA,SAAKxZ,KAAL,CAAWC,WAAX,CAAuBxb,IAAI,CAACiS,EAAL,CAAQva,IAA/B,EAAqCkhB,YAArC,EAAmD5Y,IAAI,CAACiS,EAAL,CAAQvT,KAA3D;;AAEA,QAAI,KAAKyqB,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BnpB,MAAAA,IAAI,CAAC6R,cAAL,GAAsB,KAAKqhB,iCAAL,EAAtB;AACD,KAFD,MAEO;AACLlzB,MAAAA,IAAI,CAAC6R,cAAL,GAAsB,IAAtB;AACD;;AAED7R,IAAAA,IAAI,CAACg2B,KAAL,GAAa,KAAK7D,wBAAL,CAA8Bp6B,OAAO,CAACmC,EAAtC,CAAb;AACA,SAAKiwB,SAAL;AACA,WAAO,KAAKvX,UAAL,CAAgB5S,IAAhB,EAAsB,WAAtB,CAAP;AACD;;AAED60B,EAAAA,mBAAmB,CAAC70B,IAAD,EAAOi2B,OAAP,EAAgB;AACjC,SAAKnM,gBAAL,CAAsB,MAAtB;AACA9pB,IAAAA,IAAI,CAACiS,EAAL,GAAU,KAAK8iB,6BAAL,CAAmC,IAAnC,EAAyC,IAAzC,CAAV;AACA,SAAKxZ,KAAL,CAAWC,WAAX,CAAuBxb,IAAI,CAACiS,EAAL,CAAQva,IAA/B,EAAqCkhB,YAArC,EAAmD5Y,IAAI,CAACiS,EAAL,CAAQvT,KAA3D;;AAEA,QAAI,KAAKyqB,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BnpB,MAAAA,IAAI,CAAC6R,cAAL,GAAsB,KAAKqhB,iCAAL,EAAtB;AACD,KAFD,MAEO;AACLlzB,MAAAA,IAAI,CAAC6R,cAAL,GAAsB,IAAtB;AACD;;AAED7R,IAAAA,IAAI,CAACk2B,SAAL,GAAiB,IAAjB;;AAEA,QAAI,KAAKh3B,KAAL,CAAWnH,OAAO,CAACsB,KAAnB,CAAJ,EAA+B;AAC7B2G,MAAAA,IAAI,CAACk2B,SAAL,GAAiB,KAAK/D,wBAAL,CAA8Bp6B,OAAO,CAACsB,KAAtC,CAAjB;AACD;;AAED2G,IAAAA,IAAI,CAACm2B,QAAL,GAAgB,IAAhB;;AAEA,QAAI,CAACF,OAAL,EAAc;AACZj2B,MAAAA,IAAI,CAACm2B,QAAL,GAAgB,KAAKhE,wBAAL,CAA8Bp6B,OAAO,CAACmC,EAAtC,CAAhB;AACD;;AAED,SAAKiwB,SAAL;AACA,WAAO,KAAKvX,UAAL,CAAgB5S,IAAhB,EAAsB,YAAtB,CAAP;AACD;;AAEDo2B,EAAAA,sBAAsB,CAACC,cAAc,GAAG,KAAlB,EAAyB;AAC7C,UAAM70B,SAAS,GAAG,KAAKP,KAAL,CAAWvC,KAA7B;AACA,UAAMsB,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACA,UAAM6jB,QAAQ,GAAG,KAAKC,iBAAL,EAAjB;AACA,UAAMC,KAAK,GAAG,KAAKtC,kCAAL,EAAd;AACAl0B,IAAAA,IAAI,CAACtI,IAAL,GAAY8+B,KAAK,CAAC9+B,IAAlB;AACAsI,IAAAA,IAAI,CAACs2B,QAAL,GAAgBA,QAAhB;AACAt2B,IAAAA,IAAI,CAACy2B,KAAL,GAAaD,KAAK,CAAChD,cAAnB;;AAEA,QAAI,KAAKt0B,KAAL,CAAWnH,OAAO,CAACmC,EAAnB,CAAJ,EAA4B;AAC1B,WAAKolB,GAAL,CAASvnB,OAAO,CAACmC,EAAjB;AACA8F,MAAAA,IAAI,CAACu0B,OAAL,GAAe,KAAKjC,aAAL,EAAf;AACD,KAHD,MAGO;AACL,UAAI+D,cAAJ,EAAoB;AAClB,aAAK9oB,KAAL,CAAW/L,SAAX,EAAsBssB,UAAU,CAACwB,uBAAjC;AACD;AACF;;AAED,WAAO,KAAK1c,UAAL,CAAgB5S,IAAhB,EAAsB,eAAtB,CAAP;AACD;;AAEDkzB,EAAAA,iCAAiC,GAAG;AAClC,UAAMb,SAAS,GAAG,KAAKpxB,KAAL,CAAW0b,MAA7B;AACA,UAAM3c,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACAzS,IAAAA,IAAI,CAACoC,MAAL,GAAc,EAAd;AACA,SAAKnB,KAAL,CAAW0b,MAAX,GAAoB,IAApB;;AAEA,QAAI,KAAKwM,YAAL,CAAkB,GAAlB,KAA0B,KAAKjqB,KAAL,CAAWnH,OAAO,CAAC2+B,WAAnB,CAA9B,EAA+D;AAC7D,WAAKxf,IAAL;AACD,KAFD,MAEO;AACL,WAAKoS,UAAL;AACD;;AAED,QAAIqN,eAAe,GAAG,KAAtB;;AAEA,OAAG;AACD,YAAMC,aAAa,GAAG,KAAKR,sBAAL,CAA4BO,eAA5B,CAAtB;AACA32B,MAAAA,IAAI,CAACoC,MAAL,CAAYlB,IAAZ,CAAiB01B,aAAjB;;AAEA,UAAIA,aAAa,CAACrC,OAAlB,EAA2B;AACzBoC,QAAAA,eAAe,GAAG,IAAlB;AACD;;AAED,UAAI,CAAC,KAAKxN,YAAL,CAAkB,GAAlB,CAAL,EAA6B;AAC3B,aAAKkB,MAAL,CAAYtyB,OAAO,CAACoB,KAApB;AACD;AACF,KAXD,QAWS,CAAC,KAAKgwB,YAAL,CAAkB,GAAlB,CAXV;;AAaA,SAAKE,gBAAL,CAAsB,GAAtB;AACA,SAAKpoB,KAAL,CAAW0b,MAAX,GAAoB0V,SAApB;AACA,WAAO,KAAKzf,UAAL,CAAgB5S,IAAhB,EAAsB,0BAAtB,CAAP;AACD;;AAED21B,EAAAA,mCAAmC,GAAG;AACpC,UAAM31B,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACA,UAAM4f,SAAS,GAAG,KAAKpxB,KAAL,CAAW0b,MAA7B;AACA3c,IAAAA,IAAI,CAACoC,MAAL,GAAc,EAAd;AACA,SAAKnB,KAAL,CAAW0b,MAAX,GAAoB,IAApB;AACA,SAAK0M,gBAAL,CAAsB,GAAtB;AACA,UAAMwN,qBAAqB,GAAG,KAAK51B,KAAL,CAAW2b,kBAAzC;AACA,SAAK3b,KAAL,CAAW2b,kBAAX,GAAgC,KAAhC;;AAEA,WAAO,CAAC,KAAKuM,YAAL,CAAkB,GAAlB,CAAR,EAAgC;AAC9BnpB,MAAAA,IAAI,CAACoC,MAAL,CAAYlB,IAAZ,CAAiB,KAAKoxB,aAAL,EAAjB;;AAEA,UAAI,CAAC,KAAKnJ,YAAL,CAAkB,GAAlB,CAAL,EAA6B;AAC3B,aAAKkB,MAAL,CAAYtyB,OAAO,CAACoB,KAApB;AACD;AACF;;AAED,SAAK8H,KAAL,CAAW2b,kBAAX,GAAgCia,qBAAhC;AACA,SAAKxN,gBAAL,CAAsB,GAAtB;AACA,SAAKpoB,KAAL,CAAW0b,MAAX,GAAoB0V,SAApB;AACA,WAAO,KAAKzf,UAAL,CAAgB5S,IAAhB,EAAsB,4BAAtB,CAAP;AACD;;AAED82B,EAAAA,4CAA4C,GAAG;AAC7C,UAAM92B,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACA,UAAM4f,SAAS,GAAG,KAAKpxB,KAAL,CAAW0b,MAA7B;AACA3c,IAAAA,IAAI,CAACoC,MAAL,GAAc,EAAd;AACA,SAAKnB,KAAL,CAAW0b,MAAX,GAAoB,IAApB;AACA,SAAK0M,gBAAL,CAAsB,GAAtB;;AAEA,WAAO,CAAC,KAAKF,YAAL,CAAkB,GAAlB,CAAR,EAAgC;AAC9BnpB,MAAAA,IAAI,CAACoC,MAAL,CAAYlB,IAAZ,CAAiB,KAAK61B,oCAAL,EAAjB;;AAEA,UAAI,CAAC,KAAK5N,YAAL,CAAkB,GAAlB,CAAL,EAA6B;AAC3B,aAAKkB,MAAL,CAAYtyB,OAAO,CAACoB,KAApB;AACD;AACF;;AAED,SAAKkwB,gBAAL,CAAsB,GAAtB;AACA,SAAKpoB,KAAL,CAAW0b,MAAX,GAAoB0V,SAApB;AACA,WAAO,KAAKzf,UAAL,CAAgB5S,IAAhB,EAAsB,4BAAtB,CAAP;AACD;;AAEDg3B,EAAAA,sBAAsB,GAAG;AACvB,UAAMh3B,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACA,SAAKqX,gBAAL,CAAsB,WAAtB;AACA9pB,IAAAA,IAAI,CAACg1B,OAAL,GAAe,EAAf;;AAEA,QAAI,KAAK1V,GAAL,CAASvnB,OAAO,CAACiF,QAAjB,CAAJ,EAAgC;AAC9B,SAAG;AACDgD,QAAAA,IAAI,CAACg1B,OAAL,CAAa9zB,IAAb,CAAkB,KAAKi0B,yBAAL,EAAlB;AACD,OAFD,QAES,KAAK7V,GAAL,CAASvnB,OAAO,CAACoB,KAAjB,CAFT;AAGD;;AAED6G,IAAAA,IAAI,CAACqR,IAAL,GAAY,KAAK+jB,mBAAL,CAAyB;AACnCC,MAAAA,WAAW,EAAE,KADsB;AAEnCC,MAAAA,UAAU,EAAE,KAFuB;AAGnCC,MAAAA,WAAW,EAAE,KAHsB;AAInCC,MAAAA,UAAU,EAAE,KAJuB;AAKnCC,MAAAA,YAAY,EAAE;AALqB,KAAzB,CAAZ;AAOA,WAAO,KAAK7iB,UAAL,CAAgB5S,IAAhB,EAAsB,yBAAtB,CAAP;AACD;;AAEDi3B,EAAAA,0BAA0B,GAAG;AAC3B,WAAO,KAAK/3B,KAAL,CAAWnH,OAAO,CAACC,GAAnB,KAA2B,KAAKkH,KAAL,CAAWnH,OAAO,CAACK,MAAnB,CAA3B,GAAwD,KAAK+7B,aAAL,EAAxD,GAA+E,KAAKpB,eAAL,CAAqB,IAArB,CAAtF;AACD;;AAEDmE,EAAAA,0BAA0B,CAACl3B,IAAD,EAAOm3B,QAAP,EAAiBb,QAAjB,EAA2B;AACnDt2B,IAAAA,IAAI,CAACo3B,MAAL,GAAcD,QAAd;;AAEA,QAAI,KAAK1X,SAAL,GAAiBxd,IAAjB,KAA0BlK,OAAO,CAACsB,KAAtC,EAA6C;AAC3C2G,MAAAA,IAAI,CAACiS,EAAL,GAAU,KAAKglB,0BAAL,EAAV;AACAj3B,MAAAA,IAAI,CAAC6T,GAAL,GAAW,KAAKse,wBAAL,EAAX;AACD,KAHD,MAGO;AACLnyB,MAAAA,IAAI,CAACiS,EAAL,GAAU,IAAV;AACAjS,MAAAA,IAAI,CAAC6T,GAAL,GAAW,KAAKye,aAAL,EAAX;AACD;;AAED,SAAKjI,MAAL,CAAYtyB,OAAO,CAACW,QAApB;AACAsH,IAAAA,IAAI,CAACxJ,KAAL,GAAa,KAAK27B,wBAAL,EAAb;AACAnyB,IAAAA,IAAI,CAACs2B,QAAL,GAAgBA,QAAhB;AACA,WAAO,KAAK1jB,UAAL,CAAgB5S,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAEDq3B,EAAAA,+BAA+B,CAACr3B,IAAD,EAAOm3B,QAAP,EAAiB;AAC9Cn3B,IAAAA,IAAI,CAACo3B,MAAL,GAAcD,QAAd;AACAn3B,IAAAA,IAAI,CAACiS,EAAL,GAAU,KAAKglB,0BAAL,EAAV;AACA,SAAK5M,MAAL,CAAYtyB,OAAO,CAACW,QAApB;AACA,SAAK2xB,MAAL,CAAYtyB,OAAO,CAACW,QAApB;;AAEA,QAAI,KAAKywB,YAAL,CAAkB,GAAlB,KAA0B,KAAKjqB,KAAL,CAAWnH,OAAO,CAACkB,MAAnB,CAA9B,EAA0D;AACxD+G,MAAAA,IAAI,CAACyQ,MAAL,GAAc,IAAd;AACAzQ,MAAAA,IAAI,CAAC+T,QAAL,GAAgB,KAAhB;AACA/T,MAAAA,IAAI,CAACxJ,KAAL,GAAa,KAAK8gC,4BAAL,CAAkC,KAAKznB,WAAL,CAAiB7P,IAAI,CAACtB,KAAtB,EAA6BsB,IAAI,CAACgB,GAAL,CAAStC,KAAtC,CAAlC,CAAb;AACD,KAJD,MAIO;AACLsB,MAAAA,IAAI,CAACyQ,MAAL,GAAc,KAAd;;AAEA,UAAI,KAAK6O,GAAL,CAASvnB,OAAO,CAACyB,QAAjB,CAAJ,EAAgC;AAC9BwG,QAAAA,IAAI,CAAC+T,QAAL,GAAgB,IAAhB;AACD;;AAED/T,MAAAA,IAAI,CAACxJ,KAAL,GAAa,KAAK27B,wBAAL,EAAb;AACD;;AAED,WAAO,KAAKvf,UAAL,CAAgB5S,IAAhB,EAAsB,wBAAtB,CAAP;AACD;;AAEDs3B,EAAAA,4BAA4B,CAACt3B,IAAD,EAAO;AACjCA,IAAAA,IAAI,CAACoC,MAAL,GAAc,EAAd;AACApC,IAAAA,IAAI,CAACqzB,IAAL,GAAY,IAAZ;AACArzB,IAAAA,IAAI,CAAC6R,cAAL,GAAsB,IAAtB;AACA7R,IAAAA,IAAI,CAACszB,IAAL,GAAY,IAAZ;;AAEA,QAAI,KAAKnK,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BnpB,MAAAA,IAAI,CAAC6R,cAAL,GAAsB,KAAKqhB,iCAAL,EAAtB;AACD;;AAED,SAAK7I,MAAL,CAAYtyB,OAAO,CAACkB,MAApB;;AAEA,QAAI,KAAKiG,KAAL,CAAWnH,OAAO,CAAC8E,KAAnB,CAAJ,EAA+B;AAC7BmD,MAAAA,IAAI,CAACszB,IAAL,GAAY,KAAKiE,0BAAL,CAAgC,IAAhC,CAAZ;AACAv3B,MAAAA,IAAI,CAACszB,IAAL,CAAU57B,IAAV,GAAiB,IAAjB;;AAEA,UAAI,CAAC,KAAKwH,KAAL,CAAWnH,OAAO,CAACmB,MAAnB,CAAL,EAAiC;AAC/B,aAAKmxB,MAAL,CAAYtyB,OAAO,CAACoB,KAApB;AACD;AACF;;AAED,WAAO,CAAC,KAAK+F,KAAL,CAAWnH,OAAO,CAACmB,MAAnB,CAAD,IAA+B,CAAC,KAAKgG,KAAL,CAAWnH,OAAO,CAAC6B,QAAnB,CAAvC,EAAqE;AACnEoG,MAAAA,IAAI,CAACoC,MAAL,CAAYlB,IAAZ,CAAiB,KAAKq2B,0BAAL,CAAgC,KAAhC,CAAjB;;AAEA,UAAI,CAAC,KAAKr4B,KAAL,CAAWnH,OAAO,CAACmB,MAAnB,CAAL,EAAiC;AAC/B,aAAKmxB,MAAL,CAAYtyB,OAAO,CAACoB,KAApB;AACD;AACF;;AAED,QAAI,KAAKmmB,GAAL,CAASvnB,OAAO,CAAC6B,QAAjB,CAAJ,EAAgC;AAC9BoG,MAAAA,IAAI,CAACqzB,IAAL,GAAY,KAAKkE,0BAAL,CAAgC,KAAhC,CAAZ;AACD;;AAED,SAAKlN,MAAL,CAAYtyB,OAAO,CAACmB,MAApB;AACA8G,IAAAA,IAAI,CAACuzB,UAAL,GAAkB,KAAKpB,wBAAL,EAAlB;AACA,WAAO,KAAKvf,UAAL,CAAgB5S,IAAhB,EAAsB,wBAAtB,CAAP;AACD;;AAEDw3B,EAAAA,+BAA+B,CAACx3B,IAAD,EAAOm3B,QAAP,EAAiB;AAC9C,UAAMM,SAAS,GAAG,KAAKhlB,SAAL,EAAlB;AACAzS,IAAAA,IAAI,CAACo3B,MAAL,GAAcD,QAAd;AACAn3B,IAAAA,IAAI,CAACxJ,KAAL,GAAa,KAAK8gC,4BAAL,CAAkCG,SAAlC,CAAb;AACA,WAAO,KAAK7kB,UAAL,CAAgB5S,IAAhB,EAAsB,wBAAtB,CAAP;AACD;;AAEDo1B,EAAAA,mBAAmB,CAAC;AAClBC,IAAAA,WADkB;AAElBC,IAAAA,UAFkB;AAGlBC,IAAAA,WAHkB;AAIlBC,IAAAA,UAJkB;AAKlBC,IAAAA;AALkB,GAAD,EAMhB;AACD,UAAMpD,SAAS,GAAG,KAAKpxB,KAAL,CAAW0b,MAA7B;AACA,SAAK1b,KAAL,CAAW0b,MAAX,GAAoB,IAApB;AACA,UAAMnb,SAAS,GAAG,KAAKiR,SAAL,EAAlB;AACAjR,IAAAA,SAAS,CAACk2B,cAAV,GAA2B,EAA3B;AACAl2B,IAAAA,SAAS,CAACU,UAAV,GAAuB,EAAvB;AACAV,IAAAA,SAAS,CAACm2B,QAAV,GAAqB,EAArB;AACAn2B,IAAAA,SAAS,CAACo2B,aAAV,GAA0B,EAA1B;AACA,QAAIC,QAAJ;AACA,QAAIC,KAAJ;AACA,QAAIC,OAAO,GAAG,KAAd;;AAEA,QAAIzC,UAAU,IAAI,KAAKp2B,KAAL,CAAWnH,OAAO,CAACc,SAAnB,CAAlB,EAAiD;AAC/C,WAAKwxB,MAAL,CAAYtyB,OAAO,CAACc,SAApB;AACAg/B,MAAAA,QAAQ,GAAG9/B,OAAO,CAACiB,SAAnB;AACA8+B,MAAAA,KAAK,GAAG,IAAR;AACD,KAJD,MAIO;AACL,WAAKzN,MAAL,CAAYtyB,OAAO,CAACa,MAApB;AACAi/B,MAAAA,QAAQ,GAAG9/B,OAAO,CAACgB,MAAnB;AACA++B,MAAAA,KAAK,GAAG,KAAR;AACD;;AAEDt2B,IAAAA,SAAS,CAACs2B,KAAV,GAAkBA,KAAlB;;AAEA,WAAO,CAAC,KAAK54B,KAAL,CAAW24B,QAAX,CAAR,EAA8B;AAC5B,UAAIV,QAAQ,GAAG,KAAf;AACA,UAAIa,UAAU,GAAG,IAAjB;AACA,UAAIC,YAAY,GAAG,IAAnB;AACA,YAAMj4B,IAAI,GAAG,KAAKyS,SAAL,EAAb;;AAEA,UAAI+iB,UAAU,IAAI,KAAKjM,YAAL,CAAkB,OAAlB,CAAlB,EAA8C;AAC5C,cAAM9J,SAAS,GAAG,KAAKA,SAAL,EAAlB;;AAEA,YAAIA,SAAS,CAACxd,IAAV,KAAmBlK,OAAO,CAACsB,KAA3B,IAAoComB,SAAS,CAACxd,IAAV,KAAmBlK,OAAO,CAACyB,QAAnE,EAA6E;AAC3E,eAAK0d,IAAL;AACA8gB,UAAAA,UAAU,GAAG,KAAK/2B,KAAL,CAAWvC,KAAxB;AACA22B,UAAAA,WAAW,GAAG,KAAd;AACD;AACF;;AAED,UAAIA,WAAW,IAAI,KAAK9L,YAAL,CAAkB,QAAlB,CAAnB,EAAgD;AAC9C,cAAM9J,SAAS,GAAG,KAAKA,SAAL,EAAlB;;AAEA,YAAIA,SAAS,CAACxd,IAAV,KAAmBlK,OAAO,CAACsB,KAA3B,IAAoComB,SAAS,CAACxd,IAAV,KAAmBlK,OAAO,CAACyB,QAAnE,EAA6E;AAC3E,eAAK0d,IAAL;AACAigB,UAAAA,QAAQ,GAAG,IAAX;AACD;AACF;;AAED,YAAMb,QAAQ,GAAG,KAAKC,iBAAL,EAAjB;;AAEA,UAAI,KAAKjX,GAAL,CAASvnB,OAAO,CAACQ,QAAjB,CAAJ,EAAgC;AAC9B,YAAIy/B,UAAU,IAAI,IAAlB,EAAwB;AACtB,eAAK1O,UAAL,CAAgB0O,UAAhB;AACD;;AAED,YAAI,KAAK1Y,GAAL,CAASvnB,OAAO,CAACQ,QAAjB,CAAJ,EAAgC;AAC9B,cAAI+9B,QAAJ,EAAc;AACZ,iBAAKhN,UAAL,CAAgBgN,QAAQ,CAAC53B,KAAzB;AACD;;AAED8C,UAAAA,SAAS,CAACo2B,aAAV,CAAwB12B,IAAxB,CAA6B,KAAKm2B,+BAAL,CAAqCr3B,IAArC,EAA2Cm3B,QAA3C,CAA7B;AACD,SAND,MAMO;AACL31B,UAAAA,SAAS,CAACm2B,QAAV,CAAmBz2B,IAAnB,CAAwB,KAAKg2B,0BAAL,CAAgCl3B,IAAhC,EAAsCm3B,QAAtC,EAAgDb,QAAhD,CAAxB;AACD;AACF,OAdD,MAcO,IAAI,KAAKp3B,KAAL,CAAWnH,OAAO,CAACkB,MAAnB,KAA8B,KAAKkwB,YAAL,CAAkB,GAAlB,CAAlC,EAA0D;AAC/D,YAAI6O,UAAU,IAAI,IAAlB,EAAwB;AACtB,eAAK1O,UAAL,CAAgB0O,UAAhB;AACD;;AAED,YAAI1B,QAAJ,EAAc;AACZ,eAAKhN,UAAL,CAAgBgN,QAAQ,CAAC53B,KAAzB;AACD;;AAED8C,QAAAA,SAAS,CAACk2B,cAAV,CAAyBx2B,IAAzB,CAA8B,KAAKs2B,+BAAL,CAAqCx3B,IAArC,EAA2Cm3B,QAA3C,CAA9B;AACD,OAVM,MAUA;AACL,YAAIzkB,IAAI,GAAG,MAAX;;AAEA,YAAI,KAAK6W,YAAL,CAAkB,KAAlB,KAA4B,KAAKA,YAAL,CAAkB,KAAlB,CAAhC,EAA0D;AACxD,gBAAM9J,SAAS,GAAG,KAAKA,SAAL,EAAlB;;AAEA,cAAIA,SAAS,CAACxd,IAAV,KAAmBlK,OAAO,CAACL,IAA3B,IAAmC+nB,SAAS,CAACxd,IAAV,KAAmBlK,OAAO,CAACK,MAA9D,IAAwEqnB,SAAS,CAACxd,IAAV,KAAmBlK,OAAO,CAACC,GAAvG,EAA4G;AAC1G0a,YAAAA,IAAI,GAAG,KAAKzR,KAAL,CAAWzK,KAAlB;AACA,iBAAK0gB,IAAL;AACD;AACF;;AAED,cAAMghB,aAAa,GAAG,KAAKC,2BAAL,CAAiCn4B,IAAjC,EAAuCm3B,QAAvC,EAAiDa,UAAjD,EAA6D1B,QAA7D,EAAuE5jB,IAAvE,EAA6E6iB,WAA7E,EAA0FE,YAAY,IAAI,IAAhB,GAAuBA,YAAvB,GAAsC,CAACqC,KAAjI,CAAtB;;AAEA,YAAII,aAAa,KAAK,IAAtB,EAA4B;AAC1BH,UAAAA,OAAO,GAAG,IAAV;AACAE,UAAAA,YAAY,GAAG,KAAKh3B,KAAL,CAAWiM,YAA1B;AACD,SAHD,MAGO;AACL1L,UAAAA,SAAS,CAACU,UAAV,CAAqBhB,IAArB,CAA0Bg3B,aAA1B;AACD;AACF;;AAED,WAAKE,uBAAL;;AAEA,UAAIH,YAAY,IAAI,CAAC,KAAK/4B,KAAL,CAAWnH,OAAO,CAACgB,MAAnB,CAAjB,IAA+C,CAAC,KAAKmG,KAAL,CAAWnH,OAAO,CAACiB,SAAnB,CAApD,EAAmF;AACjF,aAAKuU,KAAL,CAAW0qB,YAAX,EAAyBnK,UAAU,CAACqC,iCAApC;AACD;AACF;;AAED,SAAK9F,MAAL,CAAYwN,QAAZ;;AAEA,QAAItC,WAAJ,EAAiB;AACf/zB,MAAAA,SAAS,CAACu2B,OAAV,GAAoBA,OAApB;AACD;;AAED,UAAMjT,GAAG,GAAG,KAAKlS,UAAL,CAAgBpR,SAAhB,EAA2B,sBAA3B,CAAZ;AACA,SAAKP,KAAL,CAAW0b,MAAX,GAAoB0V,SAApB;AACA,WAAOvN,GAAP;AACD;;AAEDqT,EAAAA,2BAA2B,CAACn4B,IAAD,EAAOm3B,QAAP,EAAiBa,UAAjB,EAA6B1B,QAA7B,EAAuC5jB,IAAvC,EAA6C6iB,WAA7C,EAA0DE,YAA1D,EAAwE;AACjG,QAAI,KAAKnW,GAAL,CAASvnB,OAAO,CAAC6B,QAAjB,CAAJ,EAAgC;AAC9B,YAAMy+B,cAAc,GAAG,KAAKn5B,KAAL,CAAWnH,OAAO,CAACoB,KAAnB,KAA6B,KAAK+F,KAAL,CAAWnH,OAAO,CAACqB,IAAnB,CAA7B,IAAyD,KAAK8F,KAAL,CAAWnH,OAAO,CAACgB,MAAnB,CAAzD,IAAuF,KAAKmG,KAAL,CAAWnH,OAAO,CAACiB,SAAnB,CAA9G;;AAEA,UAAIq/B,cAAJ,EAAoB;AAClB,YAAI,CAAC9C,WAAL,EAAkB;AAChB,eAAKhoB,KAAL,CAAW,KAAKtM,KAAL,CAAWiM,YAAtB,EAAoC4gB,UAAU,CAACqB,sBAA/C;AACD,SAFD,MAEO,IAAI,CAACsG,YAAL,EAAmB;AACxB,eAAKloB,KAAL,CAAW,KAAKtM,KAAL,CAAWiM,YAAtB,EAAoC4gB,UAAU,CAACoB,kBAA/C;AACD;;AAED,YAAIoH,QAAJ,EAAc;AACZ,eAAK/oB,KAAL,CAAW+oB,QAAQ,CAAC53B,KAApB,EAA2BovB,UAAU,CAACsB,eAAtC;AACD;;AAED,eAAO,IAAP;AACD;;AAED,UAAI,CAACmG,WAAL,EAAkB;AAChB,aAAKhoB,KAAL,CAAW,KAAKtM,KAAL,CAAWiM,YAAtB,EAAoC4gB,UAAU,CAACyC,oBAA/C;AACD;;AAED,UAAIyH,UAAU,IAAI,IAAlB,EAAwB;AACtB,aAAK1O,UAAL,CAAgB0O,UAAhB;AACD;;AAED,UAAI1B,QAAJ,EAAc;AACZ,aAAK/oB,KAAL,CAAW+oB,QAAQ,CAAC53B,KAApB,EAA2BovB,UAAU,CAAC6B,cAAtC;AACD;;AAED3vB,MAAAA,IAAI,CAACs4B,QAAL,GAAgB,KAAKhG,aAAL,EAAhB;AACA,aAAO,KAAK1f,UAAL,CAAgB5S,IAAhB,EAAsB,0BAAtB,CAAP;AACD,KA/BD,MA+BO;AACLA,MAAAA,IAAI,CAAC6T,GAAL,GAAW,KAAKojB,0BAAL,EAAX;AACAj3B,MAAAA,IAAI,CAACo3B,MAAL,GAAcD,QAAd;AACAn3B,MAAAA,IAAI,CAACu4B,KAAL,GAAaP,UAAU,IAAI,IAA3B;AACAh4B,MAAAA,IAAI,CAAC0S,IAAL,GAAYA,IAAZ;AACA,UAAIqB,QAAQ,GAAG,KAAf;;AAEA,UAAI,KAAKoV,YAAL,CAAkB,GAAlB,KAA0B,KAAKjqB,KAAL,CAAWnH,OAAO,CAACkB,MAAnB,CAA9B,EAA0D;AACxD+G,QAAAA,IAAI,CAACyQ,MAAL,GAAc,IAAd;;AAEA,YAAIunB,UAAU,IAAI,IAAlB,EAAwB;AACtB,eAAK1O,UAAL,CAAgB0O,UAAhB;AACD;;AAED,YAAI1B,QAAJ,EAAc;AACZ,eAAKhN,UAAL,CAAgBgN,QAAQ,CAAC53B,KAAzB;AACD;;AAEDsB,QAAAA,IAAI,CAACxJ,KAAL,GAAa,KAAK8gC,4BAAL,CAAkC,KAAKznB,WAAL,CAAiB7P,IAAI,CAACtB,KAAtB,EAA6BsB,IAAI,CAACgB,GAAL,CAAStC,KAAtC,CAAlC,CAAb;;AAEA,YAAIgU,IAAI,KAAK,KAAT,IAAkBA,IAAI,KAAK,KAA/B,EAAsC;AACpC,eAAK8lB,2BAAL,CAAiCx4B,IAAjC;AACD;;AAED,YAAI,CAACu1B,WAAD,IAAgBv1B,IAAI,CAAC6T,GAAL,CAASnc,IAAT,KAAkB,aAAlC,IAAmDsI,IAAI,CAACxJ,KAAL,CAAW88B,IAAlE,EAAwE;AACtE,eAAK/lB,KAAL,CAAWvN,IAAI,CAACxJ,KAAL,CAAW88B,IAAX,CAAgB50B,KAA3B,EAAkCovB,UAAU,CAAC+B,4BAA7C;AACD;AACF,OApBD,MAoBO;AACL,YAAInd,IAAI,KAAK,MAAb,EAAqB,KAAK4W,UAAL;AACrBtpB,QAAAA,IAAI,CAACyQ,MAAL,GAAc,KAAd;;AAEA,YAAI,KAAK6O,GAAL,CAASvnB,OAAO,CAACyB,QAAjB,CAAJ,EAAgC;AAC9Bua,UAAAA,QAAQ,GAAG,IAAX;AACD;;AAED/T,QAAAA,IAAI,CAACxJ,KAAL,GAAa,KAAK27B,wBAAL,EAAb;AACAnyB,QAAAA,IAAI,CAACs2B,QAAL,GAAgBA,QAAhB;AACD;;AAEDt2B,MAAAA,IAAI,CAAC+T,QAAL,GAAgBA,QAAhB;AACA,aAAO,KAAKnB,UAAL,CAAgB5S,IAAhB,EAAsB,oBAAtB,CAAP;AACD;AACF;;AAEDw4B,EAAAA,2BAA2B,CAAC9M,QAAD,EAAW;AACpC,UAAM+M,UAAU,GAAG/M,QAAQ,CAAChZ,IAAT,KAAkB,KAAlB,GAA0B,CAA1B,GAA8B,CAAjD;AACA,UAAMhU,KAAK,GAAGgtB,QAAQ,CAAChtB,KAAvB;AACA,UAAMkC,MAAM,GAAG8qB,QAAQ,CAACl1B,KAAT,CAAe4L,MAAf,CAAsBxB,MAAtB,IAAgC8qB,QAAQ,CAACl1B,KAAT,CAAe68B,IAAf,GAAsB,CAAtB,GAA0B,CAA1D,CAAf;;AAEA,QAAI3H,QAAQ,CAACl1B,KAAT,CAAe88B,IAAnB,EAAyB;AACvB,WAAK/lB,KAAL,CAAWme,QAAQ,CAACl1B,KAAT,CAAe88B,IAAf,CAAoB50B,KAA/B,EAAsCgtB,QAAQ,CAAChZ,IAAT,KAAkB,KAAlB,GAA0Bob,UAAU,CAACkB,yBAArC,GAAiElB,UAAU,CAAC4B,yBAAlH;AACD;;AAED,QAAI9uB,MAAM,KAAK63B,UAAf,EAA2B;AACzB,UAAI/M,QAAQ,CAAChZ,IAAT,KAAkB,KAAtB,EAA6B;AAC3B,aAAKnF,KAAL,CAAW7O,KAAX,EAAkBkE,aAAa,CAACU,cAAhC;AACD,OAFD,MAEO;AACL,aAAKiK,KAAL,CAAW7O,KAAX,EAAkBkE,aAAa,CAACW,cAAhC;AACD;AACF;;AAED,QAAImoB,QAAQ,CAAChZ,IAAT,KAAkB,KAAlB,IAA2BgZ,QAAQ,CAACl1B,KAAT,CAAe68B,IAA9C,EAAoD;AAClD,WAAK9lB,KAAL,CAAW7O,KAAX,EAAkBkE,aAAa,CAACY,sBAAhC;AACD;AACF;;AAED40B,EAAAA,uBAAuB,GAAG;AACxB,QAAI,CAAC,KAAK9Y,GAAL,CAASvnB,OAAO,CAACqB,IAAjB,CAAD,IAA2B,CAAC,KAAKkmB,GAAL,CAASvnB,OAAO,CAACoB,KAAjB,CAA5B,IAAuD,CAAC,KAAK+F,KAAL,CAAWnH,OAAO,CAACgB,MAAnB,CAAxD,IAAsF,CAAC,KAAKmG,KAAL,CAAWnH,OAAO,CAACiB,SAAnB,CAA3F,EAA0H;AACxH,WAAKswB,UAAL;AACD;AACF;;AAEDoM,EAAAA,gCAAgC,CAACpiB,QAAD,EAAWrG,QAAX,EAAqBgF,EAArB,EAAyB;AACvDqB,IAAAA,QAAQ,GAAGA,QAAQ,IAAI,KAAKrS,KAAL,CAAWvC,KAAlC;AACAuO,IAAAA,QAAQ,GAAGA,QAAQ,IAAI,KAAKhM,KAAL,CAAWgM,QAAlC;AACA,QAAIjN,IAAI,GAAGiS,EAAE,IAAI,KAAK8iB,6BAAL,CAAmC,IAAnC,CAAjB;;AAEA,WAAO,KAAKzV,GAAL,CAASvnB,OAAO,CAACwB,GAAjB,CAAP,EAA8B;AAC5B,YAAMm/B,KAAK,GAAG,KAAK7oB,WAAL,CAAiByD,QAAjB,EAA2BrG,QAA3B,CAAd;AACAyrB,MAAAA,KAAK,CAACC,aAAN,GAAsB34B,IAAtB;AACA04B,MAAAA,KAAK,CAACzmB,EAAN,GAAW,KAAK8iB,6BAAL,CAAmC,IAAnC,CAAX;AACA/0B,MAAAA,IAAI,GAAG,KAAK4S,UAAL,CAAgB8lB,KAAhB,EAAuB,yBAAvB,CAAP;AACD;;AAED,WAAO14B,IAAP;AACD;;AAED44B,EAAAA,oBAAoB,CAACtlB,QAAD,EAAWrG,QAAX,EAAqBgF,EAArB,EAAyB;AAC3C,UAAMjS,IAAI,GAAG,KAAK6P,WAAL,CAAiByD,QAAjB,EAA2BrG,QAA3B,CAAb;AACAjN,IAAAA,IAAI,CAAC6R,cAAL,GAAsB,IAAtB;AACA7R,IAAAA,IAAI,CAACiS,EAAL,GAAU,KAAKyjB,gCAAL,CAAsCpiB,QAAtC,EAAgDrG,QAAhD,EAA0DgF,EAA1D,CAAV;;AAEA,QAAI,KAAKkX,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BnpB,MAAAA,IAAI,CAAC6R,cAAL,GAAsB,KAAK8jB,mCAAL,EAAtB;AACD;;AAED,WAAO,KAAK/iB,UAAL,CAAgB5S,IAAhB,EAAsB,uBAAtB,CAAP;AACD;;AAED64B,EAAAA,mBAAmB,GAAG;AACpB,UAAM74B,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACA,SAAK4X,MAAL,CAAYtyB,OAAO,CAACyF,OAApB;AACAwC,IAAAA,IAAI,CAACs4B,QAAL,GAAgB,KAAKQ,oBAAL,EAAhB;AACA,WAAO,KAAKlmB,UAAL,CAAgB5S,IAAhB,EAAsB,sBAAtB,CAAP;AACD;;AAED+4B,EAAAA,kBAAkB,GAAG;AACnB,UAAM/4B,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACAzS,IAAAA,IAAI,CAACmV,KAAL,GAAa,EAAb;AACA,SAAKkV,MAAL,CAAYtyB,OAAO,CAACQ,QAApB;;AAEA,WAAO,KAAK0I,KAAL,CAAW+L,GAAX,GAAiB,KAAKpM,MAAtB,IAAgC,CAAC,KAAK1B,KAAL,CAAWnH,OAAO,CAACW,QAAnB,CAAxC,EAAsE;AACpEsH,MAAAA,IAAI,CAACmV,KAAL,CAAWjU,IAAX,CAAgB,KAAKoxB,aAAL,EAAhB;AACA,UAAI,KAAKpzB,KAAL,CAAWnH,OAAO,CAACW,QAAnB,CAAJ,EAAkC;AAClC,WAAK2xB,MAAL,CAAYtyB,OAAO,CAACoB,KAApB;AACD;;AAED,SAAKkxB,MAAL,CAAYtyB,OAAO,CAACW,QAApB;AACA,WAAO,KAAKka,UAAL,CAAgB5S,IAAhB,EAAsB,qBAAtB,CAAP;AACD;;AAEDu3B,EAAAA,0BAA0B,CAACyB,KAAD,EAAQ;AAChC,QAAIthC,IAAI,GAAG,IAAX;AACA,QAAIqc,QAAQ,GAAG,KAAf;AACA,QAAIyf,cAAc,GAAG,IAArB;AACA,UAAMxzB,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACA,UAAMwmB,EAAE,GAAG,KAAKxZ,SAAL,EAAX;AACA,UAAMyZ,MAAM,GAAG,KAAKj4B,KAAL,CAAWgB,IAAX,KAAoBlK,OAAO,CAAC8E,KAA3C;;AAEA,QAAIo8B,EAAE,CAACh3B,IAAH,KAAYlK,OAAO,CAACsB,KAApB,IAA6B4/B,EAAE,CAACh3B,IAAH,KAAYlK,OAAO,CAACyB,QAArD,EAA+D;AAC7D,UAAI0/B,MAAM,IAAI,CAACF,KAAf,EAAsB;AACpB,aAAKzrB,KAAL,CAAWvN,IAAI,CAACtB,KAAhB,EAAuBovB,UAAU,CAACiC,oBAAlC;AACD;;AAEDr4B,MAAAA,IAAI,GAAG,KAAKq7B,eAAL,CAAqBmG,MAArB,CAAP;;AAEA,UAAI,KAAK5Z,GAAL,CAASvnB,OAAO,CAACyB,QAAjB,CAAJ,EAAgC;AAC9Bua,QAAAA,QAAQ,GAAG,IAAX;;AAEA,YAAImlB,MAAJ,EAAY;AACV,eAAK3rB,KAAL,CAAWvN,IAAI,CAACtB,KAAhB,EAAuBovB,UAAU,CAACgC,yBAAlC;AACD;AACF;;AAED0D,MAAAA,cAAc,GAAG,KAAKrB,wBAAL,EAAjB;AACD,KAhBD,MAgBO;AACLqB,MAAAA,cAAc,GAAG,KAAKlB,aAAL,EAAjB;AACD;;AAEDtyB,IAAAA,IAAI,CAACtI,IAAL,GAAYA,IAAZ;AACAsI,IAAAA,IAAI,CAAC+T,QAAL,GAAgBA,QAAhB;AACA/T,IAAAA,IAAI,CAACwzB,cAAL,GAAsBA,cAAtB;AACA,WAAO,KAAK5gB,UAAL,CAAgB5S,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAEDm5B,EAAAA,kCAAkC,CAACl3B,IAAD,EAAO;AACvC,UAAMjC,IAAI,GAAG,KAAK6P,WAAL,CAAiB5N,IAAI,CAACvD,KAAtB,EAA6BuD,IAAI,CAACjB,GAAL,CAAStC,KAAtC,CAAb;AACAsB,IAAAA,IAAI,CAACtI,IAAL,GAAY,IAAZ;AACAsI,IAAAA,IAAI,CAAC+T,QAAL,GAAgB,KAAhB;AACA/T,IAAAA,IAAI,CAACwzB,cAAL,GAAsBvxB,IAAtB;AACA,WAAO,KAAK2Q,UAAL,CAAgB5S,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAEDozB,EAAAA,2BAA2B,CAAChxB,MAAM,GAAG,EAAV,EAAc;AACvC,QAAIixB,IAAI,GAAG,IAAX;AACA,QAAIx2B,KAAK,GAAG,IAAZ;;AAEA,QAAI,KAAKqC,KAAL,CAAWnH,OAAO,CAAC8E,KAAnB,CAAJ,EAA+B;AAC7BA,MAAAA,KAAK,GAAG,KAAK06B,0BAAL,CAAgC,IAAhC,CAAR;AACA16B,MAAAA,KAAK,CAACnF,IAAN,GAAa,IAAb;;AAEA,UAAI,CAAC,KAAKwH,KAAL,CAAWnH,OAAO,CAACmB,MAAnB,CAAL,EAAiC;AAC/B,aAAKmxB,MAAL,CAAYtyB,OAAO,CAACoB,KAApB;AACD;AACF;;AAED,WAAO,CAAC,KAAK+F,KAAL,CAAWnH,OAAO,CAACmB,MAAnB,CAAD,IAA+B,CAAC,KAAKgG,KAAL,CAAWnH,OAAO,CAAC6B,QAAnB,CAAvC,EAAqE;AACnEwI,MAAAA,MAAM,CAAClB,IAAP,CAAY,KAAKq2B,0BAAL,CAAgC,KAAhC,CAAZ;;AAEA,UAAI,CAAC,KAAKr4B,KAAL,CAAWnH,OAAO,CAACmB,MAAnB,CAAL,EAAiC;AAC/B,aAAKmxB,MAAL,CAAYtyB,OAAO,CAACoB,KAApB;AACD;AACF;;AAED,QAAI,KAAKmmB,GAAL,CAASvnB,OAAO,CAAC6B,QAAjB,CAAJ,EAAgC;AAC9By5B,MAAAA,IAAI,GAAG,KAAKkE,0BAAL,CAAgC,KAAhC,CAAP;AACD;;AAED,WAAO;AACLn1B,MAAAA,MADK;AAELixB,MAAAA,IAFK;AAGLx2B,MAAAA;AAHK,KAAP;AAKD;;AAEDu8B,EAAAA,yBAAyB,CAAC9lB,QAAD,EAAWrG,QAAX,EAAqBjN,IAArB,EAA2BiS,EAA3B,EAA+B;AACtD,YAAQA,EAAE,CAACva,IAAX;AACE,WAAK,KAAL;AACE,eAAO,KAAKkb,UAAL,CAAgB5S,IAAhB,EAAsB,mBAAtB,CAAP;;AAEF,WAAK,MAAL;AACA,WAAK,SAAL;AACE,eAAO,KAAK4S,UAAL,CAAgB5S,IAAhB,EAAsB,uBAAtB,CAAP;;AAEF,WAAK,OAAL;AACE,eAAO,KAAK4S,UAAL,CAAgB5S,IAAhB,EAAsB,qBAAtB,CAAP;;AAEF,WAAK,OAAL;AACE,eAAO,KAAK4S,UAAL,CAAgB5S,IAAhB,EAAsB,qBAAtB,CAAP;;AAEF,WAAK,QAAL;AACE,eAAO,KAAK4S,UAAL,CAAgB5S,IAAhB,EAAsB,sBAAtB,CAAP;;AAEF,WAAK,QAAL;AACE,eAAO,KAAK4S,UAAL,CAAgB5S,IAAhB,EAAsB,sBAAtB,CAAP;;AAEF,WAAK,QAAL;AACE,eAAO,KAAK4S,UAAL,CAAgB5S,IAAhB,EAAsB,sBAAtB,CAAP;;AAEF;AACE,aAAK61B,kBAAL,CAAwB5jB,EAAE,CAACva,IAA3B;AACA,eAAO,KAAKkhC,oBAAL,CAA0BtlB,QAA1B,EAAoCrG,QAApC,EAA8CgF,EAA9C,CAAP;AAzBJ;AA2BD;;AAED6mB,EAAAA,oBAAoB,GAAG;AACrB,UAAMxlB,QAAQ,GAAG,KAAKrS,KAAL,CAAWvC,KAA5B;AACA,UAAMuO,QAAQ,GAAG,KAAKhM,KAAL,CAAWgM,QAA5B;AACA,UAAMjN,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACA,QAAI0gB,GAAJ;AACA,QAAIlxB,IAAJ;AACA,QAAIo3B,aAAa,GAAG,KAApB;AACA,UAAMxC,qBAAqB,GAAG,KAAK51B,KAAL,CAAW2b,kBAAzC;;AAEA,YAAQ,KAAK3b,KAAL,CAAWgB,IAAnB;AACE,WAAKlK,OAAO,CAACL,IAAb;AACE,YAAI,KAAK6xB,YAAL,CAAkB,WAAlB,CAAJ,EAAoC;AAClC,iBAAO,KAAKyN,sBAAL,EAAP;AACD;;AAED,eAAO,KAAKoC,yBAAL,CAA+B9lB,QAA/B,EAAyCrG,QAAzC,EAAmDjN,IAAnD,EAAyD,KAAK+yB,eAAL,EAAzD,CAAP;;AAEF,WAAKh7B,OAAO,CAACa,MAAb;AACE,eAAO,KAAKw8B,mBAAL,CAAyB;AAC9BC,UAAAA,WAAW,EAAE,KADiB;AAE9BC,UAAAA,UAAU,EAAE,KAFkB;AAG9BC,UAAAA,WAAW,EAAE,IAHiB;AAI9BC,UAAAA,UAAU,EAAE,KAJkB;AAK9BC,UAAAA,YAAY,EAAE;AALgB,SAAzB,CAAP;;AAQF,WAAK19B,OAAO,CAACc,SAAb;AACE,eAAO,KAAKu8B,mBAAL,CAAyB;AAC9BC,UAAAA,WAAW,EAAE,KADiB;AAE9BC,UAAAA,UAAU,EAAE,IAFkB;AAG9BC,UAAAA,WAAW,EAAE,IAHiB;AAI9BC,UAAAA,UAAU,EAAE,KAJkB;AAK9BC,UAAAA,YAAY,EAAE;AALgB,SAAzB,CAAP;;AAQF,WAAK19B,OAAO,CAACQ,QAAb;AACE,aAAK0I,KAAL,CAAW2b,kBAAX,GAAgC,KAAhC;AACA3a,QAAAA,IAAI,GAAG,KAAK82B,kBAAL,EAAP;AACA,aAAK93B,KAAL,CAAW2b,kBAAX,GAAgCia,qBAAhC;AACA,eAAO50B,IAAP;;AAEF,WAAKlK,OAAO,CAACkD,UAAb;AACE,YAAI,KAAKgG,KAAL,CAAWzK,KAAX,KAAqB,GAAzB,EAA8B;AAC5BwJ,UAAAA,IAAI,CAAC6R,cAAL,GAAsB,KAAKqhB,iCAAL,EAAtB;AACA,eAAK7I,MAAL,CAAYtyB,OAAO,CAACkB,MAApB;AACAk6B,UAAAA,GAAG,GAAG,KAAKC,2BAAL,EAAN;AACApzB,UAAAA,IAAI,CAACoC,MAAL,GAAc+wB,GAAG,CAAC/wB,MAAlB;AACApC,UAAAA,IAAI,CAACqzB,IAAL,GAAYF,GAAG,CAACE,IAAhB;AACArzB,UAAAA,IAAI,CAACszB,IAAL,GAAYH,GAAG,CAACt2B,KAAhB;AACA,eAAKwtB,MAAL,CAAYtyB,OAAO,CAACmB,MAApB;AACA,eAAKmxB,MAAL,CAAYtyB,OAAO,CAAC2B,KAApB;AACAsG,UAAAA,IAAI,CAACuzB,UAAL,GAAkB,KAAKjB,aAAL,EAAlB;AACA,iBAAO,KAAK1f,UAAL,CAAgB5S,IAAhB,EAAsB,wBAAtB,CAAP;AACD;;AAED;;AAEF,WAAKjI,OAAO,CAACkB,MAAb;AACE,aAAKie,IAAL;;AAEA,YAAI,CAAC,KAAKhY,KAAL,CAAWnH,OAAO,CAACmB,MAAnB,CAAD,IAA+B,CAAC,KAAKgG,KAAL,CAAWnH,OAAO,CAAC6B,QAAnB,CAApC,EAAkE;AAChE,cAAI,KAAKsF,KAAL,CAAWnH,OAAO,CAACL,IAAnB,KAA4B,KAAKwH,KAAL,CAAWnH,OAAO,CAAC8E,KAAnB,CAAhC,EAA2D;AACzD,kBAAMjF,KAAK,GAAG,KAAK6nB,SAAL,GAAiBxd,IAA/B;AACAo3B,YAAAA,aAAa,GAAGzhC,KAAK,KAAKG,OAAO,CAACyB,QAAlB,IAA8B5B,KAAK,KAAKG,OAAO,CAACsB,KAAhE;AACD,WAHD,MAGO;AACLggC,YAAAA,aAAa,GAAG,IAAhB;AACD;AACF;;AAED,YAAIA,aAAJ,EAAmB;AACjB,eAAKp4B,KAAL,CAAW2b,kBAAX,GAAgC,KAAhC;AACA3a,UAAAA,IAAI,GAAG,KAAKqwB,aAAL,EAAP;AACA,eAAKrxB,KAAL,CAAW2b,kBAAX,GAAgCia,qBAAhC;;AAEA,cAAI,KAAK51B,KAAL,CAAW2b,kBAAX,IAAiC,EAAE,KAAK1d,KAAL,CAAWnH,OAAO,CAACoB,KAAnB,KAA6B,KAAK+F,KAAL,CAAWnH,OAAO,CAACmB,MAAnB,KAA8B,KAAKumB,SAAL,GAAiBxd,IAAjB,KAA0BlK,OAAO,CAAC2B,KAA/F,CAArC,EAA4I;AAC1I,iBAAK2wB,MAAL,CAAYtyB,OAAO,CAACmB,MAApB;AACA,mBAAO+I,IAAP;AACD,WAHD,MAGO;AACL,iBAAKqd,GAAL,CAASvnB,OAAO,CAACoB,KAAjB;AACD;AACF;;AAED,YAAI8I,IAAJ,EAAU;AACRkxB,UAAAA,GAAG,GAAG,KAAKC,2BAAL,CAAiC,CAAC,KAAK+F,kCAAL,CAAwCl3B,IAAxC,CAAD,CAAjC,CAAN;AACD,SAFD,MAEO;AACLkxB,UAAAA,GAAG,GAAG,KAAKC,2BAAL,EAAN;AACD;;AAEDpzB,QAAAA,IAAI,CAACoC,MAAL,GAAc+wB,GAAG,CAAC/wB,MAAlB;AACApC,QAAAA,IAAI,CAACqzB,IAAL,GAAYF,GAAG,CAACE,IAAhB;AACArzB,QAAAA,IAAI,CAACszB,IAAL,GAAYH,GAAG,CAACt2B,KAAhB;AACA,aAAKwtB,MAAL,CAAYtyB,OAAO,CAACmB,MAApB;AACA,aAAKmxB,MAAL,CAAYtyB,OAAO,CAAC2B,KAApB;AACAsG,QAAAA,IAAI,CAACuzB,UAAL,GAAkB,KAAKjB,aAAL,EAAlB;AACAtyB,QAAAA,IAAI,CAAC6R,cAAL,GAAsB,IAAtB;AACA,eAAO,KAAKe,UAAL,CAAgB5S,IAAhB,EAAsB,wBAAtB,CAAP;;AAEF,WAAKjI,OAAO,CAACK,MAAb;AACE,eAAO,KAAKgX,YAAL,CAAkB,KAAKnO,KAAL,CAAWzK,KAA7B,EAAoC,6BAApC,CAAP;;AAEF,WAAKuB,OAAO,CAACqF,KAAb;AACA,WAAKrF,OAAO,CAACsF,MAAb;AACE2C,QAAAA,IAAI,CAACxJ,KAAL,GAAa,KAAK0I,KAAL,CAAWnH,OAAO,CAACqF,KAAnB,CAAb;AACA,aAAK8Z,IAAL;AACA,eAAO,KAAKtE,UAAL,CAAgB5S,IAAhB,EAAsB,8BAAtB,CAAP;;AAEF,WAAKjI,OAAO,CAACoD,OAAb;AACE,YAAI,KAAK8F,KAAL,CAAWzK,KAAX,KAAqB,GAAzB,EAA8B;AAC5B,eAAK0gB,IAAL;;AAEA,cAAI,KAAKhY,KAAL,CAAWnH,OAAO,CAACC,GAAnB,CAAJ,EAA6B;AAC3B,mBAAO,KAAKshC,kBAAL,CAAwB,CAAC,KAAKr4B,KAAL,CAAWzK,KAApC,EAA2C,6BAA3C,EAA0EwJ,IAA1E,CAAP;AACD;;AAED,cAAI,KAAKd,KAAL,CAAWnH,OAAO,CAACE,MAAnB,CAAJ,EAAgC;AAC9B,mBAAO,KAAKqhC,kBAAL,CAAwB,CAAC,KAAKr4B,KAAL,CAAWzK,KAApC,EAA2C,6BAA3C,EAA0EwJ,IAA1E,CAAP;AACD;;AAED,gBAAM,KAAKuN,KAAL,CAAW,KAAKtM,KAAL,CAAWvC,KAAtB,EAA6BovB,UAAU,CAAC0C,4BAAxC,CAAN;AACD;;AAED,cAAM,KAAKlH,UAAL,EAAN;;AAEF,WAAKvxB,OAAO,CAACC,GAAb;AACE,eAAO,KAAKoX,YAAL,CAAkB,KAAKnO,KAAL,CAAWzK,KAA7B,EAAoC,6BAApC,CAAP;;AAEF,WAAKuB,OAAO,CAACE,MAAb;AACE,eAAO,KAAKmX,YAAL,CAAkB,KAAKnO,KAAL,CAAWzK,KAA7B,EAAoC,6BAApC,CAAP;;AAEF,WAAKuB,OAAO,CAAC0F,KAAb;AACE,aAAKyZ,IAAL;AACA,eAAO,KAAKtE,UAAL,CAAgB5S,IAAhB,EAAsB,oBAAtB,CAAP;;AAEF,WAAKjI,OAAO,CAACoF,KAAb;AACE,aAAK+Z,IAAL;AACA,eAAO,KAAKtE,UAAL,CAAgB5S,IAAhB,EAAsB,2BAAtB,CAAP;;AAEF,WAAKjI,OAAO,CAAC8E,KAAb;AACE,aAAKqa,IAAL;AACA,eAAO,KAAKtE,UAAL,CAAgB5S,IAAhB,EAAsB,oBAAtB,CAAP;;AAEF,WAAKjI,OAAO,CAACsD,IAAb;AACE,aAAK6b,IAAL;AACA,eAAO,KAAKtE,UAAL,CAAgB5S,IAAhB,EAAsB,sBAAtB,CAAP;;AAEF;AACE,YAAI,KAAKiB,KAAL,CAAWgB,IAAX,CAAgB9K,OAAhB,KAA4B,QAAhC,EAA0C;AACxC,iBAAO,KAAK0hC,mBAAL,EAAP;AACD,SAFD,MAEO,IAAI,KAAK53B,KAAL,CAAWgB,IAAX,CAAgB9K,OAApB,EAA6B;AAClC,gBAAMF,KAAK,GAAG,KAAKgK,KAAL,CAAWgB,IAAX,CAAgBhL,KAA9B;AACA,eAAKigB,IAAL;AACA,iBAAO,MAAMqiB,gBAAN,CAAuBv5B,IAAvB,EAA6B/I,KAA7B,CAAP;AACD;;AA/IL;;AAmJA,UAAM,KAAKqyB,UAAL,EAAN;AACD;;AAEDkQ,EAAAA,oBAAoB,GAAG;AACrB,UAAMlmB,QAAQ,GAAG,KAAKrS,KAAL,CAAWvC,KAA5B;AACA,UAAMuO,QAAQ,GAAG,KAAKhM,KAAL,CAAWgM,QAA5B;AACA,QAAIhL,IAAI,GAAG,KAAK62B,oBAAL,EAAX;AACA,QAAIW,yBAAyB,GAAG,KAAhC;;AAEA,WAAO,CAAC,KAAKv6B,KAAL,CAAWnH,OAAO,CAACQ,QAAnB,KAAgC,KAAK2G,KAAL,CAAWnH,OAAO,CAAC0B,WAAnB,CAAjC,KAAqE,CAAC,KAAKswB,kBAAL,EAA7E,EAAwG;AACtG,YAAM/pB,IAAI,GAAG,KAAK6P,WAAL,CAAiByD,QAAjB,EAA2BrG,QAA3B,CAAb;AACA,YAAM8G,QAAQ,GAAG,KAAKuL,GAAL,CAASvnB,OAAO,CAAC0B,WAAjB,CAAjB;AACAggC,MAAAA,yBAAyB,GAAGA,yBAAyB,IAAI1lB,QAAzD;AACA,WAAKsW,MAAL,CAAYtyB,OAAO,CAACQ,QAApB;;AAEA,UAAI,CAACwb,QAAD,IAAa,KAAK7U,KAAL,CAAWnH,OAAO,CAACW,QAAnB,CAAjB,EAA+C;AAC7CsH,QAAAA,IAAI,CAACumB,WAAL,GAAmBtkB,IAAnB;AACA,aAAKiV,IAAL;AACAjV,QAAAA,IAAI,GAAG,KAAK2Q,UAAL,CAAgB5S,IAAhB,EAAsB,qBAAtB,CAAP;AACD,OAJD,MAIO;AACLA,QAAAA,IAAI,CAAC05B,UAAL,GAAkBz3B,IAAlB;AACAjC,QAAAA,IAAI,CAAC25B,SAAL,GAAiB,KAAKrH,aAAL,EAAjB;AACA,aAAKjI,MAAL,CAAYtyB,OAAO,CAACW,QAApB;;AAEA,YAAI+gC,yBAAJ,EAA+B;AAC7Bz5B,UAAAA,IAAI,CAAC+T,QAAL,GAAgBA,QAAhB;AACA9R,UAAAA,IAAI,GAAG,KAAK2Q,UAAL,CAAgB5S,IAAhB,EAAsB,2BAAtB,CAAP;AACD,SAHD,MAGO;AACLiC,UAAAA,IAAI,GAAG,KAAK2Q,UAAL,CAAgB5S,IAAhB,EAAsB,mBAAtB,CAAP;AACD;AACF;AACF;;AAED,WAAOiC,IAAP;AACD;;AAED23B,EAAAA,mBAAmB,GAAG;AACpB,UAAM55B,IAAI,GAAG,KAAKyS,SAAL,EAAb;;AAEA,QAAI,KAAK6M,GAAL,CAASvnB,OAAO,CAACyB,QAAjB,CAAJ,EAAgC;AAC9BwG,MAAAA,IAAI,CAACwzB,cAAL,GAAsB,KAAKoG,mBAAL,EAAtB;AACA,aAAO,KAAKhnB,UAAL,CAAgB5S,IAAhB,EAAsB,wBAAtB,CAAP;AACD,KAHD,MAGO;AACL,aAAO,KAAKw5B,oBAAL,EAAP;AACD;AACF;;AAEDK,EAAAA,kCAAkC,GAAG;AACnC,UAAMC,KAAK,GAAG,KAAKF,mBAAL,EAAd;;AAEA,QAAI,CAAC,KAAK34B,KAAL,CAAW2b,kBAAZ,IAAkC,KAAK0C,GAAL,CAASvnB,OAAO,CAAC2B,KAAjB,CAAtC,EAA+D;AAC7D,YAAMsG,IAAI,GAAG,KAAK6P,WAAL,CAAiBiqB,KAAK,CAACp7B,KAAvB,EAA8Bo7B,KAAK,CAAC94B,GAAN,CAAUtC,KAAxC,CAAb;AACAsB,MAAAA,IAAI,CAACoC,MAAL,GAAc,CAAC,KAAK+2B,kCAAL,CAAwCW,KAAxC,CAAD,CAAd;AACA95B,MAAAA,IAAI,CAACqzB,IAAL,GAAY,IAAZ;AACArzB,MAAAA,IAAI,CAACszB,IAAL,GAAY,IAAZ;AACAtzB,MAAAA,IAAI,CAACuzB,UAAL,GAAkB,KAAKjB,aAAL,EAAlB;AACAtyB,MAAAA,IAAI,CAAC6R,cAAL,GAAsB,IAAtB;AACA,aAAO,KAAKe,UAAL,CAAgB5S,IAAhB,EAAsB,wBAAtB,CAAP;AACD;;AAED,WAAO85B,KAAP;AACD;;AAEDC,EAAAA,yBAAyB,GAAG;AAC1B,UAAM/5B,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACA,SAAK6M,GAAL,CAASvnB,OAAO,CAACgD,UAAjB;AACA,UAAMkH,IAAI,GAAG,KAAK43B,kCAAL,EAAb;AACA75B,IAAAA,IAAI,CAACmV,KAAL,GAAa,CAAClT,IAAD,CAAb;;AAEA,WAAO,KAAKqd,GAAL,CAASvnB,OAAO,CAACgD,UAAjB,CAAP,EAAqC;AACnCiF,MAAAA,IAAI,CAACmV,KAAL,CAAWjU,IAAX,CAAgB,KAAK24B,kCAAL,EAAhB;AACD;;AAED,WAAO75B,IAAI,CAACmV,KAAL,CAAWvU,MAAX,KAAsB,CAAtB,GAA0BqB,IAA1B,GAAiC,KAAK2Q,UAAL,CAAgB5S,IAAhB,EAAsB,4BAAtB,CAAxC;AACD;;AAEDg6B,EAAAA,kBAAkB,GAAG;AACnB,UAAMh6B,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACA,SAAK6M,GAAL,CAASvnB,OAAO,CAAC8C,SAAjB;AACA,UAAMoH,IAAI,GAAG,KAAK83B,yBAAL,EAAb;AACA/5B,IAAAA,IAAI,CAACmV,KAAL,GAAa,CAAClT,IAAD,CAAb;;AAEA,WAAO,KAAKqd,GAAL,CAASvnB,OAAO,CAAC8C,SAAjB,CAAP,EAAoC;AAClCmF,MAAAA,IAAI,CAACmV,KAAL,CAAWjU,IAAX,CAAgB,KAAK64B,yBAAL,EAAhB;AACD;;AAED,WAAO/5B,IAAI,CAACmV,KAAL,CAAWvU,MAAX,KAAsB,CAAtB,GAA0BqB,IAA1B,GAAiC,KAAK2Q,UAAL,CAAgB5S,IAAhB,EAAsB,qBAAtB,CAAxC;AACD;;AAEDsyB,EAAAA,aAAa,GAAG;AACd,UAAMD,SAAS,GAAG,KAAKpxB,KAAL,CAAW0b,MAA7B;AACA,SAAK1b,KAAL,CAAW0b,MAAX,GAAoB,IAApB;AACA,UAAM1a,IAAI,GAAG,KAAK+3B,kBAAL,EAAb;AACA,SAAK/4B,KAAL,CAAW0b,MAAX,GAAoB0V,SAApB;AACA,WAAOpwB,IAAP;AACD;;AAED80B,EAAAA,oCAAoC,GAAG;AACrC,QAAI,KAAK91B,KAAL,CAAWgB,IAAX,KAAoBlK,OAAO,CAACL,IAA5B,IAAoC,KAAKuJ,KAAL,CAAWzK,KAAX,KAAqB,GAA7D,EAAkE;AAChE,YAAM8c,QAAQ,GAAG,KAAKrS,KAAL,CAAWvC,KAA5B;AACA,YAAMuO,QAAQ,GAAG,KAAKhM,KAAL,CAAWgM,QAA5B;AACA,YAAMjN,IAAI,GAAG,KAAK+yB,eAAL,EAAb;AACA,aAAO,KAAK6F,oBAAL,CAA0BtlB,QAA1B,EAAoCrG,QAApC,EAA8CjN,IAA9C,CAAP;AACD,KALD,MAKO;AACL,aAAO,KAAKsyB,aAAL,EAAP;AACD;AACF;;AAEDqC,EAAAA,uBAAuB,GAAG;AACxB,UAAM30B,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACAzS,IAAAA,IAAI,CAACwzB,cAAL,GAAsB,KAAKrB,wBAAL,EAAtB;AACA,WAAO,KAAKvf,UAAL,CAAgB5S,IAAhB,EAAsB,gBAAtB,CAAP;AACD;;AAEDk0B,EAAAA,kCAAkC,CAAC+F,sBAAD,EAAyB;AACzD,UAAMzD,KAAK,GAAGyD,sBAAsB,GAAG,KAAKlH,eAAL,EAAH,GAA4B,KAAKgC,6BAAL,EAAhE;;AAEA,QAAI,KAAK71B,KAAL,CAAWnH,OAAO,CAACsB,KAAnB,CAAJ,EAA+B;AAC7Bm9B,MAAAA,KAAK,CAAChD,cAAN,GAAuB,KAAKmB,uBAAL,EAAvB;AACA,WAAKjH,gBAAL,CAAsB8I,KAAtB;AACD;;AAED,WAAOA,KAAP;AACD;;AAED0D,EAAAA,mBAAmB,CAACl6B,IAAD,EAAO;AACxBA,IAAAA,IAAI,CAAC8P,UAAL,CAAgB0jB,cAAhB,GAAiCxzB,IAAI,CAACwzB,cAAtC;AACA,SAAK9F,gBAAL,CAAsB1tB,IAAI,CAAC8P,UAA3B,EAAuC9P,IAAI,CAACwzB,cAAL,CAAoB70B,GAA3D,EAAgEqB,IAAI,CAACwzB,cAAL,CAAoBxyB,GAApB,CAAwBrC,GAAxF;AACA,WAAOqB,IAAI,CAAC8P,UAAZ;AACD;;AAEDymB,EAAAA,iBAAiB,GAAG;AAClB,QAAID,QAAQ,GAAG,IAAf;;AAEA,QAAI,KAAKp3B,KAAL,CAAWnH,OAAO,CAACoD,OAAnB,CAAJ,EAAiC;AAC/Bm7B,MAAAA,QAAQ,GAAG,KAAK7jB,SAAL,EAAX;;AAEA,UAAI,KAAKxR,KAAL,CAAWzK,KAAX,KAAqB,GAAzB,EAA8B;AAC5B8/B,QAAAA,QAAQ,CAAC5jB,IAAT,GAAgB,MAAhB;AACD,OAFD,MAEO;AACL4jB,QAAAA,QAAQ,CAAC5jB,IAAT,GAAgB,OAAhB;AACD;;AAED,WAAKwE,IAAL;AACA,WAAKtE,UAAL,CAAgB0jB,QAAhB,EAA0B,UAA1B;AACD;;AAED,WAAOA,QAAP;AACD;;AAEDnkB,EAAAA,iBAAiB,CAACnS,IAAD,EAAOm6B,mBAAP,EAA4B9nB,QAAQ,GAAG,KAAvC,EAA8C;AAC7D,QAAI8nB,mBAAJ,EAAyB;AACvB,aAAO,KAAKC,gCAAL,CAAsCp6B,IAAtC,EAA4C,MAAM,MAAMmS,iBAAN,CAAwBnS,IAAxB,EAA8B,IAA9B,EAAoCqS,QAApC,CAAlD,CAAP;AACD;;AAED,WAAO,MAAMF,iBAAN,CAAwBnS,IAAxB,EAA8B,KAA9B,EAAqCqS,QAArC,CAAP;AACD;;AAEDgoB,EAAAA,0BAA0B,CAACr6B,IAAD,EAAOiC,IAAP,EAAaoQ,QAAQ,GAAG,KAAxB,EAA+B;AACvD,QAAI,KAAKnT,KAAL,CAAWnH,OAAO,CAACsB,KAAnB,CAAJ,EAA+B;AAC7B,YAAM25B,QAAQ,GAAG,KAAKvgB,SAAL,EAAjB;AACA,OAACugB,QAAQ,CAACQ,cAAV,EAA0BxzB,IAAI,CAAC2yB,SAA/B,IAA4C,KAAKD,oCAAL,EAA5C;AACA1yB,MAAAA,IAAI,CAACuzB,UAAL,GAAkBP,QAAQ,CAACQ,cAAT,GAA0B,KAAK5gB,UAAL,CAAgBogB,QAAhB,EAA0B,gBAA1B,CAA1B,GAAwE,IAA1F;AACD;;AAED,UAAMqH,0BAAN,CAAiCr6B,IAAjC,EAAuCiC,IAAvC,EAA6CoQ,QAA7C;AACD;;AAEDioB,EAAAA,cAAc,CAACjlB,OAAD,EAAUklB,QAAV,EAAoB;AAChC,QAAI,KAAKt5B,KAAL,CAAWkV,MAAX,IAAqB,KAAKjX,KAAL,CAAWnH,OAAO,CAACL,IAAnB,CAArB,IAAiD,KAAKuJ,KAAL,CAAWzK,KAAX,KAAqB,WAA1E,EAAuF;AACrF,YAAMipB,SAAS,GAAG,KAAKA,SAAL,EAAlB;;AAEA,UAAIA,SAAS,CAACxd,IAAV,KAAmBlK,OAAO,CAACL,IAA3B,IAAmCqf,SAAS,CAAC0I,SAAS,CAACjpB,KAAX,CAAhD,EAAmE;AACjE,cAAMwJ,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACA,aAAKyE,IAAL;AACA,eAAO,KAAK0e,kBAAL,CAAwB51B,IAAxB,CAAP;AACD;AACF,KARD,MAQO,IAAI,KAAKgyB,gBAAL,MAA2B,KAAKzI,YAAL,CAAkB,MAAlB,CAA/B,EAA0D;AAC/D,YAAMvpB,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACA,WAAKyE,IAAL;AACA,aAAO,KAAKsjB,wBAAL,CAA8Bx6B,IAA9B,CAAP;AACD;;AAED,UAAM4P,IAAI,GAAG,MAAM0qB,cAAN,CAAqBjlB,OAArB,EAA8BklB,QAA9B,CAAb;;AAEA,QAAI,KAAKzI,UAAL,KAAoB3xB,SAApB,IAAiC,CAAC,KAAKuQ,gBAAL,CAAsBd,IAAtB,CAAtC,EAAmE;AACjE,WAAKkiB,UAAL,GAAkB,IAAlB;AACD;;AAED,WAAOliB,IAAP;AACD;;AAED6qB,EAAAA,wBAAwB,CAACz6B,IAAD,EAAO06B,IAAP,EAAa;AACnC,QAAIA,IAAI,CAACz4B,IAAL,KAAc,YAAlB,EAAgC;AAC9B,UAAIy4B,IAAI,CAAChjC,IAAL,KAAc,SAAlB,EAA6B;AAC3B,YAAI,KAAKwH,KAAL,CAAWnH,OAAO,CAACgF,MAAnB,KAA8B,KAAKmC,KAAL,CAAWnH,OAAO,CAACL,IAAnB,CAA9B,IAA0D,KAAKwH,KAAL,CAAWnH,OAAO,CAACmE,SAAnB,CAA1D,IAA2F,KAAKgD,KAAL,CAAWnH,OAAO,CAACyE,IAAnB,CAA3F,IAAuH,KAAK0C,KAAL,CAAWnH,OAAO,CAACkF,OAAnB,CAA3H,EAAwJ;AACtJ,iBAAO,KAAKw2B,gBAAL,CAAsBzzB,IAAtB,CAAP;AACD;AACF,OAJD,MAIO,IAAI,KAAKd,KAAL,CAAWnH,OAAO,CAACL,IAAnB,CAAJ,EAA8B;AACnC,YAAIgjC,IAAI,CAAChjC,IAAL,KAAc,WAAlB,EAA+B;AAC7B,iBAAO,KAAKk+B,kBAAL,CAAwB51B,IAAxB,CAAP;AACD,SAFD,MAEO,IAAI06B,IAAI,CAAChjC,IAAL,KAAc,MAAlB,EAA0B;AAC/B,iBAAO,KAAKk9B,kBAAL,CAAwB50B,IAAxB,CAAP;AACD,SAFM,MAEA,IAAI06B,IAAI,CAAChjC,IAAL,KAAc,QAAlB,EAA4B;AACjC,iBAAO,KAAKm9B,mBAAL,CAAyB70B,IAAzB,EAA+B,KAA/B,CAAP;AACD;AACF;AACF;;AAED,WAAO,MAAMy6B,wBAAN,CAA+Bz6B,IAA/B,EAAqC06B,IAArC,CAAP;AACD;;AAEDC,EAAAA,4BAA4B,GAAG;AAC7B,WAAO,KAAKpR,YAAL,CAAkB,MAAlB,KAA6B,KAAKA,YAAL,CAAkB,WAAlB,CAA7B,IAA+D,KAAKA,YAAL,CAAkB,QAAlB,CAA/D,IAA8F,KAAKyI,gBAAL,MAA2B,KAAKzI,YAAL,CAAkB,MAAlB,CAAzH,IAAsJ,MAAMoR,4BAAN,EAA7J;AACD;;AAEDC,EAAAA,wBAAwB,GAAG;AACzB,QAAI,KAAK17B,KAAL,CAAWnH,OAAO,CAACL,IAAnB,MAA6B,KAAKuJ,KAAL,CAAWzK,KAAX,KAAqB,MAArB,IAA+B,KAAKyK,KAAL,CAAWzK,KAAX,KAAqB,WAApD,IAAmE,KAAKyK,KAAL,CAAWzK,KAAX,KAAqB,QAAxF,IAAoG,KAAKw7B,gBAAL,MAA2B,KAAK/wB,KAAL,CAAWzK,KAAX,KAAqB,MAAjL,CAAJ,EAA8L;AAC5L,aAAO,KAAP;AACD;;AAED,WAAO,MAAMokC,wBAAN,EAAP;AACD;;AAEDC,EAAAA,4BAA4B,GAAG;AAC7B,QAAI,KAAK7I,gBAAL,MAA2B,KAAKzI,YAAL,CAAkB,MAAlB,CAA/B,EAA0D;AACxD,YAAMvpB,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACA,WAAKyE,IAAL;AACA,aAAO,KAAKsjB,wBAAL,CAA8Bx6B,IAA9B,CAAP;AACD;;AAED,WAAO,MAAM66B,4BAAN,EAAP;AACD;;AAEDC,EAAAA,gBAAgB,CAACJ,IAAD,EAAOpnB,QAAP,EAAiBrG,QAAjB,EAA2BsG,mBAA3B,EAAgD;AAC9D,QAAI,CAAC,KAAKrU,KAAL,CAAWnH,OAAO,CAACyB,QAAnB,CAAL,EAAmC,OAAOkhC,IAAP;;AAEnC,QAAI,KAAKz5B,KAAL,CAAWyb,sBAAf,EAAuC;AACrC,YAAMiN,MAAM,GAAG,KAAK7J,iBAAL,EAAf;;AAEA,UAAI6J,MAAM,KAAK,EAAX,IAAiBA,MAAM,KAAK,EAA5B,IAAkCA,MAAM,KAAK,EAA7C,IAAmDA,MAAM,KAAK,EAAlE,EAAsE;AACpE,aAAKoR,0BAAL,CAAgCxnB,mBAAhC;AACA,eAAOmnB,IAAP;AACD;AACF;;AAED,SAAKrQ,MAAL,CAAYtyB,OAAO,CAACyB,QAApB;AACA,UAAMyH,KAAK,GAAG,KAAKA,KAAL,CAAWgd,KAAX,EAAd;AACA,UAAM+c,iBAAiB,GAAG,KAAK/5B,KAAL,CAAWub,SAArC;AACA,UAAMxc,IAAI,GAAG,KAAK6P,WAAL,CAAiByD,QAAjB,EAA2BrG,QAA3B,CAAb;AACA,QAAI;AACFguB,MAAAA,UADE;AAEFC,MAAAA;AAFE,QAGA,KAAKC,6BAAL,EAHJ;AAIA,QAAI,CAACC,KAAD,EAAQ7X,OAAR,IAAmB,KAAK8X,uBAAL,CAA6BJ,UAA7B,CAAvB;;AAEA,QAAIC,MAAM,IAAI3X,OAAO,CAAC3iB,MAAR,GAAiB,CAA/B,EAAkC;AAChC,YAAM4b,SAAS,GAAG,CAAC,GAAGwe,iBAAJ,CAAlB;;AAEA,UAAIzX,OAAO,CAAC3iB,MAAR,GAAiB,CAArB,EAAwB;AACtB,aAAKK,KAAL,GAAaA,KAAb;AACA,aAAKA,KAAL,CAAWub,SAAX,GAAuBA,SAAvB;;AAEA,aAAK,IAAI7b,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4iB,OAAO,CAAC3iB,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC6b,UAAAA,SAAS,CAACtb,IAAV,CAAeqiB,OAAO,CAAC5iB,CAAD,CAAP,CAAWjC,KAA1B;AACD;;AAED,SAAC;AACCu8B,UAAAA,UADD;AAECC,UAAAA;AAFD,YAGG,KAAKC,6BAAL,EAHJ;AAIA,SAACC,KAAD,EAAQ7X,OAAR,IAAmB,KAAK8X,uBAAL,CAA6BJ,UAA7B,CAAnB;AACD;;AAED,UAAIC,MAAM,IAAIE,KAAK,CAACx6B,MAAN,GAAe,CAA7B,EAAgC;AAC9B,aAAK2M,KAAL,CAAWtM,KAAK,CAACvC,KAAjB,EAAwBovB,UAAU,CAACC,yBAAnC;AACD;;AAED,UAAImN,MAAM,IAAIE,KAAK,CAACx6B,MAAN,KAAiB,CAA/B,EAAkC;AAChC,aAAKK,KAAL,GAAaA,KAAb;AACA,aAAKA,KAAL,CAAWub,SAAX,GAAuBA,SAAS,CAAClL,MAAV,CAAiB8pB,KAAK,CAAC,CAAD,CAAL,CAAS18B,KAA1B,CAAvB;AACA,SAAC;AACCu8B,UAAAA,UADD;AAECC,UAAAA;AAFD,YAGG,KAAKC,6BAAL,EAHJ;AAID;AACF;;AAED,SAAKE,uBAAL,CAA6BJ,UAA7B,EAAyC,IAAzC;AACA,SAAKh6B,KAAL,CAAWub,SAAX,GAAuBwe,iBAAvB;AACA,SAAK3Q,MAAL,CAAYtyB,OAAO,CAACsB,KAApB;AACA2G,IAAAA,IAAI,CAAC+V,IAAL,GAAY2kB,IAAZ;AACA16B,IAAAA,IAAI,CAACi7B,UAAL,GAAkBA,UAAlB;AACAj7B,IAAAA,IAAI,CAACs7B,SAAL,GAAiB,KAAKlB,gCAAL,CAAsCp6B,IAAtC,EAA4C,MAAM,KAAKu7B,gBAAL,CAAsBp7B,SAAtB,EAAiCA,SAAjC,CAAlD,CAAjB;AACA,WAAO,KAAKyS,UAAL,CAAgB5S,IAAhB,EAAsB,uBAAtB,CAAP;AACD;;AAEDm7B,EAAAA,6BAA6B,GAAG;AAC9B,SAAKl6B,KAAL,CAAWwb,yBAAX,CAAqCvb,IAArC,CAA0C,KAAKD,KAAL,CAAWvC,KAArD;AACA,UAAMu8B,UAAU,GAAG,KAAKO,uBAAL,EAAnB;AACA,UAAMN,MAAM,GAAG,CAAC,KAAKh8B,KAAL,CAAWnH,OAAO,CAACsB,KAAnB,CAAhB;AACA,SAAK4H,KAAL,CAAWwb,yBAAX,CAAqCnH,GAArC;AACA,WAAO;AACL2lB,MAAAA,UADK;AAELC,MAAAA;AAFK,KAAP;AAID;;AAEDG,EAAAA,uBAAuB,CAACr7B,IAAD,EAAOy7B,eAAP,EAAwB;AAC7C,UAAMtV,KAAK,GAAG,CAACnmB,IAAD,CAAd;AACA,UAAM07B,MAAM,GAAG,EAAf;;AAEA,WAAOvV,KAAK,CAACvlB,MAAN,KAAiB,CAAxB,EAA2B;AACzB,YAAMZ,IAAI,GAAGmmB,KAAK,CAAC7Q,GAAN,EAAb;;AAEA,UAAItV,IAAI,CAACiC,IAAL,KAAc,yBAAlB,EAA6C;AAC3C,YAAIjC,IAAI,CAAC6R,cAAL,IAAuB,CAAC7R,IAAI,CAACuzB,UAAjC,EAA6C;AAC3C,eAAKoI,qBAAL,CAA2B37B,IAA3B;AACD,SAFD,MAEO;AACL07B,UAAAA,MAAM,CAACx6B,IAAP,CAAYlB,IAAZ;AACD;;AAEDmmB,QAAAA,KAAK,CAACjlB,IAAN,CAAWlB,IAAI,CAACqR,IAAhB;AACD,OARD,MAQO,IAAIrR,IAAI,CAACiC,IAAL,KAAc,uBAAlB,EAA2C;AAChDkkB,QAAAA,KAAK,CAACjlB,IAAN,CAAWlB,IAAI,CAACi7B,UAAhB;AACA9U,QAAAA,KAAK,CAACjlB,IAAN,CAAWlB,IAAI,CAACs7B,SAAhB;AACD;AACF;;AAED,QAAIG,eAAJ,EAAqB;AACnBC,MAAAA,MAAM,CAAC9uB,OAAP,CAAe5M,IAAI,IAAI,KAAK27B,qBAAL,CAA2B37B,IAA3B,CAAvB;AACA,aAAO,CAAC07B,MAAD,EAAS,EAAT,CAAP;AACD;;AAED,WAAOlK,SAAS,CAACkK,MAAD,EAAS17B,IAAI,IAAIA,IAAI,CAACoC,MAAL,CAAYw5B,KAAZ,CAAkB9B,KAAK,IAAI,KAAKtmB,YAAL,CAAkBsmB,KAAlB,EAAyB,IAAzB,CAA3B,CAAjB,CAAhB;AACD;;AAED6B,EAAAA,qBAAqB,CAAC37B,IAAD,EAAO;AAC1B,QAAI67B,WAAJ;;AAEA,SAAKC,gBAAL,CAAsB97B,IAAI,CAACoC,MAA3B,EAAmC,CAACy5B,WAAW,GAAG77B,IAAI,CAAC+P,KAApB,KAA8B,IAA9B,GAAqC,KAAK,CAA1C,GAA8C8rB,WAAW,CAACE,aAA7F,EAA4G,KAA5G;AACA,SAAKxgB,KAAL,CAAWF,KAAX,CAAiB9D,cAAc,GAAGC,WAAlC;AACA,UAAMwkB,WAAN,CAAkBh8B,IAAlB,EAAwB,KAAxB,EAA+B,IAA/B;AACA,SAAKub,KAAL,CAAWD,IAAX;AACD;;AAED8e,EAAAA,gCAAgC,CAACp6B,IAAD,EAAOi8B,KAAP,EAAc;AAC5C,QAAIC,MAAJ;;AAEA,QAAI,KAAKj7B,KAAL,CAAWwb,yBAAX,CAAqCgE,OAArC,CAA6CzgB,IAAI,CAACtB,KAAlD,MAA6D,CAAC,CAAlE,EAAqE;AACnE,WAAKuC,KAAL,CAAWwb,yBAAX,CAAqCvb,IAArC,CAA0C,KAAKD,KAAL,CAAWvC,KAArD;AACAw9B,MAAAA,MAAM,GAAGD,KAAK,EAAd;AACA,WAAKh7B,KAAL,CAAWwb,yBAAX,CAAqCnH,GAArC;AACD,KAJD,MAIO;AACL4mB,MAAAA,MAAM,GAAGD,KAAK,EAAd;AACD;;AAED,WAAOC,MAAP;AACD;;AAEDC,EAAAA,cAAc,CAACn8B,IAAD,EAAOsT,QAAP,EAAiBrG,QAAjB,EAA2B;AACvCjN,IAAAA,IAAI,GAAG,MAAMm8B,cAAN,CAAqBn8B,IAArB,EAA2BsT,QAA3B,EAAqCrG,QAArC,CAAP;;AAEA,QAAI,KAAKqS,GAAL,CAASvnB,OAAO,CAACyB,QAAjB,CAAJ,EAAgC;AAC9BwG,MAAAA,IAAI,CAAC+T,QAAL,GAAgB,IAAhB;AACA,WAAK2Z,gBAAL,CAAsB1tB,IAAtB;AACD;;AAED,QAAI,KAAKd,KAAL,CAAWnH,OAAO,CAACsB,KAAnB,CAAJ,EAA+B;AAC7B,YAAM+iC,YAAY,GAAG,KAAKvsB,WAAL,CAAiByD,QAAjB,EAA2BrG,QAA3B,CAArB;AACAmvB,MAAAA,YAAY,CAACtsB,UAAb,GAA0B9P,IAA1B;AACAo8B,MAAAA,YAAY,CAAC5I,cAAb,GAA8B,KAAKmB,uBAAL,EAA9B;AACA,aAAO,KAAK/hB,UAAL,CAAgBwpB,YAAhB,EAA8B,oBAA9B,CAAP;AACD;;AAED,WAAOp8B,IAAP;AACD;;AAEDq8B,EAAAA,uBAAuB,CAACr8B,IAAD,EAAO;AAC5B,QAAIA,IAAI,CAACiC,IAAL,KAAc,mBAAd,KAAsCjC,IAAI,CAACkxB,UAAL,KAAoB,MAApB,IAA8BlxB,IAAI,CAACkxB,UAAL,KAAoB,QAAxF,KAAqGlxB,IAAI,CAACiC,IAAL,KAAc,wBAAd,IAA0CjC,IAAI,CAAC00B,UAAL,KAAoB,MAAnK,IAA6K10B,IAAI,CAACiC,IAAL,KAAc,sBAAd,IAAwCjC,IAAI,CAAC00B,UAAL,KAAoB,MAA7O,EAAqP;AACnP;AACD;;AAED,UAAM2H,uBAAN,CAA8Br8B,IAA9B;AACD;;AAEDoU,EAAAA,WAAW,CAACpU,IAAD,EAAO;AAChB,UAAMs8B,IAAI,GAAG,MAAMloB,WAAN,CAAkBpU,IAAlB,CAAb;;AAEA,QAAIs8B,IAAI,CAACr6B,IAAL,KAAc,wBAAd,IAA0Cq6B,IAAI,CAACr6B,IAAL,KAAc,sBAA5D,EAAoF;AAClFq6B,MAAAA,IAAI,CAAC5H,UAAL,GAAkB4H,IAAI,CAAC5H,UAAL,IAAmB,OAArC;AACD;;AAED,WAAO4H,IAAP;AACD;;AAEDC,EAAAA,sBAAsB,CAACv8B,IAAD,EAAO;AAC3B,QAAI,KAAKupB,YAAL,CAAkB,MAAlB,CAAJ,EAA+B;AAC7BvpB,MAAAA,IAAI,CAAC00B,UAAL,GAAkB,MAAlB;AACA,YAAM8H,eAAe,GAAG,KAAK/pB,SAAL,EAAxB;AACA,WAAKyE,IAAL;;AAEA,UAAI,KAAKhY,KAAL,CAAWnH,OAAO,CAACa,MAAnB,CAAJ,EAAgC;AAC9BoH,QAAAA,IAAI,CAACqC,UAAL,GAAkB,KAAKo6B,qBAAL,EAAlB;AACA,aAAKC,eAAL,CAAqB18B,IAArB;AACA,eAAO,IAAP;AACD,OAJD,MAIO;AACL,eAAO,KAAK40B,kBAAL,CAAwB4H,eAAxB,CAAP;AACD;AACF,KAZD,MAYO,IAAI,KAAKjT,YAAL,CAAkB,QAAlB,CAAJ,EAAiC;AACtCvpB,MAAAA,IAAI,CAAC00B,UAAL,GAAkB,MAAlB;AACA,YAAM8H,eAAe,GAAG,KAAK/pB,SAAL,EAAxB;AACA,WAAKyE,IAAL;AACA,aAAO,KAAK2d,mBAAL,CAAyB2H,eAAzB,EAA0C,KAA1C,CAAP;AACD,KALM,MAKA,IAAI,KAAKjT,YAAL,CAAkB,WAAlB,CAAJ,EAAoC;AACzCvpB,MAAAA,IAAI,CAAC00B,UAAL,GAAkB,MAAlB;AACA,YAAM8H,eAAe,GAAG,KAAK/pB,SAAL,EAAxB;AACA,WAAKyE,IAAL;AACA,aAAO,KAAK0e,kBAAL,CAAwB4G,eAAxB,CAAP;AACD,KALM,MAKA,IAAI,KAAKxK,gBAAL,MAA2B,KAAKzI,YAAL,CAAkB,MAAlB,CAA/B,EAA0D;AAC/DvpB,MAAAA,IAAI,CAAC00B,UAAL,GAAkB,OAAlB;AACA,YAAM8H,eAAe,GAAG,KAAK/pB,SAAL,EAAxB;AACA,WAAKyE,IAAL;AACA,aAAO,KAAKsjB,wBAAL,CAA8BgC,eAA9B,CAAP;AACD,KALM,MAKA;AACL,aAAO,MAAMD,sBAAN,CAA6Bv8B,IAA7B,CAAP;AACD;AACF;;AAED28B,EAAAA,aAAa,CAAC38B,IAAD,EAAO;AAClB,QAAI,MAAM28B,aAAN,CAAoB,GAAGx6B,SAAvB,CAAJ,EAAuC,OAAO,IAAP;;AAEvC,QAAI,KAAKonB,YAAL,CAAkB,MAAlB,KAA6B,KAAK9J,SAAL,GAAiBxd,IAAjB,KAA0BlK,OAAO,CAACsD,IAAnE,EAAyE;AACvE2E,MAAAA,IAAI,CAAC00B,UAAL,GAAkB,MAAlB;AACA,WAAKxd,IAAL;AACA,WAAKA,IAAL;AACA,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD;;AAED0lB,EAAAA,kCAAkC,CAAC58B,IAAD,EAAO;AACvC,UAAMgN,GAAG,GAAG,KAAK/L,KAAL,CAAWvC,KAAvB;AACA,UAAMm+B,YAAY,GAAG,MAAMD,kCAAN,CAAyC58B,IAAzC,CAArB;;AAEA,QAAI68B,YAAY,IAAI78B,IAAI,CAAC00B,UAAL,KAAoB,MAAxC,EAAgD;AAC9C,WAAKpL,UAAL,CAAgBtc,GAAhB;AACD;;AAED,WAAO6vB,YAAP;AACD;;AAEDC,EAAAA,YAAY,CAAC98B,IAAD,EAAO+8B,WAAP,EAAoBC,UAApB,EAAgC;AAC1C,UAAMF,YAAN,CAAmB98B,IAAnB,EAAyB+8B,WAAzB,EAAsCC,UAAtC;;AAEA,QAAI,KAAK7T,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BnpB,MAAAA,IAAI,CAAC6R,cAAL,GAAsB,KAAKqhB,iCAAL,EAAtB;AACD;AACF;;AAED+J,EAAAA,gBAAgB,CAACzrB,SAAD,EAAY0rB,MAAZ,EAAoBj8B,KAApB,EAA2B;AACzC,UAAM+L,GAAG,GAAG,KAAK/L,KAAL,CAAWvC,KAAvB;;AAEA,QAAI,KAAK6qB,YAAL,CAAkB,SAAlB,CAAJ,EAAkC;AAChC,UAAI,KAAK4T,4BAAL,CAAkC3rB,SAAlC,EAA6C0rB,MAA7C,CAAJ,EAA0D;AACxD;AACD;;AAEDA,MAAAA,MAAM,CAACjH,OAAP,GAAiB,IAAjB;AACD;;AAED,UAAMgH,gBAAN,CAAuBzrB,SAAvB,EAAkC0rB,MAAlC,EAA0Cj8B,KAA1C;;AAEA,QAAIi8B,MAAM,CAACjH,OAAX,EAAoB;AAClB,UAAIiH,MAAM,CAACj7B,IAAP,KAAgB,eAAhB,IAAmCi7B,MAAM,CAACj7B,IAAP,KAAgB,sBAAnD,IAA6Ei7B,MAAM,CAACj7B,IAAP,KAAgB,oBAAjG,EAAuH;AACrH,aAAKsL,KAAL,CAAWP,GAAX,EAAgB8gB,UAAU,CAACI,mBAA3B;AACD,OAFD,MAEO,IAAIgP,MAAM,CAAC1mC,KAAX,EAAkB;AACvB,aAAK+W,KAAL,CAAW2vB,MAAM,CAAC1mC,KAAP,CAAakI,KAAxB,EAA+BovB,UAAU,CAACK,4BAA1C;AACD;AACF;AACF;;AAEDiP,EAAAA,UAAU,CAAC1mB,IAAD,EAAO;AACf,WAAOA,IAAI,KAAK,UAAT,IAAuBA,IAAI,KAAK,eAAvC;AACD;;AAED2mB,EAAAA,YAAY,GAAG;AACb,UAAM3mB,IAAI,GAAG,MAAM4K,SAAN,EAAb;AACA,UAAMgc,QAAQ,GAAG,OAAO5mB,IAAxB;;AAEA,QAAI,CAAC,KAAK0mB,UAAL,CAAgB1mB,IAAhB,CAAD,IAA0B,CAAC,KAAKzV,KAAL,CAAW0b,MAA1C,EAAkD;AAChD,WAAKpP,KAAL,CAAW,KAAKtM,KAAL,CAAW+L,GAAtB,EAA2BpK,aAAa,CAACsD,iBAAzC,EAA4Do3B,QAA5D;AACD;;AAED,SAAKjd,WAAL,CAAiBtoB,OAAO,CAACL,IAAzB,EAA+B4lC,QAA/B;AACD;;AAED/c,EAAAA,gBAAgB,CAACviB,IAAD,EAAO;AACrB,UAAMkZ,IAAI,GAAG,KAAKnY,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAX,GAAiB,CAAvC,CAAb;;AAEA,QAAIhP,IAAI,KAAK,GAAT,IAAgBkZ,IAAI,KAAK,GAA7B,EAAkC;AAChC,aAAO,KAAKqK,QAAL,CAAcxpB,OAAO,CAACc,SAAtB,EAAiC,CAAjC,CAAP;AACD,KAFD,MAEO,IAAI,KAAKoI,KAAL,CAAW0b,MAAX,KAAsB3e,IAAI,KAAK,EAAT,IAAeA,IAAI,KAAK,EAA9C,CAAJ,EAAuD;AAC5D,aAAO,KAAKujB,QAAL,CAAcxpB,OAAO,CAACkD,UAAtB,EAAkC,CAAlC,CAAP;AACD,KAFM,MAEA,IAAI,KAAKgG,KAAL,CAAW0b,MAAX,IAAqB3e,IAAI,KAAK,EAAlC,EAAsC;AAC3C,UAAIkZ,IAAI,KAAK,EAAb,EAAiB;AACf,eAAO,KAAKqK,QAAL,CAAcxpB,OAAO,CAAC0B,WAAtB,EAAmC,CAAnC,CAAP;AACD;;AAED,aAAO,KAAK8nB,QAAL,CAAcxpB,OAAO,CAACyB,QAAtB,EAAgC,CAAhC,CAAP;AACD,KANM,MAMA,IAAIwd,eAAe,CAAChZ,IAAD,EAAOkZ,IAAP,CAAnB,EAAiC;AACtC,WAAKjW,KAAL,CAAW+L,GAAX,IAAkB,CAAlB;AACA,aAAO,KAAKqwB,YAAL,EAAP;AACD,KAHM,MAGA;AACL,aAAO,MAAM9c,gBAAN,CAAuBviB,IAAvB,CAAP;AACD;AACF;;AAEDwV,EAAAA,YAAY,CAACxT,IAAD,EAAOyT,SAAP,EAAkB;AAC5B,QAAIzT,IAAI,CAACiC,IAAL,KAAc,oBAAlB,EAAwC;AACtC,aAAO,KAAKuR,YAAL,CAAkBxT,IAAI,CAAC8P,UAAvB,EAAmC2D,SAAnC,CAAP;AACD,KAFD,MAEO;AACL,aAAO,MAAMD,YAAN,CAAmBxT,IAAnB,EAAyByT,SAAzB,CAAP;AACD;AACF;;AAEDC,EAAAA,YAAY,CAAC1T,IAAD,EAAO2T,KAAK,GAAG,KAAf,EAAsB;AAChC,QAAI3T,IAAI,CAACiC,IAAL,KAAc,oBAAlB,EAAwC;AACtC,aAAO,MAAMyR,YAAN,CAAmB,KAAKwmB,mBAAL,CAAyBl6B,IAAzB,CAAnB,EAAmD2T,KAAnD,CAAP;AACD,KAFD,MAEO;AACL,aAAO,MAAMD,YAAN,CAAmB1T,IAAnB,EAAyB2T,KAAzB,CAAP;AACD;AACF;;AAEDmoB,EAAAA,gBAAgB,CAACyB,QAAD,EAAWC,gBAAX,EAA6B7pB,KAA7B,EAAoC;AAClD,SAAK,IAAIhT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG48B,QAAQ,CAAC38B,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,YAAM+5B,IAAI,GAAG6C,QAAQ,CAAC58B,CAAD,CAArB;;AAEA,UAAI,CAAC+5B,IAAI,IAAI,IAAR,GAAe,KAAK,CAApB,GAAwBA,IAAI,CAACz4B,IAA9B,MAAwC,oBAA5C,EAAkE;AAChEs7B,QAAAA,QAAQ,CAAC58B,CAAD,CAAR,GAAc,KAAKu5B,mBAAL,CAAyBQ,IAAzB,CAAd;AACD;AACF;;AAED,WAAO,MAAMoB,gBAAN,CAAuByB,QAAvB,EAAiCC,gBAAjC,EAAmD7pB,KAAnD,CAAP;AACD;;AAED8pB,EAAAA,gBAAgB,CAACF,QAAD,EAAWG,mBAAX,EAAgC;AAC9C,SAAK,IAAI/8B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG48B,QAAQ,CAAC38B,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,UAAIg9B,WAAJ;;AAEA,YAAMjD,IAAI,GAAG6C,QAAQ,CAAC58B,CAAD,CAArB;;AAEA,UAAI+5B,IAAI,IAAIA,IAAI,CAACz4B,IAAL,KAAc,oBAAtB,IAA8C,EAAE,CAAC07B,WAAW,GAAGjD,IAAI,CAAC3qB,KAApB,KAA8B,IAA9B,IAAsC4tB,WAAW,CAAC/sB,aAApD,CAA9C,KAAqH2sB,QAAQ,CAAC38B,MAAT,GAAkB,CAAlB,IAAuB,CAAC88B,mBAA7I,CAAJ,EAAuK;AACrK,aAAKnwB,KAAL,CAAWmtB,IAAI,CAAClH,cAAL,CAAoB90B,KAA/B,EAAsCovB,UAAU,CAACoC,iBAAjD;AACD;AACF;;AAED,WAAOqN,QAAP;AACD;;AAEDK,EAAAA,cAAc,CAACC,KAAD,EAAQC,YAAR,EAAsBC,OAAtB,EAA+BxqB,mBAA/B,EAAoD;AAChE,UAAMvT,IAAI,GAAG,MAAM49B,cAAN,CAAqBC,KAArB,EAA4BC,YAA5B,EAA0CC,OAA1C,EAAmDxqB,mBAAnD,CAAb;;AAEA,QAAIuqB,YAAY,IAAI,CAAC,KAAK78B,KAAL,CAAWyb,sBAAhC,EAAwD;AACtD,WAAK+gB,gBAAL,CAAsBz9B,IAAI,CAACQ,QAA3B;AACD;;AAED,WAAOR,IAAP;AACD;;AAEDg+B,EAAAA,SAAS,CAACtD,IAAD,EAAO,GAAG1pB,IAAV,EAAgB;AACvB,QAAI0pB,IAAI,CAACz4B,IAAL,KAAc,oBAAlB,EAAwC;AACtC,aAAO,MAAM+7B,SAAN,CAAgBtD,IAAhB,EAAsB,GAAG1pB,IAAzB,CAAP;AACD;AACF;;AAED6B,EAAAA,kBAAkB,CAAC7S,IAAD,EAAO;AACvB,QAAI,KAAKd,KAAL,CAAWnH,OAAO,CAACsB,KAAnB,CAAJ,EAA+B;AAC7B2G,MAAAA,IAAI,CAACwzB,cAAL,GAAsB,KAAKmB,uBAAL,EAAtB;AACD;;AAED,WAAO,MAAM9hB,kBAAN,CAAyB7S,IAAzB,CAAP;AACD;;AAED+S,EAAAA,yBAAyB,CAAC/S,IAAD,EAAO;AAC9B,QAAI,KAAKd,KAAL,CAAWnH,OAAO,CAACsB,KAAnB,CAAJ,EAA+B;AAC7B2G,MAAAA,IAAI,CAACwzB,cAAL,GAAsB,KAAKmB,uBAAL,EAAtB;AACD;;AAED,WAAO,MAAM5hB,yBAAN,CAAgC/S,IAAhC,CAAP;AACD;;AAEDi+B,EAAAA,aAAa,GAAG;AACd,WAAO,KAAK9U,YAAL,CAAkB,GAAlB,KAA0B,MAAM8U,aAAN,EAAjC;AACD;;AAEDC,EAAAA,eAAe,GAAG;AAChB,WAAO,KAAKh/B,KAAL,CAAWnH,OAAO,CAACsB,KAAnB,KAA6B,MAAM6kC,eAAN,EAApC;AACD;;AAEDC,EAAAA,sBAAsB,CAAC1tB,MAAD,EAAS;AAC7B,WAAO,CAAC,KAAKvR,KAAL,CAAWnH,OAAO,CAACsB,KAAnB,CAAD,IAA8B,MAAM8kC,sBAAN,CAA6B1tB,MAA7B,CAArC;AACD;;AAEDc,EAAAA,eAAe,CAACC,SAAD,EAAYf,MAAZ,EAAoBgB,WAApB,EAAiCpB,OAAjC,EAA0CqB,aAA1C,EAAyDC,iBAAzD,EAA4E;AACzF,QAAIlB,MAAM,CAAC6lB,QAAX,EAAqB;AACnB,WAAKhN,UAAL,CAAgB7Y,MAAM,CAAC6lB,QAAP,CAAgB53B,KAAhC;AACD;;AAED,WAAO+R,MAAM,CAAC6lB,QAAd;;AAEA,QAAI,KAAKnN,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1B1Y,MAAAA,MAAM,CAACoB,cAAP,GAAwB,KAAKqhB,iCAAL,EAAxB;AACD;;AAED,UAAM3hB,eAAN,CAAsBC,SAAtB,EAAiCf,MAAjC,EAAyCgB,WAAzC,EAAsDpB,OAAtD,EAA+DqB,aAA/D,EAA8EC,iBAA9E;;AAEA,QAAIlB,MAAM,CAACrO,MAAP,IAAiBsP,aAArB,EAAoC;AAClC,YAAMtP,MAAM,GAAGqO,MAAM,CAACrO,MAAtB;;AAEA,UAAIA,MAAM,CAACxB,MAAP,GAAgB,CAAhB,IAAqB,KAAKw9B,WAAL,CAAiBh8B,MAAM,CAAC,CAAD,CAAvB,CAAzB,EAAsD;AACpD,aAAKmL,KAAL,CAAWkD,MAAM,CAAC/R,KAAlB,EAAyBovB,UAAU,CAAC+B,4BAApC;AACD;AACF,KAND,MAMO,IAAIpf,MAAM,CAACxO,IAAP,KAAgB,kBAAhB,IAAsCyP,aAAtC,IAAuDjB,MAAM,CAACja,KAAP,CAAa4L,MAAxE,EAAgF;AACrF,YAAMA,MAAM,GAAGqO,MAAM,CAACja,KAAP,CAAa4L,MAA5B;;AAEA,UAAIA,MAAM,CAACxB,MAAP,GAAgB,CAAhB,IAAqB,KAAKw9B,WAAL,CAAiBh8B,MAAM,CAAC,CAAD,CAAvB,CAAzB,EAAsD;AACpD,aAAKmL,KAAL,CAAWkD,MAAM,CAAC/R,KAAlB,EAAyBovB,UAAU,CAAC+B,4BAApC;AACD;AACF;AACF;;AAEDwO,EAAAA,sBAAsB,CAAC7sB,SAAD,EAAYf,MAAZ,EAAoBgB,WAApB,EAAiCpB,OAAjC,EAA0C;AAC9D,QAAII,MAAM,CAAC6lB,QAAX,EAAqB;AACnB,WAAKhN,UAAL,CAAgB7Y,MAAM,CAAC6lB,QAAP,CAAgB53B,KAAhC;AACD;;AAED,WAAO+R,MAAM,CAAC6lB,QAAd;;AAEA,QAAI,KAAKnN,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1B1Y,MAAAA,MAAM,CAACoB,cAAP,GAAwB,KAAKqhB,iCAAL,EAAxB;AACD;;AAED,UAAMmL,sBAAN,CAA6B7sB,SAA7B,EAAwCf,MAAxC,EAAgDgB,WAAhD,EAA6DpB,OAA7D;AACD;;AAEDiuB,EAAAA,eAAe,CAACt+B,IAAD,EAAO;AACpB,UAAMs+B,eAAN,CAAsBt+B,IAAtB;;AAEA,QAAIA,IAAI,CAACuO,UAAL,IAAmB,KAAK4a,YAAL,CAAkB,GAAlB,CAAvB,EAA+C;AAC7CnpB,MAAAA,IAAI,CAACu+B,mBAAL,GAA2B,KAAK5I,mCAAL,EAA3B;AACD;;AAED,QAAI,KAAKpM,YAAL,CAAkB,YAAlB,CAAJ,EAAqC;AACnC,WAAKrS,IAAL;AACA,YAAMsnB,WAAW,GAAGx+B,IAAI,CAACi1B,UAAL,GAAkB,EAAtC;;AAEA,SAAG;AACD,cAAMj1B,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACAzS,QAAAA,IAAI,CAACiS,EAAL,GAAU,KAAK8iB,6BAAL,CAAmC,IAAnC,CAAV;;AAEA,YAAI,KAAK5L,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BnpB,UAAAA,IAAI,CAAC6R,cAAL,GAAsB,KAAK8jB,mCAAL,EAAtB;AACD,SAFD,MAEO;AACL31B,UAAAA,IAAI,CAAC6R,cAAL,GAAsB,IAAtB;AACD;;AAED2sB,QAAAA,WAAW,CAACt9B,IAAZ,CAAiB,KAAK0R,UAAL,CAAgB5S,IAAhB,EAAsB,iBAAtB,CAAjB;AACD,OAXD,QAWS,KAAKsf,GAAL,CAASvnB,OAAO,CAACoB,KAAjB,CAXT;AAYD;AACF;;AAEDslC,EAAAA,uBAAuB,CAAChuB,MAAD,EAAS;AAC9B,UAAMguB,uBAAN,CAA8BhuB,MAA9B;AACA,UAAMrO,MAAM,GAAG,KAAKoO,4BAAL,CAAkCC,MAAlC,CAAf;;AAEA,QAAIrO,MAAM,CAACxB,MAAP,GAAgB,CAApB,EAAuB;AACrB,YAAMk5B,KAAK,GAAG13B,MAAM,CAAC,CAAD,CAApB;;AAEA,UAAI,KAAKg8B,WAAL,CAAiBtE,KAAjB,KAA2BrpB,MAAM,CAACiC,IAAP,KAAgB,KAA/C,EAAsD;AACpD,aAAKnF,KAAL,CAAWusB,KAAK,CAACp7B,KAAjB,EAAwBovB,UAAU,CAACkB,yBAAnC;AACD,OAFD,MAEO,IAAI,KAAKoP,WAAL,CAAiBtE,KAAjB,CAAJ,EAA6B;AAClC,aAAKvsB,KAAL,CAAWusB,KAAK,CAACp7B,KAAjB,EAAwBovB,UAAU,CAAC4B,yBAAnC;AACD;AACF;AACF;;AAEDgP,EAAAA,iBAAiB,CAAC1+B,IAAD,EAAO2+B,oBAAP,EAA6B;AAC5C,UAAMrI,QAAQ,GAAG,KAAKC,iBAAL,EAAjB;AACA,UAAM1iB,GAAG,GAAG,MAAM6qB,iBAAN,CAAwB1+B,IAAxB,EAA8B2+B,oBAA9B,CAAZ;AACA3+B,IAAAA,IAAI,CAACs2B,QAAL,GAAgBA,QAAhB;AACA,WAAOziB,GAAP;AACD;;AAED+qB,EAAAA,iBAAiB,CAAC3rB,IAAD,EAAOK,QAAP,EAAiBrG,QAAjB,EAA2BwE,WAA3B,EAAwCpB,OAAxC,EAAiD6C,SAAjD,EAA4DC,UAA5D,EAAwEI,mBAAxE,EAA6F;AAC5G,QAAIN,IAAI,CAACqjB,QAAT,EAAmB;AACjB,WAAKhN,UAAL,CAAgBrW,IAAI,CAACqjB,QAAL,CAAc53B,KAA9B;AACD;;AAED,WAAOuU,IAAI,CAACqjB,QAAZ;AACA,QAAIzkB,cAAJ;;AAEA,QAAI,KAAKsX,YAAL,CAAkB,GAAlB,KAA0B,CAAChW,UAA/B,EAA2C;AACzCtB,MAAAA,cAAc,GAAG,KAAKqhB,iCAAL,EAAjB;AACA,UAAI,CAAC,KAAKh0B,KAAL,CAAWnH,OAAO,CAACkB,MAAnB,CAAL,EAAiC,KAAKqwB,UAAL;AAClC;;AAED,UAAMsV,iBAAN,CAAwB3rB,IAAxB,EAA8BK,QAA9B,EAAwCrG,QAAxC,EAAkDwE,WAAlD,EAA+DpB,OAA/D,EAAwE6C,SAAxE,EAAmFC,UAAnF,EAA+FI,mBAA/F;;AAEA,QAAI1B,cAAJ,EAAoB;AAClB,OAACoB,IAAI,CAACzc,KAAL,IAAcyc,IAAf,EAAqBpB,cAArB,GAAsCA,cAAtC;AACD;AACF;;AAEDgtB,EAAAA,4BAA4B,CAAC/E,KAAD,EAAQ;AAClC,QAAI,KAAKxa,GAAL,CAASvnB,OAAO,CAACyB,QAAjB,CAAJ,EAAgC;AAC9B,UAAIsgC,KAAK,CAAC73B,IAAN,KAAe,YAAnB,EAAiC;AAC/B,aAAKsL,KAAL,CAAWusB,KAAK,CAACp7B,KAAjB,EAAwBovB,UAAU,CAAC2B,sBAAnC;AACD;;AAED,UAAI,KAAK2O,WAAL,CAAiBtE,KAAjB,CAAJ,EAA6B;AAC3B,aAAKvsB,KAAL,CAAWusB,KAAK,CAACp7B,KAAjB,EAAwBovB,UAAU,CAACgC,yBAAnC;AACD;;AAEDgK,MAAAA,KAAK,CAAC/lB,QAAN,GAAiB,IAAjB;AACD;;AAED,QAAI,KAAK7U,KAAL,CAAWnH,OAAO,CAACsB,KAAnB,CAAJ,EAA+B;AAC7BygC,MAAAA,KAAK,CAACtG,cAAN,GAAuB,KAAKmB,uBAAL,EAAvB;AACD,KAFD,MAEO,IAAI,KAAKyJ,WAAL,CAAiBtE,KAAjB,CAAJ,EAA6B;AAClC,WAAKvsB,KAAL,CAAWusB,KAAK,CAACp7B,KAAjB,EAAwBovB,UAAU,CAAC8B,2BAAnC;AACD;;AAED,QAAI,KAAK1wB,KAAL,CAAWnH,OAAO,CAACmC,EAAnB,KAA0B,KAAKkkC,WAAL,CAAiBtE,KAAjB,CAA9B,EAAuD;AACrD,WAAKvsB,KAAL,CAAWusB,KAAK,CAACp7B,KAAjB,EAAwBovB,UAAU,CAACkC,kBAAnC;AACD;;AAED,SAAKtC,gBAAL,CAAsBoM,KAAtB;AACA,WAAOA,KAAP;AACD;;AAEDgF,EAAAA,iBAAiB,CAACxrB,QAAD,EAAWrG,QAAX,EAAqB8xB,IAArB,EAA2B;AAC1C,UAAM/+B,IAAI,GAAG,MAAM8+B,iBAAN,CAAwBxrB,QAAxB,EAAkCrG,QAAlC,EAA4C8xB,IAA5C,CAAb;;AAEA,QAAI/+B,IAAI,CAACiC,IAAL,KAAc,mBAAd,IAAqCjC,IAAI,CAACwzB,cAA1C,IAA4DxzB,IAAI,CAACg2B,KAAL,CAAWt3B,KAAX,GAAmBsB,IAAI,CAACwzB,cAAL,CAAoB90B,KAAvG,EAA8G;AAC5G,WAAK6O,KAAL,CAAWvN,IAAI,CAACwzB,cAAL,CAAoB90B,KAA/B,EAAsCovB,UAAU,CAACmC,qBAAjD;AACD;;AAED,WAAOjwB,IAAP;AACD;;AAEDg/B,EAAAA,wBAAwB,CAACh/B,IAAD,EAAO;AAC7B,QAAI,CAACixB,iBAAiB,CAACjxB,IAAD,CAAtB,EAA8B;AAC5B,aAAO,MAAMg/B,wBAAN,CAA+Bh/B,IAA/B,CAAP;AACD;;AAED,WAAOmxB,oBAAoB,CAAC,KAAKlwB,KAAN,CAA3B;AACD;;AAEDg+B,EAAAA,yBAAyB,CAACj/B,IAAD,EAAOk/B,SAAP,EAAkBj9B,IAAlB,EAAwBk9B,kBAAxB,EAA4C;AACnED,IAAAA,SAAS,CAACE,KAAV,GAAkBnO,iBAAiB,CAACjxB,IAAD,CAAjB,GAA0B,KAAK+0B,6BAAL,CAAmC,IAAnC,EAAyC,IAAzC,CAA1B,GAA2E,KAAKhC,eAAL,EAA7F;AACA,SAAKiL,SAAL,CAAekB,SAAS,CAACE,KAAzB,EAAgCD,kBAAhC,EAAoDvmB,YAApD;AACA5Y,IAAAA,IAAI,CAACqC,UAAL,CAAgBnB,IAAhB,CAAqB,KAAK0R,UAAL,CAAgBssB,SAAhB,EAA2Bj9B,IAA3B,CAArB;AACD;;AAEDo9B,EAAAA,gCAAgC,CAACr/B,IAAD,EAAO;AACrCA,IAAAA,IAAI,CAACkxB,UAAL,GAAkB,OAAlB;AACA,QAAIxe,IAAI,GAAG,IAAX;;AAEA,QAAI,KAAKxT,KAAL,CAAWnH,OAAO,CAACyF,OAAnB,CAAJ,EAAiC;AAC/BkV,MAAAA,IAAI,GAAG,QAAP;AACD,KAFD,MAEO,IAAI,KAAK6W,YAAL,CAAkB,MAAlB,CAAJ,EAA+B;AACpC7W,MAAAA,IAAI,GAAG,MAAP;AACD;;AAED,QAAIA,IAAJ,EAAU;AACR,YAAMumB,EAAE,GAAG,KAAKxZ,SAAL,EAAX;;AAEA,UAAI/M,IAAI,KAAK,MAAT,IAAmBumB,EAAE,CAACh3B,IAAH,KAAYlK,OAAO,CAACsD,IAA3C,EAAiD;AAC/C,aAAKiuB,UAAL,CAAgB2P,EAAE,CAACv6B,KAAnB;AACD;;AAED,UAAIyyB,oBAAoB,CAAC8H,EAAD,CAApB,IAA4BA,EAAE,CAACh3B,IAAH,KAAYlK,OAAO,CAACa,MAAhD,IAA0DqgC,EAAE,CAACh3B,IAAH,KAAYlK,OAAO,CAACsD,IAAlF,EAAwF;AACtF,aAAK6b,IAAL;AACAlX,QAAAA,IAAI,CAACkxB,UAAL,GAAkBxe,IAAlB;AACD;AACF;;AAED,WAAO,MAAM2sB,gCAAN,CAAuCr/B,IAAvC,CAAP;AACD;;AAEDs/B,EAAAA,oBAAoB,CAACt/B,IAAD,EAAO;AACzB,UAAMk/B,SAAS,GAAG,KAAKzsB,SAAL,EAAlB;AACA,UAAM8sB,kBAAkB,GAAG,KAAKrgC,KAAL,CAAWnH,OAAO,CAACK,MAAnB,CAA3B;AACA,UAAMonC,UAAU,GAAG,KAAKC,qBAAL,EAAnB;AACA,QAAIC,iBAAiB,GAAG,IAAxB;;AAEA,QAAIF,UAAU,CAACv9B,IAAX,KAAoB,YAAxB,EAAsC;AACpC,UAAIu9B,UAAU,CAAC9nC,IAAX,KAAoB,MAAxB,EAAgC;AAC9BgoC,QAAAA,iBAAiB,GAAG,MAApB;AACD,OAFD,MAEO,IAAIF,UAAU,CAAC9nC,IAAX,KAAoB,QAAxB,EAAkC;AACvCgoC,QAAAA,iBAAiB,GAAG,QAApB;AACD;AACF;;AAED,QAAIjsB,SAAS,GAAG,KAAhB;;AAEA,QAAI,KAAK8V,YAAL,CAAkB,IAAlB,KAA2B,CAAC,KAAKK,qBAAL,CAA2B,IAA3B,CAAhC,EAAkE;AAChE,YAAM+V,QAAQ,GAAG,KAAK5M,eAAL,CAAqB,IAArB,CAAjB;;AAEA,UAAI2M,iBAAiB,KAAK,IAAtB,IAA8B,CAAC,KAAKxgC,KAAL,CAAWnH,OAAO,CAACL,IAAnB,CAA/B,IAA2D,CAAC,KAAKuJ,KAAL,CAAWgB,IAAX,CAAgB9K,OAAhF,EAAyF;AACvF+nC,QAAAA,SAAS,CAACU,QAAV,GAAqBD,QAArB;AACAT,QAAAA,SAAS,CAAChO,UAAV,GAAuBwO,iBAAvB;AACAR,QAAAA,SAAS,CAACE,KAAV,GAAkBjS,eAAe,CAACwS,QAAD,CAAjC;AACD,OAJD,MAIO;AACLT,QAAAA,SAAS,CAACU,QAAV,GAAqBJ,UAArB;AACAN,QAAAA,SAAS,CAAChO,UAAV,GAAuB,IAAvB;AACAgO,QAAAA,SAAS,CAACE,KAAV,GAAkB,KAAKrM,eAAL,EAAlB;AACD;AACF,KAZD,MAYO;AACL,UAAI2M,iBAAiB,KAAK,IAAtB,KAA+B,KAAKxgC,KAAL,CAAWnH,OAAO,CAACL,IAAnB,KAA4B,KAAKuJ,KAAL,CAAWgB,IAAX,CAAgB9K,OAA3E,CAAJ,EAAyF;AACvF+nC,QAAAA,SAAS,CAACU,QAAV,GAAqB,KAAK7M,eAAL,CAAqB,IAArB,CAArB;AACAmM,QAAAA,SAAS,CAAChO,UAAV,GAAuBwO,iBAAvB;AACD,OAHD,MAGO;AACL,YAAIH,kBAAJ,EAAwB;AACtB,gBAAM,KAAKhyB,KAAL,CAAW2xB,SAAS,CAACxgC,KAArB,EAA4BkE,aAAa,CAAC0C,qBAA1C,EAAiEk6B,UAAU,CAAChpC,KAA5E,CAAN;AACD;;AAED0oC,QAAAA,SAAS,CAACU,QAAV,GAAqBJ,UAArB;AACAN,QAAAA,SAAS,CAAChO,UAAV,GAAuB,IAAvB;AACD;;AAED,UAAI,KAAKrH,aAAL,CAAmB,IAAnB,CAAJ,EAA8B;AAC5BqV,QAAAA,SAAS,CAACE,KAAV,GAAkB,KAAKrM,eAAL,EAAlB;AACD,OAFD,MAEO;AACLtf,QAAAA,SAAS,GAAG,IAAZ;AACAyrB,QAAAA,SAAS,CAACE,KAAV,GAAkBjS,eAAe,CAAC+R,SAAS,CAACU,QAAX,CAAjC;AACD;AACF;;AAED,UAAMC,gBAAgB,GAAG5O,iBAAiB,CAACjxB,IAAD,CAA1C;AACA,UAAM8/B,qBAAqB,GAAG7O,iBAAiB,CAACiO,SAAD,CAA/C;;AAEA,QAAIW,gBAAgB,IAAIC,qBAAxB,EAA+C;AAC7C,WAAKvyB,KAAL,CAAW2xB,SAAS,CAACxgC,KAArB,EAA4BovB,UAAU,CAACmB,mCAAvC;AACD;;AAED,QAAI4Q,gBAAgB,IAAIC,qBAAxB,EAA+C;AAC7C,WAAKhK,iBAAL,CAAuBoJ,SAAS,CAACE,KAAV,CAAgB1nC,IAAvC,EAA6CwnC,SAAS,CAACE,KAAV,CAAgB1gC,KAA7D,EAAoE,IAApE;AACD;;AAED,QAAI+U,SAAS,IAAI,CAACosB,gBAAd,IAAkC,CAACC,qBAAvC,EAA8D;AAC5D,WAAKC,iBAAL,CAAuBb,SAAS,CAACE,KAAV,CAAgB1nC,IAAvC,EAA6CwnC,SAAS,CAACxgC,KAAvD,EAA8D,IAA9D,EAAoE,IAApE;AACD;;AAED,SAAKs/B,SAAL,CAAekB,SAAS,CAACE,KAAzB,EAAgC,kBAAhC,EAAoDxmB,YAApD;AACA5Y,IAAAA,IAAI,CAACqC,UAAL,CAAgBnB,IAAhB,CAAqB,KAAK0R,UAAL,CAAgBssB,SAAhB,EAA2B,iBAA3B,CAArB;AACD;;AAEDc,EAAAA,gBAAgB,GAAG;AACjB,YAAQ,KAAK/+B,KAAL,CAAWgB,IAAnB;AACE,WAAKlK,OAAO,CAAC8E,KAAb;AACE,eAAO,KAAKk2B,eAAL,CAAqB,IAArB,CAAP;;AAEF;AACE,eAAO,MAAMiN,gBAAN,EAAP;AALJ;AAOD;;AAEDC,EAAAA,mBAAmB,CAACjgC,IAAD,EAAOkgC,cAAP,EAAuB;AACxC,UAAMxtB,IAAI,GAAG1S,IAAI,CAAC0S,IAAlB;;AAEA,QAAIA,IAAI,KAAK,KAAT,IAAkBA,IAAI,KAAK,KAA3B,IAAoC,KAAKyW,YAAL,CAAkB,GAAlB,CAAxC,EAAgE;AAC9DnpB,MAAAA,IAAI,CAAC6R,cAAL,GAAsB,KAAKqhB,iCAAL,EAAtB;AACD;;AAED,UAAM+M,mBAAN,CAA0BjgC,IAA1B,EAAgCkgC,cAAhC;AACD;;AAEDC,EAAAA,UAAU,CAAC7D,IAAD,EAAO5pB,IAAP,EAAa;AACrB,UAAMytB,UAAN,CAAiB7D,IAAjB,EAAuB5pB,IAAvB;;AAEA,QAAI,KAAKxT,KAAL,CAAWnH,OAAO,CAACsB,KAAnB,CAAJ,EAA+B;AAC7BijC,MAAAA,IAAI,CAACrqB,EAAL,CAAQuhB,cAAR,GAAyB,KAAKmB,uBAAL,EAAzB;AACA,WAAKjH,gBAAL,CAAsB4O,IAAI,CAACrqB,EAA3B;AACD;AACF;;AAEDmuB,EAAAA,iCAAiC,CAACpgC,IAAD,EAAO8lB,IAAP,EAAa;AAC5C,QAAI,KAAK5mB,KAAL,CAAWnH,OAAO,CAACsB,KAAnB,CAAJ,EAA+B;AAC7B,YAAMw9B,qBAAqB,GAAG,KAAK51B,KAAL,CAAW2b,kBAAzC;AACA,WAAK3b,KAAL,CAAW2b,kBAAX,GAAgC,IAAhC;AACA5c,MAAAA,IAAI,CAACuzB,UAAL,GAAkB,KAAKoB,uBAAL,EAAlB;AACA,WAAK1zB,KAAL,CAAW2b,kBAAX,GAAgCia,qBAAhC;AACD;;AAED,WAAO,MAAMuJ,iCAAN,CAAwCpgC,IAAxC,EAA8C8lB,IAA9C,CAAP;AACD;;AAEDua,EAAAA,qBAAqB,GAAG;AACtB,WAAO,KAAKnhC,KAAL,CAAWnH,OAAO,CAACsB,KAAnB,KAA6B,MAAMgnC,qBAAN,EAApC;AACD;;AAED9E,EAAAA,gBAAgB,CAAChoB,mBAAD,EAAsB+sB,cAAtB,EAAsC;AACpD,QAAIC,IAAJ;;AAEA,QAAIt/B,KAAK,GAAG,IAAZ;AACA,QAAIu/B,GAAJ;;AAEA,QAAI,KAAK/gC,SAAL,CAAe,KAAf,MAA0B,KAAKP,KAAL,CAAWnH,OAAO,CAAC2+B,WAAnB,KAAmC,KAAKvN,YAAL,CAAkB,GAAlB,CAA7D,CAAJ,EAA0F;AACxFloB,MAAAA,KAAK,GAAG,KAAKA,KAAL,CAAWgd,KAAX,EAAR;AACAuiB,MAAAA,GAAG,GAAG,KAAK3V,QAAL,CAAc,MAAM,MAAM0Q,gBAAN,CAAuBhoB,mBAAvB,EAA4C+sB,cAA5C,CAApB,EAAiFr/B,KAAjF,CAAN;AACA,UAAI,CAACu/B,GAAG,CAACzyB,KAAT,EAAgB,OAAOyyB,GAAG,CAACxgC,IAAX;AAChB,YAAM;AACJqV,QAAAA;AADI,UAEF,KAAKpU,KAFT;AAGA,YAAMue,UAAU,GAAGnK,OAAO,CAACA,OAAO,CAACzU,MAAR,GAAiB,CAAlB,CAA1B;;AAEA,UAAI4e,UAAU,KAAKrK,KAAK,CAACsrB,MAAzB,EAAiC;AAC/BprB,QAAAA,OAAO,CAACzU,MAAR,IAAkB,CAAlB;AACD,OAFD,MAEO,IAAI4e,UAAU,KAAKrK,KAAK,CAACurB,MAAzB,EAAiC;AACtCrrB,QAAAA,OAAO,CAACzU,MAAR,IAAkB,CAAlB;AACD;AACF;;AAED,QAAI,CAAC2/B,IAAI,GAAGC,GAAR,KAAgB,IAAhB,IAAwBD,IAAI,CAACxyB,KAA7B,IAAsC,KAAKob,YAAL,CAAkB,GAAlB,CAA1C,EAAkE;AAChE,UAAIwX,KAAJ,EAAWC,KAAX;;AAEA3/B,MAAAA,KAAK,GAAGA,KAAK,IAAI,KAAKA,KAAL,CAAWgd,KAAX,EAAjB;AACA,UAAIpM,cAAJ;AACA,YAAMnY,KAAK,GAAG,KAAKmxB,QAAL,CAAcgW,KAAK,IAAI;AACnC,YAAIC,qBAAJ;;AAEAjvB,QAAAA,cAAc,GAAG,KAAKqhB,iCAAL,EAAjB;AACA,cAAM6N,eAAe,GAAG,KAAK3G,gCAAL,CAAsCvoB,cAAtC,EAAsD,MAAM;AAClF,gBAAMqqB,MAAM,GAAG,MAAMX,gBAAN,CAAuBhoB,mBAAvB,EAA4C+sB,cAA5C,CAAf;AACA,eAAK3S,0BAAL,CAAgCuO,MAAhC,EAAwCrqB,cAAxC;AACA,iBAAOqqB,MAAP;AACD,SAJuB,CAAxB;AAKA,YAAI,CAAC4E,qBAAqB,GAAGC,eAAe,CAAChxB,KAAzC,KAAmD,IAAnD,IAA2D+wB,qBAAqB,CAAClwB,aAArF,EAAoGiwB,KAAK;AACzG,cAAMnG,IAAI,GAAG,KAAKsG,6BAAL,CAAmCD,eAAnC,CAAb;AACA,YAAIrG,IAAI,CAACz4B,IAAL,KAAc,yBAAlB,EAA6C4+B,KAAK;AAClDnG,QAAAA,IAAI,CAAC7oB,cAAL,GAAsBA,cAAtB;AACA,aAAK8b,0BAAL,CAAgC+M,IAAhC,EAAsC7oB,cAAtC;AACA,eAAOkvB,eAAP;AACD,OAfa,EAeX9/B,KAfW,CAAd;AAgBA,UAAI8/B,eAAe,GAAG,IAAtB;;AAEA,UAAIrnC,KAAK,CAACsG,IAAN,IAAc,KAAKghC,6BAAL,CAAmCtnC,KAAK,CAACsG,IAAzC,EAA+CiC,IAA/C,KAAwD,yBAA1E,EAAqG;AACnG,YAAI,CAACvI,KAAK,CAACqU,KAAP,IAAgB,CAACrU,KAAK,CAACyxB,OAA3B,EAAoC;AAClC,cAAIzxB,KAAK,CAACsG,IAAN,CAAWihC,KAAf,EAAsB;AACpB,iBAAK1zB,KAAL,CAAWsE,cAAc,CAACnT,KAA1B,EAAiCovB,UAAU,CAAC4C,+CAA5C;AACD;;AAED,iBAAOh3B,KAAK,CAACsG,IAAb;AACD;;AAED+gC,QAAAA,eAAe,GAAGrnC,KAAK,CAACsG,IAAxB;AACD;;AAED,UAAI,CAAC2gC,KAAK,GAAGH,GAAT,KAAiB,IAAjB,IAAyBG,KAAK,CAAC3gC,IAAnC,EAAyC;AACvC,aAAKiB,KAAL,GAAau/B,GAAG,CAACvV,SAAjB;AACA,eAAOuV,GAAG,CAACxgC,IAAX;AACD;;AAED,UAAI+gC,eAAJ,EAAqB;AACnB,aAAK9/B,KAAL,GAAavH,KAAK,CAACuxB,SAAnB;AACA,eAAO8V,eAAP;AACD;;AAED,UAAI,CAACH,KAAK,GAAGJ,GAAT,KAAiB,IAAjB,IAAyBI,KAAK,CAAC1V,MAAnC,EAA2C,MAAMsV,GAAG,CAACzyB,KAAV;AAC3C,UAAIrU,KAAK,CAACwxB,MAAV,EAAkB,MAAMxxB,KAAK,CAACqU,KAAZ;AAClB,YAAM,KAAKR,KAAL,CAAWsE,cAAc,CAACnT,KAA1B,EAAiCovB,UAAU,CAAC2C,iCAA5C,CAAN;AACD;;AAED,WAAO,MAAM8K,gBAAN,CAAuBhoB,mBAAvB,EAA4C+sB,cAA5C,CAAP;AACD;;AAEDY,EAAAA,UAAU,CAAClhC,IAAD,EAAO;AACf,QAAI,KAAKd,KAAL,CAAWnH,OAAO,CAACsB,KAAnB,CAAJ,EAA+B;AAC7B,YAAM6iC,MAAM,GAAG,KAAKrR,QAAL,CAAc,MAAM;AACjC,cAAMgM,qBAAqB,GAAG,KAAK51B,KAAL,CAAW2b,kBAAzC;AACA,aAAK3b,KAAL,CAAW2b,kBAAX,GAAgC,IAAhC;AACA,cAAMoW,QAAQ,GAAG,KAAKvgB,SAAL,EAAjB;AACA,SAACugB,QAAQ,CAACQ,cAAV,EAA0BxzB,IAAI,CAAC2yB,SAA/B,IAA4C,KAAKD,oCAAL,EAA5C;AACA,aAAKzxB,KAAL,CAAW2b,kBAAX,GAAgCia,qBAAhC;AACA,YAAI,KAAK9M,kBAAL,EAAJ,EAA+B,KAAKT,UAAL;AAC/B,YAAI,CAAC,KAAKpqB,KAAL,CAAWnH,OAAO,CAAC2B,KAAnB,CAAL,EAAgC,KAAK4vB,UAAL;AAChC,eAAO0J,QAAP;AACD,OATc,CAAf;AAUA,UAAIkJ,MAAM,CAAChR,MAAX,EAAmB,OAAO,IAAP;AACnB,UAAIgR,MAAM,CAACnuB,KAAX,EAAkB,KAAK9M,KAAL,GAAai7B,MAAM,CAACjR,SAApB;AAClBjrB,MAAAA,IAAI,CAACuzB,UAAL,GAAkB2I,MAAM,CAACl8B,IAAP,CAAYwzB,cAAZ,GAA6B,KAAK5gB,UAAL,CAAgBspB,MAAM,CAACl8B,IAAvB,EAA6B,gBAA7B,CAA7B,GAA8E,IAAhG;AACD;;AAED,WAAO,MAAMkhC,UAAN,CAAiBlhC,IAAjB,CAAP;AACD;;AAEDmhC,EAAAA,gBAAgB,CAAC/+B,MAAD,EAAS;AACvB,WAAO,KAAKlD,KAAL,CAAWnH,OAAO,CAACsB,KAAnB,KAA6B,MAAM8nC,gBAAN,CAAuB/+B,MAAvB,CAApC;AACD;;AAEDg/B,EAAAA,0BAA0B,CAACphC,IAAD,EAAOoC,MAAP,EAAe;AACvC,QAAI,KAAKnB,KAAL,CAAWwb,yBAAX,CAAqCgE,OAArC,CAA6CzgB,IAAI,CAACtB,KAAlD,MAA6D,CAAC,CAAlE,EAAqE;AACnEsB,MAAAA,IAAI,CAACoC,MAAL,GAAcA,MAAd;AACD,KAFD,MAEO;AACL,YAAMg/B,0BAAN,CAAiCphC,IAAjC,EAAuCoC,MAAvC;AACD;AACF;;AAED45B,EAAAA,WAAW,CAACh8B,IAAD,EAAOqhC,eAAP,EAAwBC,eAAxB,EAAyC;AAClD,QAAIA,eAAe,IAAI,KAAKrgC,KAAL,CAAWwb,yBAAX,CAAqCgE,OAArC,CAA6CzgB,IAAI,CAACtB,KAAlD,MAA6D,CAAC,CAArF,EAAwF;AACtF;AACD;;AAED,SAAK,IAAIiC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,IAAI,CAACoC,MAAL,CAAYxB,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AAC3C,UAAI,KAAKy9B,WAAL,CAAiBp+B,IAAI,CAACoC,MAAL,CAAYzB,CAAZ,CAAjB,KAAoCA,CAAC,GAAG,CAA5C,EAA+C;AAC7C,aAAK4M,KAAL,CAAWvN,IAAI,CAACoC,MAAL,CAAYzB,CAAZ,EAAejC,KAA1B,EAAiCovB,UAAU,CAACiC,oBAA5C;AACD;AACF;;AAED,WAAO,MAAMiM,WAAN,CAAkB,GAAG75B,SAArB,CAAP;AACD;;AAEDo/B,EAAAA,kCAAkC,CAACC,UAAD,EAAa;AAC7C,WAAO,MAAMD,kCAAN,CAAyCC,UAAU,IAAI,KAAKvgC,KAAL,CAAWub,SAAX,CAAqBiE,OAArB,CAA6B,KAAKxf,KAAL,CAAWvC,KAAxC,MAAmD,CAAC,CAA3G,CAAP;AACD;;AAED+iC,EAAAA,eAAe,CAACltB,IAAD,EAAOjB,QAAP,EAAiBrG,QAAjB,EAA2BuH,OAA3B,EAAoC;AACjD,QAAID,IAAI,CAACtS,IAAL,KAAc,YAAd,IAA8BsS,IAAI,CAAC7c,IAAL,KAAc,OAA5C,IAAuD,KAAKuJ,KAAL,CAAWub,SAAX,CAAqBiE,OAArB,CAA6BnN,QAA7B,MAA2C,CAAC,CAAvG,EAA0G;AACxG,WAAK4D,IAAL;AACA,YAAMlX,IAAI,GAAG,KAAK6P,WAAL,CAAiByD,QAAjB,EAA2BrG,QAA3B,CAAb;AACAjN,MAAAA,IAAI,CAACgU,MAAL,GAAcO,IAAd;AACAvU,MAAAA,IAAI,CAACmC,SAAL,GAAiB,KAAKu/B,4BAAL,CAAkC3pC,OAAO,CAACmB,MAA1C,EAAkD,KAAlD,CAAjB;AACAqb,MAAAA,IAAI,GAAG,KAAK3B,UAAL,CAAgB5S,IAAhB,EAAsB,gBAAtB,CAAP;AACD,KAND,MAMO,IAAIuU,IAAI,CAACtS,IAAL,KAAc,YAAd,IAA8BsS,IAAI,CAAC7c,IAAL,KAAc,OAA5C,IAAuD,KAAKyxB,YAAL,CAAkB,GAAlB,CAA3D,EAAmF;AACxF,YAAMloB,KAAK,GAAG,KAAKA,KAAL,CAAWgd,KAAX,EAAd;AACA,YAAMvkB,KAAK,GAAG,KAAKmxB,QAAL,CAAcgW,KAAK,IAAI,KAAKc,iCAAL,CAAuCruB,QAAvC,EAAiDrG,QAAjD,KAA8D4zB,KAAK,EAA1F,EAA8F5/B,KAA9F,CAAd;AACA,UAAI,CAACvH,KAAK,CAACqU,KAAP,IAAgB,CAACrU,KAAK,CAACyxB,OAA3B,EAAoC,OAAOzxB,KAAK,CAACsG,IAAb;AACpC,YAAMk8B,MAAM,GAAG,KAAKrR,QAAL,CAAc,MAAM,MAAM4W,eAAN,CAAsBltB,IAAtB,EAA4BjB,QAA5B,EAAsCrG,QAAtC,EAAgDuH,OAAhD,CAApB,EAA8EvT,KAA9E,CAAf;AACA,UAAIi7B,MAAM,CAACl8B,IAAP,IAAe,CAACk8B,MAAM,CAACnuB,KAA3B,EAAkC,OAAOmuB,MAAM,CAACl8B,IAAd;;AAElC,UAAItG,KAAK,CAACsG,IAAV,EAAgB;AACd,aAAKiB,KAAL,GAAavH,KAAK,CAACuxB,SAAnB;AACA,eAAOvxB,KAAK,CAACsG,IAAb;AACD;;AAED,UAAIk8B,MAAM,CAACl8B,IAAX,EAAiB;AACf,aAAKiB,KAAL,GAAai7B,MAAM,CAACjR,SAApB;AACA,eAAOiR,MAAM,CAACl8B,IAAd;AACD;;AAED,YAAMtG,KAAK,CAACqU,KAAN,IAAemuB,MAAM,CAACnuB,KAA5B;AACD;;AAED,WAAO,MAAM0zB,eAAN,CAAsBltB,IAAtB,EAA4BjB,QAA5B,EAAsCrG,QAAtC,EAAgDuH,OAAhD,CAAP;AACD;;AAEDF,EAAAA,cAAc,CAACC,IAAD,EAAOjB,QAAP,EAAiBrG,QAAjB,EAA2BuH,OAA3B,EAAoCotB,cAApC,EAAoD;AAChE,QAAI,KAAK1iC,KAAL,CAAWnH,OAAO,CAAC0B,WAAnB,KAAmC,KAAKooC,mBAAL,EAAvC,EAAmE;AACjED,MAAAA,cAAc,CAACntB,mBAAf,GAAqC,IAArC;;AAEA,UAAID,OAAJ,EAAa;AACXotB,QAAAA,cAAc,CAACjtB,IAAf,GAAsB,IAAtB;AACA,eAAOJ,IAAP;AACD;;AAED,WAAK2C,IAAL;AACA,YAAMlX,IAAI,GAAG,KAAK6P,WAAL,CAAiByD,QAAjB,EAA2BrG,QAA3B,CAAb;AACAjN,MAAAA,IAAI,CAACgU,MAAL,GAAcO,IAAd;AACAvU,MAAAA,IAAI,CAAC8hC,aAAL,GAAqB,KAAKnM,mCAAL,EAArB;AACA,WAAKtL,MAAL,CAAYtyB,OAAO,CAACkB,MAApB;AACA+G,MAAAA,IAAI,CAACmC,SAAL,GAAiB,KAAKu/B,4BAAL,CAAkC3pC,OAAO,CAACmB,MAA1C,EAAkD,KAAlD,CAAjB;AACA8G,MAAAA,IAAI,CAAC+T,QAAL,GAAgB,IAAhB;AACA,aAAO,KAAKD,oBAAL,CAA0B9T,IAA1B,EAAgC,IAAhC,CAAP;AACD,KAhBD,MAgBO,IAAI,CAACwU,OAAD,IAAY,KAAKud,gBAAL,EAAZ,IAAuC,KAAK5I,YAAL,CAAkB,GAAlB,CAA3C,EAAmE;AACxE,YAAMnpB,IAAI,GAAG,KAAK6P,WAAL,CAAiByD,QAAjB,EAA2BrG,QAA3B,CAAb;AACAjN,MAAAA,IAAI,CAACgU,MAAL,GAAcO,IAAd;AACA,YAAM2nB,MAAM,GAAG,KAAKrR,QAAL,CAAc,MAAM;AACjC7qB,QAAAA,IAAI,CAAC8hC,aAAL,GAAqB,KAAKhL,4CAAL,EAArB;AACA,aAAKzM,MAAL,CAAYtyB,OAAO,CAACkB,MAApB;AACA+G,QAAAA,IAAI,CAACmC,SAAL,GAAiB,KAAKu/B,4BAAL,CAAkC3pC,OAAO,CAACmB,MAA1C,EAAkD,KAAlD,CAAjB;AACA,YAAI0oC,cAAc,CAACntB,mBAAnB,EAAwCzU,IAAI,CAAC+T,QAAL,GAAgB,KAAhB;AACxC,eAAO,KAAKD,oBAAL,CAA0B9T,IAA1B,EAAgC4hC,cAAc,CAACntB,mBAA/C,CAAP;AACD,OANc,CAAf;;AAQA,UAAIynB,MAAM,CAACl8B,IAAX,EAAiB;AACf,YAAIk8B,MAAM,CAACnuB,KAAX,EAAkB,KAAK9M,KAAL,GAAai7B,MAAM,CAACjR,SAApB;AAClB,eAAOiR,MAAM,CAACl8B,IAAd;AACD;AACF;;AAED,WAAO,MAAMsU,cAAN,CAAqBC,IAArB,EAA2BjB,QAA3B,EAAqCrG,QAArC,EAA+CuH,OAA/C,EAAwDotB,cAAxD,CAAP;AACD;;AAEDG,EAAAA,iBAAiB,CAAC/hC,IAAD,EAAO;AACtB,QAAIgiC,KAAK,GAAG,IAAZ;;AAEA,QAAI,KAAKjQ,gBAAL,MAA2B,KAAK5I,YAAL,CAAkB,GAAlB,CAA/B,EAAuD;AACrD6Y,MAAAA,KAAK,GAAG,KAAKnX,QAAL,CAAc,MAAM,KAAKiM,4CAAL,EAApB,EAAyE92B,IAAjF;AACD;;AAEDA,IAAAA,IAAI,CAAC8hC,aAAL,GAAqBE,KAArB;AACA,UAAMD,iBAAN,CAAwB/hC,IAAxB;AACD;;AAED2hC,EAAAA,iCAAiC,CAACruB,QAAD,EAAWrG,QAAX,EAAqB;AACpD,UAAMjN,IAAI,GAAG,KAAK6P,WAAL,CAAiByD,QAAjB,EAA2BrG,QAA3B,CAAb;AACA,SAAKgzB,mBAAL,CAAyBjgC,IAAzB;AACA,QAAI,CAAC,KAAKkhC,UAAL,CAAgBlhC,IAAhB,CAAL,EAA4B;AAC5B,WAAO,KAAKiiC,oBAAL,CAA0BjiC,IAA1B,EAAgCG,SAAhC,EAA2C,IAA3C,CAAP;AACD;;AAEDwhB,EAAAA,qBAAqB,CAAC3jB,IAAD,EAAO;AAC1B,UAAMkZ,IAAI,GAAG,KAAKnY,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAX,GAAiB,CAAvC,CAAb;;AAEA,QAAIhP,IAAI,KAAK,EAAT,IAAekZ,IAAI,KAAK,EAAxB,IAA8B,KAAKjW,KAAL,CAAW6b,cAA7C,EAA6D;AAC3D,WAAK7b,KAAL,CAAW6b,cAAX,GAA4B,KAA5B;AACA,WAAK7b,KAAL,CAAW+L,GAAX,IAAkB,CAAlB;AACA,WAAKqS,SAAL;AACA;AACD;;AAED,UAAMsC,qBAAN,CAA4B3jB,IAA5B;AACD;;AAED6jB,EAAAA,kBAAkB,CAAC7jB,IAAD,EAAO;AACvB,UAAMkZ,IAAI,GAAG,KAAKnY,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAX,GAAiB,CAAvC,CAAb;;AAEA,QAAIhP,IAAI,KAAK,GAAT,IAAgBkZ,IAAI,KAAK,GAA7B,EAAkC;AAChC,WAAKqK,QAAL,CAAcxpB,OAAO,CAACiB,SAAtB,EAAiC,CAAjC;AACA;AACD;;AAED,UAAM6oB,kBAAN,CAAyB7jB,IAAzB;AACD;;AAEDkkC,EAAAA,aAAa,CAACC,IAAD,EAAOC,OAAP,EAAgB;AAC3B,UAAMC,QAAQ,GAAG,MAAMH,aAAN,CAAoBC,IAApB,EAA0BC,OAA1B,CAAjB;;AAEA,QAAI,KAAKnhC,KAAL,CAAW6b,cAAf,EAA+B;AAC7B,WAAKvP,KAAL,CAAW,KAAKtM,KAAL,CAAW+L,GAAtB,EAA2B8gB,UAAU,CAAC+C,uBAAtC;AACD;;AAED,WAAOwR,QAAP;AACD;;AAED7hB,EAAAA,gBAAgB,GAAG;AACjB,QAAI,KAAK/gB,SAAL,CAAe,cAAf,KAAkC,KAAK6iC,eAAL,EAAtC,EAA8D;AAC5D,UAAI,KAAKrhC,KAAL,CAAW6b,cAAf,EAA+B;AAC7B,aAAKwM,UAAL,CAAgB,IAAhB,EAAsBwE,UAAU,CAAC0B,iBAAjC;AACD;;AAED,WAAK+S,wBAAL;AACA,WAAKthC,KAAL,CAAW+L,GAAX,IAAkB,KAAKs1B,eAAL,EAAlB;AACA,WAAKrhC,KAAL,CAAW6b,cAAX,GAA4B,IAA5B;AACA;AACD;;AAED,QAAI,KAAK7b,KAAL,CAAW6b,cAAf,EAA+B;AAC7B,YAAMne,GAAG,GAAG,KAAKI,KAAL,CAAW0hB,OAAX,CAAmB,KAAnB,EAA0B,KAAKxf,KAAL,CAAW+L,GAAX,IAAkB,CAA5C,CAAZ;;AAEA,UAAIrO,GAAG,KAAK,CAAC,CAAb,EAAgB;AACd,cAAM,KAAK4O,KAAL,CAAW,KAAKtM,KAAL,CAAW+L,GAAX,GAAiB,CAA5B,EAA+BpK,aAAa,CAACkJ,mBAA7C,CAAN;AACD;;AAED,WAAK7K,KAAL,CAAW+L,GAAX,GAAiBrO,GAAG,GAAG,CAAvB;AACA;AACD;;AAED,WAAO,MAAM6hB,gBAAN,EAAP;AACD;;AAED8hB,EAAAA,eAAe,GAAG;AAChB,UAAM;AACJt1B,MAAAA;AADI,QAEF,KAAK/L,KAFT;AAGA,QAAIuhC,yBAAyB,GAAG,CAAhC;;AAEA,WAAO,CAAC,EAAD,EAAK,CAAL,EAAQzf,QAAR,CAAiB,KAAKhkB,KAAL,CAAWiD,UAAX,CAAsBgL,GAAG,GAAGw1B,yBAA5B,CAAjB,CAAP,EAAiF;AAC/EA,MAAAA,yBAAyB;AAC1B;;AAED,UAAMC,GAAG,GAAG,KAAK1jC,KAAL,CAAWiD,UAAX,CAAsBwgC,yBAAyB,GAAGx1B,GAAlD,CAAZ;AACA,UAAM01B,GAAG,GAAG,KAAK3jC,KAAL,CAAWiD,UAAX,CAAsBwgC,yBAAyB,GAAGx1B,GAA5B,GAAkC,CAAxD,CAAZ;;AAEA,QAAIy1B,GAAG,KAAK,EAAR,IAAcC,GAAG,KAAK,EAA1B,EAA8B;AAC5B,aAAOF,yBAAyB,GAAG,CAAnC;AACD;;AAED,QAAI,KAAKzjC,KAAL,CAAWoR,KAAX,CAAiBqyB,yBAAyB,GAAGx1B,GAA7C,EAAkDw1B,yBAAyB,GAAGx1B,GAA5B,GAAkC,EAApF,MAA4F,cAAhG,EAAgH;AAC9G,aAAOw1B,yBAAyB,GAAG,EAAnC;AACD;;AAED,QAAIC,GAAG,KAAK,EAAR,IAAcC,GAAG,KAAK,EAA1B,EAA8B;AAC5B,aAAOF,yBAAP;AACD;;AAED,WAAO,KAAP;AACD;;AAEDD,EAAAA,wBAAwB,GAAG;AACzB,UAAM5jC,GAAG,GAAG,KAAKI,KAAL,CAAW0hB,OAAX,CAAmB,IAAnB,EAAyB,KAAKxf,KAAL,CAAW+L,GAApC,CAAZ;;AAEA,QAAIrO,GAAG,KAAK,CAAC,CAAb,EAAgB;AACd,YAAM,KAAK4O,KAAL,CAAW,KAAKtM,KAAL,CAAW+L,GAAtB,EAA2BpK,aAAa,CAACkJ,mBAAzC,CAAN;AACD;AACF;;AAED62B,EAAAA,wCAAwC,CAAC31B,GAAD,EAAM;AAC5C41B,IAAAA,QAD4C;AAE5CC,IAAAA;AAF4C,GAAN,EAGrC;AACD,SAAKt1B,KAAL,CAAWP,GAAX,EAAgB8gB,UAAU,CAACO,+BAA3B,EAA4DwU,UAA5D,EAAwED,QAAxE;AACD;;AAEDE,EAAAA,8BAA8B,CAAC91B,GAAD,EAAM;AAClC41B,IAAAA,QADkC;AAElCC,IAAAA;AAFkC,GAAN,EAG3B;AACD,UAAMpO,UAAU,GAAGoO,UAAU,CAAC,CAAD,CAAV,CAAcE,WAAd,KAA8BF,UAAU,CAAC1yB,KAAX,CAAiB,CAAjB,CAAjD;AACA,SAAK5C,KAAL,CAAWP,GAAX,EAAgB8gB,UAAU,CAACe,qBAA3B,EAAkDgU,UAAlD,EAA8DpO,UAA9D,EAA0EmO,QAA1E;AACD;;AAEDI,EAAAA,gCAAgC,CAACh2B,GAAD,EAAM;AACpC41B,IAAAA,QADoC;AAEpCC,IAAAA;AAFoC,GAAN,EAG7B;AACD,SAAKt1B,KAAL,CAAWP,GAAX,EAAgB8gB,UAAU,CAACQ,uBAA3B,EAAoDuU,UAApD,EAAgED,QAAhE;AACD;;AAEDK,EAAAA,qCAAqC,CAACj2B,GAAD,EAAM;AACzC41B,IAAAA;AADyC,GAAN,EAElC;AACD,SAAKr1B,KAAL,CAAWP,GAAX,EAAgB8gB,UAAU,CAACS,4BAA3B,EAAyDqU,QAAzD;AACD;;AAEDM,EAAAA,gCAAgC,CAACl2B,GAAD,EAAM;AACpC41B,IAAAA,QADoC;AAEpCO,IAAAA;AAFoC,GAAN,EAG7B;AACD,WAAO,KAAK51B,KAAL,CAAWP,GAAX,EAAgBm2B,YAAY,KAAK,IAAjB,GAAwBrV,UAAU,CAACW,sCAAnC,GAA4EX,UAAU,CAACU,uBAAvG,EAAgIoU,QAAhI,EAA0IO,YAA1I,CAAP;AACD;;AAEDC,EAAAA,qCAAqC,CAACp2B,GAAD,EAAM;AACzC41B,IAAAA,QADyC;AAEzCS,IAAAA,YAFyC;AAGzCR,IAAAA;AAHyC,GAAN,EAIlC;AACD,QAAIn1B,OAAO,GAAG,IAAd;;AAEA,YAAQ21B,YAAR;AACE,WAAK,SAAL;AACA,WAAK,QAAL;AACA,WAAK,QAAL;AACE31B,QAAAA,OAAO,GAAGogB,UAAU,CAACY,uCAArB;AACA;;AAEF,WAAK,QAAL;AACEhhB,QAAAA,OAAO,GAAGogB,UAAU,CAACa,sCAArB;AACA;;AAEF;AACEjhB,QAAAA,OAAO,GAAGogB,UAAU,CAACc,uCAArB;AAZJ;;AAeA,WAAO,KAAKrhB,KAAL,CAAWP,GAAX,EAAgBU,OAAhB,EAAyBk1B,QAAzB,EAAmCC,UAAnC,EAA+CQ,YAA/C,CAAP;AACD;;AAEDC,EAAAA,uCAAuC,CAACt2B,GAAD,EAAM;AAC3C41B,IAAAA,QAD2C;AAE3CC,IAAAA;AAF2C,GAAN,EAGpC;AACD,SAAKt1B,KAAL,CAAWP,GAAX,EAAgB8gB,UAAU,CAACgB,8BAA3B,EAA2D8T,QAA3D,EAAqEC,UAArE;AACD;;AAEDU,EAAAA,kDAAkD,CAACv2B,GAAD,EAAM;AACtD41B,IAAAA;AADsD,GAAN,EAE/C;AACD,SAAKr1B,KAAL,CAAWP,GAAX,EAAgB8gB,UAAU,CAACiB,yCAA3B,EAAsE6T,QAAtE;AACD;;AAEDY,EAAAA,kBAAkB,GAAG;AACnB,UAAMlwB,QAAQ,GAAG,KAAKrS,KAAL,CAAWvC,KAA5B;;AAEA,UAAM+kC,SAAS,GAAG,MAAM,KAAKvkC,KAAL,CAAWnH,OAAO,CAACoB,KAAnB,KAA6B,KAAK+F,KAAL,CAAWnH,OAAO,CAACgB,MAAnB,CAArD;;AAEA,YAAQ,KAAKkI,KAAL,CAAWgB,IAAnB;AACE,WAAKlK,OAAO,CAACC,GAAb;AACE;AACE,gBAAM0rC,OAAO,GAAG,KAAKp0B,mBAAL,CAAyB,KAAKrO,KAAL,CAAWzK,KAApC,CAAhB;;AAEA,cAAIitC,SAAS,EAAb,EAAiB;AACf,mBAAO;AACLxhC,cAAAA,IAAI,EAAE,QADD;AAEL+K,cAAAA,GAAG,EAAE02B,OAAO,CAAChlC,KAFR;AAGLlI,cAAAA,KAAK,EAAEktC;AAHF,aAAP;AAKD;;AAED,iBAAO;AACLzhC,YAAAA,IAAI,EAAE,SADD;AAEL+K,YAAAA,GAAG,EAAEsG;AAFA,WAAP;AAID;;AAEH,WAAKvb,OAAO,CAACK,MAAb;AACE;AACE,gBAAMsrC,OAAO,GAAG,KAAKr0B,kBAAL,CAAwB,KAAKpO,KAAL,CAAWzK,KAAnC,CAAhB;;AAEA,cAAIitC,SAAS,EAAb,EAAiB;AACf,mBAAO;AACLxhC,cAAAA,IAAI,EAAE,QADD;AAEL+K,cAAAA,GAAG,EAAE02B,OAAO,CAAChlC,KAFR;AAGLlI,cAAAA,KAAK,EAAEktC;AAHF,aAAP;AAKD;;AAED,iBAAO;AACLzhC,YAAAA,IAAI,EAAE,SADD;AAEL+K,YAAAA,GAAG,EAAEsG;AAFA,WAAP;AAID;;AAEH,WAAKvb,OAAO,CAACqF,KAAb;AACA,WAAKrF,OAAO,CAACsF,MAAb;AACE;AACE,gBAAMqmC,OAAO,GAAG,KAAKl0B,mBAAL,CAAyB,KAAKtQ,KAAL,CAAWnH,OAAO,CAACqF,KAAnB,CAAzB,CAAhB;;AAEA,cAAIqmC,SAAS,EAAb,EAAiB;AACf,mBAAO;AACLxhC,cAAAA,IAAI,EAAE,SADD;AAEL+K,cAAAA,GAAG,EAAE02B,OAAO,CAAChlC,KAFR;AAGLlI,cAAAA,KAAK,EAAEktC;AAHF,aAAP;AAKD;;AAED,iBAAO;AACLzhC,YAAAA,IAAI,EAAE,SADD;AAEL+K,YAAAA,GAAG,EAAEsG;AAFA,WAAP;AAID;;AAEH;AACE,eAAO;AACLrR,UAAAA,IAAI,EAAE,SADD;AAEL+K,UAAAA,GAAG,EAAEsG;AAFA,SAAP;AAzDJ;AA8DD;;AAEDqwB,EAAAA,iBAAiB,GAAG;AAClB,UAAM32B,GAAG,GAAG,KAAK/L,KAAL,CAAWvC,KAAvB;AACA,UAAMuT,EAAE,GAAG,KAAK8gB,eAAL,CAAqB,IAArB,CAAX;AACA,UAAMnV,IAAI,GAAG,KAAK0B,GAAL,CAASvnB,OAAO,CAACmC,EAAjB,IAAuB,KAAKspC,kBAAL,EAAvB,GAAmD;AAC9DvhC,MAAAA,IAAI,EAAE,MADwD;AAE9D+K,MAAAA;AAF8D,KAAhE;AAIA,WAAO;AACLiF,MAAAA,EADK;AAEL2L,MAAAA;AAFK,KAAP;AAID;;AAEDgmB,EAAAA,iCAAiC,CAAC52B,GAAD,EAAMqI,OAAN,EAAewuB,YAAf,EAA6B;AAC5D,UAAM;AACJR,MAAAA;AADI,QAEFhuB,OAFJ;;AAIA,QAAIguB,YAAY,KAAK,IAArB,EAA2B;AACzB;AACD;;AAED,QAAIA,YAAY,KAAKQ,YAArB,EAAmC;AACjC,WAAKT,qCAAL,CAA2Cp2B,GAA3C,EAAgDqI,OAAhD;AACD;AACF;;AAEDyuB,EAAAA,eAAe,CAAC;AACdlB,IAAAA,QADc;AAEdS,IAAAA;AAFc,GAAD,EAGZ;AACD,UAAMU,SAAS,GAAG,IAAIztB,GAAJ,EAAlB;AACA,UAAM0tB,OAAO,GAAG;AACdC,MAAAA,cAAc,EAAE,EADF;AAEdC,MAAAA,aAAa,EAAE,EAFD;AAGdC,MAAAA,aAAa,EAAE,EAHD;AAIdC,MAAAA,gBAAgB,EAAE;AAJJ,KAAhB;AAMA,QAAIC,iBAAiB,GAAG,KAAxB;;AAEA,WAAO,CAAC,KAAKnlC,KAAL,CAAWnH,OAAO,CAACgB,MAAnB,CAAR,EAAoC;AAClC,UAAI,KAAKumB,GAAL,CAASvnB,OAAO,CAAC6B,QAAjB,CAAJ,EAAgC;AAC9ByqC,QAAAA,iBAAiB,GAAG,IAApB;AACA;AACD;;AAED,YAAMC,UAAU,GAAG,KAAK7xB,SAAL,EAAnB;AACA,YAAM;AACJR,QAAAA,EADI;AAEJ2L,QAAAA;AAFI,UAGF,KAAK+lB,iBAAL,EAHJ;AAIA,YAAMd,UAAU,GAAG5wB,EAAE,CAACva,IAAtB;;AAEA,UAAImrC,UAAU,KAAK,EAAnB,EAAuB;AACrB;AACD;;AAED,UAAI,SAAS9sB,IAAT,CAAc8sB,UAAd,CAAJ,EAA+B;AAC7B,aAAKC,8BAAL,CAAoC7wB,EAAE,CAACvT,KAAvC,EAA8C;AAC5CkkC,UAAAA,QAD4C;AAE5CC,UAAAA;AAF4C,SAA9C;AAID;;AAED,UAAIkB,SAAS,CAACpkC,GAAV,CAAckjC,UAAd,CAAJ,EAA+B;AAC7B,aAAKG,gCAAL,CAAsC/wB,EAAE,CAACvT,KAAzC,EAAgD;AAC9CkkC,UAAAA,QAD8C;AAE9CC,UAAAA;AAF8C,SAAhD;AAID;;AAEDkB,MAAAA,SAAS,CAACpoB,GAAV,CAAcknB,UAAd;AACA,YAAMxtB,OAAO,GAAG;AACdutB,QAAAA,QADc;AAEdS,QAAAA,YAFc;AAGdR,QAAAA;AAHc,OAAhB;AAKAyB,MAAAA,UAAU,CAACryB,EAAX,GAAgBA,EAAhB;;AAEA,cAAQ2L,IAAI,CAAC3b,IAAb;AACE,aAAK,SAAL;AACE;AACE,iBAAK2hC,iCAAL,CAAuChmB,IAAI,CAAC5Q,GAA5C,EAAiDqI,OAAjD,EAA0D,SAA1D;AACAivB,YAAAA,UAAU,CAAC1mB,IAAX,GAAkBA,IAAI,CAACpnB,KAAvB;AACAwtC,YAAAA,OAAO,CAACC,cAAR,CAAuB/iC,IAAvB,CAA4B,KAAK0R,UAAL,CAAgB0xB,UAAhB,EAA4B,mBAA5B,CAA5B;AACA;AACD;;AAEH,aAAK,QAAL;AACE;AACE,iBAAKV,iCAAL,CAAuChmB,IAAI,CAAC5Q,GAA5C,EAAiDqI,OAAjD,EAA0D,QAA1D;AACAivB,YAAAA,UAAU,CAAC1mB,IAAX,GAAkBA,IAAI,CAACpnB,KAAvB;AACAwtC,YAAAA,OAAO,CAACE,aAAR,CAAsBhjC,IAAtB,CAA2B,KAAK0R,UAAL,CAAgB0xB,UAAhB,EAA4B,kBAA5B,CAA3B;AACA;AACD;;AAEH,aAAK,QAAL;AACE;AACE,iBAAKV,iCAAL,CAAuChmB,IAAI,CAAC5Q,GAA5C,EAAiDqI,OAAjD,EAA0D,QAA1D;AACAivB,YAAAA,UAAU,CAAC1mB,IAAX,GAAkBA,IAAI,CAACpnB,KAAvB;AACAwtC,YAAAA,OAAO,CAACG,aAAR,CAAsBjjC,IAAtB,CAA2B,KAAK0R,UAAL,CAAgB0xB,UAAhB,EAA4B,kBAA5B,CAA3B;AACA;AACD;;AAEH,aAAK,SAAL;AACE;AACE,kBAAM,KAAKlB,qCAAL,CAA2CxlB,IAAI,CAAC5Q,GAAhD,EAAqDqI,OAArD,CAAN;AACD;;AAEH,aAAK,MAAL;AACE;AACE,oBAAQguB,YAAR;AACE,mBAAK,SAAL;AACE,qBAAKV,wCAAL,CAA8C/kB,IAAI,CAAC5Q,GAAnD,EAAwDqI,OAAxD;AACA;;AAEF,mBAAK,QAAL;AACE,qBAAKiuB,uCAAL,CAA6C1lB,IAAI,CAAC5Q,GAAlD,EAAuDqI,OAAvD;AACA;;AAEF;AACE2uB,gBAAAA,OAAO,CAACI,gBAAR,CAAyBljC,IAAzB,CAA8B,KAAK0R,UAAL,CAAgB0xB,UAAhB,EAA4B,qBAA5B,CAA9B;AAVJ;AAYD;AA5CL;;AA+CA,UAAI,CAAC,KAAKplC,KAAL,CAAWnH,OAAO,CAACgB,MAAnB,CAAL,EAAiC;AAC/B,aAAKsxB,MAAL,CAAYtyB,OAAO,CAACoB,KAApB;AACD;AACF;;AAED,WAAO;AACL6qC,MAAAA,OADK;AAELK,MAAAA;AAFK,KAAP;AAID;;AAEDE,EAAAA,qBAAqB,CAACC,kBAAD,EAAqBJ,gBAArB,EAAuC;AAC1DxB,IAAAA;AAD0D,GAAvC,EAElB;AACD,QAAI4B,kBAAkB,CAAC5jC,MAAnB,KAA8B,CAAlC,EAAqC;AACnC,aAAOwjC,gBAAP;AACD,KAFD,MAEO,IAAIA,gBAAgB,CAACxjC,MAAjB,KAA4B,CAAhC,EAAmC;AACxC,aAAO4jC,kBAAP;AACD,KAFM,MAEA,IAAIJ,gBAAgB,CAACxjC,MAAjB,GAA0B4jC,kBAAkB,CAAC5jC,MAAjD,EAAyD;AAC9D,WAAK,MAAMs8B,MAAX,IAAqBsH,kBAArB,EAAyC;AACvC,aAAKjB,kDAAL,CAAwDrG,MAAM,CAACx+B,KAA/D,EAAsE;AACpEkkC,UAAAA;AADoE,SAAtE;AAGD;;AAED,aAAOwB,gBAAP;AACD,KARM,MAQA;AACL,WAAK,MAAMlH,MAAX,IAAqBkH,gBAArB,EAAuC;AACrC,aAAKb,kDAAL,CAAwDrG,MAAM,CAACx+B,KAA/D,EAAsE;AACpEkkC,UAAAA;AADoE,SAAtE;AAGD;;AAED,aAAO4B,kBAAP;AACD;AACF;;AAEDC,EAAAA,yBAAyB,CAAC;AACxB7B,IAAAA;AADwB,GAAD,EAEtB;AACD,QAAI,KAAK/Y,aAAL,CAAmB,IAAnB,CAAJ,EAA8B;AAC5B,UAAI,CAAC,KAAK3qB,KAAL,CAAWnH,OAAO,CAACL,IAAnB,CAAL,EAA+B;AAC7B,cAAM,KAAKwrC,gCAAL,CAAsC,KAAKjiC,KAAL,CAAWvC,KAAjD,EAAwD;AAC5DkkC,UAAAA,QAD4D;AAE5DO,UAAAA,YAAY,EAAE;AAF8C,SAAxD,CAAN;AAID;;AAED,YAAM;AACJ3sC,QAAAA;AADI,UAEF,KAAKyK,KAFT;AAGA,WAAKiW,IAAL;;AAEA,UAAI1gB,KAAK,KAAK,SAAV,IAAuBA,KAAK,KAAK,QAAjC,IAA6CA,KAAK,KAAK,QAAvD,IAAmEA,KAAK,KAAK,QAAjF,EAA2F;AACzF,aAAK0sC,gCAAL,CAAsC,KAAKjiC,KAAL,CAAWvC,KAAjD,EAAwD;AACtDkkC,UAAAA,QADsD;AAEtDO,UAAAA,YAAY,EAAE3sC;AAFwC,SAAxD;AAID;;AAED,aAAOA,KAAP;AACD;;AAED,WAAO,IAAP;AACD;;AAEDkuC,EAAAA,YAAY,CAAC1kC,IAAD,EAAO;AACjB4iC,IAAAA,QADiB;AAEjB+B,IAAAA;AAFiB,GAAP,EAGT;AACD,UAAMtB,YAAY,GAAG,KAAKoB,yBAAL,CAA+B;AAClD7B,MAAAA;AADkD,KAA/B,CAArB;AAGA,SAAKvY,MAAL,CAAYtyB,OAAO,CAACa,MAApB;AACA,UAAM;AACJorC,MAAAA,OADI;AAEJK,MAAAA;AAFI,QAGF,KAAKP,eAAL,CAAqB;AACvBlB,MAAAA,QADuB;AAEvBS,MAAAA;AAFuB,KAArB,CAHJ;AAOArjC,IAAAA,IAAI,CAACqkC,iBAAL,GAAyBA,iBAAzB;;AAEA,YAAQhB,YAAR;AACE,WAAK,SAAL;AACErjC,QAAAA,IAAI,CAACqjC,YAAL,GAAoB,IAApB;AACArjC,QAAAA,IAAI,CAACgkC,OAAL,GAAeA,OAAO,CAACC,cAAvB;AACA,aAAK5Z,MAAL,CAAYtyB,OAAO,CAACgB,MAApB;AACA,eAAO,KAAK6Z,UAAL,CAAgB5S,IAAhB,EAAsB,iBAAtB,CAAP;;AAEF,WAAK,QAAL;AACEA,QAAAA,IAAI,CAACqjC,YAAL,GAAoB,IAApB;AACArjC,QAAAA,IAAI,CAACgkC,OAAL,GAAeA,OAAO,CAACE,aAAvB;AACA,aAAK7Z,MAAL,CAAYtyB,OAAO,CAACgB,MAApB;AACA,eAAO,KAAK6Z,UAAL,CAAgB5S,IAAhB,EAAsB,gBAAtB,CAAP;;AAEF,WAAK,QAAL;AACEA,QAAAA,IAAI,CAACqjC,YAAL,GAAoB,IAApB;AACArjC,QAAAA,IAAI,CAACgkC,OAAL,GAAe,KAAKO,qBAAL,CAA2BP,OAAO,CAACG,aAAnC,EAAkDH,OAAO,CAACI,gBAA1D,EAA4E;AACzFxB,UAAAA;AADyF,SAA5E,CAAf;AAGA,aAAKvY,MAAL,CAAYtyB,OAAO,CAACgB,MAApB;AACA,eAAO,KAAK6Z,UAAL,CAAgB5S,IAAhB,EAAsB,gBAAtB,CAAP;;AAEF,WAAK,QAAL;AACEA,QAAAA,IAAI,CAACgkC,OAAL,GAAeA,OAAO,CAACI,gBAAvB;AACA,aAAK/Z,MAAL,CAAYtyB,OAAO,CAACgB,MAApB;AACA,eAAO,KAAK6Z,UAAL,CAAgB5S,IAAhB,EAAsB,gBAAtB,CAAP;;AAEF;AACE;AACE,gBAAM4kC,KAAK,GAAG,MAAM;AAClB5kC,YAAAA,IAAI,CAACgkC,OAAL,GAAe,EAAf;AACA,iBAAK3Z,MAAL,CAAYtyB,OAAO,CAACgB,MAApB;AACA,mBAAO,KAAK6Z,UAAL,CAAgB5S,IAAhB,EAAsB,gBAAtB,CAAP;AACD,WAJD;;AAMAA,UAAAA,IAAI,CAACqjC,YAAL,GAAoB,KAApB;AACA,gBAAMwB,QAAQ,GAAGb,OAAO,CAACC,cAAR,CAAuBrjC,MAAxC;AACA,gBAAMkkC,OAAO,GAAGd,OAAO,CAACE,aAAR,CAAsBtjC,MAAtC;AACA,gBAAMmkC,OAAO,GAAGf,OAAO,CAACG,aAAR,CAAsBvjC,MAAtC;AACA,gBAAMokC,YAAY,GAAGhB,OAAO,CAACI,gBAAR,CAAyBxjC,MAA9C;;AAEA,cAAI,CAACikC,QAAD,IAAa,CAACC,OAAd,IAAyB,CAACC,OAA1B,IAAqC,CAACC,YAA1C,EAAwD;AACtD,mBAAOJ,KAAK,EAAZ;AACD,WAFD,MAEO,IAAI,CAACC,QAAD,IAAa,CAACC,OAAlB,EAA2B;AAChC9kC,YAAAA,IAAI,CAACgkC,OAAL,GAAe,KAAKO,qBAAL,CAA2BP,OAAO,CAACG,aAAnC,EAAkDH,OAAO,CAACI,gBAA1D,EAA4E;AACzFxB,cAAAA;AADyF,aAA5E,CAAf;AAGA,iBAAKvY,MAAL,CAAYtyB,OAAO,CAACgB,MAApB;AACA,mBAAO,KAAK6Z,UAAL,CAAgB5S,IAAhB,EAAsB,gBAAtB,CAAP;AACD,WANM,MAMA,IAAI,CAAC8kC,OAAD,IAAY,CAACC,OAAb,IAAwBF,QAAQ,IAAIG,YAAxC,EAAsD;AAC3D,iBAAK,MAAM9H,MAAX,IAAqB8G,OAAO,CAACI,gBAA7B,EAA+C;AAC7C,mBAAKzB,wCAAL,CAA8CzF,MAAM,CAACx+B,KAArD,EAA4D;AAC1DkkC,gBAAAA,QAD0D;AAE1DC,gBAAAA,UAAU,EAAE3F,MAAM,CAACjrB,EAAP,CAAUva;AAFoC,eAA5D;AAID;;AAEDsI,YAAAA,IAAI,CAACgkC,OAAL,GAAeA,OAAO,CAACC,cAAvB;AACA,iBAAK5Z,MAAL,CAAYtyB,OAAO,CAACgB,MAApB;AACA,mBAAO,KAAK6Z,UAAL,CAAgB5S,IAAhB,EAAsB,iBAAtB,CAAP;AACD,WAXM,MAWA,IAAI,CAAC6kC,QAAD,IAAa,CAACE,OAAd,IAAyBD,OAAO,IAAIE,YAAxC,EAAsD;AAC3D,iBAAK,MAAM9H,MAAX,IAAqB8G,OAAO,CAACI,gBAA7B,EAA+C;AAC7C,mBAAKd,uCAAL,CAA6CpG,MAAM,CAACx+B,KAApD,EAA2D;AACzDkkC,gBAAAA,QADyD;AAEzDC,gBAAAA,UAAU,EAAE3F,MAAM,CAACjrB,EAAP,CAAUva;AAFmC,eAA3D;AAID;;AAEDsI,YAAAA,IAAI,CAACgkC,OAAL,GAAeA,OAAO,CAACE,aAAvB;AACA,iBAAK7Z,MAAL,CAAYtyB,OAAO,CAACgB,MAApB;AACA,mBAAO,KAAK6Z,UAAL,CAAgB5S,IAAhB,EAAsB,gBAAtB,CAAP;AACD,WAXM,MAWA;AACL,iBAAKijC,qCAAL,CAA2C0B,OAA3C,EAAoD;AAClD/B,cAAAA;AADkD,aAApD;AAGA,mBAAOgC,KAAK,EAAZ;AACD;AACF;AA5EL;AA8ED;;AAEDpK,EAAAA,wBAAwB,CAACx6B,IAAD,EAAO;AAC7B,UAAMiS,EAAE,GAAG,KAAK8gB,eAAL,EAAX;AACA/yB,IAAAA,IAAI,CAACiS,EAAL,GAAUA,EAAV;AACAjS,IAAAA,IAAI,CAACqR,IAAL,GAAY,KAAKqzB,YAAL,CAAkB,KAAKjyB,SAAL,EAAlB,EAAoC;AAC9CmwB,MAAAA,QAAQ,EAAE3wB,EAAE,CAACva,IADiC;AAE9CitC,MAAAA,OAAO,EAAE1yB,EAAE,CAACvT;AAFkC,KAApC,CAAZ;AAIA,WAAO,KAAKkU,UAAL,CAAgB5S,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAED6hC,EAAAA,mBAAmB,GAAG;AACpB,UAAM3qB,IAAI,GAAG,KAAK0I,cAAL,EAAb;;AAEA,QAAI,KAAK7gB,KAAL,CAAWiD,UAAX,CAAsBkV,IAAtB,MAAgC,EAApC,EAAwC;AACtC,YAAM+tB,SAAS,GAAG,KAAKlmC,KAAL,CAAWiD,UAAX,CAAsBkV,IAAI,GAAG,CAA7B,CAAlB;AACA,aAAO+tB,SAAS,KAAK,EAAd,IAAoBA,SAAS,KAAK,EAAzC;AACD;;AAED,WAAO,KAAP;AACD;;AAEDjE,EAAAA,6BAA6B,CAAChhC,IAAD,EAAO;AAClC,WAAOA,IAAI,CAACiC,IAAL,KAAc,oBAAd,GAAqCjC,IAAI,CAAC8P,UAA1C,GAAuD9P,IAA9D;AACD;;AApwFgD,CAAnD;;AAwwFA,MAAMklC,QAAQ,GAAG;AACfC,EAAAA,IAAI,EAAE,QADS;AAEfC,EAAAA,GAAG,EAAE,GAFU;AAGfC,EAAAA,IAAI,EAAE,QAHS;AAIfC,EAAAA,EAAE,EAAE,GAJW;AAKfC,EAAAA,EAAE,EAAE,GALW;AAMfC,EAAAA,IAAI,EAAE,QANS;AAOfC,EAAAA,KAAK,EAAE,QAPQ;AAQfC,EAAAA,IAAI,EAAE,QARS;AASfC,EAAAA,KAAK,EAAE,QATQ;AAUfC,EAAAA,MAAM,EAAE,QAVO;AAWfC,EAAAA,GAAG,EAAE,QAXU;AAYfC,EAAAA,MAAM,EAAE,QAZO;AAafC,EAAAA,IAAI,EAAE,QAbS;AAcfC,EAAAA,GAAG,EAAE,QAdU;AAefC,EAAAA,IAAI,EAAE,QAfS;AAgBfC,EAAAA,IAAI,EAAE,QAhBS;AAiBfC,EAAAA,KAAK,EAAE,QAjBQ;AAkBfC,EAAAA,GAAG,EAAE,QAlBU;AAmBfC,EAAAA,GAAG,EAAE,QAnBU;AAoBfC,EAAAA,GAAG,EAAE,QApBU;AAqBfC,EAAAA,IAAI,EAAE,QArBS;AAsBfC,EAAAA,GAAG,EAAE,QAtBU;AAuBfC,EAAAA,MAAM,EAAE,QAvBO;AAwBfC,EAAAA,IAAI,EAAE,QAxBS;AAyBfC,EAAAA,IAAI,EAAE,QAzBS;AA0BfC,EAAAA,KAAK,EAAE,QA1BQ;AA2BfC,EAAAA,KAAK,EAAE,QA3BQ;AA4BfC,EAAAA,IAAI,EAAE,QA5BS;AA6BfC,EAAAA,MAAM,EAAE,QA7BO;AA8BfC,EAAAA,KAAK,EAAE,QA9BQ;AA+BfC,EAAAA,IAAI,EAAE,QA/BS;AAgCfC,EAAAA,IAAI,EAAE,QAhCS;AAiCfC,EAAAA,KAAK,EAAE,QAjCQ;AAkCfC,EAAAA,MAAM,EAAE,QAlCO;AAmCfC,EAAAA,MAAM,EAAE,QAnCO;AAoCfC,EAAAA,MAAM,EAAE,QApCO;AAqCfC,EAAAA,MAAM,EAAE,QArCO;AAsCfC,EAAAA,MAAM,EAAE,QAtCO;AAuCfC,EAAAA,MAAM,EAAE,QAvCO;AAwCfC,EAAAA,KAAK,EAAE,QAxCQ;AAyCfC,EAAAA,MAAM,EAAE,QAzCO;AA0CfC,EAAAA,IAAI,EAAE,QA1CS;AA2CfC,EAAAA,KAAK,EAAE,QA3CQ;AA4CfC,EAAAA,KAAK,EAAE,QA5CQ;AA6CfC,EAAAA,MAAM,EAAE,QA7CO;AA8CfC,EAAAA,MAAM,EAAE,QA9CO;AA+CfC,EAAAA,MAAM,EAAE,QA/CO;AAgDfC,EAAAA,KAAK,EAAE,QAhDQ;AAiDfC,EAAAA,IAAI,EAAE,QAjDS;AAkDfC,EAAAA,MAAM,EAAE,QAlDO;AAmDfC,EAAAA,MAAM,EAAE,QAnDO;AAoDfC,EAAAA,KAAK,EAAE,QApDQ;AAqDfC,EAAAA,IAAI,EAAE,QArDS;AAsDfC,EAAAA,GAAG,EAAE,QAtDU;AAuDfC,EAAAA,MAAM,EAAE,QAvDO;AAwDfC,EAAAA,MAAM,EAAE,QAxDO;AAyDfC,EAAAA,MAAM,EAAE,QAzDO;AA0DfC,EAAAA,KAAK,EAAE,QA1DQ;AA2DfC,EAAAA,MAAM,EAAE,QA3DO;AA4DfC,EAAAA,IAAI,EAAE,QA5DS;AA6DfC,EAAAA,KAAK,EAAE,QA7DQ;AA8DfC,EAAAA,MAAM,EAAE,QA9DO;AA+DfC,EAAAA,MAAM,EAAE,QA/DO;AAgEfC,EAAAA,MAAM,EAAE,QAhEO;AAiEfC,EAAAA,KAAK,EAAE,QAjEQ;AAkEfC,EAAAA,IAAI,EAAE,QAlES;AAmEfC,EAAAA,MAAM,EAAE,QAnEO;AAoEfC,EAAAA,KAAK,EAAE,QApEQ;AAqEfC,EAAAA,KAAK,EAAE,QArEQ;AAsEfC,EAAAA,MAAM,EAAE,QAtEO;AAuEfC,EAAAA,MAAM,EAAE,QAvEO;AAwEfC,EAAAA,KAAK,EAAE,QAxEQ;AAyEfC,EAAAA,MAAM,EAAE,QAzEO;AA0EfC,EAAAA,IAAI,EAAE,QA1ES;AA2EfC,EAAAA,KAAK,EAAE,QA3EQ;AA4EfC,EAAAA,KAAK,EAAE,QA5EQ;AA6EfC,EAAAA,MAAM,EAAE,QA7EO;AA8EfC,EAAAA,MAAM,EAAE,QA9EO;AA+EfC,EAAAA,MAAM,EAAE,QA/EO;AAgFfC,EAAAA,KAAK,EAAE,QAhFQ;AAiFfC,EAAAA,IAAI,EAAE,QAjFS;AAkFfC,EAAAA,MAAM,EAAE,QAlFO;AAmFfC,EAAAA,MAAM,EAAE,QAnFO;AAoFfC,EAAAA,KAAK,EAAE,QApFQ;AAqFfC,EAAAA,IAAI,EAAE,QArFS;AAsFfC,EAAAA,GAAG,EAAE,QAtFU;AAuFfC,EAAAA,MAAM,EAAE,QAvFO;AAwFfC,EAAAA,MAAM,EAAE,QAxFO;AAyFfC,EAAAA,MAAM,EAAE,QAzFO;AA0FfC,EAAAA,KAAK,EAAE,QA1FQ;AA2FfC,EAAAA,MAAM,EAAE,QA3FO;AA4FfC,EAAAA,IAAI,EAAE,QA5FS;AA6FfC,EAAAA,MAAM,EAAE,QA7FO;AA8FfC,EAAAA,MAAM,EAAE,QA9FO;AA+FfC,EAAAA,MAAM,EAAE,QA/FO;AAgGfC,EAAAA,MAAM,EAAE,QAhGO;AAiGfC,EAAAA,KAAK,EAAE,QAjGQ;AAkGfC,EAAAA,IAAI,EAAE,QAlGS;AAmGfC,EAAAA,MAAM,EAAE,QAnGO;AAoGfC,EAAAA,KAAK,EAAE,QApGQ;AAqGfC,EAAAA,IAAI,EAAE,QArGS;AAsGfC,EAAAA,KAAK,EAAE,QAtGQ;AAuGfC,EAAAA,KAAK,EAAE,QAvGQ;AAwGfC,EAAAA,MAAM,EAAE,QAxGO;AAyGfC,EAAAA,MAAM,EAAE,QAzGO;AA0GfC,EAAAA,IAAI,EAAE,QA1GS;AA2GfC,EAAAA,IAAI,EAAE,QA3GS;AA4GfC,EAAAA,IAAI,EAAE,QA5GS;AA6GftxC,EAAAA,KAAK,EAAE,QA7GQ;AA8GfuxC,EAAAA,KAAK,EAAE,QA9GQ;AA+GfC,EAAAA,IAAI,EAAE,QA/GS;AAgHfC,EAAAA,KAAK,EAAE,QAhHQ;AAiHfC,EAAAA,KAAK,EAAE,QAjHQ;AAkHfC,EAAAA,OAAO,EAAE,QAlHM;AAmHfC,EAAAA,IAAI,EAAE,QAnHS;AAoHfC,EAAAA,GAAG,EAAE,QApHU;AAqHfC,EAAAA,KAAK,EAAE,QArHQ;AAsHfC,EAAAA,IAAI,EAAE,QAtHS;AAuHfC,EAAAA,KAAK,EAAE,QAvHQ;AAwHfC,EAAAA,MAAM,EAAE,QAxHO;AAyHfC,EAAAA,EAAE,EAAE,QAzHW;AA0HfC,EAAAA,EAAE,EAAE,QA1HW;AA2HfC,EAAAA,EAAE,EAAE,QA3HW;AA4HfC,EAAAA,OAAO,EAAE,QA5HM;AA6HfC,EAAAA,EAAE,EAAE,QA7HW;AA8HfC,EAAAA,GAAG,EAAE,QA9HU;AA+HfC,EAAAA,KAAK,EAAE,QA/HQ;AAgIfC,EAAAA,GAAG,EAAE,QAhIU;AAiIfC,EAAAA,OAAO,EAAE,QAjIM;AAkIfC,EAAAA,GAAG,EAAE,QAlIU;AAmIfC,EAAAA,GAAG,EAAE,QAnIU;AAoIfC,EAAAA,GAAG,EAAE,QApIU;AAqIfC,EAAAA,KAAK,EAAE,QArIQ;AAsIfC,EAAAA,KAAK,EAAE,QAtIQ;AAuIfC,EAAAA,IAAI,EAAE,QAvIS;AAwIfC,EAAAA,KAAK,EAAE,QAxIQ;AAyIfC,EAAAA,KAAK,EAAE,QAzIQ;AA0IfC,EAAAA,OAAO,EAAE,QA1IM;AA2IfC,EAAAA,IAAI,EAAE,QA3IS;AA4IfC,EAAAA,GAAG,EAAE,QA5IU;AA6IfC,EAAAA,KAAK,EAAE,QA7IQ;AA8IfC,EAAAA,IAAI,EAAE,QA9IS;AA+IfC,EAAAA,KAAK,EAAE,QA/IQ;AAgJfC,EAAAA,MAAM,EAAE,QAhJO;AAiJfC,EAAAA,EAAE,EAAE,QAjJW;AAkJfC,EAAAA,EAAE,EAAE,QAlJW;AAmJfC,EAAAA,EAAE,EAAE,QAnJW;AAoJfC,EAAAA,OAAO,EAAE,QApJM;AAqJfC,EAAAA,EAAE,EAAE,QArJW;AAsJfC,EAAAA,GAAG,EAAE,QAtJU;AAuJfC,EAAAA,MAAM,EAAE,QAvJO;AAwJfC,EAAAA,KAAK,EAAE,QAxJQ;AAyJfC,EAAAA,GAAG,EAAE,QAzJU;AA0JfC,EAAAA,OAAO,EAAE,QA1JM;AA2JfC,EAAAA,GAAG,EAAE,QA3JU;AA4JfC,EAAAA,GAAG,EAAE,QA5JU;AA6JfC,EAAAA,GAAG,EAAE,QA7JU;AA8JfC,EAAAA,KAAK,EAAE,QA9JQ;AA+JfC,EAAAA,QAAQ,EAAE,QA/JK;AAgKfC,EAAAA,KAAK,EAAE,QAhKQ;AAiKfC,EAAAA,GAAG,EAAE,QAjKU;AAkKfC,EAAAA,IAAI,EAAE,QAlKS;AAmKfC,EAAAA,IAAI,EAAE,QAnKS;AAoKfC,EAAAA,MAAM,EAAE,QApKO;AAqKfC,EAAAA,IAAI,EAAE,QArKS;AAsKfC,EAAAA,GAAG,EAAE,QAtKU;AAuKfC,EAAAA,GAAG,EAAE,QAvKU;AAwKfC,EAAAA,GAAG,EAAE,QAxKU;AAyKfC,EAAAA,KAAK,EAAE,QAzKQ;AA0KfC,EAAAA,KAAK,EAAE,QA1KQ;AA2KfC,EAAAA,KAAK,EAAE,QA3KQ;AA4KfC,EAAAA,KAAK,EAAE,QA5KQ;AA6KfC,EAAAA,KAAK,EAAE,QA7KQ;AA8KfC,EAAAA,KAAK,EAAE,QA9KQ;AA+KfC,EAAAA,KAAK,EAAE,QA/KQ;AAgLfC,EAAAA,KAAK,EAAE,QAhLQ;AAiLfC,EAAAA,MAAM,EAAE,QAjLO;AAkLfC,EAAAA,MAAM,EAAE,QAlLO;AAmLfC,EAAAA,IAAI,EAAE,QAnLS;AAoLfC,EAAAA,MAAM,EAAE,QApLO;AAqLfC,EAAAA,MAAM,EAAE,QArLO;AAsLfC,EAAAA,KAAK,EAAE,QAtLQ;AAuLfC,EAAAA,KAAK,EAAE,QAvLQ;AAwLfC,EAAAA,MAAM,EAAE,QAxLO;AAyLfC,EAAAA,MAAM,EAAE,QAzLO;AA0LfC,EAAAA,KAAK,EAAE,QA1LQ;AA2LfC,EAAAA,KAAK,EAAE,QA3LQ;AA4LfC,EAAAA,IAAI,EAAE,QA5LS;AA6LfC,EAAAA,KAAK,EAAE,QA7LQ;AA8LfC,EAAAA,MAAM,EAAE,QA9LO;AA+LfC,EAAAA,IAAI,EAAE,QA/LS;AAgMfC,EAAAA,KAAK,EAAE,QAhMQ;AAiMfC,EAAAA,OAAO,EAAE,QAjMM;AAkMfC,EAAAA,IAAI,EAAE,QAlMS;AAmMfC,EAAAA,IAAI,EAAE,QAnMS;AAoMfC,EAAAA,IAAI,EAAE,QApMS;AAqMfC,EAAAA,IAAI,EAAE,QArMS;AAsMfC,EAAAA,IAAI,EAAE,QAtMS;AAuMfC,EAAAA,KAAK,EAAE,QAvMQ;AAwMfC,EAAAA,IAAI,EAAE,QAxMS;AAyMfC,EAAAA,IAAI,EAAE,QAzMS;AA0MfC,EAAAA,IAAI,EAAE,QA1MS;AA2MfC,EAAAA,IAAI,EAAE,QA3MS;AA4MfC,EAAAA,IAAI,EAAE,QA5MS;AA6MfC,EAAAA,MAAM,EAAE,QA7MO;AA8MfC,EAAAA,IAAI,EAAE,QA9MS;AA+MfC,EAAAA,KAAK,EAAE,QA/MQ;AAgNfpN,EAAAA,KAAK,EAAE,QAhNQ;AAiNfqN,EAAAA,KAAK,EAAE,QAjNQ;AAkNfC,EAAAA,IAAI,EAAE,QAlNS;AAmNfC,EAAAA,KAAK,EAAE,QAnNQ;AAoNfC,EAAAA,EAAE,EAAE,QApNW;AAqNfC,EAAAA,IAAI,EAAE,QArNS;AAsNfC,EAAAA,GAAG,EAAE,QAtNU;AAuNfC,EAAAA,KAAK,EAAE,QAvNQ;AAwNfC,EAAAA,MAAM,EAAE,QAxNO;AAyNfC,EAAAA,KAAK,EAAE,QAzNQ;AA0Nfx/B,EAAAA,IAAI,EAAE,QA1NS;AA2Nfy/B,EAAAA,KAAK,EAAE,QA3NQ;AA4NfC,EAAAA,GAAG,EAAE,QA5NU;AA6NfC,EAAAA,GAAG,EAAE,QA7NU;AA8NfC,EAAAA,EAAE,EAAE,QA9NW;AA+NfC,EAAAA,GAAG,EAAE,QA/NU;AAgOfC,EAAAA,GAAG,EAAE,QAhOU;AAiOfC,EAAAA,GAAG,EAAE,QAjOU;AAkOfC,EAAAA,MAAM,EAAE,QAlOO;AAmOfC,EAAAA,GAAG,EAAE,QAnOU;AAoOfC,EAAAA,IAAI,EAAE,QApOS;AAqOfC,EAAAA,KAAK,EAAE,QArOQ;AAsOfC,EAAAA,EAAE,EAAE,QAtOW;AAuOfC,EAAAA,KAAK,EAAE,QAvOQ;AAwOfC,EAAAA,EAAE,EAAE,QAxOW;AAyOfC,EAAAA,EAAE,EAAE,QAzOW;AA0OfC,EAAAA,GAAG,EAAE,QA1OU;AA2OfC,EAAAA,GAAG,EAAE,QA3OU;AA4OfC,EAAAA,IAAI,EAAE,QA5OS;AA6OfC,EAAAA,IAAI,EAAE,QA7OS;AA8OfC,EAAAA,IAAI,EAAE,QA9OS;AA+OfC,EAAAA,KAAK,EAAE,QA/OQ;AAgPfC,EAAAA,MAAM,EAAE,QAhPO;AAiPfC,EAAAA,IAAI,EAAE,QAjPS;AAkPfC,EAAAA,IAAI,EAAE,QAlPS;AAmPfC,EAAAA,KAAK,EAAE,QAnPQ;AAoPfC,EAAAA,KAAK,EAAE,QApPQ;AAqPfC,EAAAA,MAAM,EAAE,QArPO;AAsPfC,EAAAA,MAAM,EAAE,QAtPO;AAuPfC,EAAAA,IAAI,EAAE,QAvPS;AAwPfC,EAAAA,IAAI,EAAE,QAxPS;AAyPfC,EAAAA,GAAG,EAAE,QAzPU;AA0PfC,EAAAA,MAAM,EAAE,QA1PO;AA2PfC,EAAAA,KAAK,EAAE,QA3PQ;AA4PfC,EAAAA,MAAM,EAAE,QA5PO;AA6PfC,EAAAA,KAAK,EAAE;AA7PQ,CAAjB;AAgQA,MAAMC,UAAU,GAAG,eAAnB;AACA,MAAMC,cAAc,GAAG,OAAvB;AACA,MAAMC,SAAS,GAAGlyC,kBAAkB,CAAC;AACnCmyC,EAAAA,gBAAgB,EAAE,8DADiB;AAEnCC,EAAAA,wBAAwB,EAAE,kDAFS;AAGnCC,EAAAA,yBAAyB,EAAE,gDAHQ;AAInCC,EAAAA,4BAA4B,EAAE,0GAJK;AAKnCC,EAAAA,mBAAmB,EAAE,gEALc;AAMnCC,EAAAA,sBAAsB,EAAE,4BANW;AAOnCC,EAAAA,4BAA4B,EAAE;AAPK,CAAD,EAQjC9yC,UAAU,CAACE,WARsB,CAApC;AASAyS,KAAK,CAACsrB,MAAN,GAAe,IAAIxrB,UAAJ,CAAe,MAAf,CAAf;AACAE,KAAK,CAACogC,MAAN,GAAe,IAAItgC,UAAJ,CAAe,OAAf,CAAf;AACAE,KAAK,CAACurB,MAAN,GAAe,IAAIzrB,UAAJ,CAAe,gBAAf,EAAiC,IAAjC,CAAf;AACAld,OAAO,CAACy9C,OAAR,GAAkB,IAAIz+C,SAAJ,CAAc,SAAd,CAAlB;AACAgB,OAAO,CAAC09C,OAAR,GAAkB,IAAI1+C,SAAJ,CAAc,SAAd,EAAyB;AACzCN,EAAAA,UAAU,EAAE;AAD6B,CAAzB,CAAlB;AAGAsB,OAAO,CAAC2+B,WAAR,GAAsB,IAAI3/B,SAAJ,CAAc,aAAd,EAA6B;AACjDL,EAAAA,UAAU,EAAE;AADqC,CAA7B,CAAtB;AAGAqB,OAAO,CAAC29C,SAAR,GAAoB,IAAI3+C,SAAJ,CAAc,WAAd,CAApB;;AAEAgB,OAAO,CAAC2+B,WAAR,CAAoBp/B,aAApB,GAAoC+d,OAAO,IAAI;AAC7CA,EAAAA,OAAO,CAACnU,IAAR,CAAaiU,KAAK,CAACurB,MAAnB,EAA2BvrB,KAAK,CAACsrB,MAAjC;AACD,CAFD;;AAIA,SAASkV,UAAT,CAAoBC,MAApB,EAA4B;AAC1B,SAAOA,MAAM,GAAGA,MAAM,CAAC3zC,IAAP,KAAgB,oBAAhB,IAAwC2zC,MAAM,CAAC3zC,IAAP,KAAgB,oBAA3D,GAAkF,KAA/F;AACD;;AAED,SAAS4zC,mBAAT,CAA6BD,MAA7B,EAAqC;AACnC,MAAIA,MAAM,CAAC3zC,IAAP,KAAgB,eAApB,EAAqC;AACnC,WAAO2zC,MAAM,CAACl+C,IAAd;AACD;;AAED,MAAIk+C,MAAM,CAAC3zC,IAAP,KAAgB,mBAApB,EAAyC;AACvC,WAAO2zC,MAAM,CAACE,SAAP,CAAiBp+C,IAAjB,GAAwB,GAAxB,GAA8Bk+C,MAAM,CAACl+C,IAAP,CAAYA,IAAjD;AACD;;AAED,MAAIk+C,MAAM,CAAC3zC,IAAP,KAAgB,qBAApB,EAA2C;AACzC,WAAO4zC,mBAAmB,CAACD,MAAM,CAACA,MAAR,CAAnB,GAAqC,GAArC,GAA2CC,mBAAmB,CAACD,MAAM,CAAClqB,QAAR,CAArE;AACD;;AAED,QAAM,IAAIwG,KAAJ,CAAU,+BAA+B0jB,MAAM,CAAC3zC,IAAhD,CAAN;AACD;;AAED,IAAIu+B,GAAG,GAAIjyB,UAAU,IAAI,cAAcA,UAAd,CAAyB;AAChDwnC,EAAAA,YAAY,GAAG;AACb,QAAIjxB,GAAG,GAAG,EAAV;AACA,QAAIC,UAAU,GAAG,KAAK9jB,KAAL,CAAW+L,GAA5B;;AAEA,aAAS;AACP,UAAI,KAAK/L,KAAL,CAAW+L,GAAX,IAAkB,KAAKpM,MAA3B,EAAmC;AACjC,cAAM,KAAK2M,KAAL,CAAW,KAAKtM,KAAL,CAAWvC,KAAtB,EAA6Bq2C,SAAS,CAACM,sBAAvC,CAAN;AACD;;AAED,YAAMz0B,EAAE,GAAG,KAAK7hB,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAjC,CAAX;;AAEA,cAAQ4T,EAAR;AACE,aAAK,EAAL;AACA,aAAK,GAAL;AACE,cAAI,KAAK3f,KAAL,CAAW+L,GAAX,KAAmB,KAAK/L,KAAL,CAAWvC,KAAlC,EAAyC;AACvC,gBAAIkiB,EAAE,KAAK,EAAP,IAAa,KAAK3f,KAAL,CAAWuc,WAA5B,EAAyC;AACvC,gBAAE,KAAKvc,KAAL,CAAW+L,GAAb;AACA,qBAAO,KAAKqT,WAAL,CAAiBtoB,OAAO,CAAC2+B,WAAzB,CAAP;AACD;;AAED,mBAAO,MAAMnW,gBAAN,CAAuBK,EAAvB,CAAP;AACD;;AAEDkE,UAAAA,GAAG,IAAI,KAAK/lB,KAAL,CAAWoR,KAAX,CAAiB4U,UAAjB,EAA6B,KAAK9jB,KAAL,CAAW+L,GAAxC,CAAP;AACA,iBAAO,KAAKqT,WAAL,CAAiBtoB,OAAO,CAAC09C,OAAzB,EAAkC3wB,GAAlC,CAAP;;AAEF,aAAK,EAAL;AACEA,UAAAA,GAAG,IAAI,KAAK/lB,KAAL,CAAWoR,KAAX,CAAiB4U,UAAjB,EAA6B,KAAK9jB,KAAL,CAAW+L,GAAxC,CAAP;AACA8X,UAAAA,GAAG,IAAI,KAAKkxB,aAAL,EAAP;AACAjxB,UAAAA,UAAU,GAAG,KAAK9jB,KAAL,CAAW+L,GAAxB;AACA;;AAEF,aAAK,EAAL;AACA,aAAK,GAAL;AAEA;AACE,cAAIjP,SAAS,CAAC6iB,EAAD,CAAb,EAAmB;AACjBkE,YAAAA,GAAG,IAAI,KAAK/lB,KAAL,CAAWoR,KAAX,CAAiB4U,UAAjB,EAA6B,KAAK9jB,KAAL,CAAW+L,GAAxC,CAAP;AACA8X,YAAAA,GAAG,IAAI,KAAKmxB,cAAL,CAAoB,IAApB,CAAP;AACAlxB,YAAAA,UAAU,GAAG,KAAK9jB,KAAL,CAAW+L,GAAxB;AACD,WAJD,MAIO;AACL,cAAE,KAAK/L,KAAL,CAAW+L,GAAb;AACD;;AA/BL;AAkCD;AACF;;AAEDipC,EAAAA,cAAc,CAACC,aAAD,EAAgB;AAC5B,UAAMt1B,EAAE,GAAG,KAAK7hB,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAjC,CAAX;AACA,QAAI8X,GAAJ;AACA,MAAE,KAAK7jB,KAAL,CAAW+L,GAAb;;AAEA,QAAI4T,EAAE,KAAK,EAAP,IAAa,KAAK7hB,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAjC,MAA0C,EAA3D,EAA+D;AAC7D,QAAE,KAAK/L,KAAL,CAAW+L,GAAb;AACA8X,MAAAA,GAAG,GAAGoxB,aAAa,GAAG,IAAH,GAAU,MAA7B;AACD,KAHD,MAGO;AACLpxB,MAAAA,GAAG,GAAG5V,MAAM,CAAC8G,YAAP,CAAoB4K,EAApB,CAAN;AACD;;AAED,MAAE,KAAK3f,KAAL,CAAWqb,OAAb;AACA,SAAKrb,KAAL,CAAWhC,SAAX,GAAuB,KAAKgC,KAAL,CAAW+L,GAAlC;AACA,WAAO8X,GAAP;AACD;;AAEDqxB,EAAAA,aAAa,CAACtxB,KAAD,EAAQ;AACnB,QAAIC,GAAG,GAAG,EAAV;AACA,QAAIC,UAAU,GAAG,EAAE,KAAK9jB,KAAL,CAAW+L,GAA9B;;AAEA,aAAS;AACP,UAAI,KAAK/L,KAAL,CAAW+L,GAAX,IAAkB,KAAKpM,MAA3B,EAAmC;AACjC,cAAM,KAAK2M,KAAL,CAAW,KAAKtM,KAAL,CAAWvC,KAAtB,EAA6BkE,aAAa,CAACoJ,kBAA3C,CAAN;AACD;;AAED,YAAM4U,EAAE,GAAG,KAAK7hB,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAjC,CAAX;AACA,UAAI4T,EAAE,KAAKiE,KAAX,EAAkB;;AAElB,UAAIjE,EAAE,KAAK,EAAX,EAAe;AACbkE,QAAAA,GAAG,IAAI,KAAK/lB,KAAL,CAAWoR,KAAX,CAAiB4U,UAAjB,EAA6B,KAAK9jB,KAAL,CAAW+L,GAAxC,CAAP;AACA8X,QAAAA,GAAG,IAAI,KAAKkxB,aAAL,EAAP;AACAjxB,QAAAA,UAAU,GAAG,KAAK9jB,KAAL,CAAW+L,GAAxB;AACD,OAJD,MAIO,IAAIjP,SAAS,CAAC6iB,EAAD,CAAb,EAAmB;AACxBkE,QAAAA,GAAG,IAAI,KAAK/lB,KAAL,CAAWoR,KAAX,CAAiB4U,UAAjB,EAA6B,KAAK9jB,KAAL,CAAW+L,GAAxC,CAAP;AACA8X,QAAAA,GAAG,IAAI,KAAKmxB,cAAL,CAAoB,KAApB,CAAP;AACAlxB,QAAAA,UAAU,GAAG,KAAK9jB,KAAL,CAAW+L,GAAxB;AACD,OAJM,MAIA;AACL,UAAE,KAAK/L,KAAL,CAAW+L,GAAb;AACD;AACF;;AAED8X,IAAAA,GAAG,IAAI,KAAK/lB,KAAL,CAAWoR,KAAX,CAAiB4U,UAAjB,EAA6B,KAAK9jB,KAAL,CAAW+L,GAAX,EAA7B,CAAP;AACA,WAAO,KAAKqT,WAAL,CAAiBtoB,OAAO,CAACK,MAAzB,EAAiC0sB,GAAjC,CAAP;AACD;;AAEDkxB,EAAAA,aAAa,GAAG;AACd,QAAIvzB,GAAG,GAAG,EAAV;AACA,QAAI2zB,KAAK,GAAG,CAAZ;AACA,QAAIC,MAAJ;AACA,QAAIz1B,EAAE,GAAG,KAAK7hB,KAAL,CAAW,KAAKkC,KAAL,CAAW+L,GAAtB,CAAT;AACA,UAAMsG,QAAQ,GAAG,EAAE,KAAKrS,KAAL,CAAW+L,GAA9B;;AAEA,WAAO,KAAK/L,KAAL,CAAW+L,GAAX,GAAiB,KAAKpM,MAAtB,IAAgCw1C,KAAK,KAAK,EAAjD,EAAqD;AACnDx1B,MAAAA,EAAE,GAAG,KAAK7hB,KAAL,CAAW,KAAKkC,KAAL,CAAW+L,GAAX,EAAX,CAAL;;AAEA,UAAI4T,EAAE,KAAK,GAAX,EAAgB;AACd,YAAI6B,GAAG,CAAC,CAAD,CAAH,KAAW,GAAf,EAAoB;AAClB,cAAIA,GAAG,CAAC,CAAD,CAAH,KAAW,GAAf,EAAoB;AAClBA,YAAAA,GAAG,GAAGA,GAAG,CAAC0C,MAAJ,CAAW,CAAX,CAAN;;AAEA,gBAAI0vB,UAAU,CAAC9+B,IAAX,CAAgB0M,GAAhB,CAAJ,EAA0B;AACxB4zB,cAAAA,MAAM,GAAGnnC,MAAM,CAACsT,aAAP,CAAqB+B,QAAQ,CAAC9B,GAAD,EAAM,EAAN,CAA7B,CAAT;AACD;AACF,WAND,MAMO;AACLA,YAAAA,GAAG,GAAGA,GAAG,CAAC0C,MAAJ,CAAW,CAAX,CAAN;;AAEA,gBAAI2vB,cAAc,CAAC/+B,IAAf,CAAoB0M,GAApB,CAAJ,EAA8B;AAC5B4zB,cAAAA,MAAM,GAAGnnC,MAAM,CAACsT,aAAP,CAAqB+B,QAAQ,CAAC9B,GAAD,EAAM,EAAN,CAA7B,CAAT;AACD;AACF;AACF,SAdD,MAcO;AACL4zB,UAAAA,MAAM,GAAGnR,QAAQ,CAACziB,GAAD,CAAjB;AACD;;AAED;AACD;;AAEDA,MAAAA,GAAG,IAAI7B,EAAP;AACD;;AAED,QAAI,CAACy1B,MAAL,EAAa;AACX,WAAKp1C,KAAL,CAAW+L,GAAX,GAAiBsG,QAAjB;AACA,aAAO,GAAP;AACD;;AAED,WAAO+iC,MAAP;AACD;;AAEDC,EAAAA,WAAW,GAAG;AACZ,QAAI11B,EAAJ;AACA,UAAMliB,KAAK,GAAG,KAAKuC,KAAL,CAAW+L,GAAzB;;AAEA,OAAG;AACD4T,MAAAA,EAAE,GAAG,KAAK7hB,KAAL,CAAWiD,UAAX,CAAsB,EAAE,KAAKf,KAAL,CAAW+L,GAAnC,CAAL;AACD,KAFD,QAESiJ,gBAAgB,CAAC2K,EAAD,CAAhB,IAAwBA,EAAE,KAAK,EAFxC;;AAIA,WAAO,KAAKP,WAAL,CAAiBtoB,OAAO,CAACy9C,OAAzB,EAAkC,KAAKz2C,KAAL,CAAWoR,KAAX,CAAiBzR,KAAjB,EAAwB,KAAKuC,KAAL,CAAW+L,GAAnC,CAAlC,CAAP;AACD;;AAEDupC,EAAAA,kBAAkB,GAAG;AACnB,UAAMv2C,IAAI,GAAG,KAAKyS,SAAL,EAAb;;AAEA,QAAI,KAAKvT,KAAL,CAAWnH,OAAO,CAACy9C,OAAnB,CAAJ,EAAiC;AAC/Bx1C,MAAAA,IAAI,CAACtI,IAAL,GAAY,KAAKuJ,KAAL,CAAWzK,KAAvB;AACD,KAFD,MAEO,IAAI,KAAKyK,KAAL,CAAWgB,IAAX,CAAgB9K,OAApB,EAA6B;AAClC6I,MAAAA,IAAI,CAACtI,IAAL,GAAY,KAAKuJ,KAAL,CAAWgB,IAAX,CAAgB9K,OAA5B;AACD,KAFM,MAEA;AACL,WAAKmyB,UAAL;AACD;;AAED,SAAKpS,IAAL;AACA,WAAO,KAAKtE,UAAL,CAAgB5S,IAAhB,EAAsB,eAAtB,CAAP;AACD;;AAEDw2C,EAAAA,sBAAsB,GAAG;AACvB,UAAMljC,QAAQ,GAAG,KAAKrS,KAAL,CAAWvC,KAA5B;AACA,UAAMuO,QAAQ,GAAG,KAAKhM,KAAL,CAAWgM,QAA5B;AACA,UAAMvV,IAAI,GAAG,KAAK6+C,kBAAL,EAAb;AACA,QAAI,CAAC,KAAKj3B,GAAL,CAASvnB,OAAO,CAACsB,KAAjB,CAAL,EAA8B,OAAO3B,IAAP;AAC9B,UAAMsI,IAAI,GAAG,KAAK6P,WAAL,CAAiByD,QAAjB,EAA2BrG,QAA3B,CAAb;AACAjN,IAAAA,IAAI,CAAC81C,SAAL,GAAiBp+C,IAAjB;AACAsI,IAAAA,IAAI,CAACtI,IAAL,GAAY,KAAK6+C,kBAAL,EAAZ;AACA,WAAO,KAAK3jC,UAAL,CAAgB5S,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAEDy2C,EAAAA,mBAAmB,GAAG;AACpB,UAAMnjC,QAAQ,GAAG,KAAKrS,KAAL,CAAWvC,KAA5B;AACA,UAAMuO,QAAQ,GAAG,KAAKhM,KAAL,CAAWgM,QAA5B;AACA,QAAIjN,IAAI,GAAG,KAAKw2C,sBAAL,EAAX;;AAEA,QAAIx2C,IAAI,CAACiC,IAAL,KAAc,mBAAlB,EAAuC;AACrC,aAAOjC,IAAP;AACD;;AAED,WAAO,KAAKsf,GAAL,CAASvnB,OAAO,CAACwB,GAAjB,CAAP,EAA8B;AAC5B,YAAM0zB,OAAO,GAAG,KAAKpd,WAAL,CAAiByD,QAAjB,EAA2BrG,QAA3B,CAAhB;AACAggB,MAAAA,OAAO,CAAC2oB,MAAR,GAAiB51C,IAAjB;AACAitB,MAAAA,OAAO,CAACvB,QAAR,GAAmB,KAAK6qB,kBAAL,EAAnB;AACAv2C,MAAAA,IAAI,GAAG,KAAK4S,UAAL,CAAgBqa,OAAhB,EAAyB,qBAAzB,CAAP;AACD;;AAED,WAAOjtB,IAAP;AACD;;AAED02C,EAAAA,sBAAsB,GAAG;AACvB,QAAI12C,IAAJ;;AAEA,YAAQ,KAAKiB,KAAL,CAAWgB,IAAnB;AACE,WAAKlK,OAAO,CAACa,MAAb;AACEoH,QAAAA,IAAI,GAAG,KAAKyS,SAAL,EAAP;AACA,aAAKyE,IAAL;AACAlX,QAAAA,IAAI,GAAG,KAAK22C,2BAAL,CAAiC32C,IAAjC,CAAP;;AAEA,YAAIA,IAAI,CAAC8P,UAAL,CAAgB7N,IAAhB,KAAyB,oBAA7B,EAAmD;AACjD,eAAKsL,KAAL,CAAWvN,IAAI,CAACtB,KAAhB,EAAuBq2C,SAAS,CAACC,gBAAjC;AACD;;AAED,eAAOh1C,IAAP;;AAEF,WAAKjI,OAAO,CAAC2+B,WAAb;AACA,WAAK3+B,OAAO,CAACK,MAAb;AACE,eAAO,KAAK+7B,aAAL,EAAP;;AAEF;AACE,cAAM,KAAK5mB,KAAL,CAAW,KAAKtM,KAAL,CAAWvC,KAAtB,EAA6Bq2C,SAAS,CAACK,mBAAvC,CAAN;AAjBJ;AAmBD;;AAEDwB,EAAAA,uBAAuB,GAAG;AACxB,UAAM52C,IAAI,GAAG,KAAK6P,WAAL,CAAiB,KAAK5O,KAAL,CAAWoM,UAA5B,EAAwC,KAAKpM,KAAL,CAAWqM,aAAnD,CAAb;AACA,WAAO,KAAK4C,YAAL,CAAkBlQ,IAAlB,EAAwB,oBAAxB,EAA8C,KAAKiB,KAAL,CAAWvC,KAAzD,EAAgE,KAAKuC,KAAL,CAAWgM,QAA3E,CAAP;AACD;;AAED4pC,EAAAA,mBAAmB,CAAC72C,IAAD,EAAO;AACxB,SAAKkX,IAAL;AACAlX,IAAAA,IAAI,CAAC8P,UAAL,GAAkB,KAAK2iB,eAAL,EAAlB;AACA,SAAKpI,MAAL,CAAYtyB,OAAO,CAACgB,MAApB;AACA,WAAO,KAAK6Z,UAAL,CAAgB5S,IAAhB,EAAsB,gBAAtB,CAAP;AACD;;AAED22C,EAAAA,2BAA2B,CAAC32C,IAAD,EAAO;AAChC,QAAI,KAAKd,KAAL,CAAWnH,OAAO,CAACgB,MAAnB,CAAJ,EAAgC;AAC9BiH,MAAAA,IAAI,CAAC8P,UAAL,GAAkB,KAAK8mC,uBAAL,EAAlB;AACD,KAFD,MAEO;AACL,YAAM9mC,UAAU,GAAG,KAAK2iB,eAAL,EAAnB;AACAzyB,MAAAA,IAAI,CAAC8P,UAAL,GAAkBA,UAAlB;AACD;;AAED,SAAKua,MAAL,CAAYtyB,OAAO,CAACgB,MAApB;AACA,WAAO,KAAK6Z,UAAL,CAAgB5S,IAAhB,EAAsB,wBAAtB,CAAP;AACD;;AAED82C,EAAAA,iBAAiB,GAAG;AAClB,UAAM92C,IAAI,GAAG,KAAKyS,SAAL,EAAb;;AAEA,QAAI,KAAK6M,GAAL,CAASvnB,OAAO,CAACa,MAAjB,CAAJ,EAA8B;AAC5B,WAAKyxB,MAAL,CAAYtyB,OAAO,CAAC6B,QAApB;AACAoG,MAAAA,IAAI,CAACs4B,QAAL,GAAgB,KAAKkD,uBAAL,EAAhB;AACA,WAAKnR,MAAL,CAAYtyB,OAAO,CAACgB,MAApB;AACA,aAAO,KAAK6Z,UAAL,CAAgB5S,IAAhB,EAAsB,oBAAtB,CAAP;AACD;;AAEDA,IAAAA,IAAI,CAACtI,IAAL,GAAY,KAAK8+C,sBAAL,EAAZ;AACAx2C,IAAAA,IAAI,CAACxJ,KAAL,GAAa,KAAK8oB,GAAL,CAASvnB,OAAO,CAACmC,EAAjB,IAAuB,KAAKw8C,sBAAL,EAAvB,GAAuD,IAApE;AACA,WAAO,KAAK9jC,UAAL,CAAgB5S,IAAhB,EAAsB,cAAtB,CAAP;AACD;;AAED+2C,EAAAA,wBAAwB,CAACzjC,QAAD,EAAWrG,QAAX,EAAqB;AAC3C,UAAMjN,IAAI,GAAG,KAAK6P,WAAL,CAAiByD,QAAjB,EAA2BrG,QAA3B,CAAb;;AAEA,QAAI,KAAK/N,KAAL,CAAWnH,OAAO,CAAC29C,SAAnB,CAAJ,EAAmC;AACjC,WAAKrrB,MAAL,CAAYtyB,OAAO,CAAC29C,SAApB;AACA,aAAO,KAAK9iC,UAAL,CAAgB5S,IAAhB,EAAsB,oBAAtB,CAAP;AACD;;AAEDA,IAAAA,IAAI,CAACtI,IAAL,GAAY,KAAK++C,mBAAL,EAAZ;AACA,WAAO,KAAKO,+BAAL,CAAqCh3C,IAArC,CAAP;AACD;;AAEDg3C,EAAAA,+BAA+B,CAACh3C,IAAD,EAAO;AACpC,UAAMkU,UAAU,GAAG,EAAnB;;AAEA,WAAO,CAAC,KAAKhV,KAAL,CAAWnH,OAAO,CAACuD,KAAnB,CAAD,IAA8B,CAAC,KAAK4D,KAAL,CAAWnH,OAAO,CAAC29C,SAAnB,CAAtC,EAAqE;AACnExhC,MAAAA,UAAU,CAAChT,IAAX,CAAgB,KAAK41C,iBAAL,EAAhB;AACD;;AAED92C,IAAAA,IAAI,CAACkU,UAAL,GAAkBA,UAAlB;AACAlU,IAAAA,IAAI,CAACi3C,WAAL,GAAmB,KAAK33B,GAAL,CAASvnB,OAAO,CAACuD,KAAjB,CAAnB;AACA,SAAK+uB,MAAL,CAAYtyB,OAAO,CAAC29C,SAApB;AACA,WAAO,KAAK9iC,UAAL,CAAgB5S,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAEDk3C,EAAAA,wBAAwB,CAAC5jC,QAAD,EAAWrG,QAAX,EAAqB;AAC3C,UAAMjN,IAAI,GAAG,KAAK6P,WAAL,CAAiByD,QAAjB,EAA2BrG,QAA3B,CAAb;;AAEA,QAAI,KAAK/N,KAAL,CAAWnH,OAAO,CAAC29C,SAAnB,CAAJ,EAAmC;AACjC,WAAKrrB,MAAL,CAAYtyB,OAAO,CAAC29C,SAApB;AACA,aAAO,KAAK9iC,UAAL,CAAgB5S,IAAhB,EAAsB,oBAAtB,CAAP;AACD;;AAEDA,IAAAA,IAAI,CAACtI,IAAL,GAAY,KAAK++C,mBAAL,EAAZ;AACA,SAAKpsB,MAAL,CAAYtyB,OAAO,CAAC29C,SAApB;AACA,WAAO,KAAK9iC,UAAL,CAAgB5S,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAEDm3C,EAAAA,iBAAiB,CAAC7jC,QAAD,EAAWrG,QAAX,EAAqB;AACpC,UAAMjN,IAAI,GAAG,KAAK6P,WAAL,CAAiByD,QAAjB,EAA2BrG,QAA3B,CAAb;AACA,UAAMmqC,QAAQ,GAAG,EAAjB;AACA,UAAMC,cAAc,GAAG,KAAKN,wBAAL,CAA8BzjC,QAA9B,EAAwCrG,QAAxC,CAAvB;AACA,QAAIqqC,cAAc,GAAG,IAArB;;AAEA,QAAI,CAACD,cAAc,CAACJ,WAApB,EAAiC;AAC/BM,MAAAA,QAAQ,EAAE,SAAS;AACjB,gBAAQ,KAAKt2C,KAAL,CAAWgB,IAAnB;AACE,eAAKlK,OAAO,CAAC2+B,WAAb;AACEpjB,YAAAA,QAAQ,GAAG,KAAKrS,KAAL,CAAWvC,KAAtB;AACAuO,YAAAA,QAAQ,GAAG,KAAKhM,KAAL,CAAWgM,QAAtB;AACA,iBAAKiK,IAAL;;AAEA,gBAAI,KAAKoI,GAAL,CAASvnB,OAAO,CAACuD,KAAjB,CAAJ,EAA6B;AAC3Bg8C,cAAAA,cAAc,GAAG,KAAKJ,wBAAL,CAA8B5jC,QAA9B,EAAwCrG,QAAxC,CAAjB;AACA,oBAAMsqC,QAAN;AACD;;AAEDH,YAAAA,QAAQ,CAACl2C,IAAT,CAAc,KAAKi2C,iBAAL,CAAuB7jC,QAAvB,EAAiCrG,QAAjC,CAAd;AACA;;AAEF,eAAKlV,OAAO,CAAC09C,OAAb;AACE2B,YAAAA,QAAQ,CAACl2C,IAAT,CAAc,KAAKizB,aAAL,EAAd;AACA;;AAEF,eAAKp8B,OAAO,CAACa,MAAb;AACE;AACE,oBAAMoH,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACA,mBAAKyE,IAAL;;AAEA,kBAAI,KAAKhY,KAAL,CAAWnH,OAAO,CAAC6B,QAAnB,CAAJ,EAAkC;AAChCw9C,gBAAAA,QAAQ,CAACl2C,IAAT,CAAc,KAAK21C,mBAAL,CAAyB72C,IAAzB,CAAd;AACD,eAFD,MAEO;AACLo3C,gBAAAA,QAAQ,CAACl2C,IAAT,CAAc,KAAKy1C,2BAAL,CAAiC32C,IAAjC,CAAd;AACD;;AAED;AACD;;AAEH;AACE,kBAAM,KAAKspB,UAAL,EAAN;AAjCJ;AAmCD;;AAED,UAAIqsB,UAAU,CAAC0B,cAAD,CAAV,IAA8B,CAAC1B,UAAU,CAAC2B,cAAD,CAA7C,EAA+D;AAC7D,aAAK/pC,KAAL,CAAW+pC,cAAc,CAAC54C,KAA1B,EAAiCq2C,SAAS,CAACG,yBAA3C;AACD,OAFD,MAEO,IAAI,CAACS,UAAU,CAAC0B,cAAD,CAAX,IAA+B1B,UAAU,CAAC2B,cAAD,CAA7C,EAA+D;AACpE,aAAK/pC,KAAL,CAAW+pC,cAAc,CAAC54C,KAA1B,EAAiCq2C,SAAS,CAACE,wBAA3C,EAAqEY,mBAAmB,CAACwB,cAAc,CAAC3/C,IAAhB,CAAxF;AACD,OAFM,MAEA,IAAI,CAACi+C,UAAU,CAAC0B,cAAD,CAAX,IAA+B,CAAC1B,UAAU,CAAC2B,cAAD,CAA9C,EAAgE;AACrE,YAAIzB,mBAAmB,CAACyB,cAAc,CAAC5/C,IAAhB,CAAnB,KAA6Cm+C,mBAAmB,CAACwB,cAAc,CAAC3/C,IAAhB,CAApE,EAA2F;AACzF,eAAK6V,KAAL,CAAW+pC,cAAc,CAAC54C,KAA1B,EAAiCq2C,SAAS,CAACE,wBAA3C,EAAqEY,mBAAmB,CAACwB,cAAc,CAAC3/C,IAAhB,CAAxF;AACD;AACF;AACF;;AAED,QAAIi+C,UAAU,CAAC0B,cAAD,CAAd,EAAgC;AAC9Br3C,MAAAA,IAAI,CAACw3C,eAAL,GAAuBH,cAAvB;AACAr3C,MAAAA,IAAI,CAACy3C,eAAL,GAAuBH,cAAvB;AACD,KAHD,MAGO;AACLt3C,MAAAA,IAAI,CAACq3C,cAAL,GAAsBA,cAAtB;AACAr3C,MAAAA,IAAI,CAACs3C,cAAL,GAAsBA,cAAtB;AACD;;AAEDt3C,IAAAA,IAAI,CAACo3C,QAAL,GAAgBA,QAAhB;;AAEA,QAAI,KAAKjuB,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1B,YAAM,KAAK5b,KAAL,CAAW,KAAKtM,KAAL,CAAWvC,KAAtB,EAA6Bq2C,SAAS,CAACO,4BAAvC,CAAN;AACD;;AAED,WAAOK,UAAU,CAAC0B,cAAD,CAAV,GAA6B,KAAKzkC,UAAL,CAAgB5S,IAAhB,EAAsB,aAAtB,CAA7B,GAAoE,KAAK4S,UAAL,CAAgB5S,IAAhB,EAAsB,YAAtB,CAA3E;AACD;;AAED03C,EAAAA,eAAe,GAAG;AAChB,UAAMpkC,QAAQ,GAAG,KAAKrS,KAAL,CAAWvC,KAA5B;AACA,UAAMuO,QAAQ,GAAG,KAAKhM,KAAL,CAAWgM,QAA5B;AACA,SAAKiK,IAAL;AACA,WAAO,KAAKigC,iBAAL,CAAuB7jC,QAAvB,EAAiCrG,QAAjC,CAAP;AACD;;AAEDknB,EAAAA,aAAa,CAAC5gB,mBAAD,EAAsB;AACjC,QAAI,KAAKrU,KAAL,CAAWnH,OAAO,CAAC09C,OAAnB,CAAJ,EAAiC;AAC/B,aAAO,KAAKrmC,YAAL,CAAkB,KAAKnO,KAAL,CAAWzK,KAA7B,EAAoC,SAApC,CAAP;AACD,KAFD,MAEO,IAAI,KAAK0I,KAAL,CAAWnH,OAAO,CAAC2+B,WAAnB,CAAJ,EAAqC;AAC1C,aAAO,KAAKghB,eAAL,EAAP;AACD,KAFM,MAEA,IAAI,KAAKvuB,YAAL,CAAkB,GAAlB,KAA0B,KAAKpqB,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAjC,MAA0C,EAAxE,EAA4E;AACjF,WAAKqT,WAAL,CAAiBtoB,OAAO,CAAC2+B,WAAzB;AACA,aAAO,KAAKghB,eAAL,EAAP;AACD,KAHM,MAGA;AACL,aAAO,MAAMvjB,aAAN,CAAoB5gB,mBAApB,CAAP;AACD;AACF;;AAEDgM,EAAAA,oBAAoB,CAACte,KAAD,EAAQ;AAC1B,UAAM02C,cAAc,GAAG,MAAMp4B,oBAAN,CAA2Bte,KAA3B,CAAvB;AACA02C,IAAAA,cAAc,CAAC96B,cAAf,GAAgC5b,KAAK,CAAC4b,cAAtC;AACA,WAAO86B,cAAP;AACD;;AAEDp3B,EAAAA,gBAAgB,CAACviB,IAAD,EAAO;AACrB,QAAI,KAAKiD,KAAL,CAAW4b,cAAf,EAA+B,OAAO,MAAM0D,gBAAN,CAAuBviB,IAAvB,CAAP;AAC/B,UAAMqX,OAAO,GAAG,KAAKmK,UAAL,EAAhB;;AAEA,QAAInK,OAAO,KAAKF,KAAK,CAACurB,MAAtB,EAA8B;AAC5B,aAAO,KAAKqV,YAAL,EAAP;AACD;;AAED,QAAI1gC,OAAO,KAAKF,KAAK,CAACsrB,MAAlB,IAA4BprB,OAAO,KAAKF,KAAK,CAACogC,MAAlD,EAA0D;AACxD,UAAIz/B,iBAAiB,CAAC9X,IAAD,CAArB,EAA6B;AAC3B,eAAO,KAAKs4C,WAAL,EAAP;AACD;;AAED,UAAIt4C,IAAI,KAAK,EAAb,EAAiB;AACf,UAAE,KAAKiD,KAAL,CAAW+L,GAAb;AACA,eAAO,KAAKqT,WAAL,CAAiBtoB,OAAO,CAAC29C,SAAzB,CAAP;AACD;;AAED,UAAI,CAAC13C,IAAI,KAAK,EAAT,IAAeA,IAAI,KAAK,EAAzB,KAAgCqX,OAAO,KAAKF,KAAK,CAACsrB,MAAtD,EAA8D;AAC5D,eAAO,KAAK0V,aAAL,CAAmBn4C,IAAnB,CAAP;AACD;AACF;;AAED,QAAIA,IAAI,KAAK,EAAT,IAAe,KAAKiD,KAAL,CAAWuc,WAA1B,IAAyC,KAAKze,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAX,GAAiB,CAAvC,MAA8C,EAA3F,EAA+F;AAC7F,QAAE,KAAK/L,KAAL,CAAW+L,GAAb;AACA,aAAO,KAAKqT,WAAL,CAAiBtoB,OAAO,CAAC2+B,WAAzB,CAAP;AACD;;AAED,WAAO,MAAMnW,gBAAN,CAAuBviB,IAAvB,CAAP;AACD;;AAED1G,EAAAA,aAAa,CAAC2pB,QAAD,EAAW;AACtB,UAAM3pB,aAAN,CAAoB2pB,QAApB;AACA,UAAM;AACJ5L,MAAAA,OADI;AAEJpT,MAAAA;AAFI,QAGF,KAAKhB,KAHT;;AAKA,QAAIgB,IAAI,KAAKlK,OAAO,CAACuD,KAAjB,IAA0B2lB,QAAQ,KAAKlpB,OAAO,CAAC2+B,WAAnD,EAAgE;AAC9DrhB,MAAAA,OAAO,CAACzT,MAAR,CAAe,CAAC,CAAhB,EAAmB,CAAnB,EAAsBuT,KAAK,CAACogC,MAA5B;AACA,WAAKt0C,KAAL,CAAWuc,WAAX,GAAyB,KAAzB;AACD,KAHD,MAGO,IAAIvb,IAAI,KAAKlK,OAAO,CAAC29C,SAArB,EAAgC;AACrC,YAAM5wB,GAAG,GAAGzP,OAAO,CAACC,GAAR,EAAZ;;AAEA,UAAIwP,GAAG,KAAK3P,KAAK,CAACsrB,MAAd,IAAwBxf,QAAQ,KAAKlpB,OAAO,CAACuD,KAA7C,IAAsDwpB,GAAG,KAAK3P,KAAK,CAACogC,MAAxE,EAAgF;AAC9ElgC,QAAAA,OAAO,CAACC,GAAR;AACA,aAAKrU,KAAL,CAAWuc,WAAX,GAAyBnI,OAAO,CAACA,OAAO,CAACzU,MAAR,GAAiB,CAAlB,CAAP,KAAgCuU,KAAK,CAACurB,MAA/D;AACD,OAHD,MAGO;AACL,aAAKz/B,KAAL,CAAWuc,WAAX,GAAyB,IAAzB;AACD;AACF,KATM,MASA,IAAIvb,IAAI,CAAC9K,OAAL,KAAiB8pB,QAAQ,KAAKlpB,OAAO,CAACwB,GAArB,IAA4B0nB,QAAQ,KAAKlpB,OAAO,CAAC0B,WAAlE,CAAJ,EAAoF;AACzF,WAAKwH,KAAL,CAAWuc,WAAX,GAAyB,KAAzB;AACD,KAFM,MAEA;AACL,WAAKvc,KAAL,CAAWuc,WAAX,GAAyBvb,IAAI,CAACxL,UAA9B;AACD;AACF;;AAjc+C,CAAlD;;AAqcA,MAAMmhD,eAAN,SAA8B39B,KAA9B,CAAoC;AAClCjjB,EAAAA,WAAW,CAAC,GAAGga,IAAJ,EAAU;AACnB,UAAM,GAAGA,IAAT;AACA,SAAKmE,KAAL,GAAa,IAAImB,GAAJ,EAAb;AACA,SAAKuhC,KAAL,GAAa,IAAIvhC,GAAJ,EAAb;AACA,SAAKwhC,UAAL,GAAkB,IAAIxhC,GAAJ,EAAlB;AACA,SAAKyhC,OAAL,GAAe,IAAIzhC,GAAJ,EAAf;AACA,SAAK0hC,kBAAL,GAA0B,IAAI1hC,GAAJ,EAA1B;AACD;;AARiC;;AAYpC,MAAM2hC,sBAAN,SAAqC59B,YAArC,CAAkD;AAChDe,EAAAA,WAAW,CAAC1M,KAAD,EAAQ;AACjB,WAAO,IAAIkpC,eAAJ,CAAoBlpC,KAApB,CAAP;AACD;;AAED8M,EAAAA,WAAW,CAAC9jB,IAAD,EAAO+jB,WAAP,EAAoBzO,GAApB,EAAyB;AAClC,UAAMuO,KAAK,GAAG,KAAKJ,YAAL,EAAd;;AAEA,QAAIM,WAAW,GAAGhD,yBAAlB,EAA6C;AAC3C,WAAKmD,kBAAL,CAAwBL,KAAxB,EAA+B7jB,IAA/B;AACA6jB,MAAAA,KAAK,CAACy8B,kBAAN,CAAyBr8B,GAAzB,CAA6BjkB,IAA7B;AACA;AACD;;AAED,UAAM8jB,WAAN,CAAkB,GAAGrZ,SAArB;;AAEA,QAAIsZ,WAAW,GAAGxD,cAAlB,EAAkC;AAChC,UAAI,EAAEwD,WAAW,GAAGzD,eAAhB,CAAJ,EAAsC;AACpC,aAAK0D,yBAAL,CAA+BH,KAA/B,EAAsC7jB,IAAtC,EAA4C+jB,WAA5C,EAAyDzO,GAAzD;AACA,aAAK4O,kBAAL,CAAwBL,KAAxB,EAA+B7jB,IAA/B;AACD;;AAED6jB,MAAAA,KAAK,CAACpG,KAAN,CAAYwG,GAAZ,CAAgBjkB,IAAhB;AACD;;AAED,QAAI+jB,WAAW,GAAGlD,kBAAlB,EAAsCgD,KAAK,CAACs8B,KAAN,CAAYl8B,GAAZ,CAAgBjkB,IAAhB;AACtC,QAAI+jB,WAAW,GAAGjD,wBAAlB,EAA4C+C,KAAK,CAACu8B,UAAN,CAAiBn8B,GAAjB,CAAqBjkB,IAArB;AAC5C,QAAI+jB,WAAW,GAAGnD,gBAAlB,EAAoCiD,KAAK,CAACw8B,OAAN,CAAcp8B,GAAd,CAAkBjkB,IAAlB;AACrC;;AAEDokB,EAAAA,mBAAmB,CAACP,KAAD,EAAQ7jB,IAAR,EAAc+jB,WAAd,EAA2B;AAC5C,QAAIF,KAAK,CAACs8B,KAAN,CAAYl4C,GAAZ,CAAgBjI,IAAhB,CAAJ,EAA2B;AACzB,UAAI+jB,WAAW,GAAGlD,kBAAlB,EAAsC;AACpC,cAAM2/B,OAAO,GAAG,CAAC,EAAEz8B,WAAW,GAAGjD,wBAAhB,CAAjB;AACA,cAAM2/B,QAAQ,GAAG58B,KAAK,CAACu8B,UAAN,CAAiBn4C,GAAjB,CAAqBjI,IAArB,CAAjB;AACA,eAAOwgD,OAAO,KAAKC,QAAnB;AACD;;AAED,aAAO,IAAP;AACD;;AAED,QAAI18B,WAAW,GAAGnD,gBAAd,IAAkCiD,KAAK,CAACw8B,OAAN,CAAcp4C,GAAd,CAAkBjI,IAAlB,CAAtC,EAA+D;AAC7D,UAAI6jB,KAAK,CAACpB,OAAN,CAAcxa,GAAd,CAAkBjI,IAAlB,CAAJ,EAA6B;AAC3B,eAAO,CAAC,EAAE+jB,WAAW,GAAGzD,eAAhB,CAAR;AACD,OAFD,MAEO;AACL,eAAO,KAAP;AACD;AACF;;AAED,QAAIyD,WAAW,GAAGxD,cAAd,IAAgCsD,KAAK,CAACpG,KAAN,CAAYxV,GAAZ,CAAgBjI,IAAhB,CAApC,EAA2D;AACzD,aAAO,IAAP;AACD;;AAED,WAAO,MAAMokB,mBAAN,CAA0B,GAAG3Z,SAA7B,CAAP;AACD;;AAED6Z,EAAAA,gBAAgB,CAAC/J,EAAD,EAAK;AACnB,UAAMgK,aAAa,GAAG,KAAK3B,UAAL,CAAgB,CAAhB,CAAtB;AACA,UAAM;AACJ5iB,MAAAA;AADI,QAEFua,EAFJ;;AAIA,QAAI,CAACgK,aAAa,CAAC9G,KAAd,CAAoBxV,GAApB,CAAwBjI,IAAxB,CAAD,IAAkC,CAACukB,aAAa,CAAC+7B,kBAAd,CAAiCr4C,GAAjC,CAAqCjI,IAArC,CAAvC,EAAmF;AACjF,YAAMskB,gBAAN,CAAuB/J,EAAvB;AACD;AACF;;AAjE+C;;AAqElD,SAASmmC,OAAT,CAAiBC,CAAjB,EAAoB;AAClB,MAAIA,CAAC,IAAI,IAAT,EAAe;AACb,UAAM,IAAInmB,KAAJ,CAAW,cAAammB,CAAE,SAA1B,CAAN;AACD;;AAED,SAAOA,CAAP;AACD;;AAED,SAASC,MAAT,CAAgBD,CAAhB,EAAmB;AACjB,MAAI,CAACA,CAAL,EAAQ;AACN,UAAM,IAAInmB,KAAJ,CAAU,aAAV,CAAN;AACD;AACF;;AAED,MAAMqmB,QAAQ,GAAG11C,kBAAkB,CAAC;AAClC21C,EAAAA,+BAA+B,EAAE,0EADC;AAElCC,EAAAA,8BAA8B,EAAE,yEAFE;AAGlCC,EAAAA,iCAAiC,EAAE,6DAHD;AAIlCC,EAAAA,+BAA+B,EAAE,0CAJC;AAKlCC,EAAAA,qBAAqB,EAAE,mDALW;AAMlCC,EAAAA,sBAAsB,EAAE,oDANU;AAOlCC,EAAAA,4BAA4B,EAAE,6DAPI;AAQlCC,EAAAA,eAAe,EAAE,qCARiB;AASlCC,EAAAA,+BAA+B,EAAE,mDATC;AAUlCC,EAAAA,gCAAgC,EAAE,2DAVA;AAWlCC,EAAAA,8BAA8B,EAAE,sCAXE;AAYlCC,EAAAA,iBAAiB,EAAE,2BAZe;AAalCC,EAAAA,uBAAuB,EAAE,4BAbS;AAclCC,EAAAA,kBAAkB,EAAE,qCAdc;AAelCC,EAAAA,mBAAmB,EAAE,sCAfa;AAgBlCC,EAAAA,iCAAiC,EAAE,8DAhBD;AAiBlCC,EAAAA,wBAAwB,EAAE,4CAjBQ;AAkBlCC,EAAAA,qBAAqB,EAAE,kDAlBW;AAmBlCC,EAAAA,yBAAyB,EAAE,uDAnBO;AAoBlCC,EAAAA,8BAA8B,EAAE,gEApBE;AAqBlCC,EAAAA,wBAAwB,EAAE,sDArBQ;AAsBlCC,EAAAA,yBAAyB,EAAE,0DAtBO;AAuBlCC,EAAAA,uBAAuB,EAAE,qDAvBS;AAwBlCC,EAAAA,2BAA2B,EAAE,+CAxBK;AAyBlCC,EAAAA,qBAAqB,EAAE,2CAzBW;AA0BlCC,EAAAA,uBAAuB,EAAE,yDA1BS;AA2BlCC,EAAAA,oBAAoB,EAAE,6DA3BY;AA4BlCC,EAAAA,gCAAgC,EAAE,0DA5BA;AA6BlCC,EAAAA,iCAAiC,EAAE,4DA7BD;AA8BlCC,EAAAA,wCAAwC,EAAE,kFA9BR;AA+BlCC,EAAAA,0BAA0B,EAAE,uDA/BM;AAgClCC,EAAAA,qBAAqB,EAAE,4GAhCW;AAiClCC,EAAAA,iBAAiB,EAAE,gFAjCe;AAkClCC,EAAAA,yBAAyB,EAAE,uDAlCO;AAmClCC,EAAAA,8BAA8B,EAAE,gEAnCE;AAoClCC,EAAAA,0BAA0B,EAAE,mFApCM;AAqClCC,EAAAA,qCAAqC,EAAE,qDArCL;AAsClCC,EAAAA,iCAAiC,EAAE,8CAtCD;AAuClCC,EAAAA,8BAA8B,EAAE,wDAvCE;AAwClCC,EAAAA,6BAA6B,EAAE,+CAxCG;AAyClCC,EAAAA,yBAAyB,EAAE,mHAzCO;AA0ClCC,EAAAA,sCAAsC,EAAE,kFA1CN;AA2ClCC,EAAAA,2BAA2B,EAAE,uEA3CK;AA4ClCC,EAAAA,kBAAkB,EAAE,8EA5Cc;AA6ClCC,EAAAA,wBAAwB,EAAE,wCA7CQ;AA8ClCC,EAAAA,6BAA6B,EAAE,6CA9CG;AA+ClCC,EAAAA,6BAA6B,EAAE,qDA/CG;AAgDlCC,EAAAA,gCAAgC,EAAE,mEAhDA;AAiDlCC,EAAAA,iCAAiC,EAAE;AAjDD,CAAD,EAkDhCh5C,UAAU,CAACE,WAlDqB,CAAnC;;AAoDA,SAAS+4C,mBAAT,CAA6BjlD,KAA7B,EAAoC;AAClC,UAAQA,KAAR;AACE,SAAK,KAAL;AACE,aAAO,cAAP;;AAEF,SAAK,SAAL;AACE,aAAO,kBAAP;;AAEF,SAAK,QAAL;AACE,aAAO,iBAAP;;AAEF,SAAK,OAAL;AACE,aAAO,gBAAP;;AAEF,SAAK,QAAL;AACE,aAAO,iBAAP;;AAEF,SAAK,QAAL;AACE,aAAO,iBAAP;;AAEF,SAAK,QAAL;AACE,aAAO,iBAAP;;AAEF,SAAK,QAAL;AACE,aAAO,iBAAP;;AAEF,SAAK,WAAL;AACE,aAAO,oBAAP;;AAEF,SAAK,SAAL;AACE,aAAO,kBAAP;;AAEF;AACE,aAAO2J,SAAP;AAhCJ;AAkCD;;AAED,SAASu7C,kBAAT,CAA4BC,QAA5B,EAAsC;AACpC,SAAOA,QAAQ,KAAK,SAAb,IAA0BA,QAAQ,KAAK,QAAvC,IAAmDA,QAAQ,KAAK,WAAvE;AACD;;AAED,IAAIC,UAAU,GAAIrtC,UAAU,IAAI,cAAcA,UAAd,CAAyB;AACvD0d,EAAAA,eAAe,GAAG;AAChB,WAAOgsB,sBAAP;AACD;;AAED4D,EAAAA,cAAc,GAAG;AACf,WAAO,KAAK38C,KAAL,CAAWnH,OAAO,CAACL,IAAnB,CAAP;AACD;;AAEDokD,EAAAA,wBAAwB,GAAG;AACzB,WAAO,CAAC,KAAK58C,KAAL,CAAWnH,OAAO,CAACQ,QAAnB,KAAgC,KAAK2G,KAAL,CAAWnH,OAAO,CAACa,MAAnB,CAAhC,IAA8D,KAAKsG,KAAL,CAAWnH,OAAO,CAACsD,IAAnB,CAA9D,IAA0F,KAAK6D,KAAL,CAAWnH,OAAO,CAAC6B,QAAnB,CAA1F,IAA0H,KAAKsF,KAAL,CAAWnH,OAAO,CAACM,WAAnB,CAA1H,IAA6J,KAAKozB,qBAAL,EAA9J,KAA+L,CAAC,KAAKzB,qBAAL,EAAvM;AACD;;AAED+xB,EAAAA,4BAA4B,GAAG;AAC7B,SAAK7kC,IAAL;AACA,WAAO,KAAK4kC,wBAAL,EAAP;AACD;;AAEDE,EAAAA,eAAe,CAACC,gBAAD,EAAmB;AAChC,QAAI,CAAC,KAAK/8C,KAAL,CAAWnH,OAAO,CAACL,IAAnB,CAAL,EAA+B;AAC7B,aAAOyI,SAAP;AACD;;AAED,UAAMw7C,QAAQ,GAAG,KAAK16C,KAAL,CAAWzK,KAA5B;;AAEA,QAAIylD,gBAAgB,CAACx7B,OAAjB,CAAyBk7B,QAAzB,MAAuC,CAAC,CAAxC,IAA6C,KAAKO,UAAL,CAAgB,KAAKH,4BAAL,CAAkC7vB,IAAlC,CAAuC,IAAvC,CAAhB,CAAjD,EAAgH;AAC9G,aAAOyvB,QAAP;AACD;;AAED,WAAOx7C,SAAP;AACD;;AAEDg8C,EAAAA,gBAAgB,CAACC,QAAD,EAAWH,gBAAX,EAA6BI,mBAA7B,EAAkDnuC,aAAlD,EAAiE;AAC/E,UAAMouC,YAAY,GAAG,CAACtvC,GAAD,EAAM2uC,QAAN,EAAgBY,MAAhB,EAAwBC,KAAxB,KAAkC;AACrD,UAAIb,QAAQ,KAAKY,MAAb,IAAuBH,QAAQ,CAACI,KAAD,CAAnC,EAA4C;AAC1C,aAAKjvC,KAAL,CAAWP,GAAX,EAAgBurC,QAAQ,CAACyB,qBAAzB,EAAgDuC,MAAhD,EAAwDC,KAAxD;AACD;AACF,KAJD;;AAMA,UAAMC,YAAY,GAAG,CAACzvC,GAAD,EAAM2uC,QAAN,EAAgBe,IAAhB,EAAsBC,IAAtB,KAA+B;AAClD,UAAIP,QAAQ,CAACM,IAAD,CAAR,IAAkBf,QAAQ,KAAKgB,IAA/B,IAAuCP,QAAQ,CAACO,IAAD,CAAR,IAAkBhB,QAAQ,KAAKe,IAA1E,EAAgF;AAC9E,aAAKnvC,KAAL,CAAWP,GAAX,EAAgBurC,QAAQ,CAACkB,qBAAzB,EAAgDiD,IAAhD,EAAsDC,IAAtD;AACD;AACF,KAJD;;AAMA,aAAS;AACP,YAAMrpC,QAAQ,GAAG,KAAKrS,KAAL,CAAWvC,KAA5B;AACA,YAAMi9C,QAAQ,GAAG,KAAKK,eAAL,CAAqBC,gBAAgB,CAAC3qC,MAAjB,CAAwB+qC,mBAAmB,IAAI,IAAvB,GAA8BA,mBAA9B,GAAoD,EAA5E,CAArB,CAAjB;AACA,UAAI,CAACV,QAAL,EAAe;;AAEf,UAAID,kBAAkB,CAACC,QAAD,CAAtB,EAAkC;AAChC,YAAIS,QAAQ,CAACQ,aAAb,EAA4B;AAC1B,eAAKrvC,KAAL,CAAW+F,QAAX,EAAqBilC,QAAQ,CAACW,8BAA9B;AACD,SAFD,MAEO;AACLoD,UAAAA,YAAY,CAAChpC,QAAD,EAAWqoC,QAAX,EAAqBA,QAArB,EAA+B,UAA/B,CAAZ;AACAW,UAAAA,YAAY,CAAChpC,QAAD,EAAWqoC,QAAX,EAAqBA,QAArB,EAA+B,QAA/B,CAAZ;AACAW,UAAAA,YAAY,CAAChpC,QAAD,EAAWqoC,QAAX,EAAqBA,QAArB,EAA+B,UAA/B,CAAZ;AACAS,UAAAA,QAAQ,CAACQ,aAAT,GAAyBjB,QAAzB;AACD;AACF,OATD,MASO;AACL,YAAItlD,MAAM,CAACwmD,cAAP,CAAsB/2B,IAAtB,CAA2Bs2B,QAA3B,EAAqCT,QAArC,CAAJ,EAAoD;AAClD,eAAKpuC,KAAL,CAAW+F,QAAX,EAAqBilC,QAAQ,CAACY,iBAA9B,EAAiDwC,QAAjD;AACD,SAFD,MAEO;AACLW,UAAAA,YAAY,CAAChpC,QAAD,EAAWqoC,QAAX,EAAqB,QAArB,EAA+B,UAA/B,CAAZ;AACAW,UAAAA,YAAY,CAAChpC,QAAD,EAAWqoC,QAAX,EAAqB,QAArB,EAA+B,UAA/B,CAAZ;AACAW,UAAAA,YAAY,CAAChpC,QAAD,EAAWqoC,QAAX,EAAqB,UAArB,EAAiC,UAAjC,CAAZ;AACAW,UAAAA,YAAY,CAAChpC,QAAD,EAAWqoC,QAAX,EAAqB,UAArB,EAAiC,UAAjC,CAAZ;AACAc,UAAAA,YAAY,CAACnpC,QAAD,EAAWqoC,QAAX,EAAqB,SAArB,EAAgC,UAAhC,CAAZ;AACAc,UAAAA,YAAY,CAACnpC,QAAD,EAAWqoC,QAAX,EAAqB,QAArB,EAA+B,UAA/B,CAAZ;AACD;;AAEDS,QAAAA,QAAQ,CAACT,QAAD,CAAR,GAAqB,IAArB;AACD;;AAED,UAAIU,mBAAmB,IAAI,IAAvB,IAA+BA,mBAAmB,CAACt5B,QAApB,CAA6B44B,QAA7B,CAAnC,EAA2E;AACzE,aAAKpuC,KAAL,CAAW+F,QAAX,EAAqBpF,aAArB,EAAoCytC,QAApC;AACD;AACF;AACF;;AAEDmB,EAAAA,kBAAkB,CAACpqC,IAAD,EAAO;AACvB,YAAQA,IAAR;AACE,WAAK,aAAL;AACA,WAAK,aAAL;AACE,eAAO,KAAKxT,KAAL,CAAWnH,OAAO,CAACgB,MAAnB,CAAP;;AAEF,WAAK,uBAAL;AACE,eAAO,KAAKmG,KAAL,CAAWnH,OAAO,CAACa,MAAnB,CAAP;;AAEF,WAAK,mBAAL;AACE,eAAO,KAAKsG,KAAL,CAAWnH,OAAO,CAACW,QAAnB,CAAP;;AAEF,WAAK,2BAAL;AACE,eAAO,KAAKywB,YAAL,CAAkB,GAAlB,CAAP;AAZJ;;AAeA,UAAM,IAAI+I,KAAJ,CAAU,aAAV,CAAN;AACD;;AAED6qB,EAAAA,WAAW,CAACrqC,IAAD,EAAOsqC,YAAP,EAAqB;AAC9B,UAAM9gB,MAAM,GAAG,EAAf;;AAEA,WAAO,CAAC,KAAK4gB,kBAAL,CAAwBpqC,IAAxB,CAAR,EAAuC;AACrCwpB,MAAAA,MAAM,CAACh7B,IAAP,CAAY87C,YAAY,EAAxB;AACD;;AAED,WAAO9gB,MAAP;AACD;;AAED+gB,EAAAA,oBAAoB,CAACvqC,IAAD,EAAOsqC,YAAP,EAAqB;AACvC,WAAO5E,OAAO,CAAC,KAAK8E,0BAAL,CAAgCxqC,IAAhC,EAAsCsqC,YAAtC,EAAoD,IAApD,CAAD,CAAd;AACD;;AAEDE,EAAAA,0BAA0B,CAACxqC,IAAD,EAAOsqC,YAAP,EAAqBG,aAArB,EAAoC;AAC5D,UAAMjhB,MAAM,GAAG,EAAf;;AAEA,aAAS;AACP,UAAI,KAAK4gB,kBAAL,CAAwBpqC,IAAxB,CAAJ,EAAmC;AACjC;AACD;;AAED,YAAM0qC,OAAO,GAAGJ,YAAY,EAA5B;;AAEA,UAAII,OAAO,IAAI,IAAf,EAAqB;AACnB,eAAOj9C,SAAP;AACD;;AAED+7B,MAAAA,MAAM,CAACh7B,IAAP,CAAYk8C,OAAZ;;AAEA,UAAI,KAAK99B,GAAL,CAASvnB,OAAO,CAACoB,KAAjB,CAAJ,EAA6B;AAC3B;AACD;;AAED,UAAI,KAAK2jD,kBAAL,CAAwBpqC,IAAxB,CAAJ,EAAmC;AACjC;AACD;;AAED,UAAIyqC,aAAJ,EAAmB;AACjB,aAAK9yB,MAAL,CAAYtyB,OAAO,CAACoB,KAApB;AACD;;AAED,aAAOgH,SAAP;AACD;;AAED,WAAO+7B,MAAP;AACD;;AAEDmhB,EAAAA,oBAAoB,CAAC3qC,IAAD,EAAOsqC,YAAP,EAAqBM,OAArB,EAA8BC,cAA9B,EAA8C;AAChE,QAAI,CAACA,cAAL,EAAqB;AACnB,UAAID,OAAJ,EAAa;AACX,aAAKjzB,MAAL,CAAYtyB,OAAO,CAACQ,QAApB;AACD,OAFD,MAEO;AACL,aAAK8wB,gBAAL,CAAsB,GAAtB;AACD;AACF;;AAED,UAAM6S,MAAM,GAAG,KAAK+gB,oBAAL,CAA0BvqC,IAA1B,EAAgCsqC,YAAhC,CAAf;;AAEA,QAAIM,OAAJ,EAAa;AACX,WAAKjzB,MAAL,CAAYtyB,OAAO,CAACW,QAApB;AACD,KAFD,MAEO;AACL,WAAK2wB,gBAAL,CAAsB,GAAtB;AACD;;AAED,WAAO6S,MAAP;AACD;;AAEDshB,EAAAA,iBAAiB,GAAG;AAClB,UAAMx9C,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACA,SAAK4X,MAAL,CAAYtyB,OAAO,CAACmF,OAApB;AACA,SAAKmtB,MAAL,CAAYtyB,OAAO,CAACkB,MAApB;;AAEA,QAAI,CAAC,KAAKiG,KAAL,CAAWnH,OAAO,CAACK,MAAnB,CAAL,EAAiC;AAC/B,WAAKmV,KAAL,CAAW,KAAKtM,KAAL,CAAWvC,KAAtB,EAA6B65C,QAAQ,CAAC+C,6BAAtC;AACD;;AAEDt7C,IAAAA,IAAI,CAACs4B,QAAL,GAAgB,KAAKnE,aAAL,EAAhB;AACA,SAAK9J,MAAL,CAAYtyB,OAAO,CAACmB,MAApB;;AAEA,QAAI,KAAKomB,GAAL,CAASvnB,OAAO,CAACwB,GAAjB,CAAJ,EAA2B;AACzByG,MAAAA,IAAI,CAACy9C,SAAL,GAAiB,KAAKC,iBAAL,CAAuB,IAAvB,CAAjB;AACD;;AAED,QAAI,KAAKv0B,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BnpB,MAAAA,IAAI,CAAC6R,cAAL,GAAsB,KAAK8rC,oBAAL,EAAtB;AACD;;AAED,WAAO,KAAK/qC,UAAL,CAAgB5S,IAAhB,EAAsB,cAAtB,CAAP;AACD;;AAED09C,EAAAA,iBAAiB,CAACE,kBAAD,EAAqB;AACpC,QAAIvH,MAAM,GAAG,KAAKtjB,eAAL,EAAb;;AAEA,WAAO,KAAKzT,GAAL,CAASvnB,OAAO,CAACwB,GAAjB,CAAP,EAA8B;AAC5B,YAAMyG,IAAI,GAAG,KAAK6U,eAAL,CAAqBwhC,MAArB,CAAb;AACAr2C,MAAAA,IAAI,CAAC++B,IAAL,GAAYsX,MAAZ;AACAr2C,MAAAA,IAAI,CAACg2B,KAAL,GAAa,KAAKjD,eAAL,CAAqB6qB,kBAArB,CAAb;AACAvH,MAAAA,MAAM,GAAG,KAAKzjC,UAAL,CAAgB5S,IAAhB,EAAsB,iBAAtB,CAAT;AACD;;AAED,WAAOq2C,MAAP;AACD;;AAEDwH,EAAAA,oBAAoB,GAAG;AACrB,UAAM79C,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACAzS,IAAAA,IAAI,CAAC89C,QAAL,GAAgB,KAAKJ,iBAAL,CAAuB,KAAvB,CAAhB;;AAEA,QAAI,CAAC,KAAK1zB,qBAAL,EAAD,IAAiC,KAAKb,YAAL,CAAkB,GAAlB,CAArC,EAA6D;AAC3DnpB,MAAAA,IAAI,CAAC6R,cAAL,GAAsB,KAAK8rC,oBAAL,EAAtB;AACD;;AAED,WAAO,KAAK/qC,UAAL,CAAgB5S,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAED+9C,EAAAA,wBAAwB,CAACC,GAAD,EAAM;AAC5B,SAAK9mC,IAAL;AACA,UAAMlX,IAAI,GAAG,KAAK6U,eAAL,CAAqBmpC,GAArB,CAAb;AACAh+C,IAAAA,IAAI,CAACi+C,aAAL,GAAqBD,GAArB;AACAh+C,IAAAA,IAAI,CAACwzB,cAAL,GAAsB,KAAK0qB,qBAAL,CAA2B,KAA3B,CAAtB;AACAl+C,IAAAA,IAAI,CAACm+C,OAAL,GAAe,KAAf;AACA,WAAO,KAAKvrC,UAAL,CAAgB5S,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAEDo+C,EAAAA,mBAAmB,GAAG;AACpB,UAAMp+C,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACA,SAAKyE,IAAL;AACA,WAAO,KAAKtE,UAAL,CAAgB5S,IAAhB,EAAsB,YAAtB,CAAP;AACD;;AAEDq+C,EAAAA,gBAAgB,GAAG;AACjB,UAAMr+C,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACA,SAAK4X,MAAL,CAAYtyB,OAAO,CAACyF,OAApB;;AAEA,QAAI,KAAK0B,KAAL,CAAWnH,OAAO,CAACmF,OAAnB,CAAJ,EAAiC;AAC/B8C,MAAAA,IAAI,CAACs+C,QAAL,GAAgB,KAAKd,iBAAL,EAAhB;AACD,KAFD,MAEO;AACLx9C,MAAAA,IAAI,CAACs+C,QAAL,GAAgB,KAAKZ,iBAAL,CAAuB,IAAvB,CAAhB;AACD;;AAED,WAAO,KAAK9qC,UAAL,CAAgB5S,IAAhB,EAAsB,aAAtB,CAAP;AACD;;AAEDu+C,EAAAA,oBAAoB,GAAG;AACrB,UAAMv+C,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACAzS,IAAAA,IAAI,CAACtI,IAAL,GAAY,KAAK8mD,wBAAL,EAAZ;AACAx+C,IAAAA,IAAI,CAACy+C,UAAL,GAAkB,KAAKC,kBAAL,CAAwB3mD,OAAO,CAACiF,QAAhC,CAAlB;AACAgD,IAAAA,IAAI,CAACu0B,OAAL,GAAe,KAAKmqB,kBAAL,CAAwB3mD,OAAO,CAACmC,EAAhC,CAAf;AACA,WAAO,KAAK0Y,UAAL,CAAgB5S,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAED2+C,EAAAA,wBAAwB,GAAG;AACzB,QAAI,KAAKx1B,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1B,aAAO,KAAKy1B,qBAAL,EAAP;AACD;AACF;;AAEDA,EAAAA,qBAAqB,GAAG;AACtB,UAAM5+C,IAAI,GAAG,KAAKyS,SAAL,EAAb;;AAEA,QAAI,KAAK0W,YAAL,CAAkB,GAAlB,KAA0B,KAAKjqB,KAAL,CAAWnH,OAAO,CAAC2+B,WAAnB,CAA9B,EAA+D;AAC7D,WAAKxf,IAAL;AACD,KAFD,MAEO;AACL,WAAKoS,UAAL;AACD;;AAEDtpB,IAAAA,IAAI,CAACoC,MAAL,GAAc,KAAKi7C,oBAAL,CAA0B,2BAA1B,EAAuD,KAAKkB,oBAAL,CAA0BryB,IAA1B,CAA+B,IAA/B,CAAvD,EAA6F,KAA7F,EAAoG,IAApG,CAAd;;AAEA,QAAIlsB,IAAI,CAACoC,MAAL,CAAYxB,MAAZ,KAAuB,CAA3B,EAA8B;AAC5B,WAAK2M,KAAL,CAAWvN,IAAI,CAACtB,KAAhB,EAAuB65C,QAAQ,CAACe,mBAAhC;AACD;;AAED,WAAO,KAAK1mC,UAAL,CAAgB5S,IAAhB,EAAsB,4BAAtB,CAAP;AACD;;AAED6+C,EAAAA,6BAA6B,GAAG;AAC9B,QAAI,KAAKp/B,SAAL,GAAiBxd,IAAjB,KAA0BlK,OAAO,CAAC0E,MAAtC,EAA8C;AAC5C,WAAKya,IAAL;AACA,aAAO,KAAK2mC,oBAAL,EAAP;AACD;;AAED,WAAO,IAAP;AACD;;AAEDiB,EAAAA,eAAe,CAACC,WAAD,EAAcC,SAAd,EAAyB;AACtC,UAAMC,mBAAmB,GAAGF,WAAW,KAAKhnD,OAAO,CAAC2B,KAApD;AACAslD,IAAAA,SAAS,CAACntC,cAAV,GAA2B,KAAK8sC,wBAAL,EAA3B;AACA,SAAKt0B,MAAL,CAAYtyB,OAAO,CAACkB,MAApB;AACA+lD,IAAAA,SAAS,CAACE,UAAV,GAAuB,KAAKC,8BAAL,EAAvB;;AAEA,QAAIF,mBAAJ,EAAyB;AACvBD,MAAAA,SAAS,CAACxrB,cAAV,GAA2B,KAAK4rB,oCAAL,CAA0CL,WAA1C,CAA3B;AACD,KAFD,MAEO,IAAI,KAAK7/C,KAAL,CAAW6/C,WAAX,CAAJ,EAA6B;AAClCC,MAAAA,SAAS,CAACxrB,cAAV,GAA2B,KAAK4rB,oCAAL,CAA0CL,WAA1C,CAA3B;AACD;AACF;;AAEDI,EAAAA,8BAA8B,GAAG;AAC/B,WAAO,KAAKE,gBAAL,CAAsBtnD,OAAO,CAACmB,MAA9B,EAAsC,EAAtC,EAA0CiY,GAA1C,CAA8C1C,OAAO,IAAI;AAC9D,UAAIA,OAAO,CAACxM,IAAR,KAAiB,YAAjB,IAAiCwM,OAAO,CAACxM,IAAR,KAAiB,aAAlD,IAAmEwM,OAAO,CAACxM,IAAR,KAAiB,eAApF,IAAuGwM,OAAO,CAACxM,IAAR,KAAiB,cAA5H,EAA4I;AAC1I,aAAKsL,KAAL,CAAWkB,OAAO,CAAC/P,KAAnB,EAA0B65C,QAAQ,CAACiD,iCAAnC,EAAsE/sC,OAAO,CAACxM,IAA9E;AACD;;AAED,aAAOwM,OAAP;AACD,KANM,CAAP;AAOD;;AAED6wC,EAAAA,0BAA0B,GAAG;AAC3B,QAAI,CAAC,KAAKhgC,GAAL,CAASvnB,OAAO,CAACoB,KAAjB,CAAD,IAA4B,CAAC,KAAK+wB,gBAAL,EAAjC,EAA0D;AACxD,WAAKG,MAAL,CAAYtyB,OAAO,CAACqB,IAApB;AACD;AACF;;AAEDmmD,EAAAA,sBAAsB,CAAC7sC,IAAD,EAAO1S,IAAP,EAAa;AACjC,SAAK8+C,eAAL,CAAqB/mD,OAAO,CAACsB,KAA7B,EAAoC2G,IAApC;AACA,SAAKs/C,0BAAL;AACA,WAAO,KAAK1sC,UAAL,CAAgB5S,IAAhB,EAAsB0S,IAAtB,CAAP;AACD;;AAED8sC,EAAAA,+BAA+B,GAAG;AAChC,SAAKtoC,IAAL;AACA,WAAO,KAAKoI,GAAL,CAASvnB,OAAO,CAACL,IAAjB,KAA0B,KAAKwH,KAAL,CAAWnH,OAAO,CAACsB,KAAnB,CAAjC;AACD;;AAEDomD,EAAAA,wBAAwB,CAACz/C,IAAD,EAAO;AAC7B,QAAI,EAAE,KAAKd,KAAL,CAAWnH,OAAO,CAACQ,QAAnB,KAAgC,KAAKmnD,WAAL,CAAiB,KAAKF,+BAAL,CAAqCtzB,IAArC,CAA0C,IAA1C,CAAjB,CAAlC,CAAJ,EAA0G;AACxG,aAAO/rB,SAAP;AACD;;AAED,SAAKkqB,MAAL,CAAYtyB,OAAO,CAACQ,QAApB;AACA,UAAM0Z,EAAE,GAAG,KAAK8gB,eAAL,EAAX;AACA9gB,IAAAA,EAAE,CAACuhB,cAAH,GAAoB,KAAK0qB,qBAAL,EAApB;AACA,SAAKxwB,gBAAL,CAAsBzb,EAAtB;AACA,SAAKoY,MAAL,CAAYtyB,OAAO,CAACW,QAApB;AACAsH,IAAAA,IAAI,CAACk/C,UAAL,GAAkB,CAACjtC,EAAD,CAAlB;AACA,UAAMhQ,IAAI,GAAG,KAAK09C,wBAAL,EAAb;AACA,QAAI19C,IAAJ,EAAUjC,IAAI,CAACwzB,cAAL,GAAsBvxB,IAAtB;AACV,SAAKq9C,0BAAL;AACA,WAAO,KAAK1sC,UAAL,CAAgB5S,IAAhB,EAAsB,kBAAtB,CAAP;AACD;;AAED4/C,EAAAA,gCAAgC,CAAC5/C,IAAD,EAAO6/C,QAAP,EAAiB;AAC/C,QAAI,KAAKvgC,GAAL,CAASvnB,OAAO,CAACyB,QAAjB,CAAJ,EAAgCwG,IAAI,CAAC+T,QAAL,GAAgB,IAAhB;AAChC,UAAM+rC,OAAO,GAAG9/C,IAAhB;;AAEA,QAAI,KAAKd,KAAL,CAAWnH,OAAO,CAACkB,MAAnB,KAA8B,KAAKkwB,YAAL,CAAkB,GAAlB,CAAlC,EAA0D;AACxD,UAAI02B,QAAJ,EAAc;AACZ,aAAKtyC,KAAL,CAAWvN,IAAI,CAACtB,KAAhB,EAAuB65C,QAAQ,CAACoC,0BAAhC;AACD;;AAED,YAAMlqC,MAAM,GAAGqvC,OAAf;;AAEA,UAAIrvC,MAAM,CAACiC,IAAP,IAAe,KAAKyW,YAAL,CAAkB,GAAlB,CAAnB,EAA2C;AACzC,aAAK5b,KAAL,CAAW,KAAKtM,KAAL,CAAW+L,GAAtB,EAA2BurC,QAAQ,CAACI,+BAApC;AACD;;AAED,WAAKmG,eAAL,CAAqB/mD,OAAO,CAACsB,KAA7B,EAAoCoX,MAApC;AACA,WAAK6uC,0BAAL;;AAEA,UAAI7uC,MAAM,CAACiC,IAAP,KAAgB,KAApB,EAA2B;AACzB,YAAIjC,MAAM,CAACyuC,UAAP,CAAkBt+C,MAAlB,GAA2B,CAA/B,EAAkC;AAChC,eAAK2M,KAAL,CAAW,KAAKtM,KAAL,CAAW+L,GAAtB,EAA2BpK,aAAa,CAACU,cAAzC;;AAEA,cAAI,KAAK86B,WAAL,CAAiB3tB,MAAM,CAACyuC,UAAP,CAAkB,CAAlB,CAAjB,CAAJ,EAA4C;AAC1C,iBAAK3xC,KAAL,CAAW,KAAKtM,KAAL,CAAW+L,GAAtB,EAA2BurC,QAAQ,CAACG,iCAApC;AACD;AACF;AACF,OARD,MAQO,IAAIjoC,MAAM,CAACiC,IAAP,KAAgB,KAApB,EAA2B;AAChC,YAAIjC,MAAM,CAACyuC,UAAP,CAAkBt+C,MAAlB,KAA6B,CAAjC,EAAoC;AAClC,eAAK2M,KAAL,CAAW,KAAKtM,KAAL,CAAW+L,GAAtB,EAA2BpK,aAAa,CAACW,cAAzC;AACD,SAFD,MAEO;AACL,gBAAMw8C,cAAc,GAAGtvC,MAAM,CAACyuC,UAAP,CAAkB,CAAlB,CAAvB;;AAEA,cAAI,KAAK9gB,WAAL,CAAiB2hB,cAAjB,CAAJ,EAAsC;AACpC,iBAAKxyC,KAAL,CAAW,KAAKtM,KAAL,CAAW+L,GAAtB,EAA2BurC,QAAQ,CAACG,iCAApC;AACD;;AAED,cAAIqH,cAAc,CAAC99C,IAAf,KAAwB,YAAxB,IAAwC89C,cAAc,CAAChsC,QAA3D,EAAqE;AACnE,iBAAKxG,KAAL,CAAW,KAAKtM,KAAL,CAAW+L,GAAtB,EAA2BurC,QAAQ,CAACqC,qCAApC;AACD;;AAED,cAAImF,cAAc,CAAC99C,IAAf,KAAwB,aAA5B,EAA2C;AACzC,iBAAKsL,KAAL,CAAW,KAAKtM,KAAL,CAAW+L,GAAtB,EAA2BurC,QAAQ,CAACsC,iCAApC;AACD;AACF;;AAED,YAAIpqC,MAAM,CAAC+iB,cAAX,EAA2B;AACzB,eAAKjmB,KAAL,CAAWkD,MAAM,CAAC+iB,cAAP,CAAsB90B,KAAjC,EAAwC65C,QAAQ,CAACuC,8BAAjD;AACD;AACF,OAtBM,MAsBA;AACLrqC,QAAAA,MAAM,CAACiC,IAAP,GAAc,QAAd;AACD;;AAED,aAAO,KAAKE,UAAL,CAAgBnC,MAAhB,EAAwB,mBAAxB,CAAP;AACD,KAjDD,MAiDO;AACL,YAAMib,QAAQ,GAAGo0B,OAAjB;AACA,UAAID,QAAJ,EAAcn0B,QAAQ,CAACm0B,QAAT,GAAoB,IAApB;AACd,YAAM59C,IAAI,GAAG,KAAK09C,wBAAL,EAAb;AACA,UAAI19C,IAAJ,EAAUypB,QAAQ,CAAC8H,cAAT,GAA0BvxB,IAA1B;AACV,WAAKq9C,0BAAL;AACA,aAAO,KAAK1sC,UAAL,CAAgB8Y,QAAhB,EAA0B,qBAA1B,CAAP;AACD;AACF;;AAEDs0B,EAAAA,iBAAiB,GAAG;AAClB,UAAMhgD,IAAI,GAAG,KAAKyS,SAAL,EAAb;;AAEA,QAAI,KAAKvT,KAAL,CAAWnH,OAAO,CAACkB,MAAnB,KAA8B,KAAKkwB,YAAL,CAAkB,GAAlB,CAAlC,EAA0D;AACxD,aAAO,KAAKo2B,sBAAL,CAA4B,4BAA5B,EAA0Dv/C,IAA1D,CAAP;AACD;;AAED,QAAI,KAAKd,KAAL,CAAWnH,OAAO,CAAC6E,IAAnB,CAAJ,EAA8B;AAC5B,YAAMqV,EAAE,GAAG,KAAKQ,SAAL,EAAX;AACA,WAAKyE,IAAL;;AAEA,UAAI,KAAKhY,KAAL,CAAWnH,OAAO,CAACkB,MAAnB,KAA8B,KAAKkwB,YAAL,CAAkB,GAAlB,CAAlC,EAA0D;AACxD,eAAO,KAAKo2B,sBAAL,CAA4B,iCAA5B,EAA+Dv/C,IAA/D,CAAP;AACD,OAFD,MAEO;AACLA,QAAAA,IAAI,CAAC6T,GAAL,GAAW,KAAK0lB,gBAAL,CAAsBtnB,EAAtB,EAA0B,KAA1B,CAAX;AACA,eAAO,KAAK2tC,gCAAL,CAAsC5/C,IAAtC,EAA4C,KAA5C,CAAP;AACD;AACF;;AAED,SAAKm8C,gBAAL,CAAsBn8C,IAAtB,EAA4B,CAAC,UAAD,CAA5B,EAA0C,CAAC,SAAD,EAAY,UAAZ,EAAwB,SAAxB,EAAmC,WAAnC,EAAgD,QAAhD,EAA0D,QAA1D,EAAoE,UAApE,CAA1C,EAA2Hu4C,QAAQ,CAACwB,2BAApI;AACA,UAAMkG,GAAG,GAAG,KAAKR,wBAAL,CAA8Bz/C,IAA9B,CAAZ;;AAEA,QAAIigD,GAAJ,EAAS;AACP,aAAOA,GAAP;AACD;;AAED,SAAKvhB,iBAAL,CAAuB1+B,IAAvB,EAA6B,KAA7B;;AAEA,QAAI,CAACA,IAAI,CAAC2S,QAAN,IAAkB3S,IAAI,CAAC6T,GAAL,CAAS5R,IAAT,KAAkB,YAApC,KAAqDjC,IAAI,CAAC6T,GAAL,CAASnc,IAAT,KAAkB,KAAlB,IAA2BsI,IAAI,CAAC6T,GAAL,CAASnc,IAAT,KAAkB,KAAlG,KAA4G,KAAKokD,wBAAL,EAAhH,EAAiJ;AAC/I97C,MAAAA,IAAI,CAAC0S,IAAL,GAAY1S,IAAI,CAAC6T,GAAL,CAASnc,IAArB;AACA,WAAKgnC,iBAAL,CAAuB1+B,IAAvB,EAA6B,KAA7B;AACD;;AAED,WAAO,KAAK4/C,gCAAL,CAAsC5/C,IAAtC,EAA4C,CAAC,CAACA,IAAI,CAAC6/C,QAAnD,CAAP;AACD;;AAEDK,EAAAA,kBAAkB,GAAG;AACnB,UAAMlgD,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACAzS,IAAAA,IAAI,CAACgkC,OAAL,GAAe,KAAKmc,wBAAL,EAAf;AACA,WAAO,KAAKvtC,UAAL,CAAgB5S,IAAhB,EAAsB,eAAtB,CAAP;AACD;;AAEDmgD,EAAAA,wBAAwB,GAAG;AACzB,SAAK91B,MAAL,CAAYtyB,OAAO,CAACa,MAApB;AACA,UAAMorC,OAAO,GAAG,KAAK+Y,WAAL,CAAiB,aAAjB,EAAgC,KAAKiD,iBAAL,CAAuB9zB,IAAvB,CAA4B,IAA5B,CAAhC,CAAhB;AACA,SAAK7B,MAAL,CAAYtyB,OAAO,CAACgB,MAApB;AACA,WAAOirC,OAAP;AACD;;AAEDoc,EAAAA,qBAAqB,GAAG;AACtB,SAAKlpC,IAAL;;AAEA,QAAI,KAAKoI,GAAL,CAASvnB,OAAO,CAACoD,OAAjB,CAAJ,EAA+B;AAC7B,aAAO,KAAKouB,YAAL,CAAkB,UAAlB,CAAP;AACD;;AAED,QAAI,KAAKA,YAAL,CAAkB,UAAlB,CAAJ,EAAmC;AACjC,WAAKrS,IAAL;AACD;;AAED,QAAI,CAAC,KAAKhY,KAAL,CAAWnH,OAAO,CAACQ,QAAnB,CAAL,EAAmC;AACjC,aAAO,KAAP;AACD;;AAED,SAAK2e,IAAL;;AAEA,QAAI,CAAC,KAAK2kC,cAAL,EAAL,EAA4B;AAC1B,aAAO,KAAP;AACD;;AAED,SAAK3kC,IAAL;AACA,WAAO,KAAKhY,KAAL,CAAWnH,OAAO,CAACuF,GAAnB,CAAP;AACD;;AAED+iD,EAAAA,0BAA0B,GAAG;AAC3B,UAAMrgD,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACAzS,IAAAA,IAAI,CAACtI,IAAL,GAAY,KAAK8mD,wBAAL,EAAZ;AACAx+C,IAAAA,IAAI,CAACy+C,UAAL,GAAkB,KAAK6B,qBAAL,CAA2BvoD,OAAO,CAACuF,GAAnC,CAAlB;AACA,WAAO,KAAKsV,UAAL,CAAgB5S,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAEDugD,EAAAA,iBAAiB,GAAG;AAClB,UAAMvgD,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACA,SAAK4X,MAAL,CAAYtyB,OAAO,CAACa,MAApB;;AAEA,QAAI,KAAKsG,KAAL,CAAWnH,OAAO,CAACoD,OAAnB,CAAJ,EAAiC;AAC/B6E,MAAAA,IAAI,CAAC6/C,QAAL,GAAgB,KAAK5+C,KAAL,CAAWzK,KAA3B;AACA,WAAK0gB,IAAL;AACA,WAAK4S,gBAAL,CAAsB,UAAtB;AACD,KAJD,MAIO,IAAI,KAAKD,aAAL,CAAmB,UAAnB,CAAJ,EAAoC;AACzC7pB,MAAAA,IAAI,CAAC6/C,QAAL,GAAgB,IAAhB;AACD;;AAED,SAAKx1B,MAAL,CAAYtyB,OAAO,CAACQ,QAApB;AACAyH,IAAAA,IAAI,CAAC42B,aAAL,GAAqB,KAAKypB,0BAAL,EAArB;AACArgD,IAAAA,IAAI,CAACwgD,QAAL,GAAgB,KAAK32B,aAAL,CAAmB,IAAnB,IAA2B,KAAK42B,WAAL,EAA3B,GAAgD,IAAhE;AACA,SAAKp2B,MAAL,CAAYtyB,OAAO,CAACW,QAApB;;AAEA,QAAI,KAAKwG,KAAL,CAAWnH,OAAO,CAACoD,OAAnB,CAAJ,EAAiC;AAC/B6E,MAAAA,IAAI,CAAC+T,QAAL,GAAgB,KAAK9S,KAAL,CAAWzK,KAA3B;AACA,WAAK0gB,IAAL;AACA,WAAKmT,MAAL,CAAYtyB,OAAO,CAACyB,QAApB;AACD,KAJD,MAIO,IAAI,KAAK8lB,GAAL,CAASvnB,OAAO,CAACyB,QAAjB,CAAJ,EAAgC;AACrCwG,MAAAA,IAAI,CAAC+T,QAAL,GAAgB,IAAhB;AACD;;AAED/T,IAAAA,IAAI,CAACwzB,cAAL,GAAsB,KAAKktB,cAAL,EAAtB;AACA,SAAKv2B,SAAL;AACA,SAAKE,MAAL,CAAYtyB,OAAO,CAACgB,MAApB;AACA,WAAO,KAAK6Z,UAAL,CAAgB5S,IAAhB,EAAsB,cAAtB,CAAP;AACD;;AAED2gD,EAAAA,gBAAgB,GAAG;AACjB,UAAM3gD,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACAzS,IAAAA,IAAI,CAAC4gD,YAAL,GAAoB,KAAKvD,oBAAL,CAA0B,mBAA1B,EAA+C,KAAKwD,uBAAL,CAA6B30B,IAA7B,CAAkC,IAAlC,CAA/C,EAAwF,IAAxF,EAA8F,KAA9F,CAApB;AACA,QAAI40B,mBAAmB,GAAG,KAA1B;AACA,QAAIC,eAAe,GAAG,IAAtB;AACA/gD,IAAAA,IAAI,CAAC4gD,YAAL,CAAkBh0C,OAAlB,CAA0Bo0C,WAAW,IAAI;AACvC,UAAIC,gBAAJ;;AAEA,UAAI;AACFh/C,QAAAA;AADE,UAEA++C,WAFJ;;AAIA,UAAIF,mBAAmB,IAAI7+C,IAAI,KAAK,YAAhC,IAAgDA,IAAI,KAAK,gBAAzD,IAA6E,EAAEA,IAAI,KAAK,oBAAT,IAAiC++C,WAAW,CAACjtC,QAA/C,CAAjF,EAA2I;AACzI,aAAKxG,KAAL,CAAWyzC,WAAW,CAACtiD,KAAvB,EAA8B65C,QAAQ,CAAC+B,0BAAvC;AACD;;AAEDwG,MAAAA,mBAAmB,GAAGA,mBAAmB,IAAI7+C,IAAI,KAAK,oBAAT,IAAiC++C,WAAW,CAACjtC,QAApE,IAAgF9R,IAAI,KAAK,gBAA/G;;AAEA,UAAIA,IAAI,KAAK,YAAb,EAA2B;AACzB++C,QAAAA,WAAW,GAAGA,WAAW,CAACxtB,cAA1B;AACAvxB,QAAAA,IAAI,GAAG++C,WAAW,CAAC/+C,IAAnB;AACD;;AAED,YAAMi/C,SAAS,GAAGj/C,IAAI,KAAK,oBAA3B;AACA8+C,MAAAA,eAAe,GAAG,CAACE,gBAAgB,GAAGF,eAApB,KAAwC,IAAxC,GAA+CE,gBAA/C,GAAkEC,SAApF;;AAEA,UAAIH,eAAe,KAAKG,SAAxB,EAAmC;AACjC,aAAK3zC,KAAL,CAAWyzC,WAAW,CAACtiD,KAAvB,EAA8B65C,QAAQ,CAAC4B,gCAAvC;AACD;AACF,KAxBD;AAyBA,WAAO,KAAKvnC,UAAL,CAAgB5S,IAAhB,EAAsB,aAAtB,CAAP;AACD;;AAED6gD,EAAAA,uBAAuB,GAAG;AACxB,UAAM;AACJniD,MAAAA,KAAK,EAAE4U,QADH;AAEJrG,MAAAA;AAFI,QAGF,KAAKhM,KAHT;AAIA,UAAMoyB,IAAI,GAAG,KAAK/T,GAAL,CAASvnB,OAAO,CAAC6B,QAAjB,CAAb;AACA,QAAIqI,IAAI,GAAG,KAAKw+C,WAAL,EAAX;AACA,UAAM1sC,QAAQ,GAAG,KAAKuL,GAAL,CAASvnB,OAAO,CAACyB,QAAjB,CAAjB;AACA,UAAM2nD,OAAO,GAAG,KAAK7hC,GAAL,CAASvnB,OAAO,CAACsB,KAAjB,CAAhB;;AAEA,QAAI8nD,OAAJ,EAAa;AACX,YAAMC,WAAW,GAAG,KAAKvsC,eAAL,CAAqB5S,IAArB,CAApB;AACAm/C,MAAAA,WAAW,CAACrtC,QAAZ,GAAuBA,QAAvB;;AAEA,UAAI9R,IAAI,CAACA,IAAL,KAAc,iBAAd,IAAmC,CAACA,IAAI,CAAC4P,cAAzC,IAA2D5P,IAAI,CAAC67C,QAAL,CAAc77C,IAAd,KAAuB,YAAtF,EAAoG;AAClGm/C,QAAAA,WAAW,CAACnqD,KAAZ,GAAoBgL,IAAI,CAAC67C,QAAzB;AACD,OAFD,MAEO;AACL,aAAKvwC,KAAL,CAAWtL,IAAI,CAACvD,KAAhB,EAAuB65C,QAAQ,CAAC0B,uBAAhC;AACAmH,QAAAA,WAAW,CAACnqD,KAAZ,GAAoBgL,IAApB;AACD;;AAEDm/C,MAAAA,WAAW,CAAC76B,WAAZ,GAA0B,KAAKk6B,WAAL,EAA1B;AACAx+C,MAAAA,IAAI,GAAG,KAAK2Q,UAAL,CAAgBwuC,WAAhB,EAA6B,oBAA7B,CAAP;AACD,KAbD,MAaO,IAAIrtC,QAAJ,EAAc;AACnB,YAAMstC,gBAAgB,GAAG,KAAKxsC,eAAL,CAAqB5S,IAArB,CAAzB;AACAo/C,MAAAA,gBAAgB,CAAC7tB,cAAjB,GAAkCvxB,IAAlC;AACAA,MAAAA,IAAI,GAAG,KAAK2Q,UAAL,CAAgByuC,gBAAhB,EAAkC,gBAAlC,CAAP;AACD;;AAED,QAAIhuB,IAAJ,EAAU;AACR,YAAMiuB,QAAQ,GAAG,KAAKzxC,WAAL,CAAiByD,QAAjB,EAA2BrG,QAA3B,CAAjB;AACAq0C,MAAAA,QAAQ,CAAC9tB,cAAT,GAA0BvxB,IAA1B;AACAA,MAAAA,IAAI,GAAG,KAAK2Q,UAAL,CAAgB0uC,QAAhB,EAA0B,YAA1B,CAAP;AACD;;AAED,WAAOr/C,IAAP;AACD;;AAEDs/C,EAAAA,wBAAwB,GAAG;AACzB,UAAMvhD,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACA,SAAK4X,MAAL,CAAYtyB,OAAO,CAACkB,MAApB;AACA+G,IAAAA,IAAI,CAACwzB,cAAL,GAAsB,KAAKitB,WAAL,EAAtB;AACA,SAAKp2B,MAAL,CAAYtyB,OAAO,CAACmB,MAApB;AACA,WAAO,KAAK0Z,UAAL,CAAgB5S,IAAhB,EAAsB,qBAAtB,CAAP;AACD;;AAEDwhD,EAAAA,gCAAgC,CAACv/C,IAAD,EAAOw/C,QAAP,EAAiB;AAC/C,UAAMzhD,IAAI,GAAG,KAAKyS,SAAL,EAAb;;AAEA,QAAIxQ,IAAI,KAAK,mBAAb,EAAkC;AAChCjC,MAAAA,IAAI,CAACyhD,QAAL,GAAgB,CAAC,CAACA,QAAlB;AACA,UAAIA,QAAJ,EAAc,KAAKvqC,IAAL;AACd,WAAKA,IAAL;AACD;;AAED,SAAK4nC,eAAL,CAAqB/mD,OAAO,CAAC2B,KAA7B,EAAoCsG,IAApC;AACA,WAAO,KAAK4S,UAAL,CAAgB5S,IAAhB,EAAsBiC,IAAtB,CAAP;AACD;;AAEDy/C,EAAAA,sBAAsB,GAAG;AACvB,UAAM1hD,IAAI,GAAG,KAAKyS,SAAL,EAAb;;AAEAzS,IAAAA,IAAI,CAAC0jC,OAAL,GAAe,CAAC,MAAM;AACpB,cAAQ,KAAKziC,KAAL,CAAWgB,IAAnB;AACE,aAAKlK,OAAO,CAACC,GAAb;AACA,aAAKD,OAAO,CAACE,MAAb;AACA,aAAKF,OAAO,CAACK,MAAb;AACA,aAAKL,OAAO,CAACqF,KAAb;AACA,aAAKrF,OAAO,CAACsF,MAAb;AACE,iBAAO,KAAK82B,aAAL,EAAP;;AAEF;AACE,gBAAM,KAAK7K,UAAL,EAAN;AATJ;AAWD,KAZc,GAAf;;AAcA,WAAO,KAAK1W,UAAL,CAAgB5S,IAAhB,EAAsB,eAAtB,CAAP;AACD;;AAED2hD,EAAAA,0BAA0B,GAAG;AAC3B,UAAM3hD,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACAzS,IAAAA,IAAI,CAAC0jC,OAAL,GAAe,KAAKke,aAAL,CAAmB,KAAnB,CAAf;AACA,WAAO,KAAKhvC,UAAL,CAAgB5S,IAAhB,EAAsB,eAAtB,CAAP;AACD;;AAED6hD,EAAAA,yBAAyB,GAAG;AAC1B,QAAI,KAAK5gD,KAAL,CAAW0b,MAAf,EAAuB,OAAO,KAAK8jC,WAAL,EAAP;AACvB,WAAO,MAAMoB,yBAAN,EAAP;AACD;;AAEDC,EAAAA,kCAAkC,GAAG;AACnC,UAAMC,WAAW,GAAG,KAAK3D,mBAAL,EAApB;;AAEA,QAAI,KAAK70B,YAAL,CAAkB,IAAlB,KAA2B,CAAC,KAAKS,qBAAL,EAAhC,EAA8D;AAC5D,aAAO,KAAK+zB,wBAAL,CAA8BgE,WAA9B,CAAP;AACD,KAFD,MAEO;AACL,aAAOA,WAAP;AACD;AACF;;AAEDC,EAAAA,mBAAmB,GAAG;AACpB,YAAQ,KAAK/gD,KAAL,CAAWgB,IAAnB;AACE,WAAKlK,OAAO,CAACL,IAAb;AACA,WAAKK,OAAO,CAAC0F,KAAb;AACA,WAAK1F,OAAO,CAACoF,KAAb;AACE;AACE,gBAAM8E,IAAI,GAAG,KAAK/C,KAAL,CAAWnH,OAAO,CAAC0F,KAAnB,IAA4B,eAA5B,GAA8C,KAAKyB,KAAL,CAAWnH,OAAO,CAACoF,KAAnB,IAA4B,eAA5B,GAA8Cs+C,mBAAmB,CAAC,KAAKx6C,KAAL,CAAWzK,KAAZ,CAA5H;;AAEA,cAAIyL,IAAI,KAAK9B,SAAT,IAAsB,KAAK2f,iBAAL,OAA6B,EAAvD,EAA2D;AACzD,kBAAM9f,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACA,iBAAKyE,IAAL;AACA,mBAAO,KAAKtE,UAAL,CAAgB5S,IAAhB,EAAsBiC,IAAtB,CAAP;AACD;;AAED,iBAAO,KAAK47C,oBAAL,EAAP;AACD;;AAEH,WAAK9lD,OAAO,CAACK,MAAb;AACA,WAAKL,OAAO,CAACC,GAAb;AACA,WAAKD,OAAO,CAACE,MAAb;AACA,WAAKF,OAAO,CAACqF,KAAb;AACA,WAAKrF,OAAO,CAACsF,MAAb;AACE,eAAO,KAAKqkD,sBAAL,EAAP;;AAEF,WAAK3pD,OAAO,CAACoD,OAAb;AACE,YAAI,KAAK8F,KAAL,CAAWzK,KAAX,KAAqB,GAAzB,EAA8B;AAC5B,gBAAMwJ,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACA,gBAAM4M,SAAS,GAAG,KAAKI,SAAL,EAAlB;;AAEA,cAAIJ,SAAS,CAACpd,IAAV,KAAmBlK,OAAO,CAACC,GAA3B,IAAkCqnB,SAAS,CAACpd,IAAV,KAAmBlK,OAAO,CAACE,MAAjE,EAAyE;AACvE,kBAAM,KAAKqxB,UAAL,EAAN;AACD;;AAEDtpB,UAAAA,IAAI,CAAC0jC,OAAL,GAAe,KAAKue,eAAL,EAAf;AACA,iBAAO,KAAKrvC,UAAL,CAAgB5S,IAAhB,EAAsB,eAAtB,CAAP;AACD;;AAED;;AAEF,WAAKjI,OAAO,CAAC8E,KAAb;AACE,eAAO,KAAKilD,kCAAL,EAAP;;AAEF,WAAK/pD,OAAO,CAACyF,OAAb;AACE,eAAO,KAAK6gD,gBAAL,EAAP;;AAEF,WAAKtmD,OAAO,CAACmF,OAAb;AACE,eAAO,KAAKsgD,iBAAL,EAAP;;AAEF,WAAKzlD,OAAO,CAACa,MAAb;AACE,eAAO,KAAK8mD,WAAL,CAAiB,KAAKU,qBAAL,CAA2Bl0B,IAA3B,CAAgC,IAAhC,CAAjB,IAA0D,KAAKq0B,iBAAL,EAA1D,GAAqF,KAAKL,kBAAL,EAA5F;;AAEF,WAAKnoD,OAAO,CAACQ,QAAb;AACE,eAAO,KAAKooD,gBAAL,EAAP;;AAEF,WAAK5oD,OAAO,CAACkB,MAAb;AACE,eAAO,KAAKsoD,wBAAL,EAAP;;AAEF,WAAKxpD,OAAO,CAAC8B,SAAb;AACE,eAAO,KAAK8nD,0BAAL,EAAP;AAzDJ;;AA4DA,UAAM,KAAKr4B,UAAL,EAAN;AACD;;AAED44B,EAAAA,wBAAwB,GAAG;AACzB,QAAIjgD,IAAI,GAAG,KAAK+/C,mBAAL,EAAX;;AAEA,WAAO,CAAC,KAAKh4B,qBAAL,EAAD,IAAiC,KAAK1K,GAAL,CAASvnB,OAAO,CAACQ,QAAjB,CAAxC,EAAoE;AAClE,UAAI,KAAK2G,KAAL,CAAWnH,OAAO,CAACW,QAAnB,CAAJ,EAAkC;AAChC,cAAMsH,IAAI,GAAG,KAAK6U,eAAL,CAAqB5S,IAArB,CAAb;AACAjC,QAAAA,IAAI,CAACumB,WAAL,GAAmBtkB,IAAnB;AACA,aAAKooB,MAAL,CAAYtyB,OAAO,CAACW,QAApB;AACAuJ,QAAAA,IAAI,GAAG,KAAK2Q,UAAL,CAAgB5S,IAAhB,EAAsB,aAAtB,CAAP;AACD,OALD,MAKO;AACL,cAAMA,IAAI,GAAG,KAAK6U,eAAL,CAAqB5S,IAArB,CAAb;AACAjC,QAAAA,IAAI,CAAC05B,UAAL,GAAkBz3B,IAAlB;AACAjC,QAAAA,IAAI,CAAC25B,SAAL,GAAiB,KAAK8mB,WAAL,EAAjB;AACA,aAAKp2B,MAAL,CAAYtyB,OAAO,CAACW,QAApB;AACAuJ,QAAAA,IAAI,GAAG,KAAK2Q,UAAL,CAAgB5S,IAAhB,EAAsB,qBAAtB,CAAP;AACD;AACF;;AAED,WAAOiC,IAAP;AACD;;AAEDkgD,EAAAA,mBAAmB,CAACC,QAAD,EAAW;AAC5B,UAAMpiD,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACA,SAAKqX,gBAAL,CAAsBs4B,QAAtB;AACApiD,IAAAA,IAAI,CAACoiD,QAAL,GAAgBA,QAAhB;AACApiD,IAAAA,IAAI,CAACwzB,cAAL,GAAsB,KAAK6uB,2BAAL,EAAtB;;AAEA,QAAID,QAAQ,KAAK,UAAjB,EAA6B;AAC3B,WAAKE,gCAAL,CAAsCtiD,IAAtC;AACD;;AAED,WAAO,KAAK4S,UAAL,CAAgB5S,IAAhB,EAAsB,gBAAtB,CAAP;AACD;;AAEDsiD,EAAAA,gCAAgC,CAACtiD,IAAD,EAAO;AACrC,YAAQA,IAAI,CAACwzB,cAAL,CAAoBvxB,IAA5B;AACE,WAAK,aAAL;AACA,WAAK,aAAL;AACE;;AAEF;AACE,aAAKsL,KAAL,CAAWvN,IAAI,CAACtB,KAAhB,EAAuB65C,QAAQ,CAAC4C,kBAAhC;AANJ;AAQD;;AAEDoH,EAAAA,gBAAgB,GAAG;AACjB,UAAMviD,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACA,SAAKqX,gBAAL,CAAsB,OAAtB;AACA,UAAM8M,aAAa,GAAG,KAAKnkB,SAAL,EAAtB;AACAmkB,IAAAA,aAAa,CAACl/B,IAAd,GAAqB,KAAK8mD,wBAAL,EAArB;AACAx+C,IAAAA,IAAI,CAAC42B,aAAL,GAAqB,KAAKhkB,UAAL,CAAgBgkB,aAAhB,EAA+B,iBAA/B,CAArB;AACA,WAAO,KAAKhkB,UAAL,CAAgB5S,IAAhB,EAAsB,aAAtB,CAAP;AACD;;AAEDqiD,EAAAA,2BAA2B,GAAG;AAC5B,UAAMD,QAAQ,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,UAApB,EAAgCI,IAAhC,CAAqC78B,EAAE,IAAI,KAAK4D,YAAL,CAAkB5D,EAAlB,CAA3C,CAAjB;AACA,WAAOy8B,QAAQ,GAAG,KAAKD,mBAAL,CAAyBC,QAAzB,CAAH,GAAwC,KAAK74B,YAAL,CAAkB,OAAlB,IAA6B,KAAKg5B,gBAAL,EAA7B,GAAuD,KAAKL,wBAAL,EAA9G;AACD;;AAEDO,EAAAA,8BAA8B,CAAC/vC,IAAD,EAAOgwC,oBAAP,EAA6BN,QAA7B,EAAuC;AACnE,UAAMpiD,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACA,UAAMkwC,kBAAkB,GAAG,KAAKrjC,GAAL,CAAS8iC,QAAT,CAA3B;AACA,UAAMjtC,KAAK,GAAG,EAAd;;AAEA,OAAG;AACDA,MAAAA,KAAK,CAACjU,IAAN,CAAWwhD,oBAAoB,EAA/B;AACD,KAFD,QAES,KAAKpjC,GAAL,CAAS8iC,QAAT,CAFT;;AAIA,QAAIjtC,KAAK,CAACvU,MAAN,KAAiB,CAAjB,IAAsB,CAAC+hD,kBAA3B,EAA+C;AAC7C,aAAOxtC,KAAK,CAAC,CAAD,CAAZ;AACD;;AAEDnV,IAAAA,IAAI,CAACmV,KAAL,GAAaA,KAAb;AACA,WAAO,KAAKvC,UAAL,CAAgB5S,IAAhB,EAAsB0S,IAAtB,CAAP;AACD;;AAEDkwC,EAAAA,+BAA+B,GAAG;AAChC,WAAO,KAAKH,8BAAL,CAAoC,oBAApC,EAA0D,KAAKJ,2BAAL,CAAiCn2B,IAAjC,CAAsC,IAAtC,CAA1D,EAAuGn0B,OAAO,CAACgD,UAA/G,CAAP;AACD;;AAED8nD,EAAAA,wBAAwB,GAAG;AACzB,WAAO,KAAKJ,8BAAL,CAAoC,aAApC,EAAmD,KAAKG,+BAAL,CAAqC12B,IAArC,CAA0C,IAA1C,CAAnD,EAAoGn0B,OAAO,CAAC8C,SAA5G,CAAP;AACD;;AAEDioD,EAAAA,uBAAuB,GAAG;AACxB,QAAI,KAAK35B,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1B,aAAO,IAAP;AACD;;AAED,WAAO,KAAKjqB,KAAL,CAAWnH,OAAO,CAACkB,MAAnB,KAA8B,KAAKymD,WAAL,CAAiB,KAAKqD,oCAAL,CAA0C72B,IAA1C,CAA+C,IAA/C,CAAjB,CAArC;AACD;;AAED82B,EAAAA,oBAAoB,GAAG;AACrB,QAAI,KAAK9jD,KAAL,CAAWnH,OAAO,CAACL,IAAnB,KAA4B,KAAKwH,KAAL,CAAWnH,OAAO,CAAC8E,KAAnB,CAAhC,EAA2D;AACzD,WAAKqa,IAAL;AACA,aAAO,IAAP;AACD;;AAED,QAAI,KAAKhY,KAAL,CAAWnH,OAAO,CAACa,MAAnB,CAAJ,EAAgC;AAC9B,UAAIqqD,iBAAiB,GAAG,CAAxB;AACA,WAAK/rC,IAAL;;AAEA,aAAO+rC,iBAAiB,GAAG,CAA3B,EAA8B;AAC5B,YAAI,KAAK/jD,KAAL,CAAWnH,OAAO,CAACa,MAAnB,CAAJ,EAAgC;AAC9B,YAAEqqD,iBAAF;AACD,SAFD,MAEO,IAAI,KAAK/jD,KAAL,CAAWnH,OAAO,CAACgB,MAAnB,CAAJ,EAAgC;AACrC,YAAEkqD,iBAAF;AACD;;AAED,aAAK/rC,IAAL;AACD;;AAED,aAAO,IAAP;AACD;;AAED,QAAI,KAAKhY,KAAL,CAAWnH,OAAO,CAACQ,QAAnB,CAAJ,EAAkC;AAChC,UAAI0qD,iBAAiB,GAAG,CAAxB;AACA,WAAK/rC,IAAL;;AAEA,aAAO+rC,iBAAiB,GAAG,CAA3B,EAA8B;AAC5B,YAAI,KAAK/jD,KAAL,CAAWnH,OAAO,CAACQ,QAAnB,CAAJ,EAAkC;AAChC,YAAE0qD,iBAAF;AACD,SAFD,MAEO,IAAI,KAAK/jD,KAAL,CAAWnH,OAAO,CAACW,QAAnB,CAAJ,EAAkC;AACvC,YAAEuqD,iBAAF;AACD;;AAED,aAAK/rC,IAAL;AACD;;AAED,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD;;AAED6rC,EAAAA,oCAAoC,GAAG;AACrC,SAAK7rC,IAAL;;AAEA,QAAI,KAAKhY,KAAL,CAAWnH,OAAO,CAACmB,MAAnB,KAA8B,KAAKgG,KAAL,CAAWnH,OAAO,CAAC6B,QAAnB,CAAlC,EAAgE;AAC9D,aAAO,IAAP;AACD;;AAED,QAAI,KAAKopD,oBAAL,EAAJ,EAAiC;AAC/B,UAAI,KAAK9jD,KAAL,CAAWnH,OAAO,CAACsB,KAAnB,KAA6B,KAAK6F,KAAL,CAAWnH,OAAO,CAACoB,KAAnB,CAA7B,IAA0D,KAAK+F,KAAL,CAAWnH,OAAO,CAACyB,QAAnB,CAA1D,IAA0F,KAAK0F,KAAL,CAAWnH,OAAO,CAACmC,EAAnB,CAA9F,EAAsH;AACpH,eAAO,IAAP;AACD;;AAED,UAAI,KAAKgF,KAAL,CAAWnH,OAAO,CAACmB,MAAnB,CAAJ,EAAgC;AAC9B,aAAKge,IAAL;;AAEA,YAAI,KAAKhY,KAAL,CAAWnH,OAAO,CAAC2B,KAAnB,CAAJ,EAA+B;AAC7B,iBAAO,IAAP;AACD;AACF;AACF;;AAED,WAAO,KAAP;AACD;;AAED0lD,EAAAA,oCAAoC,CAACL,WAAD,EAAc;AAChD,WAAO,KAAKmE,QAAL,CAAc,MAAM;AACzB,YAAMC,CAAC,GAAG,KAAK1wC,SAAL,EAAV;AACA,WAAK4X,MAAL,CAAY00B,WAAZ;AACA,YAAM/+C,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACA,YAAM0rC,OAAO,GAAG,CAAC,CAAC,KAAKjC,UAAL,CAAgB,KAAKkH,2BAAL,CAAiCl3B,IAAjC,CAAsC,IAAtC,CAAhB,CAAlB;;AAEA,UAAIiyB,OAAO,IAAI,KAAKj/C,KAAL,CAAWnH,OAAO,CAAC8E,KAAnB,CAAf,EAA0C;AACxC,YAAIwmD,iBAAiB,GAAG,KAAKvB,kCAAL,EAAxB;;AAEA,YAAIuB,iBAAiB,CAACphD,IAAlB,KAA2B,YAA/B,EAA6C;AAC3CjC,UAAAA,IAAI,CAACi+C,aAAL,GAAqBoF,iBAArB;AACArjD,UAAAA,IAAI,CAACm+C,OAAL,GAAe,IAAf;AACAn+C,UAAAA,IAAI,CAACwzB,cAAL,GAAsB,IAAtB;AACA6vB,UAAAA,iBAAiB,GAAG,KAAKzwC,UAAL,CAAgB5S,IAAhB,EAAsB,iBAAtB,CAApB;AACD,SALD,MAKO;AACL,eAAK2tB,0BAAL,CAAgC01B,iBAAhC,EAAmDrjD,IAAnD;AACAqjD,UAAAA,iBAAiB,CAAClF,OAAlB,GAA4B,IAA5B;AACD;;AAEDgF,QAAAA,CAAC,CAAC3vB,cAAF,GAAmB6vB,iBAAnB;AACA,eAAO,KAAKzwC,UAAL,CAAgBuwC,CAAhB,EAAmB,kBAAnB,CAAP;AACD;;AAED,YAAMG,qBAAqB,GAAG,KAAKzH,cAAL,MAAyB,KAAKK,UAAL,CAAgB,KAAKqH,0BAAL,CAAgCr3B,IAAhC,CAAqC,IAArC,CAAhB,CAAvD;;AAEA,UAAI,CAACo3B,qBAAL,EAA4B;AAC1B,YAAI,CAACnF,OAAL,EAAc;AACZ,iBAAO,KAAKD,qBAAL,CAA2B,KAA3B,EAAkCiF,CAAlC,CAAP;AACD;;AAEDnjD,QAAAA,IAAI,CAACi+C,aAAL,GAAqB,KAAKlrB,eAAL,EAArB;AACA/yB,QAAAA,IAAI,CAACm+C,OAAL,GAAeA,OAAf;AACAn+C,QAAAA,IAAI,CAACwzB,cAAL,GAAsB,IAAtB;AACA2vB,QAAAA,CAAC,CAAC3vB,cAAF,GAAmB,KAAK5gB,UAAL,CAAgB5S,IAAhB,EAAsB,iBAAtB,CAAnB;AACA,eAAO,KAAK4S,UAAL,CAAgBuwC,CAAhB,EAAmB,kBAAnB,CAAP;AACD;;AAED,YAAMlhD,IAAI,GAAG,KAAKi8C,qBAAL,CAA2B,KAA3B,CAAb;AACAl+C,MAAAA,IAAI,CAACi+C,aAAL,GAAqBqF,qBAArB;AACAtjD,MAAAA,IAAI,CAACwzB,cAAL,GAAsBvxB,IAAtB;AACAjC,MAAAA,IAAI,CAACm+C,OAAL,GAAeA,OAAf;AACAgF,MAAAA,CAAC,CAAC3vB,cAAF,GAAmB,KAAK5gB,UAAL,CAAgB5S,IAAhB,EAAsB,iBAAtB,CAAnB;AACA,aAAO,KAAK4S,UAAL,CAAgBuwC,CAAhB,EAAmB,kBAAnB,CAAP;AACD,KA3CM,CAAP;AA4CD;;AAEDK,EAAAA,uCAAuC,GAAG;AACxC,WAAO,KAAKtkD,KAAL,CAAWnH,OAAO,CAACsB,KAAnB,IAA4B,KAAK+lD,oCAAL,CAA0CrnD,OAAO,CAACsB,KAAlD,CAA5B,GAAuF8G,SAA9F;AACD;;AAEDw/C,EAAAA,wBAAwB,GAAG;AACzB,WAAO,KAAKzgD,KAAL,CAAWnH,OAAO,CAACsB,KAAnB,IAA4B,KAAK6kD,qBAAL,EAA5B,GAA2D/9C,SAAlE;AACD;;AAEDugD,EAAAA,cAAc,GAAG;AACf,WAAO,KAAKhC,kBAAL,CAAwB3mD,OAAO,CAACsB,KAAhC,CAAP;AACD;;AAEDkqD,EAAAA,0BAA0B,GAAG;AAC3B,UAAMtxC,EAAE,GAAG,KAAK8gB,eAAL,EAAX;;AAEA,QAAI,KAAKxJ,YAAL,CAAkB,IAAlB,KAA2B,CAAC,KAAKS,qBAAL,EAAhC,EAA8D;AAC5D,WAAK9S,IAAL;AACA,aAAOjF,EAAP;AACD;AACF;;AAEDmxC,EAAAA,2BAA2B,GAAG;AAC5B,QAAI,CAAC,KAAKlkD,KAAL,CAAWnH,OAAO,CAACL,IAAnB,CAAD,IAA6B,KAAKuJ,KAAL,CAAWzK,KAAX,KAAqB,SAAlD,IAA+D,KAAKwzB,qBAAL,EAAnE,EAAiG;AAC/F,aAAO,KAAP;AACD;;AAED,UAAMvM,WAAW,GAAG,KAAKxc,KAAL,CAAWwc,WAA/B;AACA,SAAKvG,IAAL;;AAEA,QAAI,CAAC,KAAKhY,KAAL,CAAWnH,OAAO,CAACL,IAAnB,CAAD,IAA6B,CAAC,KAAKwH,KAAL,CAAWnH,OAAO,CAAC8E,KAAnB,CAAlC,EAA6D;AAC3D,aAAO,KAAP;AACD;;AAED,QAAI4gB,WAAJ,EAAiB;AACf,WAAKlQ,KAAL,CAAW,KAAKtM,KAAL,CAAWiM,YAAtB,EAAoCtK,aAAa,CAACqD,0BAAlD,EAA8E,SAA9E;AACD;;AAED,WAAO,IAAP;AACD;;AAEDi4C,EAAAA,qBAAqB,CAACuF,QAAQ,GAAG,IAAZ,EAAkBN,CAAC,GAAG,KAAK1wC,SAAL,EAAtB,EAAwC;AAC3D,SAAKywC,QAAL,CAAc,MAAM;AAClB,UAAIO,QAAJ,EAAc,KAAKp5B,MAAL,CAAYtyB,OAAO,CAACsB,KAApB;AACd8pD,MAAAA,CAAC,CAAC3vB,cAAF,GAAmB,KAAKitB,WAAL,EAAnB;AACD,KAHD;AAIA,WAAO,KAAK7tC,UAAL,CAAgBuwC,CAAhB,EAAmB,kBAAnB,CAAP;AACD;;AAED1C,EAAAA,WAAW,GAAG;AACZnI,IAAAA,MAAM,CAAC,KAAKr3C,KAAL,CAAW0b,MAAZ,CAAN;AACA,UAAM1a,IAAI,GAAG,KAAKyhD,yBAAL,EAAb;;AAEA,QAAI,KAAK15B,qBAAL,MAAgC,CAAC,KAAK1K,GAAL,CAASvnB,OAAO,CAACiF,QAAjB,CAArC,EAAiE;AAC/D,aAAOiF,IAAP;AACD;;AAED,UAAMjC,IAAI,GAAG,KAAK6U,eAAL,CAAqB5S,IAArB,CAAb;AACAjC,IAAAA,IAAI,CAAC2jD,SAAL,GAAiB1hD,IAAjB;AACAjC,IAAAA,IAAI,CAAC4jD,WAAL,GAAmB,KAAKF,yBAAL,EAAnB;AACA,SAAKr5B,MAAL,CAAYtyB,OAAO,CAACyB,QAApB;AACAwG,IAAAA,IAAI,CAAC6jD,QAAL,GAAgB,KAAKpD,WAAL,EAAhB;AACA,SAAKp2B,MAAL,CAAYtyB,OAAO,CAACsB,KAApB;AACA2G,IAAAA,IAAI,CAAC8jD,SAAL,GAAiB,KAAKrD,WAAL,EAAjB;AACA,WAAO,KAAK7tC,UAAL,CAAgB5S,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAED+jD,EAAAA,8BAA8B,GAAG;AAC/B,WAAO,KAAKx6B,YAAL,CAAkB,UAAlB,KAAiC,KAAK9J,SAAL,GAAiBxd,IAAjB,KAA0BlK,OAAO,CAAC6E,IAA1E;AACD;;AAED8mD,EAAAA,yBAAyB,GAAG;AAC1B,QAAI,KAAKZ,uBAAL,EAAJ,EAAoC;AAClC,aAAO,KAAKtB,gCAAL,CAAsC,gBAAtC,CAAP;AACD;;AAED,QAAI,KAAKtiD,KAAL,CAAWnH,OAAO,CAAC6E,IAAnB,CAAJ,EAA8B;AAC5B,aAAO,KAAK4kD,gCAAL,CAAsC,mBAAtC,CAAP;AACD,KAFD,MAEO,IAAI,KAAKuC,8BAAL,EAAJ,EAA2C;AAChD,aAAO,KAAKvC,gCAAL,CAAsC,mBAAtC,EAA2D,IAA3D,CAAP;AACD;;AAED,WAAO,KAAKqB,wBAAL,EAAP;AACD;;AAEDmB,EAAAA,oBAAoB,GAAG;AACrB,UAAMhkD,IAAI,GAAG,KAAKyS,SAAL,EAAb;;AAEA,UAAMhW,MAAM,GAAG,KAAKoiD,6BAAL,EAAf;;AAEA7+C,IAAAA,IAAI,CAACwzB,cAAL,GAAsB/2B,MAAM,IAAI,KAAKwnD,mBAAL,EAAhC;AACA,SAAK56B,gBAAL,CAAsB,GAAtB;AACArpB,IAAAA,IAAI,CAAC8P,UAAL,GAAkB,KAAKmyC,eAAL,EAAlB;AACA,WAAO,KAAKrvC,UAAL,CAAgB5S,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAEDkkD,EAAAA,qBAAqB,CAACC,UAAD,EAAa;AAChC,UAAMC,aAAa,GAAG,KAAKnjD,KAAL,CAAWvC,KAAjC;AACA,UAAM2lD,aAAa,GAAG,KAAKpH,oBAAL,CAA0B,uBAA1B,EAAmD,KAAKqH,kCAAL,CAAwCp4B,IAAxC,CAA6C,IAA7C,CAAnD,CAAtB;;AAEA,QAAI,CAACm4B,aAAa,CAACzjD,MAAnB,EAA2B;AACzB,WAAK2M,KAAL,CAAW62C,aAAX,EAA0B7L,QAAQ,CAACa,uBAAnC,EAA4D+K,UAA5D;AACD;;AAED,WAAOE,aAAP;AACD;;AAEDC,EAAAA,kCAAkC,GAAG;AACnC,UAAMtkD,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACAzS,IAAAA,IAAI,CAAC8P,UAAL,GAAkB,KAAK4tC,iBAAL,CAAuB,KAAvB,CAAlB;;AAEA,QAAI,KAAKv0B,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BnpB,MAAAA,IAAI,CAAC6R,cAAL,GAAsB,KAAK8rC,oBAAL,EAAtB;AACD;;AAED,WAAO,KAAK/qC,UAAL,CAAgB5S,IAAhB,EAAsB,+BAAtB,CAAP;AACD;;AAEDukD,EAAAA,2BAA2B,CAACvkD,IAAD,EAAO;AAChC,QAAI,KAAKd,KAAL,CAAWnH,OAAO,CAACL,IAAnB,CAAJ,EAA8B;AAC5BsI,MAAAA,IAAI,CAACiS,EAAL,GAAU,KAAK8gB,eAAL,EAAV;AACA,WAAKiL,SAAL,CAAeh+B,IAAI,CAACiS,EAApB,EAAwB,kCAAxB,EAA4D8G,iBAA5D;AACD,KAHD,MAGO;AACL/Y,MAAAA,IAAI,CAACiS,EAAL,GAAU,IAAV;AACA,WAAK1E,KAAL,CAAW,KAAKtM,KAAL,CAAWvC,KAAtB,EAA6B65C,QAAQ,CAAC2B,oBAAtC;AACD;;AAEDl6C,IAAAA,IAAI,CAAC6R,cAAL,GAAsB,KAAK8sC,wBAAL,EAAtB;;AAEA,QAAI,KAAKr/B,GAAL,CAASvnB,OAAO,CAACiF,QAAjB,CAAJ,EAAgC;AAC9BgD,MAAAA,IAAI,CAACg1B,OAAL,GAAe,KAAKkvB,qBAAL,CAA2B,SAA3B,CAAf;AACD;;AAED,UAAM7yC,IAAI,GAAG,KAAKoB,SAAL,EAAb;AACApB,IAAAA,IAAI,CAACA,IAAL,GAAY,KAAK6xC,QAAL,CAAc,KAAK/C,wBAAL,CAA8Bj0B,IAA9B,CAAmC,IAAnC,CAAd,CAAZ;AACAlsB,IAAAA,IAAI,CAACqR,IAAL,GAAY,KAAKuB,UAAL,CAAgBvB,IAAhB,EAAsB,iBAAtB,CAAZ;AACA,WAAO,KAAKuB,UAAL,CAAgB5S,IAAhB,EAAsB,wBAAtB,CAAP;AACD;;AAEDwkD,EAAAA,2BAA2B,CAACxkD,IAAD,EAAO;AAChCA,IAAAA,IAAI,CAACiS,EAAL,GAAU,KAAK8gB,eAAL,EAAV;AACA,SAAKiL,SAAL,CAAeh+B,IAAI,CAACiS,EAApB,EAAwB,uBAAxB,EAAiD+G,YAAjD;AACAhZ,IAAAA,IAAI,CAAC6R,cAAL,GAAsB,KAAK8sC,wBAAL,EAAtB;AACA3+C,IAAAA,IAAI,CAACwzB,cAAL,GAAsB,KAAK0vB,QAAL,CAAc,MAAM;AACxC,WAAK74B,MAAL,CAAYtyB,OAAO,CAACmC,EAApB;;AAEA,UAAI,KAAKqvB,YAAL,CAAkB,WAAlB,KAAkC,KAAK9J,SAAL,GAAiBxd,IAAjB,KAA0BlK,OAAO,CAACwB,GAAxE,EAA6E;AAC3E,cAAMyG,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACA,aAAKyE,IAAL;AACA,eAAO,KAAKtE,UAAL,CAAgB5S,IAAhB,EAAsB,oBAAtB,CAAP;AACD;;AAED,aAAO,KAAKygD,WAAL,EAAP;AACD,KAVqB,CAAtB;AAWA,SAAKt2B,SAAL;AACA,WAAO,KAAKvX,UAAL,CAAgB5S,IAAhB,EAAsB,wBAAtB,CAAP;AACD;;AAEDykD,EAAAA,aAAa,CAACC,EAAD,EAAK;AAChB,UAAMC,UAAU,GAAG,KAAK1jD,KAAL,CAAWoU,OAA9B;AACA,SAAKpU,KAAL,CAAWoU,OAAX,GAAqB,CAACsvC,UAAU,CAAC,CAAD,CAAX,CAArB;;AAEA,QAAI;AACF,aAAOD,EAAE,EAAT;AACD,KAFD,SAEU;AACR,WAAKzjD,KAAL,CAAWoU,OAAX,GAAqBsvC,UAArB;AACD;AACF;;AAEDzB,EAAAA,QAAQ,CAACwB,EAAD,EAAK;AACX,UAAMryB,SAAS,GAAG,KAAKpxB,KAAL,CAAW0b,MAA7B;AACA,SAAK1b,KAAL,CAAW0b,MAAX,GAAoB,IAApB;;AAEA,QAAI;AACF,aAAO+nC,EAAE,EAAT;AACD,KAFD,SAEU;AACR,WAAKzjD,KAAL,CAAW0b,MAAX,GAAoB0V,SAApB;AACD;AACF;;AAEDqsB,EAAAA,kBAAkB,CAAC9mD,KAAD,EAAQ;AACxB,WAAO,CAAC,KAAKsH,KAAL,CAAWtH,KAAX,CAAD,GAAqBuI,SAArB,GAAiC,KAAK8jD,mBAAL,EAAxC;AACD;;AAED3D,EAAAA,qBAAqB,CAAC1oD,KAAD,EAAQ;AAC3B,WAAO,KAAKgtD,iBAAL,CAAuB,MAAM,KAAKv6B,MAAL,CAAYzyB,KAAZ,CAA7B,CAAP;AACD;;AAEDqsD,EAAAA,mBAAmB,GAAG;AACpB,WAAO,KAAKW,iBAAL,CAAuB,MAAM,KAAK1tC,IAAL,EAA7B,CAAP;AACD;;AAED0tC,EAAAA,iBAAiB,CAACF,EAAD,EAAK;AACpB,WAAO,KAAKxB,QAAL,CAAc,MAAM;AACzBwB,MAAAA,EAAE;AACF,aAAO,KAAKjE,WAAL,EAAP;AACD,KAHM,CAAP;AAID;;AAEDoE,EAAAA,iBAAiB,GAAG;AAClB,UAAM7kD,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACAzS,IAAAA,IAAI,CAACiS,EAAL,GAAU,KAAK/S,KAAL,CAAWnH,OAAO,CAACK,MAAnB,IAA6B,KAAK+7B,aAAL,EAA7B,GAAoD,KAAKpB,eAAL,CAAqB,IAArB,CAA9D;;AAEA,QAAI,KAAKzT,GAAL,CAASvnB,OAAO,CAACmC,EAAjB,CAAJ,EAA0B;AACxB8F,MAAAA,IAAI,CAAC8kD,WAAL,GAAmB,KAAKtpB,uBAAL,EAAnB;AACD;;AAED,WAAO,KAAK5oB,UAAL,CAAgB5S,IAAhB,EAAsB,cAAtB,CAAP;AACD;;AAED+kD,EAAAA,sBAAsB,CAAC/kD,IAAD,EAAOk4C,OAAP,EAAgB;AACpC,QAAIA,OAAJ,EAAal4C,IAAI,CAACqxB,KAAL,GAAa,IAAb;AACbrxB,IAAAA,IAAI,CAACiS,EAAL,GAAU,KAAK8gB,eAAL,EAAV;AACA,SAAKiL,SAAL,CAAeh+B,IAAI,CAACiS,EAApB,EAAwB,6BAAxB,EAAuDimC,OAAO,GAAG7+B,kBAAH,GAAwBJ,YAAtF;AACA,SAAKoR,MAAL,CAAYtyB,OAAO,CAACa,MAApB;AACAoH,IAAAA,IAAI,CAACgkC,OAAL,GAAe,KAAKiZ,oBAAL,CAA0B,aAA1B,EAAyC,KAAK4H,iBAAL,CAAuB34B,IAAvB,CAA4B,IAA5B,CAAzC,CAAf;AACA,SAAK7B,MAAL,CAAYtyB,OAAO,CAACgB,MAApB;AACA,WAAO,KAAK6Z,UAAL,CAAgB5S,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAEDglD,EAAAA,kBAAkB,GAAG;AACnB,UAAMhlD,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACA,SAAK8I,KAAL,CAAWF,KAAX,CAAiBhE,WAAjB;AACA,SAAKgT,MAAL,CAAYtyB,OAAO,CAACa,MAApB;AACA,SAAKqsD,2BAAL,CAAiCjlD,IAAI,CAACqR,IAAL,GAAY,EAA7C,EAAiDlR,SAAjD,EAA4D,IAA5D,EAAkEpI,OAAO,CAACgB,MAA1E;AACA,SAAKwiB,KAAL,CAAWD,IAAX;AACA,WAAO,KAAK1I,UAAL,CAAgB5S,IAAhB,EAAsB,eAAtB,CAAP;AACD;;AAEDklD,EAAAA,mCAAmC,CAACllD,IAAD,EAAOmlD,MAAM,GAAG,KAAhB,EAAuB;AACxDnlD,IAAAA,IAAI,CAACiS,EAAL,GAAU,KAAK8gB,eAAL,EAAV;;AAEA,QAAI,CAACoyB,MAAL,EAAa;AACX,WAAKnnB,SAAL,CAAeh+B,IAAI,CAACiS,EAApB,EAAwB,iCAAxB,EAA2DqH,iBAA3D;AACD;;AAED,QAAI,KAAKgG,GAAL,CAASvnB,OAAO,CAACwB,GAAjB,CAAJ,EAA2B;AACzB,YAAM6rD,KAAK,GAAG,KAAK3yC,SAAL,EAAd;AACA,WAAKyyC,mCAAL,CAAyCE,KAAzC,EAAgD,IAAhD;AACAplD,MAAAA,IAAI,CAACqR,IAAL,GAAY+zC,KAAZ;AACD,KAJD,MAIO;AACL,WAAK7pC,KAAL,CAAWF,KAAX,CAAiBvD,eAAjB;AACA,WAAKsU,SAAL,CAAe/Q,KAAf,CAAqBgN,KAArB;AACAroB,MAAAA,IAAI,CAACqR,IAAL,GAAY,KAAK2zC,kBAAL,EAAZ;AACA,WAAK54B,SAAL,CAAe9Q,IAAf;AACA,WAAKC,KAAL,CAAWD,IAAX;AACD;;AAED,WAAO,KAAK1I,UAAL,CAAgB5S,IAAhB,EAAsB,qBAAtB,CAAP;AACD;;AAEDqlD,EAAAA,uCAAuC,CAACrlD,IAAD,EAAO;AAC5C,QAAI,KAAKupB,YAAL,CAAkB,QAAlB,CAAJ,EAAiC;AAC/BvpB,MAAAA,IAAI,CAACslD,MAAL,GAAc,IAAd;AACAtlD,MAAAA,IAAI,CAACiS,EAAL,GAAU,KAAK8gB,eAAL,EAAV;AACD,KAHD,MAGO,IAAI,KAAK7zB,KAAL,CAAWnH,OAAO,CAACK,MAAnB,CAAJ,EAAgC;AACrC4H,MAAAA,IAAI,CAACiS,EAAL,GAAU,KAAKkiB,aAAL,EAAV;AACD,KAFM,MAEA;AACL,WAAK7K,UAAL;AACD;;AAED,QAAI,KAAKpqB,KAAL,CAAWnH,OAAO,CAACa,MAAnB,CAAJ,EAAgC;AAC9B,WAAK2iB,KAAL,CAAWF,KAAX,CAAiBvD,eAAjB;AACA,WAAKsU,SAAL,CAAe/Q,KAAf,CAAqBgN,KAArB;AACAroB,MAAAA,IAAI,CAACqR,IAAL,GAAY,KAAK2zC,kBAAL,EAAZ;AACA,WAAK54B,SAAL,CAAe9Q,IAAf;AACA,WAAKC,KAAL,CAAWD,IAAX;AACD,KAND,MAMO;AACL,WAAK6O,SAAL;AACD;;AAED,WAAO,KAAKvX,UAAL,CAAgB5S,IAAhB,EAAsB,qBAAtB,CAAP;AACD;;AAEDulD,EAAAA,8BAA8B,CAACvlD,IAAD,EAAOwlD,QAAP,EAAiB;AAC7CxlD,IAAAA,IAAI,CAACwlD,QAAL,GAAgBA,QAAQ,IAAI,KAA5B;AACAxlD,IAAAA,IAAI,CAACiS,EAAL,GAAU,KAAK8gB,eAAL,EAAV;AACA,SAAKiL,SAAL,CAAeh+B,IAAI,CAACiS,EAApB,EAAwB,2BAAxB,EAAqD2G,YAArD;AACA,SAAKyR,MAAL,CAAYtyB,OAAO,CAACmC,EAApB;AACA,UAAMurD,eAAe,GAAG,KAAKC,sBAAL,EAAxB;;AAEA,QAAI1lD,IAAI,CAACkxB,UAAL,KAAoB,MAApB,IAA8Bu0B,eAAe,CAACxjD,IAAhB,KAAyB,2BAA3D,EAAwF;AACtF,WAAKsL,KAAL,CAAWk4C,eAAe,CAAC/mD,KAA3B,EAAkC65C,QAAQ,CAACiB,wBAA3C;AACD;;AAEDx5C,IAAAA,IAAI,CAACylD,eAAL,GAAuBA,eAAvB;AACA,SAAKt7B,SAAL;AACA,WAAO,KAAKvX,UAAL,CAAgB5S,IAAhB,EAAsB,2BAAtB,CAAP;AACD;;AAED2lD,EAAAA,2BAA2B,GAAG;AAC5B,WAAO,KAAKp8B,YAAL,CAAkB,SAAlB,KAAgC,KAAKzJ,iBAAL,OAA6B,EAApE;AACD;;AAED4lC,EAAAA,sBAAsB,GAAG;AACvB,WAAO,KAAKC,2BAAL,KAAqC,KAAKC,8BAAL,EAArC,GAA6E,KAAKlI,iBAAL,CAAuB,KAAvB,CAApF;AACD;;AAEDkI,EAAAA,8BAA8B,GAAG;AAC/B,UAAM5lD,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACA,SAAKqX,gBAAL,CAAsB,SAAtB;AACA,SAAKO,MAAL,CAAYtyB,OAAO,CAACkB,MAApB;;AAEA,QAAI,CAAC,KAAKiG,KAAL,CAAWnH,OAAO,CAACK,MAAnB,CAAL,EAAiC;AAC/B,YAAM,KAAKkxB,UAAL,EAAN;AACD;;AAEDtpB,IAAAA,IAAI,CAAC8P,UAAL,GAAkB,KAAKqkB,aAAL,EAAlB;AACA,SAAK9J,MAAL,CAAYtyB,OAAO,CAACmB,MAApB;AACA,WAAO,KAAK0Z,UAAL,CAAgB5S,IAAhB,EAAsB,2BAAtB,CAAP;AACD;;AAED0/C,EAAAA,WAAW,CAACmG,CAAD,EAAI;AACb,UAAM5kD,KAAK,GAAG,KAAKA,KAAL,CAAWgd,KAAX,EAAd;AACA,UAAM6nC,GAAG,GAAGD,CAAC,EAAb;AACA,SAAK5kD,KAAL,GAAaA,KAAb;AACA,WAAO6kD,GAAP;AACD;;AAEDC,EAAAA,kBAAkB,CAACF,CAAD,EAAI;AACpB,UAAM3pB,MAAM,GAAG,KAAKrR,QAAL,CAAcgW,KAAK,IAAIglB,CAAC,MAAMhlB,KAAK,EAAnC,CAAf;AACA,QAAI3E,MAAM,CAAC/Q,OAAP,IAAkB,CAAC+Q,MAAM,CAACl8B,IAA9B,EAAoC,OAAOG,SAAP;AACpC,QAAI+7B,MAAM,CAACnuB,KAAX,EAAkB,KAAK9M,KAAL,GAAai7B,MAAM,CAACjR,SAApB;AAClB,WAAOiR,MAAM,CAACl8B,IAAd;AACD;;AAEDk8C,EAAAA,UAAU,CAAC2J,CAAD,EAAI;AACZ,UAAM5kD,KAAK,GAAG,KAAKA,KAAL,CAAWgd,KAAX,EAAd;AACA,UAAMie,MAAM,GAAG2pB,CAAC,EAAhB;;AAEA,QAAI3pB,MAAM,KAAK/7B,SAAX,IAAwB+7B,MAAM,KAAK,KAAvC,EAA8C;AAC5C,aAAOA,MAAP;AACD,KAFD,MAEO;AACL,WAAKj7B,KAAL,GAAaA,KAAb;AACA,aAAOd,SAAP;AACD;AACF;;AAED6lD,EAAAA,iBAAiB,CAACC,IAAD,EAAO;AACtB,QAAI,KAAK/7B,gBAAL,EAAJ,EAA6B;AAC3B;AACD;;AAED,QAAIg8B,SAAS,GAAG,KAAKjlD,KAAL,CAAWgB,IAA3B;AACA,QAAIyQ,IAAJ;;AAEA,QAAI,KAAK6W,YAAL,CAAkB,KAAlB,CAAJ,EAA8B;AAC5B28B,MAAAA,SAAS,GAAGnuD,OAAO,CAACyE,IAApB;AACAkW,MAAAA,IAAI,GAAG,KAAP;AACD;;AAED,WAAO,KAAKyzC,kBAAL,CAAwB,MAAM;AACnC,cAAQD,SAAR;AACE,aAAKnuD,OAAO,CAACmE,SAAb;AACE+pD,UAAAA,IAAI,CAAChwB,OAAL,GAAe,IAAf;AACA,iBAAO,KAAKmwB,sBAAL,CAA4BH,IAA5B,EAAkC,KAAlC,EAAyC,IAAzC,CAAP;;AAEF,aAAKluD,OAAO,CAACgF,MAAb;AACEkpD,UAAAA,IAAI,CAAChwB,OAAL,GAAe,IAAf;AACA,iBAAO,KAAKowB,UAAL,CAAgBJ,IAAhB,EAAsB,IAAtB,EAA4B,KAA5B,CAAP;;AAEF,aAAKluD,OAAO,CAAC0E,MAAb;AACE,cAAI,KAAKyC,KAAL,CAAWnH,OAAO,CAAC0E,MAAnB,KAA8B,KAAKmtB,qBAAL,CAA2B,MAA3B,CAAlC,EAAsE;AACpE,iBAAKS,MAAL,CAAYtyB,OAAO,CAAC0E,MAApB;AACA,iBAAKqtB,gBAAL,CAAsB,MAAtB;AACA,mBAAO,KAAKi7B,sBAAL,CAA4BkB,IAA5B,EAAkC,IAAlC,CAAP;AACD;;AAEH,aAAKluD,OAAO,CAACyE,IAAb;AACEkW,UAAAA,IAAI,GAAGA,IAAI,IAAI,KAAKzR,KAAL,CAAWzK,KAA1B;AACA,iBAAO,KAAK8vD,iBAAL,CAAuBL,IAAvB,EAA6BvzC,IAA7B,CAAP;;AAEF,aAAK3a,OAAO,CAACL,IAAb;AACE;AACE,kBAAMlB,KAAK,GAAG,KAAKyK,KAAL,CAAWzK,KAAzB;;AAEA,gBAAIA,KAAK,KAAK,QAAd,EAAwB;AACtB,qBAAO,KAAK6uD,uCAAL,CAA6CY,IAA7C,CAAP;AACD,aAFD,MAEO;AACL,qBAAO,KAAKM,kBAAL,CAAwBN,IAAxB,EAA8BzvD,KAA9B,EAAqC,IAArC,CAAP;AACD;AACF;AA7BL;AA+BD,KAhCM,CAAP;AAiCD;;AAEDgwD,EAAAA,2BAA2B,GAAG;AAC5B,WAAO,KAAKD,kBAAL,CAAwB,KAAK9zC,SAAL,EAAxB,EAA0C,KAAKxR,KAAL,CAAWzK,KAArD,EAA4D,IAA5D,CAAP;AACD;;AAEDiwD,EAAAA,0BAA0B,CAACzmD,IAAD,EAAO06B,IAAP,EAAa;AACrC,YAAQA,IAAI,CAAChjC,IAAb;AACE,WAAK,SAAL;AACE;AACE,gBAAMs5B,WAAW,GAAG,KAAKg1B,iBAAL,CAAuBhmD,IAAvB,CAApB;;AAEA,cAAIgxB,WAAJ,EAAiB;AACfA,YAAAA,WAAW,CAACiF,OAAZ,GAAsB,IAAtB;AACA,mBAAOjF,WAAP;AACD;;AAED;AACD;;AAEH,WAAK,QAAL;AACE,YAAI,KAAK9xB,KAAL,CAAWnH,OAAO,CAACa,MAAnB,CAAJ,EAAgC;AAC9B,eAAK2iB,KAAL,CAAWF,KAAX,CAAiBvD,eAAjB;AACA,eAAKsU,SAAL,CAAe/Q,KAAf,CAAqBgN,KAArB;AACA,gBAAMq+B,GAAG,GAAG1mD,IAAZ;AACA0mD,UAAAA,GAAG,CAACpB,MAAJ,GAAa,IAAb;AACAoB,UAAAA,GAAG,CAACz0C,EAAJ,GAASyoB,IAAT;AACAgsB,UAAAA,GAAG,CAACr1C,IAAJ,GAAW,KAAK2zC,kBAAL,EAAX;AACA,eAAKzpC,KAAL,CAAWD,IAAX;AACA,eAAK8Q,SAAL,CAAe9Q,IAAf;AACA,iBAAO,KAAK1I,UAAL,CAAgB8zC,GAAhB,EAAqB,qBAArB,CAAP;AACD;;AAED;;AAEF;AACE,eAAO,KAAKH,kBAAL,CAAwBvmD,IAAxB,EAA8B06B,IAAI,CAAChjC,IAAnC,EAAyC,KAAzC,CAAP;AA7BJ;AA+BD;;AAED6uD,EAAAA,kBAAkB,CAACvmD,IAAD,EAAOxJ,KAAP,EAAc0gB,IAAd,EAAoB;AACpC,YAAQ1gB,KAAR;AACE,WAAK,UAAL;AACE,YAAI,KAAKmwD,qBAAL,CAA2BzvC,IAA3B,MAAqC,KAAKhY,KAAL,CAAWnH,OAAO,CAACgF,MAAnB,KAA8B,KAAKmC,KAAL,CAAWnH,OAAO,CAACL,IAAnB,CAAnE,CAAJ,EAAkG;AAChG,iBAAO,KAAKkvD,0BAAL,CAAgC5mD,IAAhC,CAAP;AACD;;AAED;;AAEF,WAAK,MAAL;AACE,YAAIkX,IAAI,IAAI,KAAKhY,KAAL,CAAWnH,OAAO,CAACL,IAAnB,CAAZ,EAAsC;AACpC,cAAIwf,IAAJ,EAAU,KAAKA,IAAL;AACV,iBAAO,KAAK6tC,sBAAL,CAA4B/kD,IAA5B,EAAkC,KAAlC,CAAP;AACD;;AAED;;AAEF,WAAK,WAAL;AACE,YAAI,KAAK2mD,qBAAL,CAA2BzvC,IAA3B,KAAoC,KAAKhY,KAAL,CAAWnH,OAAO,CAACL,IAAnB,CAAxC,EAAkE;AAChE,iBAAO,KAAK6sD,2BAAL,CAAiCvkD,IAAjC,CAAP;AACD;;AAED;;AAEF,WAAK,QAAL;AACE,YAAI,KAAK2mD,qBAAL,CAA2BzvC,IAA3B,CAAJ,EAAsC;AACpC,cAAI,KAAKhY,KAAL,CAAWnH,OAAO,CAACK,MAAnB,CAAJ,EAAgC;AAC9B,mBAAO,KAAKitD,uCAAL,CAA6CrlD,IAA7C,CAAP;AACD,WAFD,MAEO,IAAI,KAAKd,KAAL,CAAWnH,OAAO,CAACL,IAAnB,CAAJ,EAA8B;AACnC,mBAAO,KAAKwtD,mCAAL,CAAyCllD,IAAzC,CAAP;AACD;AACF;;AAED;;AAEF,WAAK,WAAL;AACE,YAAI,KAAK2mD,qBAAL,CAA2BzvC,IAA3B,KAAoC,KAAKhY,KAAL,CAAWnH,OAAO,CAACL,IAAnB,CAAxC,EAAkE;AAChE,iBAAO,KAAKwtD,mCAAL,CAAyCllD,IAAzC,CAAP;AACD;;AAED;;AAEF,WAAK,MAAL;AACE,YAAI,KAAK2mD,qBAAL,CAA2BzvC,IAA3B,KAAoC,KAAKhY,KAAL,CAAWnH,OAAO,CAACL,IAAnB,CAAxC,EAAkE;AAChE,iBAAO,KAAK8sD,2BAAL,CAAiCxkD,IAAjC,CAAP;AACD;;AAED;AA9CJ;AAgDD;;AAED2mD,EAAAA,qBAAqB,CAACzvC,IAAD,EAAO;AAC1B,QAAIA,IAAJ,EAAU;AACR,UAAI,KAAK+S,qBAAL,EAAJ,EAAkC,OAAO,KAAP;AAClC,WAAK/S,IAAL;AACA,aAAO,IAAP;AACD;;AAED,WAAO,CAAC,KAAKgT,gBAAL,EAAR;AACD;;AAED28B,EAAAA,mCAAmC,CAACvzC,QAAD,EAAWrG,QAAX,EAAqB;AACtD,QAAI,CAAC,KAAKkc,YAAL,CAAkB,GAAlB,CAAL,EAA6B;AAC3B,aAAOhpB,SAAP;AACD;;AAED,UAAM2mD,yBAAyB,GAAG,KAAK7lD,KAAL,CAAWyb,sBAA7C;AACA,SAAKzb,KAAL,CAAWyb,sBAAX,GAAoC,IAApC;AACA,UAAMopC,GAAG,GAAG,KAAKC,kBAAL,CAAwB,MAAM;AACxC,YAAM/lD,IAAI,GAAG,KAAK6P,WAAL,CAAiByD,QAAjB,EAA2BrG,QAA3B,CAAb;AACAjN,MAAAA,IAAI,CAAC6R,cAAL,GAAsB,KAAK+sC,qBAAL,EAAtB;AACA,YAAM3e,mBAAN,CAA0BjgC,IAA1B;AACAA,MAAAA,IAAI,CAACuzB,UAAL,GAAkB,KAAKiwB,uCAAL,EAAlB;AACA,WAAKn5B,MAAL,CAAYtyB,OAAO,CAAC2B,KAApB;AACA,aAAOsG,IAAP;AACD,KAPW,CAAZ;AAQA,SAAKiB,KAAL,CAAWyb,sBAAX,GAAoCoqC,yBAApC;;AAEA,QAAI,CAAChB,GAAL,EAAU;AACR,aAAO3lD,SAAP;AACD;;AAED,WAAO,KAAK8hC,oBAAL,CAA0B6jB,GAA1B,EAA+B,IAA/B,EAAqC,IAArC,CAAP;AACD;;AAEDnI,EAAAA,oBAAoB,GAAG;AACrB,UAAM39C,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACAzS,IAAAA,IAAI,CAACoC,MAAL,GAAc,KAAK8gD,QAAL,CAAc,MAAM,KAAKuB,aAAL,CAAmB,MAAM;AACzD,WAAKp7B,gBAAL,CAAsB,GAAtB;AACA,aAAO,KAAK4zB,oBAAL,CAA0B,2BAA1B,EAAuD,KAAKwD,WAAL,CAAiBv0B,IAAjB,CAAsB,IAAtB,CAAvD,CAAP;AACD,KAHiC,CAApB,CAAd;;AAKA,QAAIlsB,IAAI,CAACoC,MAAL,CAAYxB,MAAZ,KAAuB,CAA3B,EAA8B;AAC5B,WAAK2M,KAAL,CAAWvN,IAAI,CAACtB,KAAhB,EAAuB65C,QAAQ,CAACc,kBAAhC;AACD;;AAED,SAAKhwB,gBAAL,CAAsB,GAAtB;AACA,WAAO,KAAKzW,UAAL,CAAgB5S,IAAhB,EAAsB,8BAAtB,CAAP;AACD;;AAED+mD,EAAAA,oBAAoB,GAAG;AACrB,QAAI,KAAK7nD,KAAL,CAAWnH,OAAO,CAACL,IAAnB,CAAJ,EAA8B;AAC5B,cAAQ,KAAKuJ,KAAL,CAAWzK,KAAnB;AACE,aAAK,UAAL;AACA,aAAK,SAAL;AACA,aAAK,MAAL;AACA,aAAK,WAAL;AACA,aAAK,QAAL;AACA,aAAK,WAAL;AACA,aAAK,MAAL;AACE,iBAAO,IAAP;AARJ;AAUD;;AAED,WAAO,KAAP;AACD;;AAEDokC,EAAAA,wBAAwB,GAAG;AACzB,QAAI,KAAKmsB,oBAAL,EAAJ,EAAiC,OAAO,KAAP;AACjC,WAAO,MAAMnsB,wBAAN,EAAP;AACD;;AAEDosB,EAAAA,uBAAuB,CAAC9mB,cAAD,EAAiB+mB,UAAjB,EAA6B;AAClD,UAAM3zC,QAAQ,GAAG,KAAKrS,KAAL,CAAWvC,KAA5B;AACA,UAAMuO,QAAQ,GAAG,KAAKhM,KAAL,CAAWgM,QAA5B;AACA,QAAI2vC,aAAJ;AACA,QAAIiD,QAAQ,GAAG,KAAf;AACA,QAAIqH,QAAQ,GAAG,KAAf;;AAEA,QAAIhnB,cAAc,KAAK//B,SAAvB,EAAkC;AAChC,YAAMi8C,QAAQ,GAAG,EAAjB;AACA,WAAKD,gBAAL,CAAsBC,QAAtB,EAAgC,CAAC,QAAD,EAAW,SAAX,EAAsB,WAAtB,EAAmC,UAAnC,EAA+C,UAA/C,CAAhC;AACAQ,MAAAA,aAAa,GAAGR,QAAQ,CAACQ,aAAzB;AACAsK,MAAAA,QAAQ,GAAG9K,QAAQ,CAAC8K,QAApB;AACArH,MAAAA,QAAQ,GAAGzD,QAAQ,CAACyD,QAApB;;AAEA,UAAI3f,cAAc,KAAK,KAAnB,KAA6B0c,aAAa,IAAIiD,QAAjB,IAA6BqH,QAA1D,CAAJ,EAAyE;AACvE,aAAK35C,KAAL,CAAW+F,QAAX,EAAqBilC,QAAQ,CAAC2C,2BAA9B;AACD;AACF;;AAED,UAAMnc,IAAI,GAAG,KAAKD,iBAAL,EAAb;AACA,SAAKD,4BAAL,CAAkCE,IAAlC;AACA,UAAMooB,GAAG,GAAG,KAAKroB,iBAAL,CAAuBC,IAAI,CAACrgC,KAA5B,EAAmCqgC,IAAI,CAAC/9B,GAAL,CAAStC,KAA5C,EAAmDqgC,IAAnD,CAAZ;;AAEA,QAAI6d,aAAa,IAAIiD,QAAjB,IAA6BqH,QAAjC,EAA2C;AACzC,YAAME,EAAE,GAAG,KAAKv3C,WAAL,CAAiByD,QAAjB,EAA2BrG,QAA3B,CAAX;;AAEA,UAAIg6C,UAAU,CAACrmD,MAAf,EAAuB;AACrBwmD,QAAAA,EAAE,CAACH,UAAH,GAAgBA,UAAhB;AACD;;AAED,UAAIrK,aAAJ,EAAmBwK,EAAE,CAACxK,aAAH,GAAmBA,aAAnB;AACnB,UAAIiD,QAAJ,EAAcuH,EAAE,CAACvH,QAAH,GAAcA,QAAd;AACd,UAAIqH,QAAJ,EAAcE,EAAE,CAACF,QAAH,GAAcA,QAAd;;AAEd,UAAIC,GAAG,CAACllD,IAAJ,KAAa,YAAb,IAA6BklD,GAAG,CAACllD,IAAJ,KAAa,mBAA9C,EAAmE;AACjE,aAAKsL,KAAL,CAAW65C,EAAE,CAAC1oD,KAAd,EAAqB65C,QAAQ,CAACgD,gCAA9B;AACD;;AAED6L,MAAAA,EAAE,CAACC,SAAH,GAAeF,GAAf;AACA,aAAO,KAAKv0C,UAAL,CAAgBw0C,EAAhB,EAAoB,qBAApB,CAAP;AACD;;AAED,QAAIH,UAAU,CAACrmD,MAAf,EAAuB;AACrBm+B,MAAAA,IAAI,CAACkoB,UAAL,GAAkBA,UAAlB;AACD;;AAED,WAAOE,GAAP;AACD;;AAED9sB,EAAAA,0BAA0B,CAACr6B,IAAD,EAAOiC,IAAP,EAAaoQ,QAAQ,GAAG,KAAxB,EAA+B;AACvD,QAAI,KAAKnT,KAAL,CAAWnH,OAAO,CAACsB,KAAnB,CAAJ,EAA+B;AAC7B2G,MAAAA,IAAI,CAACuzB,UAAL,GAAkB,KAAK6rB,oCAAL,CAA0CrnD,OAAO,CAACsB,KAAlD,CAAlB;AACD;;AAED,UAAMiuD,YAAY,GAAGrlD,IAAI,KAAK,qBAAT,GAAiC,mBAAjC,GAAuDA,IAAI,KAAK,aAAT,GAAyB,iBAAzB,GAA6C9B,SAAzH;;AAEA,QAAImnD,YAAY,IAAI,CAAC,KAAKpoD,KAAL,CAAWnH,OAAO,CAACa,MAAnB,CAAjB,IAA+C,KAAKsxB,gBAAL,EAAnD,EAA4E;AAC1E,WAAKtX,UAAL,CAAgB5S,IAAhB,EAAsBsnD,YAAtB;AACA;AACD;;AAED,QAAIA,YAAY,KAAK,mBAAjB,IAAwC,KAAKrmD,KAAL,CAAW8b,gBAAvD,EAAyE;AACvE,WAAKxP,KAAL,CAAWvN,IAAI,CAACtB,KAAhB,EAAuB65C,QAAQ,CAACU,gCAAhC;;AAEA,UAAIj5C,IAAI,CAACi2B,OAAT,EAAkB;AAChB,cAAMoE,0BAAN,CAAiCr6B,IAAjC,EAAuCsnD,YAAvC,EAAqDj1C,QAArD;AACA;AACD;AACF;;AAED,UAAMgoB,0BAAN,CAAiCr6B,IAAjC,EAAuCiC,IAAvC,EAA6CoQ,QAA7C;AACD;;AAEDk1C,EAAAA,2BAA2B,CAACvnD,IAAD,EAAO;AAChC,QAAI,CAACA,IAAI,CAACqR,IAAN,IAAcrR,IAAI,CAACiS,EAAvB,EAA2B;AACzB,WAAK+rB,SAAL,CAAeh+B,IAAI,CAACiS,EAApB,EAAwB,eAAxB,EAAyCiH,eAAzC;AACD,KAFD,MAEO;AACL,YAAMquC,2BAAN,CAAkC,GAAGplD,SAArC;AACD;AACF;;AAEDqlD,EAAAA,0BAA0B,CAACC,KAAD,EAAQ;AAChCA,IAAAA,KAAK,CAAC76C,OAAN,CAAc5M,IAAI,IAAI;AACpB,UAAI,CAACA,IAAI,IAAI,IAAR,GAAe,KAAK,CAApB,GAAwBA,IAAI,CAACiC,IAA9B,MAAwC,sBAA5C,EAAoE;AAClE,aAAKsL,KAAL,CAAWvN,IAAI,CAACwzB,cAAL,CAAoB90B,KAA/B,EAAsC65C,QAAQ,CAAC6C,wBAA/C;AACD;AACF,KAJD;AAKD;;AAED3d,EAAAA,gBAAgB,CAACF,QAAD,EAAWmqB,UAAX,EAAuB;AACrC,SAAKF,0BAAL,CAAgCjqB,QAAhC;AACA,WAAOA,QAAP;AACD;;AAEDK,EAAAA,cAAc,CAAC,GAAG5sB,IAAJ,EAAU;AACtB,UAAMhR,IAAI,GAAG,MAAM49B,cAAN,CAAqB,GAAG5sB,IAAxB,CAAb;;AAEA,QAAIhR,IAAI,CAACiC,IAAL,KAAc,iBAAlB,EAAqC;AACnC,WAAKulD,0BAAL,CAAgCxnD,IAAI,CAACQ,QAArC;AACD;;AAED,WAAOR,IAAP;AACD;;AAEDsU,EAAAA,cAAc,CAACC,IAAD,EAAOjB,QAAP,EAAiBrG,QAAjB,EAA2BuH,OAA3B,EAAoCvT,KAApC,EAA2C;AACvD,QAAI,CAAC,KAAK+oB,qBAAL,EAAD,IAAiC,KAAK9qB,KAAL,CAAWnH,OAAO,CAACwC,IAAnB,CAArC,EAA+D;AAC7D,WAAK0G,KAAL,CAAWuc,WAAX,GAAyB,KAAzB;AACA,WAAKtG,IAAL;AACA,YAAMywC,iBAAiB,GAAG,KAAK93C,WAAL,CAAiByD,QAAjB,EAA2BrG,QAA3B,CAA1B;AACA06C,MAAAA,iBAAiB,CAAC73C,UAAlB,GAA+ByE,IAA/B;AACA,aAAO,KAAK3B,UAAL,CAAgB+0C,iBAAhB,EAAmC,qBAAnC,CAAP;AACD;;AAED,QAAIC,cAAc,GAAG,KAArB;;AAEA,QAAI,KAAK1oD,KAAL,CAAWnH,OAAO,CAAC0B,WAAnB,KAAmC,KAAKqmB,iBAAL,OAA6B,EAApE,EAAwE;AACtE,UAAItL,OAAJ,EAAa;AACXvT,QAAAA,KAAK,CAAC0T,IAAN,GAAa,IAAb;AACA,eAAOJ,IAAP;AACD;;AAEDtT,MAAAA,KAAK,CAACwT,mBAAN,GAA4BmzC,cAAc,GAAG,IAA7C;AACA,WAAK1wC,IAAL;AACD;;AAED,QAAI,KAAKiS,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1B,UAAI0+B,oBAAJ;AACA,YAAM3rB,MAAM,GAAG,KAAK6pB,kBAAL,CAAwB,MAAM;AAC3C,YAAI,CAACvxC,OAAD,IAAY,KAAKszC,oBAAL,CAA0BvzC,IAA1B,CAAhB,EAAiD;AAC/C,gBAAMwzC,YAAY,GAAG,KAAKlB,mCAAL,CAAyCvzC,QAAzC,EAAmDrG,QAAnD,CAArB;;AAEA,cAAI86C,YAAJ,EAAkB;AAChB,mBAAOA,YAAP;AACD;AACF;;AAED,cAAM/nD,IAAI,GAAG,KAAK6P,WAAL,CAAiByD,QAAjB,EAA2BrG,QAA3B,CAAb;AACAjN,QAAAA,IAAI,CAACgU,MAAL,GAAcO,IAAd;AACA,cAAMutB,aAAa,GAAG,KAAK6b,oBAAL,EAAtB;;AAEA,YAAI7b,aAAJ,EAAmB;AACjB,cAAI8lB,cAAc,IAAI,CAAC,KAAK1oD,KAAL,CAAWnH,OAAO,CAACkB,MAAnB,CAAvB,EAAmD;AACjD4uD,YAAAA,oBAAoB,GAAG,KAAK5mD,KAAL,CAAW+L,GAAlC;AACA,iBAAKsc,UAAL;AACD;;AAED,cAAI,CAAC9U,OAAD,IAAY,KAAK8K,GAAL,CAASvnB,OAAO,CAACkB,MAAjB,CAAhB,EAA0C;AACxC+G,YAAAA,IAAI,CAACmC,SAAL,GAAiB,KAAKu/B,4BAAL,CAAkC3pC,OAAO,CAACmB,MAA1C,EAAkD,KAAlD,CAAjB;AACA,iBAAKsuD,0BAAL,CAAgCxnD,IAAI,CAACmC,SAArC;AACAnC,YAAAA,IAAI,CAAC6R,cAAL,GAAsBiwB,aAAtB;;AAEA,gBAAI7gC,KAAK,CAACwT,mBAAV,EAA+B;AAC7BzU,cAAAA,IAAI,CAAC+T,QAAL,GAAgB6zC,cAAhB;AACD;;AAED,mBAAO,KAAK9zC,oBAAL,CAA0B9T,IAA1B,EAAgCiB,KAAK,CAACwT,mBAAtC,CAAP;AACD,WAVD,MAUO,IAAI,KAAKvV,KAAL,CAAWnH,OAAO,CAAC8B,SAAnB,CAAJ,EAAmC;AACxC,kBAAMqiC,MAAM,GAAG,KAAK8rB,6BAAL,CAAmCzzC,IAAnC,EAAyCjB,QAAzC,EAAmDrG,QAAnD,EAA6DhM,KAA7D,CAAf;AACAi7B,YAAAA,MAAM,CAACrqB,cAAP,GAAwBiwB,aAAxB;AACA,mBAAO5F,MAAP;AACD;AACF;;AAED,aAAK5S,UAAL;AACD,OArCc,CAAf;;AAuCA,UAAIu+B,oBAAJ,EAA0B;AACxB,aAAKv+B,UAAL,CAAgBu+B,oBAAhB,EAAsC9vD,OAAO,CAACkB,MAA9C;AACD;;AAED,UAAIijC,MAAJ,EAAY,OAAOA,MAAP;AACb;;AAED,WAAO,MAAM5nB,cAAN,CAAqBC,IAArB,EAA2BjB,QAA3B,EAAqCrG,QAArC,EAA+CuH,OAA/C,EAAwDvT,KAAxD,CAAP;AACD;;AAED8gC,EAAAA,iBAAiB,CAAC/hC,IAAD,EAAO;AACtB,QAAI,KAAKmpB,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1B,YAAMtX,cAAc,GAAG,KAAKk0C,kBAAL,CAAwB,MAAM;AACnD,cAAM/0C,IAAI,GAAG,KAAK2sC,oBAAL,EAAb;AACA,YAAI,CAAC,KAAKz+C,KAAL,CAAWnH,OAAO,CAACkB,MAAnB,CAAL,EAAiC,KAAKqwB,UAAL;AACjC,eAAOtY,IAAP;AACD,OAJsB,CAAvB;;AAMA,UAAIa,cAAJ,EAAoB;AAClB7R,QAAAA,IAAI,CAAC6R,cAAL,GAAsBA,cAAtB;AACD;AACF;;AAED,UAAMkwB,iBAAN,CAAwB/hC,IAAxB;AACD;;AAEDioD,EAAAA,WAAW,CAAClpB,IAAD,EAAOmpB,YAAP,EAAqBC,YAArB,EAAmCC,OAAnC,EAA4C;AACrD,QAAIhQ,OAAO,CAACrgD,OAAO,CAACuF,GAAR,CAAYjG,KAAb,CAAP,GAA6B+wD,OAA7B,IAAwC,CAAC,KAAKp+B,qBAAL,EAAzC,IAAyE,KAAKT,YAAL,CAAkB,IAAlB,CAA7E,EAAsG;AACpG,YAAMvpB,IAAI,GAAG,KAAK6P,WAAL,CAAiBq4C,YAAjB,EAA+BC,YAA/B,CAAb;AACAnoD,MAAAA,IAAI,CAAC8P,UAAL,GAAkBivB,IAAlB;;AAEA,YAAMtiC,MAAM,GAAG,KAAKoiD,6BAAL,EAAf;;AAEA,UAAIpiD,MAAJ,EAAY;AACVuD,QAAAA,IAAI,CAACwzB,cAAL,GAAsB/2B,MAAtB;AACD,OAFD,MAEO;AACLuD,QAAAA,IAAI,CAACwzB,cAAL,GAAsB,KAAKywB,mBAAL,EAAtB;AACD;;AAED,WAAKrxC,UAAL,CAAgB5S,IAAhB,EAAsB,gBAAtB;AACA,WAAKqoD,YAAL;AACA,aAAO,KAAKJ,WAAL,CAAiBjoD,IAAjB,EAAuBkoD,YAAvB,EAAqCC,YAArC,EAAmDC,OAAnD,CAAP;AACD;;AAED,WAAO,MAAMH,WAAN,CAAkBlpB,IAAlB,EAAwBmpB,YAAxB,EAAsCC,YAAtC,EAAoDC,OAApD,CAAP;AACD;;AAEDroB,EAAAA,iBAAiB,CAACrpB,IAAD,EAAOzJ,QAAP,EAAiBq7C,aAAjB,EAAgC70C,SAAhC,EAA2C,CAAE;;AAE9D80C,EAAAA,qBAAqB,GAAG,CAAE;;AAE1Bl0B,EAAAA,WAAW,CAACr0B,IAAD,EAAO;AAChBA,IAAAA,IAAI,CAACkxB,UAAL,GAAkB,OAAlB;;AAEA,QAAI,KAAKhyB,KAAL,CAAWnH,OAAO,CAACL,IAAnB,KAA4B,KAAKwH,KAAL,CAAWnH,OAAO,CAACsD,IAAnB,CAA5B,IAAwD,KAAK6D,KAAL,CAAWnH,OAAO,CAACa,MAAnB,CAA5D,EAAwF;AACtF,UAAI4vD,KAAK,GAAG,KAAK/oC,SAAL,EAAZ;;AAEA,UAAI,KAAK8J,YAAL,CAAkB,MAAlB,KAA6Bi/B,KAAK,CAACvmD,IAAN,KAAelK,OAAO,CAACoB,KAApD,IAA6D,EAAEqvD,KAAK,CAACvmD,IAAN,KAAelK,OAAO,CAACL,IAAvB,IAA+B8wD,KAAK,CAAChyD,KAAN,KAAgB,MAAjD,CAA7D,IAAyHgyD,KAAK,CAACvmD,IAAN,KAAelK,OAAO,CAACmC,EAApJ,EAAwJ;AACtJ8F,QAAAA,IAAI,CAACkxB,UAAL,GAAkB,MAAlB;AACA,aAAKha,IAAL;AACAsxC,QAAAA,KAAK,GAAG,KAAK/oC,SAAL,EAAR;AACD;;AAED,UAAI,KAAKvgB,KAAL,CAAWnH,OAAO,CAACL,IAAnB,KAA4B8wD,KAAK,CAACvmD,IAAN,KAAelK,OAAO,CAACmC,EAAvD,EAA2D;AACzD,eAAO,KAAKqrD,8BAAL,CAAoCvlD,IAApC,CAAP;AACD;AACF;;AAED,UAAMyoD,UAAU,GAAG,MAAMp0B,WAAN,CAAkBr0B,IAAlB,CAAnB;;AAEA,QAAIyoD,UAAU,CAACv3B,UAAX,KAA0B,MAA1B,IAAoCu3B,UAAU,CAACpmD,UAAX,CAAsBzB,MAAtB,GAA+B,CAAnE,IAAwE6nD,UAAU,CAACpmD,UAAX,CAAsB,CAAtB,EAAyBJ,IAAzB,KAAkC,wBAA9G,EAAwI;AACtI,WAAKsL,KAAL,CAAWk7C,UAAU,CAAC/pD,KAAtB,EAA6B65C,QAAQ,CAAC0C,sCAAtC;AACD;;AAED,WAAOwN,UAAP;AACD;;AAEDr0C,EAAAA,WAAW,CAACpU,IAAD,EAAO;AAChB,QAAI,KAAKd,KAAL,CAAWnH,OAAO,CAACmF,OAAnB,CAAJ,EAAiC;AAC/B,WAAKga,IAAL;;AAEA,UAAI,KAAKqS,YAAL,CAAkB,MAAlB,KAA6B,KAAKzJ,iBAAL,OAA6B,EAA9D,EAAkE;AAChE9f,QAAAA,IAAI,CAACkxB,UAAL,GAAkB,MAAlB;AACA,aAAKha,IAAL;AACD,OAHD,MAGO;AACLlX,QAAAA,IAAI,CAACkxB,UAAL,GAAkB,OAAlB;AACD;;AAED,aAAO,KAAKq0B,8BAAL,CAAoCvlD,IAApC,EAA0C,IAA1C,CAAP;AACD,KAXD,MAWO,IAAI,KAAKsf,GAAL,CAASvnB,OAAO,CAACmC,EAAjB,CAAJ,EAA0B;AAC/B,YAAMC,MAAM,GAAG6F,IAAf;AACA7F,MAAAA,MAAM,CAAC2V,UAAP,GAAoB,KAAK2iB,eAAL,EAApB;AACA,WAAKtI,SAAL;AACA,aAAO,KAAKvX,UAAL,CAAgBzY,MAAhB,EAAwB,oBAAxB,CAAP;AACD,KALM,MAKA,IAAI,KAAK0vB,aAAL,CAAmB,IAAnB,CAAJ,EAA8B;AACnC,YAAMyS,IAAI,GAAGt8B,IAAb;AACA,WAAK8pB,gBAAL,CAAsB,WAAtB;AACAwS,MAAAA,IAAI,CAACrqB,EAAL,GAAU,KAAK8gB,eAAL,EAAV;AACA,WAAK5I,SAAL;AACA,aAAO,KAAKvX,UAAL,CAAgB0pB,IAAhB,EAAsB,8BAAtB,CAAP;AACD,KANM,MAMA;AACL,UAAI,KAAK/S,YAAL,CAAkB,MAAlB,KAA6B,KAAK9J,SAAL,GAAiBxd,IAAjB,KAA0BlK,OAAO,CAACa,MAAnE,EAA2E;AACzE,aAAKse,IAAL;AACAlX,QAAAA,IAAI,CAAC00B,UAAL,GAAkB,MAAlB;AACD,OAHD,MAGO;AACL10B,QAAAA,IAAI,CAAC00B,UAAL,GAAkB,OAAlB;AACD;;AAED,aAAO,MAAMtgB,WAAN,CAAkBpU,IAAlB,CAAP;AACD;AACF;;AAED0oD,EAAAA,eAAe,GAAG;AAChB,WAAO,KAAKn/B,YAAL,CAAkB,UAAlB,KAAiC,KAAK9J,SAAL,GAAiBxd,IAAjB,KAA0BlK,OAAO,CAACgF,MAA1E;AACD;;AAED89B,EAAAA,4BAA4B,GAAG;AAC7B,QAAI,KAAK6tB,eAAL,EAAJ,EAA4B;AAC1B,YAAMC,GAAG,GAAG,KAAKl2C,SAAL,EAAZ;AACA,WAAKyE,IAAL;AACAyxC,MAAAA,GAAG,CAAClH,QAAJ,GAAe,IAAf;AACA,WAAK4E,UAAL,CAAgBsC,GAAhB,EAAqB,IAArB,EAA2B,IAA3B;AACA,aAAOA,GAAP;AACD;;AAED,QAAI,KAAK1nD,KAAL,CAAWzK,KAAX,KAAqB,WAAzB,EAAsC;AACpC,YAAMoyD,aAAa,GAAG,KAAKn2C,SAAL,EAAtB;AACA,WAAKyE,IAAL;AACA,YAAMglB,MAAM,GAAG,KAAKqoB,2BAAL,CAAiCqE,aAAjC,CAAf;AACA,UAAI1sB,MAAJ,EAAY,OAAOA,MAAP;AACb;;AAED,WAAO,MAAMrB,4BAAN,EAAP;AACD;;AAEDguB,EAAAA,qBAAqB,CAACxzC,OAAD,EAAUklB,QAAV,EAAoB;AACvC,QAAI,KAAKt5B,KAAL,CAAWgB,IAAX,KAAoBlK,OAAO,CAAC0E,MAAhC,EAAwC;AACtC,YAAM+rD,KAAK,GAAG,KAAK/oC,SAAL,EAAd;;AAEA,UAAI+oC,KAAK,CAACvmD,IAAN,KAAelK,OAAO,CAACL,IAAvB,IAA+B8wD,KAAK,CAAChyD,KAAN,KAAgB,MAAnD,EAA2D;AACzD,cAAMwJ,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACA,aAAK4X,MAAL,CAAYtyB,OAAO,CAAC0E,MAApB;AACA,aAAKqtB,gBAAL,CAAsB,MAAtB;AACA,eAAO,KAAKi7B,sBAAL,CAA4B/kD,IAA5B,EAAkC,IAAlC,CAAP;AACD;AACF;;AAED,WAAO,MAAM6oD,qBAAN,CAA4BxzC,OAA5B,EAAqCklB,QAArC,CAAP;AACD;;AAEDuuB,EAAAA,mBAAmB,GAAG;AACpB,WAAO,KAAK9M,eAAL,CAAqB,CAAC,QAAD,EAAW,WAAX,EAAwB,SAAxB,CAArB,CAAP;AACD;;AAED+M,EAAAA,kBAAkB,CAAC7rB,MAAD,EAAS8rB,SAAT,EAAoB;AACpC,WAAOA,SAAS,CAACr+B,IAAV,CAAegxB,QAAQ,IAAI;AAChC,UAAID,kBAAkB,CAACC,QAAD,CAAtB,EAAkC;AAChC,eAAOze,MAAM,CAAC0f,aAAP,KAAyBjB,QAAhC;AACD;;AAED,aAAO,CAAC,CAACze,MAAM,CAACye,QAAD,CAAf;AACD,KANM,CAAP;AAOD;;AAED1e,EAAAA,gBAAgB,CAACzrB,SAAD,EAAY0rB,MAAZ,EAAoBj8B,KAApB,EAA2B;AACzC,UAAMgoD,8BAA8B,GAAG,CAAC,SAAD,EAAY,SAAZ,EAAuB,QAAvB,EAAiC,WAAjC,EAA8C,UAA9C,EAA0D,UAA1D,EAAsE,UAAtE,CAAvC;AACA,SAAK9M,gBAAL,CAAsBjf,MAAtB,EAA8B+rB,8BAA8B,CAAC33C,MAA/B,CAAsC,CAAC,QAAD,CAAtC,CAA9B;;AAEA,UAAM43C,gCAAgC,GAAG,MAAM;AAC7C,YAAM/xB,QAAQ,GAAG,CAAC,CAAC+F,MAAM,CAAC9F,MAA1B;;AAEA,UAAID,QAAQ,IAAI,KAAK7X,GAAL,CAASvnB,OAAO,CAACa,MAAjB,CAAhB,EAA0C;AACxC,YAAI,KAAKmwD,kBAAL,CAAwB7rB,MAAxB,EAAgC+rB,8BAAhC,CAAJ,EAAqE;AACnE,eAAK17C,KAAL,CAAW,KAAKtM,KAAL,CAAW+L,GAAtB,EAA2BurC,QAAQ,CAACwC,6BAApC;AACD;;AAED,aAAKoO,qBAAL,CAA2B33C,SAA3B,EAAsC0rB,MAAtC;AACD,OAND,MAMO;AACL,aAAKksB,4BAAL,CAAkC53C,SAAlC,EAA6C0rB,MAA7C,EAAqDj8B,KAArD,EAA4Dk2B,QAA5D;AACD;AACF,KAZD;;AAcA,QAAI+F,MAAM,CAACjH,OAAX,EAAoB;AAClB,WAAKkwB,kBAAL,CAAwB+C,gCAAxB;AACD,KAFD,MAEO;AACLA,MAAAA,gCAAgC;AACjC;AACF;;AAEDE,EAAAA,4BAA4B,CAAC53C,SAAD,EAAY0rB,MAAZ,EAAoBj8B,KAApB,EAA2Bk2B,QAA3B,EAAqC;AAC/D,UAAM8oB,GAAG,GAAG,KAAKR,wBAAL,CAA8BviB,MAA9B,CAAZ;;AAEA,QAAI+iB,GAAJ,EAAS;AACPzuC,MAAAA,SAAS,CAACH,IAAV,CAAenQ,IAAf,CAAoB++C,GAApB;;AAEA,UAAI/iB,MAAM,CAACukB,QAAX,EAAqB;AACnB,aAAKl0C,KAAL,CAAW2vB,MAAM,CAACx+B,KAAlB,EAAyB65C,QAAQ,CAACmB,yBAAlC;AACD;;AAED,UAAIxc,MAAM,CAAC0f,aAAX,EAA0B;AACxB,aAAKrvC,KAAL,CAAW2vB,MAAM,CAACx+B,KAAlB,EAAyB65C,QAAQ,CAACoB,8BAAlC,EAAkEzc,MAAM,CAAC0f,aAAzE;AACD;;AAED,UAAI1f,MAAM,CAACjH,OAAX,EAAoB;AAClB,aAAK1oB,KAAL,CAAW2vB,MAAM,CAACx+B,KAAlB,EAAyB65C,QAAQ,CAACqB,wBAAlC;AACD;;AAED,UAAI1c,MAAM,CAACgqB,QAAX,EAAqB;AACnB,aAAK35C,KAAL,CAAW2vB,MAAM,CAACx+B,KAAlB,EAAyB65C,QAAQ,CAACsB,yBAAlC;AACD;;AAED;AACD;;AAED,QAAI,CAAC,KAAK54C,KAAL,CAAW+b,eAAZ,IAA+BkgB,MAAM,CAACukB,QAA1C,EAAoD;AAClD,WAAKl0C,KAAL,CAAW2vB,MAAM,CAACx+B,KAAlB,EAAyB65C,QAAQ,CAAC6B,iCAAlC;AACD;;AAED,QAAIld,MAAM,CAACgqB,QAAX,EAAqB;AACnB,UAAI,CAACjmD,KAAK,CAACooD,aAAX,EAA0B;AACxB,aAAK97C,KAAL,CAAW2vB,MAAM,CAACx+B,KAAlB,EAAyB65C,QAAQ,CAACgC,qBAAlC;AACD;AACF;;AAED,UAAM6O,4BAAN,CAAmC53C,SAAnC,EAA8C0rB,MAA9C,EAAsDj8B,KAAtD,EAA6Dk2B,QAA7D;AACD;;AAEDmyB,EAAAA,4BAA4B,CAACC,YAAD,EAAe;AACzC,UAAMx1C,QAAQ,GAAG,KAAKuL,GAAL,CAASvnB,OAAO,CAACyB,QAAjB,CAAjB;AACA,QAAIua,QAAJ,EAAcw1C,YAAY,CAACx1C,QAAb,GAAwB,IAAxB;;AAEd,QAAIw1C,YAAY,CAAC1J,QAAb,IAAyB,KAAK3gD,KAAL,CAAWnH,OAAO,CAACkB,MAAnB,CAA7B,EAAyD;AACvD,WAAKsU,KAAL,CAAWg8C,YAAY,CAAC7qD,KAAxB,EAA+B65C,QAAQ,CAACM,sBAAxC;AACD;;AAED,QAAI0Q,YAAY,CAACtzB,OAAb,IAAwB,KAAK/2B,KAAL,CAAWnH,OAAO,CAACkB,MAAnB,CAA5B,EAAwD;AACtD,WAAKsU,KAAL,CAAWg8C,YAAY,CAAC7qD,KAAxB,EAA+B65C,QAAQ,CAACK,qBAAxC;AACD;AACF;;AAEDne,EAAAA,wBAAwB,CAACz6B,IAAD,EAAO06B,IAAP,EAAa;AACnC,UAAM4B,IAAI,GAAG5B,IAAI,CAACz4B,IAAL,KAAc,YAAd,GAA6B,KAAKwkD,0BAAL,CAAgCzmD,IAAhC,EAAsC06B,IAAtC,CAA7B,GAA2Ev6B,SAAxF;AACA,WAAOm8B,IAAI,IAAI,MAAM7B,wBAAN,CAA+Bz6B,IAA/B,EAAqC06B,IAArC,CAAf;AACD;;AAEDC,EAAAA,4BAA4B,GAAG;AAC7B,QAAI,KAAKosB,oBAAL,EAAJ,EAAiC,OAAO,IAAP;AACjC,WAAO,MAAMpsB,4BAAN,EAAP;AACD;;AAEDG,EAAAA,gBAAgB,CAACJ,IAAD,EAAOpnB,QAAP,EAAiBrG,QAAjB,EAA2BsG,mBAA3B,EAAgD;AAC9D,QAAI,CAAC,KAAKtS,KAAL,CAAWyb,sBAAZ,IAAsC,CAAC,KAAKxd,KAAL,CAAWnH,OAAO,CAACyB,QAAnB,CAA3C,EAAyE;AACvE,aAAO,MAAMshC,gBAAN,CAAuBJ,IAAvB,EAA6BpnB,QAA7B,EAAuCrG,QAAvC,EAAiDsG,mBAAjD,CAAP;AACD;;AAED,UAAM2oB,MAAM,GAAG,KAAKrR,QAAL,CAAc,MAAM,MAAMiQ,gBAAN,CAAuBJ,IAAvB,EAA6BpnB,QAA7B,EAAuCrG,QAAvC,CAApB,CAAf;;AAEA,QAAI,CAACivB,MAAM,CAACl8B,IAAZ,EAAkB;AAChB,UAAIk8B,MAAM,CAACnuB,KAAX,EAAkB;AAChB,cAAMgtB,0BAAN,CAAiCxnB,mBAAjC,EAAsD2oB,MAAM,CAACnuB,KAA7D;AACD;;AAED,aAAO2sB,IAAP;AACD;;AAED,QAAIwB,MAAM,CAACnuB,KAAX,EAAkB,KAAK9M,KAAL,GAAai7B,MAAM,CAACjR,SAApB;AAClB,WAAOiR,MAAM,CAACl8B,IAAd;AACD;;AAEDm8B,EAAAA,cAAc,CAACn8B,IAAD,EAAOsT,QAAP,EAAiBrG,QAAjB,EAA2B;AACvCjN,IAAAA,IAAI,GAAG,MAAMm8B,cAAN,CAAqBn8B,IAArB,EAA2BsT,QAA3B,EAAqCrG,QAArC,CAAP;;AAEA,QAAI,KAAKqS,GAAL,CAASvnB,OAAO,CAACyB,QAAjB,CAAJ,EAAgC;AAC9BwG,MAAAA,IAAI,CAAC+T,QAAL,GAAgB,IAAhB;AACA,WAAK2Z,gBAAL,CAAsB1tB,IAAtB;AACD;;AAED,QAAI,KAAKd,KAAL,CAAWnH,OAAO,CAACsB,KAAnB,CAAJ,EAA+B;AAC7B,YAAM+iC,YAAY,GAAG,KAAKvsB,WAAL,CAAiByD,QAAjB,EAA2BrG,QAA3B,CAArB;AACAmvB,MAAAA,YAAY,CAACtsB,UAAb,GAA0B9P,IAA1B;AACAo8B,MAAAA,YAAY,CAAC5I,cAAb,GAA8B,KAAK0qB,qBAAL,EAA9B;AACA,aAAO,KAAKtrC,UAAL,CAAgBwpB,YAAhB,EAA8B,sBAA9B,CAAP;AACD;;AAED,WAAOp8B,IAAP;AACD;;AAEDu8B,EAAAA,sBAAsB,CAACv8B,IAAD,EAAO;AAC3B,UAAMsT,QAAQ,GAAG,KAAKrS,KAAL,CAAWvC,KAA5B;AACA,UAAMuO,QAAQ,GAAG,KAAKhM,KAAL,CAAWgM,QAA5B;AACA,UAAMu8C,SAAS,GAAG,KAAK3/B,aAAL,CAAmB,SAAnB,CAAlB;;AAEA,QAAI2/B,SAAS,KAAK,KAAKjgC,YAAL,CAAkB,SAAlB,KAAgC,CAAC,KAAKoR,4BAAL,EAAtC,CAAb,EAAyF;AACvF,YAAM,KAAKptB,KAAL,CAAW,KAAKtM,KAAL,CAAWvC,KAAtB,EAA6B65C,QAAQ,CAACgB,iCAAtC,CAAN;AACD;;AAED,QAAIvoB,WAAJ;;AAEA,QAAI,KAAK9xB,KAAL,CAAWnH,OAAO,CAACL,IAAnB,CAAJ,EAA8B;AAC5Bs5B,MAAAA,WAAW,GAAG,KAAKw1B,2BAAL,EAAd;AACD;;AAED,QAAI,CAACx1B,WAAL,EAAkB;AAChBA,MAAAA,WAAW,GAAG,MAAMuL,sBAAN,CAA6Bv8B,IAA7B,CAAd;AACD;;AAED,QAAIgxB,WAAW,KAAKA,WAAW,CAAC/uB,IAAZ,KAAqB,wBAArB,IAAiD+uB,WAAW,CAAC/uB,IAAZ,KAAqB,wBAAtE,IAAkGunD,SAAvG,CAAf,EAAkI;AAChIxpD,MAAAA,IAAI,CAAC00B,UAAL,GAAkB,MAAlB;AACD;;AAED,QAAI1D,WAAW,IAAIw4B,SAAnB,EAA8B;AAC5B,WAAK/7B,kBAAL,CAAwBuD,WAAxB,EAAqC1d,QAArC,EAA+CrG,QAA/C;AACA+jB,MAAAA,WAAW,CAACiF,OAAZ,GAAsB,IAAtB;AACD;;AAED,WAAOjF,WAAP;AACD;;AAED8L,EAAAA,YAAY,CAAC98B,IAAD,EAAO+8B,WAAP,EAAoBC,UAApB,EAAgC;AAC1C,QAAI,CAAC,CAACD,WAAD,IAAgBC,UAAjB,KAAgC,KAAKzT,YAAL,CAAkB,YAAlB,CAApC,EAAqE;AACnE;AACD;;AAED,UAAMuT,YAAN,CAAmB98B,IAAnB,EAAyB+8B,WAAzB,EAAsCC,UAAtC,EAAkDh9B,IAAI,CAACi2B,OAAL,GAAe/c,eAAf,GAAiCP,UAAnF;AACA,UAAM9G,cAAc,GAAG,KAAK8sC,wBAAL,EAAvB;AACA,QAAI9sC,cAAJ,EAAoB7R,IAAI,CAAC6R,cAAL,GAAsBA,cAAtB;AACrB;;AAED43C,EAAAA,4BAA4B,CAACzpD,IAAD,EAAO;AACjC,QAAI,CAACA,IAAI,CAAC+T,QAAN,IAAkB,KAAKuL,GAAL,CAASvnB,OAAO,CAACwC,IAAjB,CAAtB,EAA8C;AAC5CyF,MAAAA,IAAI,CAAC0pD,QAAL,GAAgB,IAAhB;AACD;;AAED,UAAMznD,IAAI,GAAG,KAAK09C,wBAAL,EAAb;AACA,QAAI19C,IAAJ,EAAUjC,IAAI,CAACwzB,cAAL,GAAsBvxB,IAAtB;AACX;;AAED4Q,EAAAA,kBAAkB,CAAC7S,IAAD,EAAO;AACvB,SAAKypD,4BAAL,CAAkCzpD,IAAlC;;AAEA,QAAI,KAAKiB,KAAL,CAAW8b,gBAAX,IAA+B,KAAK7d,KAAL,CAAWnH,OAAO,CAACmC,EAAnB,CAAnC,EAA2D;AACzD,WAAKqT,KAAL,CAAW,KAAKtM,KAAL,CAAWvC,KAAtB,EAA6B65C,QAAQ,CAACS,+BAAtC;AACD;;AAED,QAAIh5C,IAAI,CAACyhD,QAAL,IAAiB,KAAKviD,KAAL,CAAWnH,OAAO,CAACmC,EAAnB,CAArB,EAA6C;AAC3C,YAAM;AACJ2Z,QAAAA;AADI,UAEF7T,IAFJ;AAGA,WAAKuN,KAAL,CAAW,KAAKtM,KAAL,CAAWvC,KAAtB,EAA6B65C,QAAQ,CAACE,8BAAtC,EAAsE5kC,GAAG,CAAC5R,IAAJ,KAAa,YAAb,IAA6B,CAACjC,IAAI,CAAC2S,QAAnC,GAA8CkB,GAAG,CAACnc,IAAlD,GAA0D,IAAG,KAAKqH,KAAL,CAAWoR,KAAX,CAAiB0D,GAAG,CAACnV,KAArB,EAA4BmV,GAAG,CAAClV,GAAhC,CAAqC,GAAxK;AACD;;AAED,WAAO,MAAMkU,kBAAN,CAAyB7S,IAAzB,CAAP;AACD;;AAED+S,EAAAA,yBAAyB,CAAC/S,IAAD,EAAO;AAC9B,QAAIA,IAAI,CAACyhD,QAAT,EAAmB;AACjB,WAAKl0C,KAAL,CAAWvN,IAAI,CAACtB,KAAhB,EAAuB65C,QAAQ,CAACkC,yBAAhC;AACD;;AAED,QAAIz6C,IAAI,CAAC48C,aAAT,EAAwB;AACtB,WAAKrvC,KAAL,CAAWvN,IAAI,CAACtB,KAAhB,EAAuB65C,QAAQ,CAACmC,8BAAhC,EAAgE16C,IAAI,CAAC48C,aAArE;AACD;;AAED,SAAK6M,4BAAL,CAAkCzpD,IAAlC;AACA,WAAO,MAAM+S,yBAAN,CAAgC/S,IAAhC,CAAP;AACD;;AAEDuR,EAAAA,eAAe,CAACC,SAAD,EAAYf,MAAZ,EAAoBgB,WAApB,EAAiCpB,OAAjC,EAA0CqB,aAA1C,EAAyDC,iBAAzD,EAA4E;AACzF,UAAME,cAAc,GAAG,KAAK8sC,wBAAL,EAAvB;;AAEA,QAAI9sC,cAAc,IAAIH,aAAtB,EAAqC;AACnC,WAAKnE,KAAL,CAAWsE,cAAc,CAACnT,KAA1B,EAAiC65C,QAAQ,CAACO,4BAA1C;AACD;;AAED,QAAIroC,MAAM,CAACwlB,OAAP,KAAmBxlB,MAAM,CAACiC,IAAP,KAAgB,KAAhB,IAAyBjC,MAAM,CAACiC,IAAP,KAAgB,KAA5D,CAAJ,EAAwE;AACtE,WAAKnF,KAAL,CAAWkD,MAAM,CAAC/R,KAAlB,EAAyB65C,QAAQ,CAACQ,eAAlC,EAAmDtoC,MAAM,CAACiC,IAA1D;AACD;;AAED,QAAIb,cAAJ,EAAoBpB,MAAM,CAACoB,cAAP,GAAwBA,cAAxB;AACpB,UAAMN,eAAN,CAAsBC,SAAtB,EAAiCf,MAAjC,EAAyCgB,WAAzC,EAAsDpB,OAAtD,EAA+DqB,aAA/D,EAA8EC,iBAA9E;AACD;;AAED0sB,EAAAA,sBAAsB,CAAC7sB,SAAD,EAAYf,MAAZ,EAAoBgB,WAApB,EAAiCpB,OAAjC,EAA0C;AAC9D,UAAMwB,cAAc,GAAG,KAAK8sC,wBAAL,EAAvB;AACA,QAAI9sC,cAAJ,EAAoBpB,MAAM,CAACoB,cAAP,GAAwBA,cAAxB;AACpB,UAAMwsB,sBAAN,CAA6B7sB,SAA7B,EAAwCf,MAAxC,EAAgDgB,WAAhD,EAA6DpB,OAA7D;AACD;;AAEDiuB,EAAAA,eAAe,CAACt+B,IAAD,EAAO;AACpB,UAAMs+B,eAAN,CAAsBt+B,IAAtB;;AAEA,QAAIA,IAAI,CAACuO,UAAL,IAAmB,KAAK4a,YAAL,CAAkB,GAAlB,CAAvB,EAA+C;AAC7CnpB,MAAAA,IAAI,CAACu+B,mBAAL,GAA2B,KAAKof,oBAAL,EAA3B;AACD;;AAED,QAAI,KAAK9zB,aAAL,CAAmB,YAAnB,CAAJ,EAAsC;AACpC7pB,MAAAA,IAAI,CAACi1B,UAAL,GAAkB,KAAKivB,qBAAL,CAA2B,YAA3B,CAAlB;AACD;AACF;;AAEDtlB,EAAAA,iBAAiB,CAAC3rB,IAAD,EAAO,GAAGjC,IAAV,EAAgB;AAC/B,UAAMa,cAAc,GAAG,KAAK8sC,wBAAL,EAAvB;AACA,QAAI9sC,cAAJ,EAAoBoB,IAAI,CAACpB,cAAL,GAAsBA,cAAtB;AACpB,UAAM+sB,iBAAN,CAAwB3rB,IAAxB,EAA8B,GAAGjC,IAAjC;AACD;;AAEDivB,EAAAA,mBAAmB,CAACjgC,IAAD,EAAOkgC,cAAP,EAAuB;AACxC,UAAMruB,cAAc,GAAG,KAAK8sC,wBAAL,EAAvB;AACA,QAAI9sC,cAAJ,EAAoB7R,IAAI,CAAC6R,cAAL,GAAsBA,cAAtB;AACpB,UAAMouB,mBAAN,CAA0BjgC,IAA1B,EAAgCkgC,cAAhC;AACD;;AAEDC,EAAAA,UAAU,CAAC7D,IAAD,EAAO5pB,IAAP,EAAa;AACrB,UAAMytB,UAAN,CAAiB7D,IAAjB,EAAuB5pB,IAAvB;;AAEA,QAAI4pB,IAAI,CAACrqB,EAAL,CAAQhQ,IAAR,KAAiB,YAAjB,IAAiC,KAAKqd,GAAL,CAASvnB,OAAO,CAACwC,IAAjB,CAArC,EAA6D;AAC3D+hC,MAAAA,IAAI,CAACotB,QAAL,GAAgB,IAAhB;AACD;;AAED,UAAMznD,IAAI,GAAG,KAAK09C,wBAAL,EAAb;;AAEA,QAAI19C,IAAJ,EAAU;AACRq6B,MAAAA,IAAI,CAACrqB,EAAL,CAAQuhB,cAAR,GAAyBvxB,IAAzB;AACA,WAAKyrB,gBAAL,CAAsB4O,IAAI,CAACrqB,EAA3B;AACD;AACF;;AAEDmuB,EAAAA,iCAAiC,CAACpgC,IAAD,EAAO8lB,IAAP,EAAa;AAC5C,QAAI,KAAK5mB,KAAL,CAAWnH,OAAO,CAACsB,KAAnB,CAAJ,EAA+B;AAC7B2G,MAAAA,IAAI,CAACuzB,UAAL,GAAkB,KAAK2qB,qBAAL,EAAlB;AACD;;AAED,WAAO,MAAM9d,iCAAN,CAAwCpgC,IAAxC,EAA8C8lB,IAA9C,CAAP;AACD;;AAEDyV,EAAAA,gBAAgB,CAAC,GAAGvqB,IAAJ,EAAU;AACxB,QAAIuvB,IAAJ,EAAUI,KAAV,EAAiBgpB,SAAjB,EAA4B/oB,KAA5B,EAAmCgpB,UAAnC,EAA+CC,KAA/C,EAAsDC,UAAtD;;AAEA,QAAI7oD,KAAJ;AACA,QAAIu/B,GAAJ;AACA,QAAIupB,QAAJ;;AAEA,QAAI,KAAKtqD,SAAL,CAAe,KAAf,MAA0B,KAAKP,KAAL,CAAWnH,OAAO,CAAC2+B,WAAnB,KAAmC,KAAKvN,YAAL,CAAkB,GAAlB,CAA7D,CAAJ,EAA0F;AACxFloB,MAAAA,KAAK,GAAG,KAAKA,KAAL,CAAWgd,KAAX,EAAR;AACAuiB,MAAAA,GAAG,GAAG,KAAK3V,QAAL,CAAc,MAAM,MAAM0Q,gBAAN,CAAuB,GAAGvqB,IAA1B,CAApB,EAAqD/P,KAArD,CAAN;AACA,UAAI,CAACu/B,GAAG,CAACzyB,KAAT,EAAgB,OAAOyyB,GAAG,CAACxgC,IAAX;AAChB,YAAM;AACJqV,QAAAA;AADI,UAEF,KAAKpU,KAFT;;AAIA,UAAIoU,OAAO,CAACA,OAAO,CAACzU,MAAR,GAAiB,CAAlB,CAAP,KAAgCuU,KAAK,CAACsrB,MAA1C,EAAkD;AAChDprB,QAAAA,OAAO,CAACzU,MAAR,IAAkB,CAAlB;AACD,OAFD,MAEO,IAAIyU,OAAO,CAACA,OAAO,CAACzU,MAAR,GAAiB,CAAlB,CAAP,KAAgCuU,KAAK,CAACurB,MAA1C,EAAkD;AACvDrrB,QAAAA,OAAO,CAACzU,MAAR,IAAkB,CAAlB;AACD;AACF;;AAED,QAAI,EAAE,CAAC2/B,IAAI,GAAGC,GAAR,KAAgB,IAAhB,IAAwBD,IAAI,CAACxyB,KAA/B,KAAyC,CAAC,KAAKob,YAAL,CAAkB,GAAlB,CAA9C,EAAsE;AACpE,aAAO,MAAMoS,gBAAN,CAAuB,GAAGvqB,IAA1B,CAAP;AACD;;AAED,QAAIa,cAAJ;AACA5Q,IAAAA,KAAK,GAAGA,KAAK,IAAI,KAAKA,KAAL,CAAWgd,KAAX,EAAjB;AACA,UAAMvkB,KAAK,GAAG,KAAKmxB,QAAL,CAAcgW,KAAK,IAAI;AACnC,UAAIlD,WAAJ,EAAiBqsB,eAAjB;;AAEAn4C,MAAAA,cAAc,GAAG,KAAK+sC,qBAAL,EAAjB;AACA,YAAMlkB,IAAI,GAAG,MAAMa,gBAAN,CAAuB,GAAGvqB,IAA1B,CAAb;;AAEA,UAAI0pB,IAAI,CAACz4B,IAAL,KAAc,yBAAd,IAA2C,CAAC07B,WAAW,GAAGjD,IAAI,CAAC3qB,KAApB,KAA8B,IAA9B,IAAsC4tB,WAAW,CAAC/sB,aAAjG,EAAgH;AAC9GiwB,QAAAA,KAAK;AACN;;AAED,UAAI,CAAC,CAACmpB,eAAe,GAAGn4C,cAAnB,KAAsC,IAAtC,GAA6C,KAAK,CAAlD,GAAsDm4C,eAAe,CAAC5nD,MAAhB,CAAuBxB,MAA9E,MAA0F,CAA9F,EAAiG;AAC/F,aAAK+sB,0BAAL,CAAgC+M,IAAhC,EAAsC7oB,cAAtC;AACD;;AAED6oB,MAAAA,IAAI,CAAC7oB,cAAL,GAAsBA,cAAtB;AACA,aAAO6oB,IAAP;AACD,KAhBa,EAgBXz5B,KAhBW,CAAd;AAiBA,QAAI,CAACvH,KAAK,CAACqU,KAAP,IAAgB,CAACrU,KAAK,CAACyxB,OAA3B,EAAoC,OAAOzxB,KAAK,CAACsG,IAAb;;AAEpC,QAAI,CAACwgC,GAAL,EAAU;AACR8X,MAAAA,MAAM,CAAC,CAAC,KAAK74C,SAAL,CAAe,KAAf,CAAF,CAAN;AACAsqD,MAAAA,QAAQ,GAAG,KAAKl/B,QAAL,CAAc,MAAM,MAAM0Q,gBAAN,CAAuB,GAAGvqB,IAA1B,CAApB,EAAqD/P,KAArD,CAAX;AACA,UAAI,CAAC8oD,QAAQ,CAACh8C,KAAd,EAAqB,OAAOg8C,QAAQ,CAAC/pD,IAAhB;AACtB;;AAED,QAAI,CAAC2gC,KAAK,GAAGH,GAAT,KAAiB,IAAjB,IAAyBG,KAAK,CAAC3gC,IAAnC,EAAyC;AACvC,WAAKiB,KAAL,GAAau/B,GAAG,CAACvV,SAAjB;AACA,aAAOuV,GAAG,CAACxgC,IAAX;AACD;;AAED,QAAItG,KAAK,CAACsG,IAAV,EAAgB;AACd,WAAKiB,KAAL,GAAavH,KAAK,CAACuxB,SAAnB;AACA,aAAOvxB,KAAK,CAACsG,IAAb;AACD;;AAED,QAAI,CAAC2pD,SAAS,GAAGI,QAAb,KAA0B,IAA1B,IAAkCJ,SAAS,CAAC3pD,IAAhD,EAAsD;AACpD,WAAKiB,KAAL,GAAa8oD,QAAQ,CAAC9+B,SAAtB;AACA,aAAO8+B,QAAQ,CAAC/pD,IAAhB;AACD;;AAED,QAAI,CAAC4gC,KAAK,GAAGJ,GAAT,KAAiB,IAAjB,IAAyBI,KAAK,CAAC1V,MAAnC,EAA2C,MAAMsV,GAAG,CAACzyB,KAAV;AAC3C,QAAIrU,KAAK,CAACwxB,MAAV,EAAkB,MAAMxxB,KAAK,CAACqU,KAAZ;AAClB,QAAI,CAAC67C,UAAU,GAAGG,QAAd,KAA2B,IAA3B,IAAmCH,UAAU,CAAC1+B,MAAlD,EAA0D,MAAM6+B,QAAQ,CAACh8C,KAAf;AAC1D,UAAM,CAAC,CAAC87C,KAAK,GAAGrpB,GAAT,KAAiB,IAAjB,GAAwB,KAAK,CAA7B,GAAiCqpB,KAAK,CAAC97C,KAAxC,KAAkDrU,KAAK,CAACqU,KAAxD,KAAkE,CAAC+7C,UAAU,GAAGC,QAAd,KAA2B,IAA3B,GAAkC,KAAK,CAAvC,GAA2CD,UAAU,CAAC/7C,KAAxH,CAAN;AACD;;AAEDk0C,EAAAA,eAAe,CAAC1uC,mBAAD,EAAsB;AACnC,QAAI,CAAC,KAAK9T,SAAL,CAAe,KAAf,CAAD,IAA0B,KAAK0pB,YAAL,CAAkB,GAAlB,CAA9B,EAAsD;AACpD,aAAO,KAAK66B,oBAAL,EAAP;AACD,KAFD,MAEO;AACL,aAAO,MAAM/B,eAAN,CAAsB1uC,mBAAtB,CAAP;AACD;AACF;;AAED2tB,EAAAA,UAAU,CAAClhC,IAAD,EAAO;AACf,QAAI,KAAKd,KAAL,CAAWnH,OAAO,CAACsB,KAAnB,CAAJ,EAA+B;AAC7B,YAAM6iC,MAAM,GAAG,KAAKrR,QAAL,CAAcgW,KAAK,IAAI;AACpC,cAAMtN,UAAU,GAAG,KAAK6rB,oCAAL,CAA0CrnD,OAAO,CAACsB,KAAlD,CAAnB;AACA,YAAI,KAAK0wB,kBAAL,MAA6B,CAAC,KAAK7qB,KAAL,CAAWnH,OAAO,CAAC2B,KAAnB,CAAlC,EAA6DmnC,KAAK;AAClE,eAAOtN,UAAP;AACD,OAJc,CAAf;AAKA,UAAI2I,MAAM,CAAC/Q,OAAX,EAAoB;;AAEpB,UAAI,CAAC+Q,MAAM,CAAChR,MAAZ,EAAoB;AAClB,YAAIgR,MAAM,CAACnuB,KAAX,EAAkB,KAAK9M,KAAL,GAAai7B,MAAM,CAACjR,SAApB;AAClBjrB,QAAAA,IAAI,CAACuzB,UAAL,GAAkB2I,MAAM,CAACl8B,IAAzB;AACD;AACF;;AAED,WAAO,MAAMkhC,UAAN,CAAiBlhC,IAAjB,CAAP;AACD;;AAED6+B,EAAAA,4BAA4B,CAAC/E,KAAD,EAAQ;AAClC,QAAI,KAAKxa,GAAL,CAASvnB,OAAO,CAACyB,QAAjB,CAAJ,EAAgC;AAC9B,UAAIsgC,KAAK,CAAC73B,IAAN,KAAe,YAAf,IAA+B,CAAC,KAAKhB,KAAL,CAAW8b,gBAA3C,IAA+D,CAAC,KAAK9b,KAAL,CAAW0b,MAA/E,EAAuF;AACrF,aAAKpP,KAAL,CAAWusB,KAAK,CAACp7B,KAAjB,EAAwB65C,QAAQ,CAACiC,iBAAjC;AACD;;AAED1gB,MAAAA,KAAK,CAAC/lB,QAAN,GAAiB,IAAjB;AACD;;AAED,UAAM9R,IAAI,GAAG,KAAK09C,wBAAL,EAAb;AACA,QAAI19C,IAAJ,EAAU63B,KAAK,CAACtG,cAAN,GAAuBvxB,IAAvB;AACV,SAAKyrB,gBAAL,CAAsBoM,KAAtB;AACA,WAAOA,KAAP;AACD;;AAEDtmB,EAAAA,YAAY,CAACxT,IAAD,EAAOyT,SAAP,EAAkB;AAC5B,YAAQzT,IAAI,CAACiC,IAAb;AACE,WAAK,sBAAL;AACE,eAAO,KAAKuR,YAAL,CAAkBxT,IAAI,CAAC8P,UAAvB,EAAmC2D,SAAnC,CAAP;;AAEF,WAAK,qBAAL;AACE,eAAO,IAAP;;AAEF;AACE,eAAO,MAAMD,YAAN,CAAmBxT,IAAnB,EAAyByT,SAAzB,CAAP;AARJ;AAUD;;AAEDC,EAAAA,YAAY,CAAC1T,IAAD,EAAO2T,KAAK,GAAG,KAAf,EAAsB;AAChC,YAAQ3T,IAAI,CAACiC,IAAb;AACE,WAAK,sBAAL;AACE,eAAO,MAAMyR,YAAN,CAAmB,KAAKwmB,mBAAL,CAAyBl6B,IAAzB,CAAnB,EAAmD2T,KAAnD,CAAP;;AAEF,WAAK,qBAAL;AACE,eAAO,MAAMD,YAAN,CAAmB1T,IAAnB,EAAyB2T,KAAzB,CAAP;;AAEF,WAAK,yBAAL;AACE,eAAO,KAAKs2C,mCAAL,CAAyCjqD,IAAzC,EAA+C2T,KAA/C,CAAP;;AAEF,WAAK,gBAAL;AACA,WAAK,qBAAL;AACA,WAAK,iBAAL;AACE3T,QAAAA,IAAI,CAAC8P,UAAL,GAAkB,KAAK4D,YAAL,CAAkB1T,IAAI,CAAC8P,UAAvB,EAAmC6D,KAAnC,CAAlB;AACA,eAAO3T,IAAP;;AAEF;AACE,eAAO,MAAM0T,YAAN,CAAmB1T,IAAnB,EAAyB2T,KAAzB,CAAP;AAjBJ;AAmBD;;AAEDs2C,EAAAA,mCAAmC,CAACjqD,IAAD,EAAO2T,KAAP,EAAc;AAC/C,YAAQ3T,IAAI,CAAC8P,UAAL,CAAgB7N,IAAxB;AACE,WAAK,gBAAL;AACA,WAAK,qBAAL;AACA,WAAK,iBAAL;AACA,WAAK,yBAAL;AACEjC,QAAAA,IAAI,CAAC8P,UAAL,GAAkB,KAAK4D,YAAL,CAAkB1T,IAAI,CAAC8P,UAAvB,EAAmC6D,KAAnC,CAAlB;AACA,eAAO3T,IAAP;;AAEF;AACE,eAAO,MAAM0T,YAAN,CAAmB1T,IAAnB,EAAyB2T,KAAzB,CAAP;AATJ;AAWD;;AAEDqqB,EAAAA,SAAS,CAACtD,IAAD,EAAOyE,kBAAP,EAA2B,GAAGnuB,IAA9B,EAAoC;AAC3C,QAAIk5C,YAAJ;;AAEA,YAAQxvB,IAAI,CAACz4B,IAAb;AACE,WAAK,sBAAL;AACE;;AAEF,WAAK,qBAAL;AACE,aAAK+7B,SAAL,CAAetD,IAAI,CAAC2sB,SAApB,EAA+B,oBAA/B,EAAqD,GAAGr2C,IAAxD;AACA;;AAEF,WAAK,gBAAL;AACA,WAAK,iBAAL;AACE,YAAI,CAACA,IAAI,CAAC,CAAD,CAAL,IAAYmuB,kBAAkB,KAAK,0BAAnC,IAAiE,EAAE,CAAC+qB,YAAY,GAAGxvB,IAAI,CAAC3qB,KAArB,KAA+B,IAA/B,IAAuCm6C,YAAY,CAACt5C,aAAtD,CAArE,EAA2I;AACzI,eAAKrD,KAAL,CAAWmtB,IAAI,CAACh8B,KAAhB,EAAuBkE,aAAa,CAACuD,UAArC,EAAiDg5B,kBAAjD;AACA;AACD;;AAED,aAAKnB,SAAL,CAAetD,IAAI,CAAC5qB,UAApB,EAAgC,0BAAhC,EAA4D,GAAGkB,IAA/D;AACA;;AAEF,WAAK,qBAAL;AACE,aAAKgtB,SAAL,CAAetD,IAAI,CAAC5qB,UAApB,EAAgCqvB,kBAAhC,EAAoD,GAAGnuB,IAAvD;AACA;;AAEF;AACE,cAAMgtB,SAAN,CAAgBtD,IAAhB,EAAsByE,kBAAtB,EAA0C,GAAGnuB,IAA7C;AACA;AAxBJ;AA0BD;;AAEDgvB,EAAAA,gBAAgB,GAAG;AACjB,YAAQ,KAAK/+B,KAAL,CAAWgB,IAAnB;AACE,WAAKlK,OAAO,CAAC8E,KAAb;AACE,eAAO,KAAKk2B,eAAL,CAAqB,IAArB,CAAP;;AAEF;AACE,eAAO,MAAMiN,gBAAN,EAAP;AALJ;AAOD;;AAEDmqB,EAAAA,4BAA4B,CAACzvB,IAAD,EAAO;AACjC,QAAI,KAAKvR,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1B,YAAM2Y,aAAa,GAAG,KAAK6b,oBAAL,EAAtB;;AAEA,UAAI,KAAKz+C,KAAL,CAAWnH,OAAO,CAACkB,MAAnB,CAAJ,EAAgC;AAC9B,cAAM6sB,IAAI,GAAG,MAAMqkC,4BAAN,CAAmCzvB,IAAnC,CAAb;AACA5U,QAAAA,IAAI,CAACjU,cAAL,GAAsBiwB,aAAtB;AACA,eAAOhc,IAAP;AACD;;AAED,WAAKwD,UAAL,CAAgB,KAAKroB,KAAL,CAAWvC,KAA3B,EAAkC3G,OAAO,CAACkB,MAA1C;AACD;;AAED,WAAO,MAAMkxD,4BAAN,CAAmCzvB,IAAnC,CAAP;AACD;;AAED0vB,EAAAA,mBAAmB,CAACvsB,KAAD,EAAQ;AACzB,QAAI,KAAK58B,KAAL,CAAW8b,gBAAX,IAA+B,KAAK7d,KAAL,CAAWnH,OAAO,CAACoB,KAAnB,CAA/B,IAA4D,KAAK2mB,iBAAL,OAA6B+d,KAA7F,EAAoG;AAClG,WAAK3mB,IAAL;AACD,KAFD,MAEO;AACL,YAAMkzC,mBAAN,CAA0BvsB,KAA1B;AACD;AACF;;AAEDI,EAAAA,aAAa,GAAG;AACd,WAAO,KAAK9U,YAAL,CAAkB,GAAlB,KAA0B,MAAM8U,aAAN,EAAjC;AACD;;AAEDC,EAAAA,eAAe,GAAG;AAChB,WAAO,KAAKh/B,KAAL,CAAWnH,OAAO,CAACwC,IAAnB,KAA4B,KAAK2E,KAAL,CAAWnH,OAAO,CAACsB,KAAnB,CAA5B,IAAyD,MAAM6kC,eAAN,EAAhE;AACD;;AAEDY,EAAAA,iBAAiB,CAAC,GAAG9tB,IAAJ,EAAU;AACzB,UAAMhR,IAAI,GAAG,MAAM8+B,iBAAN,CAAwB,GAAG9tB,IAA3B,CAAb;;AAEA,QAAIhR,IAAI,CAACiC,IAAL,KAAc,mBAAd,IAAqCjC,IAAI,CAACwzB,cAA1C,IAA4DxzB,IAAI,CAACg2B,KAAL,CAAWt3B,KAAX,GAAmBsB,IAAI,CAACwzB,cAAL,CAAoB90B,KAAvG,EAA8G;AAC5G,WAAK6O,KAAL,CAAWvN,IAAI,CAACwzB,cAAL,CAAoB90B,KAA/B,EAAsC65C,QAAQ,CAACyC,yBAA/C;AACD;;AAED,WAAOh7C,IAAP;AACD;;AAEDugB,EAAAA,gBAAgB,CAACviB,IAAD,EAAO;AACrB,QAAI,KAAKiD,KAAL,CAAW0b,MAAX,KAAsB3e,IAAI,KAAK,EAAT,IAAeA,IAAI,KAAK,EAA9C,CAAJ,EAAuD;AACrD,aAAO,KAAKujB,QAAL,CAAcxpB,OAAO,CAACkD,UAAtB,EAAkC,CAAlC,CAAP;AACD,KAFD,MAEO;AACL,aAAO,MAAMslB,gBAAN,CAAuBviB,IAAvB,CAAP;AACD;AACF;;AAEDqqD,EAAAA,YAAY,GAAG;AACb,QAAI,KAAKnpD,KAAL,CAAWnH,OAAO,CAACkD,UAAnB,CAAJ,EAAoC;AAClC,YAAM+C,IAAI,GAAG,KAAKe,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAWvC,KAAjC,CAAb;;AAEA,UAAIV,IAAI,KAAK,EAAT,IAAeA,IAAI,KAAK,EAA5B,EAAgC;AAC9B,aAAKiD,KAAL,CAAW+L,GAAX,IAAkB,CAAlB;AACA,aAAKgV,eAAL,CAAqBhkB,IAArB;AACD;AACF;AACF;;AAED89B,EAAAA,gBAAgB,CAACyB,QAAD,EAAW;AACzB,SAAK,IAAI58B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG48B,QAAQ,CAAC38B,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,YAAM+5B,IAAI,GAAG6C,QAAQ,CAAC58B,CAAD,CAArB;AACA,UAAI,CAAC+5B,IAAL,EAAW;;AAEX,cAAQA,IAAI,CAACz4B,IAAb;AACE,aAAK,sBAAL;AACEs7B,UAAAA,QAAQ,CAAC58B,CAAD,CAAR,GAAc,KAAKu5B,mBAAL,CAAyBQ,IAAzB,CAAd;AACA;;AAEF,aAAK,gBAAL;AACA,aAAK,iBAAL;AACE,cAAI,CAAC,KAAKz5B,KAAL,CAAWyb,sBAAhB,EAAwC;AACtC6gB,YAAAA,QAAQ,CAAC58B,CAAD,CAAR,GAAc,KAAKu5B,mBAAL,CAAyBQ,IAAzB,CAAd;AACD,WAFD,MAEO;AACL,iBAAKntB,KAAL,CAAWmtB,IAAI,CAACh8B,KAAhB,EAAuB65C,QAAQ,CAAC8C,6BAAhC;AACD;;AAED;AAbJ;AAeD;;AAED,WAAO,MAAMvf,gBAAN,CAAuB,GAAG35B,SAA1B,CAAP;AACD;;AAED+3B,EAAAA,mBAAmB,CAACl6B,IAAD,EAAO;AACxBA,IAAAA,IAAI,CAAC8P,UAAL,CAAgB0jB,cAAhB,GAAiCxzB,IAAI,CAACwzB,cAAtC;AACA,SAAK9F,gBAAL,CAAsB1tB,IAAI,CAAC8P,UAA3B,EAAuC9P,IAAI,CAACwzB,cAAL,CAAoB70B,GAA3D,EAAgEqB,IAAI,CAACwzB,cAAL,CAAoBxyB,GAApB,CAAwBrC,GAAxF;AACA,WAAOqB,IAAI,CAAC8P,UAAZ;AACD;;AAEDqxB,EAAAA,gBAAgB,CAAC/+B,MAAD,EAAS;AACvB,QAAI,KAAKlD,KAAL,CAAWnH,OAAO,CAACsB,KAAnB,CAAJ,EAA+B;AAC7B,aAAO+I,MAAM,CAACw5B,KAAP,CAAalB,IAAI,IAAI,KAAKlnB,YAAL,CAAkBknB,IAAlB,EAAwB,IAAxB,CAArB,CAAP;AACD;;AAED,WAAO,MAAMyG,gBAAN,CAAuB/+B,MAAvB,CAAP;AACD;;AAEDi+B,EAAAA,qBAAqB,GAAG;AACtB,WAAO,KAAKnhC,KAAL,CAAWnH,OAAO,CAACsB,KAAnB,KAA6B,MAAMgnC,qBAAN,EAApC;AACD;;AAEDgqB,EAAAA,uBAAuB,GAAG;AACxB,WAAO,MAAMA,uBAAN,MAAmC,KAAK3B,eAAL,EAA1C;AACD;;AAED1R,EAAAA,+BAA+B,CAACh3C,IAAD,EAAO;AACpC,QAAI,KAAKmpB,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1B,YAAM2Y,aAAa,GAAG,KAAKikB,kBAAL,CAAwB,MAAM,KAAKpI,oBAAL,EAA9B,CAAtB;AACA,UAAI7b,aAAJ,EAAmB9hC,IAAI,CAAC6R,cAAL,GAAsBiwB,aAAtB;AACpB;;AAED,WAAO,MAAMkV,+BAAN,CAAsCh3C,IAAtC,CAAP;AACD;;AAEDsqD,EAAAA,iCAAiC,CAAC75C,MAAD,EAAS;AACxC,UAAM85C,SAAS,GAAG,MAAMD,iCAAN,CAAwC75C,MAAxC,CAAlB;AACA,UAAMrO,MAAM,GAAG,KAAKoO,4BAAL,CAAkCC,MAAlC,CAAf;AACA,UAAM+5C,UAAU,GAAGpoD,MAAM,CAAC,CAAD,CAAzB;AACA,UAAMqoD,eAAe,GAAGD,UAAU,IAAI,KAAKpsB,WAAL,CAAiBosB,UAAjB,CAAtC;AACA,WAAOC,eAAe,GAAGF,SAAS,GAAG,CAAf,GAAmBA,SAAzC;AACD;;AAEDG,EAAAA,qBAAqB,GAAG;AACtB,UAAM5wB,KAAK,GAAG,MAAM4wB,qBAAN,EAAd;AACA,UAAMzoD,IAAI,GAAG,KAAK09C,wBAAL,EAAb;;AAEA,QAAI19C,IAAJ,EAAU;AACR63B,MAAAA,KAAK,CAACtG,cAAN,GAAuBvxB,IAAvB;AACA,WAAKyrB,gBAAL,CAAsBoM,KAAtB;AACD;;AAED,WAAOA,KAAP;AACD;;AAEDqsB,EAAAA,kBAAkB,CAACzB,EAAD,EAAK;AACrB,UAAMiG,mBAAmB,GAAG,KAAK1pD,KAAL,CAAW8b,gBAAvC;AACA,SAAK9b,KAAL,CAAW8b,gBAAX,GAA8B,IAA9B;;AAEA,QAAI;AACF,aAAO2nC,EAAE,EAAT;AACD,KAFD,SAEU;AACR,WAAKzjD,KAAL,CAAW8b,gBAAX,GAA8B4tC,mBAA9B;AACD;AACF;;AAEDtE,EAAAA,UAAU,CAACrmD,IAAD,EAAO,GAAGgR,IAAV,EAAgB;AACxB,UAAM45C,kBAAkB,GAAG,KAAK3pD,KAAL,CAAW+b,eAAtC;AACA,SAAK/b,KAAL,CAAW+b,eAAX,GAA6B,CAAC,CAAChd,IAAI,CAACyhD,QAApC;;AAEA,QAAI;AACF,aAAO,MAAM4E,UAAN,CAAiBrmD,IAAjB,EAAuB,GAAGgR,IAA1B,CAAP;AACD,KAFD,SAEU;AACR,WAAK/P,KAAL,CAAW+b,eAAX,GAA6B4tC,kBAA7B;AACD;AACF;;AAEDhE,EAAAA,0BAA0B,CAAC5mD,IAAD,EAAO;AAC/B,QAAI,KAAKd,KAAL,CAAWnH,OAAO,CAACgF,MAAnB,CAAJ,EAAgC;AAC9BiD,MAAAA,IAAI,CAACyhD,QAAL,GAAgB,IAAhB;AACA,aAAO,KAAK4E,UAAL,CAAgBrmD,IAAhB,EAAsB,IAAtB,EAA4B,KAA5B,CAAP;AACD,KAHD,MAGO,IAAI,KAAKupB,YAAL,CAAkB,WAAlB,CAAJ,EAAoC;AACzC,UAAI,CAAC,KAAKU,qBAAL,EAAL,EAAmC;AACjCjqB,QAAAA,IAAI,CAACyhD,QAAL,GAAgB,IAAhB;AACA,aAAKl0C,KAAL,CAAWvN,IAAI,CAACtB,KAAhB,EAAuB65C,QAAQ,CAAC8B,wCAAhC;AACA,aAAKnjC,IAAL;AACA,eAAO,KAAKqtC,2BAAL,CAAiCvkD,IAAjC,CAAP;AACD;AACF,KAPM,MAOA;AACL,WAAKspB,UAAL,CAAgB,IAAhB,EAAsBvxB,OAAO,CAACgF,MAA9B;AACD;AACF;;AAED6U,EAAAA,WAAW,CAAC,GAAGZ,IAAJ,EAAU;AACnB,UAAMP,MAAM,GAAG,MAAMmB,WAAN,CAAkB,GAAGZ,IAArB,CAAf;;AAEA,QAAIP,MAAM,CAACgxC,QAAX,EAAqB;AACnB,YAAMoJ,OAAO,GAAG,KAAKprD,SAAL,CAAe,QAAf,IAA2B,CAAC,CAACgR,MAAM,CAACja,KAAP,CAAa6a,IAA1C,GAAiD,CAAC,CAACZ,MAAM,CAACY,IAA1E;;AAEA,UAAIw5C,OAAJ,EAAa;AACX,cAAM;AACJh3C,UAAAA;AADI,YAEFpD,MAFJ;AAGA,aAAKlD,KAAL,CAAWkD,MAAM,CAAC/R,KAAlB,EAAyB65C,QAAQ,CAACC,+BAAlC,EAAmE3kC,GAAG,CAAC5R,IAAJ,KAAa,YAAb,IAA6B,CAACwO,MAAM,CAACkC,QAArC,GAAgDkB,GAAG,CAACnc,IAApD,GAA4D,IAAG,KAAKqH,KAAL,CAAWoR,KAAX,CAAiB0D,GAAG,CAACnV,KAArB,EAA4BmV,GAAG,CAAClV,GAAhC,CAAqC,GAAvK;AACD;AACF;;AAED,WAAO8R,MAAP;AACD;;AAED+tC,EAAAA,wBAAwB,GAAG;AACzB,UAAMV,QAAQ,GAAG,KAAK/qB,eAAL,EAAjB;AACA,WAAO+qB,QAAQ,CAACpmD,IAAhB;AACD;;AAEDozD,EAAAA,2BAA2B,GAAG;AAC5B,WAAO,CAAC,CAAC,KAAKlrD,eAAL,CAAqB,YAArB,EAAmC,KAAnC,CAAT;AACD;;AAEDq8B,EAAAA,KAAK,GAAG;AACN,QAAI,KAAK6uB,2BAAL,EAAJ,EAAwC;AACtC,WAAK7pD,KAAL,CAAW8b,gBAAX,GAA8B,IAA9B;AACD;;AAED,WAAO,MAAMkf,KAAN,EAAP;AACD;;AAED8uB,EAAAA,aAAa,GAAG;AACd,QAAI,KAAKD,2BAAL,EAAJ,EAAwC;AACtC,WAAK7pD,KAAL,CAAW8b,gBAAX,GAA8B,IAA9B;AACD;;AAED,WAAO,MAAMguC,aAAN,EAAP;AACD;;AAp7EsD,CAAzD;;AAw7EAhzD,OAAO,CAACizD,WAAR,GAAsB,IAAIj0D,SAAJ,CAAc,IAAd,EAAoB;AACxCL,EAAAA,UAAU,EAAE;AAD4B,CAApB,CAAtB;AAGA,MAAMu0D,iBAAiB,GAAGpoD,kBAAkB,CAAC;AAC3CqoD,EAAAA,mBAAmB,EAAE;AADsB,CAAD,EAEzC1oD,UAAU,CAACE,WAF8B,CAA5C;;AAGA,IAAIyoD,YAAY,GAAI58C,UAAU,IAAI,cAAcA,UAAd,CAAyB;AACzD68C,EAAAA,gBAAgB,CAAC99B,YAAD,EAAe;AAC7B,QAAI,KAAKpuB,KAAL,CAAWnH,OAAO,CAACizD,WAAnB,CAAJ,EAAqC;AACnC,YAAMhrD,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACA,WAAKyE,IAAL;AACA,WAAKoT,aAAL,CAAmB,kCAAnB;AACAtqB,MAAAA,IAAI,CAACtI,IAAL,GAAY,MAAMq7B,eAAN,CAAsB,IAAtB,CAAZ;AACA,WAAKzI,aAAL,CAAmB,kCAAnB;AACA,WAAKD,MAAL,CAAYtyB,OAAO,CAACizD,WAApB;AACA,aAAO,KAAKK,iBAAL,CAAuBrrD,IAAvB,EAA6BstB,YAA7B,CAAP;AACD;AACF;;AAED+9B,EAAAA,iBAAiB,CAACrrD,IAAD,EAAOstB,YAAP,EAAqB;AACpC,UAAMg+B,UAAU,GAAG,CAAC,EAAEtrD,IAAI,CAACstB,YAAL,IAAqBttB,IAAI,CAACiC,IAAL,KAAc,aAArC,CAApB;AACAjC,IAAAA,IAAI,CAACstB,YAAL,GAAoBA,YAApB;AACA,WAAOg+B,UAAU,GAAGtrD,IAAH,GAAU,KAAK4S,UAAL,CAAgB5S,IAAhB,EAAsB,aAAtB,CAA3B;AACD;;AAEDugB,EAAAA,gBAAgB,CAACviB,IAAD,EAAO;AACrB,QAAIA,IAAI,KAAK,EAAT,IAAe,KAAKe,KAAL,CAAWiD,UAAX,CAAsB,KAAKf,KAAL,CAAW+L,GAAX,GAAiB,CAAvC,MAA8C,EAAjE,EAAqE;AACnE,aAAO,KAAKuU,QAAL,CAAcxpB,OAAO,CAACizD,WAAtB,EAAmC,CAAnC,CAAP;AACD;;AAED,WAAO,MAAMzqC,gBAAN,CAAuB,GAAGpe,SAA1B,CAAP;AACD;;AAEDgyB,EAAAA,aAAa,GAAG;AACd,WAAO,KAAKi3B,gBAAL,CAAsB,YAAtB,KAAuC,MAAMj3B,aAAN,CAAoB,GAAGhyB,SAAvB,CAA9C;AACD;;AAED4wB,EAAAA,eAAe,GAAG;AAChB,WAAO,KAAKq4B,gBAAL,CAAsB,YAAtB,KAAuC,MAAMr4B,eAAN,CAAsB,GAAG5wB,SAAzB,CAA9C;AACD;;AAED49B,EAAAA,iBAAiB,CAACrpB,IAAD,EAAO;AACtB,QAAIA,IAAI,KAAKvW,SAAb,EAAwB,MAAM4/B,iBAAN,CAAwB,GAAG59B,SAA3B;AACzB;;AAED69B,EAAAA,gBAAgB,GAAG;AACjB,WAAO,KAAKorB,gBAAL,CAAsB,SAAtB,KAAoC,MAAMprB,gBAAN,CAAuB,GAAG79B,SAA1B,CAA3C;AACD;;AAED67B,EAAAA,SAAS,CAACtD,IAAD,EAAO;AACd,QAAIA,IAAI,CAACz4B,IAAL,KAAc,aAAlB,EAAiC,MAAM+7B,SAAN,CAAgB,GAAG77B,SAAnB;AAClC;;AAEDuR,EAAAA,YAAY,CAAC1T,IAAD,EAAO;AACjB,QAAIA,IAAI,IAAIA,IAAI,CAACiC,IAAL,KAAc,aAAtB,IAAuCjC,IAAI,CAACstB,YAAL,KAAsB,YAAjE,EAA+E;AAC7EttB,MAAAA,IAAI,CAACstB,YAAL,GAAoB,SAApB;AACA,aAAOttB,IAAP;AACD;;AAED,WAAO,MAAM0T,YAAN,CAAmB,GAAGvR,SAAtB,CAAP;AACD;;AAEDqyB,EAAAA,KAAK,CAACnf,OAAD,EAAU;AACb,QAAI,MAAMmf,KAAN,CAAYnf,OAAZ,CAAJ,EAA0B;AACxB,aAAO,IAAP;AACD;;AAED,QAAI,CAAC,KAAKkU,YAAL,CAAkB,KAAlB,CAAL,EAA+B;AAC7B,aAAO,KAAP;AACD;;AAED,QAAIlU,OAAJ,EAAa,OAAO,KAAP;AACb,UAAMgK,SAAS,GAAG,KAAKI,SAAL,EAAlB;;AAEA,QAAIJ,SAAS,CAACpd,IAAV,KAAmBlK,OAAO,CAACizD,WAA/B,EAA4C;AAC1C,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD;;AAEDO,EAAAA,mBAAmB,CAACvrD,IAAD,EAAO;AACxB,QAAIA,IAAI,CAAC/I,KAAL,IAAc+I,IAAI,CAAC/I,KAAL,CAAWgL,IAAX,KAAoB,aAAtC,EAAqD;AACrD,UAAMspD,mBAAN,CAA0B,GAAGppD,SAA7B;AACD;;AAEDs4B,EAAAA,wBAAwB,CAACz6B,IAAD,EAAO06B,IAAP,EAAa;AACnC,QAAIA,IAAI,CAACz4B,IAAL,KAAc,aAAd,IAA+By4B,IAAI,CAAC3qB,KAAL,IAAc2qB,IAAI,CAAC3qB,KAAL,CAAWa,aAA5D,EAA2E;AACzE,aAAO,MAAM6pB,wBAAN,CAA+B,GAAGt4B,SAAlC,CAAP;AACD;;AAED,QAAI,KAAKjD,KAAL,CAAWnH,OAAO,CAACsB,KAAnB,CAAJ,EAA+B;AAC7B,YAAMuW,IAAI,GAAG5P,IAAb;AACA4P,MAAAA,IAAI,CAAC3Y,KAAL,GAAa,KAAKo0D,iBAAL,CAAuB3wB,IAAvB,EAA6B,YAA7B,CAAb;AACA,WAAKxjB,IAAL;AACAtH,MAAAA,IAAI,CAACyB,IAAL,GAAY,KAAKipB,cAAL,CAAoB,OAApB,CAAZ;AACA,aAAO,KAAK1nB,UAAL,CAAgBhD,IAAhB,EAAsB,kBAAtB,CAAP;AACD;;AAED,SAAKua,SAAL;AACAnqB,IAAAA,IAAI,CAACtI,IAAL,GAAYgjC,IAAI,CAAChjC,IAAjB;AACA,WAAO,KAAK2zD,iBAAL,CAAuBrrD,IAAvB,EAA6B,WAA7B,CAAP;AACD;;AAEDwrD,EAAAA,UAAU,GAAG;AACX,WAAO,KAAKJ,gBAAL,CAAsB,gBAAtB,KAA2C,MAAMI,UAAN,CAAiB,GAAGrpD,SAApB,CAAlD;AACD;;AAEDspD,EAAAA,eAAe,GAAG;AAChB,WAAO,KAAKL,gBAAL,CAAsB,YAAtB,KAAuC,MAAMK,eAAN,CAAsB,GAAGtpD,SAAzB,CAA9C;AACD;;AAEDkkD,EAAAA,UAAU,CAACrmD,IAAD,EAAO+8B,WAAP,EAAoBC,UAApB,EAAgC;AACxC,UAAM/6B,IAAI,GAAG86B,WAAW,GAAG,kBAAH,GAAwB,iBAAhD;AACA,SAAK7lB,IAAL;AACA,SAAKw0C,cAAL,CAAoB1rD,IAApB;AACA,UAAM2rD,SAAS,GAAG,KAAK1qD,KAAL,CAAWkV,MAA7B;AACA,UAAM60C,WAAW,GAAG,KAAKI,gBAAL,CAAsB,YAAtB,CAApB;;AAEA,QAAIJ,WAAJ,EAAiB;AACf,UAAI,KAAK9rD,KAAL,CAAWnH,OAAO,CAACiF,QAAnB,KAAgC,KAAKkC,KAAL,CAAWnH,OAAO,CAACizD,WAAnB,CAAhC,IAAmE,KAAK9rD,KAAL,CAAWnH,OAAO,CAACa,MAAnB,CAAvE,EAAmG;AACjGoH,QAAAA,IAAI,CAACiS,EAAL,GAAU+4C,WAAV;AACD,OAFD,MAEO,IAAIhuB,UAAU,IAAI,CAACD,WAAnB,EAAgC;AACrC/8B,QAAAA,IAAI,CAACiS,EAAL,GAAU,IAAV;AACAjS,QAAAA,IAAI,CAACqR,IAAL,GAAY,KAAKg6C,iBAAL,CAAuBL,WAAvB,EAAoC,WAApC,CAAZ;AACA,eAAO,KAAKp4C,UAAL,CAAgB5S,IAAhB,EAAsBiC,IAAtB,CAAP;AACD,OAJM,MAIA;AACL,aAAKqnB,UAAL,CAAgB,IAAhB,EAAsB2hC,iBAAiB,CAACC,mBAAxC;AACD;AACF,KAVD,MAUO;AACL,WAAKpuB,YAAL,CAAkB98B,IAAlB,EAAwB+8B,WAAxB,EAAqCC,UAArC;AACD;;AAED,SAAKsB,eAAL,CAAqBt+B,IAArB;AACAA,IAAAA,IAAI,CAACqR,IAAL,GAAY,KAAK+5C,gBAAL,CAAsB,WAAtB,KAAsC,KAAKQ,cAAL,CAAoB,CAAC,CAAC5rD,IAAI,CAACuO,UAA3B,EAAuCo9C,SAAvC,CAAlD;AACA,WAAO,KAAK/4C,UAAL,CAAgB5S,IAAhB,EAAsBiC,IAAtB,CAAP;AACD;;AAEDmS,EAAAA,WAAW,CAACpU,IAAD,EAAO;AAChB,UAAMgrD,WAAW,GAAG,KAAKI,gBAAL,CAAsB,YAAtB,CAApB;AACA,QAAI,CAACJ,WAAL,EAAkB,OAAO,MAAM52C,WAAN,CAAkB,GAAGjS,SAArB,CAAP;;AAElB,QAAI,CAAC,KAAKonB,YAAL,CAAkB,MAAlB,CAAD,IAA8B,CAAC,KAAKrqB,KAAL,CAAWnH,OAAO,CAACoB,KAAnB,CAAnC,EAA8D;AAC5D6G,MAAAA,IAAI,CAACqC,UAAL,GAAkB,EAAlB;AACArC,MAAAA,IAAI,CAAClC,MAAL,GAAc,IAAd;AACAkC,MAAAA,IAAI,CAACgxB,WAAL,GAAmB,KAAKq6B,iBAAL,CAAuBL,WAAvB,EAAoC,aAApC,CAAnB;AACA,aAAO,KAAKp4C,UAAL,CAAgB5S,IAAhB,EAAsB,wBAAtB,CAAP;AACD;;AAED,SAAKqhB,YAAL,CAAkB,mBAAlB;AACA,UAAM6d,SAAS,GAAG,KAAKzsB,SAAL,EAAlB;AACAysB,IAAAA,SAAS,CAAC7qB,QAAV,GAAqB22C,WAArB;AACAhrD,IAAAA,IAAI,CAACqC,UAAL,GAAkB,CAAC,KAAKuQ,UAAL,CAAgBssB,SAAhB,EAA2B,wBAA3B,CAAD,CAAlB;AACA,WAAO,MAAM9qB,WAAN,CAAkBpU,IAAlB,CAAP;AACD;;AAED46B,EAAAA,wBAAwB,GAAG;AACzB,QAAI,KAAK17B,KAAL,CAAWnH,OAAO,CAAC8D,QAAnB,CAAJ,EAAkC;AAChC,YAAMqb,IAAI,GAAG,KAAK0I,cAAL,EAAb;;AAEA,UAAI,KAAK4J,oBAAL,CAA0BtS,IAA1B,EAAgC,MAAhC,CAAJ,EAA6C;AAC3C,YAAI,KAAKnY,KAAL,CAAW8sD,UAAX,CAAsB9zD,OAAO,CAACizD,WAAR,CAAoB/zD,KAA1C,EAAiD,KAAK4oB,mBAAL,CAAyB3I,IAAI,GAAG,CAAhC,CAAjD,CAAJ,EAA0F;AACxF,iBAAO,IAAP;AACD;AACF;AACF;;AAED,WAAO,MAAM0jB,wBAAN,EAAP;AACD;;AAEDkxB,EAAAA,gCAAgC,CAAC9rD,IAAD,EAAO;AACrC,QAAIA,IAAI,CAACqC,UAAL,IAAmBrC,IAAI,CAACqC,UAAL,CAAgBzB,MAAhB,GAAyB,CAAhD,EAAmD;AACjD,aAAO,IAAP;AACD;;AAED,WAAO,MAAMkrD,gCAAN,CAAuC,GAAG3pD,SAA1C,CAAP;AACD;;AAED4pD,EAAAA,WAAW,CAAC/rD,IAAD,EAAO;AAChB,UAAM;AACJqC,MAAAA;AADI,QAEFrC,IAFJ;;AAIA,QAAIqC,UAAU,IAAI,IAAd,IAAsBA,UAAU,CAACzB,MAArC,EAA6C;AAC3CZ,MAAAA,IAAI,CAACqC,UAAL,GAAkBA,UAAU,CAAC2pD,MAAX,CAAkBhsD,IAAI,IAAIA,IAAI,CAACqU,QAAL,CAAcpS,IAAd,KAAuB,aAAjD,CAAlB;AACD;;AAED,UAAM8pD,WAAN,CAAkB/rD,IAAlB;AACAA,IAAAA,IAAI,CAACqC,UAAL,GAAkBA,UAAlB;AACD;;AAEDgyB,EAAAA,WAAW,CAACr0B,IAAD,EAAO;AAChB,UAAMgrD,WAAW,GAAG,KAAKI,gBAAL,CAAsB,YAAtB,CAApB;AACA,QAAI,CAACJ,WAAL,EAAkB,OAAO,MAAM32B,WAAN,CAAkB,GAAGlyB,SAArB,CAAP;AAClBnC,IAAAA,IAAI,CAACqC,UAAL,GAAkB,EAAlB;;AAEA,QAAI,CAAC,KAAKknB,YAAL,CAAkB,MAAlB,CAAD,IAA8B,CAAC,KAAKrqB,KAAL,CAAWnH,OAAO,CAACoB,KAAnB,CAAnC,EAA8D;AAC5D6G,MAAAA,IAAI,CAAClC,MAAL,GAAc,KAAKutD,iBAAL,CAAuBL,WAAvB,EAAoC,eAApC,CAAd;AACA,WAAK7gC,SAAL;AACA,aAAO,KAAKvX,UAAL,CAAgB5S,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAED,UAAMk/B,SAAS,GAAG,KAAKrqB,eAAL,CAAqBm2C,WAArB,CAAlB;AACA9rB,IAAAA,SAAS,CAACE,KAAV,GAAkB4rB,WAAlB;AACA,SAAKp4C,UAAL,CAAgBssB,SAAhB,EAA2B,wBAA3B;AACAl/B,IAAAA,IAAI,CAACqC,UAAL,CAAgBnB,IAAhB,CAAqBg+B,SAArB;;AAEA,QAAI,KAAK5f,GAAL,CAASvnB,OAAO,CAACoB,KAAjB,CAAJ,EAA6B;AAC3B,YAAM8yD,aAAa,GAAG,KAAKC,6BAAL,CAAmClsD,IAAnC,CAAtB;AACA,UAAI,CAACisD,aAAL,EAAoB,KAAKE,0BAAL,CAAgCnsD,IAAhC;AACrB;;AAED,SAAK8pB,gBAAL,CAAsB,MAAtB;AACA9pB,IAAAA,IAAI,CAAClC,MAAL,GAAc,KAAKsuD,iBAAL,EAAd;AACA,SAAKjiC,SAAL;AACA,WAAO,KAAKvX,UAAL,CAAgB5S,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAEDosD,EAAAA,iBAAiB,GAAG;AAClB,WAAO,KAAKhB,gBAAL,CAAsB,eAAtB,KAA0C,MAAMgB,iBAAN,CAAwB,GAAGjqD,SAA3B,CAAjD;AACD;;AAtNwD,CAA3D;;AA0NA,IAAIkqD,WAAW,GAAI99C,UAAU,IAAI,cAAcA,UAAd,CAAyB;AACxD+9C,EAAAA,gBAAgB,GAAG;AACjB,QAAI,KAAKptD,KAAL,CAAWnH,OAAO,CAACqD,MAAnB,CAAJ,EAAgC;AAC9B,YAAMmxD,gBAAgB,GAAG,KAAKtrD,KAAL,CAAWvC,KAApC;AACA,YAAMsB,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACA,WAAK6M,GAAL,CAASvnB,OAAO,CAACqD,MAAjB;;AAEA,UAAI,KAAK8D,KAAL,CAAWnH,OAAO,CAACL,IAAnB,CAAJ,EAA8B;AAC5B,cAAMA,IAAI,GAAG,KAAK80D,mBAAL,CAAyB,KAAKvrD,KAAL,CAAWvC,KAApC,CAAb;AACA,cAAM+tD,UAAU,GAAG,KAAKlzB,gBAAL,CAAsBv5B,IAAtB,EAA4BtI,IAA5B,CAAnB;AACA+0D,QAAAA,UAAU,CAACxqD,IAAX,GAAkB,uBAAlB;;AAEA,YAAI,KAAK/C,KAAL,CAAWnH,OAAO,CAACkB,MAAnB,CAAJ,EAAgC;AAC9B,iBAAOwzD,UAAP;AACD;AACF;;AAED,WAAKnjC,UAAL,CAAgBijC,gBAAhB;AACD;AACF;;AAEDp4B,EAAAA,aAAa,GAAG;AACd,WAAO,KAAKm4B,gBAAL,MAA2B,MAAMn4B,aAAN,CAAoB,GAAGhyB,SAAvB,CAAlC;AACD;;AAvBuD,CAA1D;;AA2BA,SAAS1C,SAAT,CAAmBC,OAAnB,EAA4BhI,IAA5B,EAAkC;AAChC,SAAOgI,OAAO,CAACirB,IAAR,CAAa9qB,MAAM,IAAI;AAC5B,QAAIue,KAAK,CAACC,OAAN,CAAcxe,MAAd,CAAJ,EAA2B;AACzB,aAAOA,MAAM,CAAC,CAAD,CAAN,KAAcnI,IAArB;AACD,KAFD,MAEO;AACL,aAAOmI,MAAM,KAAKnI,IAAlB;AACD;AACF,GANM,CAAP;AAOD;;AACD,SAASkI,eAAT,CAAyBF,OAAzB,EAAkChI,IAAlC,EAAwCg1D,MAAxC,EAAgD;AAC9C,QAAM7sD,MAAM,GAAGH,OAAO,CAAC8iD,IAAR,CAAa3iD,MAAM,IAAI;AACpC,QAAIue,KAAK,CAACC,OAAN,CAAcxe,MAAd,CAAJ,EAA2B;AACzB,aAAOA,MAAM,CAAC,CAAD,CAAN,KAAcnI,IAArB;AACD,KAFD,MAEO;AACL,aAAOmI,MAAM,KAAKnI,IAAlB;AACD;AACF,GANc,CAAf;;AAQA,MAAImI,MAAM,IAAIue,KAAK,CAACC,OAAN,CAAcxe,MAAd,CAAd,EAAqC;AACnC,WAAOA,MAAM,CAAC,CAAD,CAAN,CAAU6sD,MAAV,CAAP;AACD;;AAED,SAAO,IAAP;AACD;;AACD,MAAMC,kBAAkB,GAAG,CAAC,SAAD,EAAY,QAAZ,EAAsB,MAAtB,EAA8B,OAA9B,CAA3B;AACA,MAAMC,YAAY,GAAG,CAAC,GAAD,EAAM,GAAN,CAArB;AACA,MAAMC,6BAA6B,GAAG,CAAC,MAAD,EAAS,KAAT,CAAtC;;AACA,SAASC,eAAT,CAAyBptD,OAAzB,EAAkC;AAChC,MAAID,SAAS,CAACC,OAAD,EAAU,YAAV,CAAb,EAAsC;AACpC,QAAID,SAAS,CAACC,OAAD,EAAU,mBAAV,CAAb,EAA6C;AAC3C,YAAM,IAAIwyB,KAAJ,CAAU,iEAAV,CAAN;AACD;;AAED,UAAM66B,sBAAsB,GAAGntD,eAAe,CAACF,OAAD,EAAU,YAAV,EAAwB,wBAAxB,CAA9C;;AAEA,QAAIqtD,sBAAsB,IAAI,IAA9B,EAAoC;AAClC,YAAM,IAAI76B,KAAJ,CAAU,wEAAwE,2DAAxE,GAAsI,kEAAtI,GAA2M,qEAArN,CAAN;AACD,KAFD,MAEO,IAAI,OAAO66B,sBAAP,KAAkC,SAAtC,EAAiD;AACtD,YAAM,IAAI76B,KAAJ,CAAU,6CAAV,CAAN;AACD;AACF;;AAED,MAAIzyB,SAAS,CAACC,OAAD,EAAU,MAAV,CAAT,IAA8BD,SAAS,CAACC,OAAD,EAAU,YAAV,CAA3C,EAAoE;AAClE,UAAM,IAAIwyB,KAAJ,CAAU,6CAAV,CAAN;AACD;;AAED,MAAIzyB,SAAS,CAACC,OAAD,EAAU,cAAV,CAAT,IAAsCD,SAAS,CAACC,OAAD,EAAU,aAAV,CAAnD,EAA6E;AAC3E,UAAM,IAAIwyB,KAAJ,CAAU,sDAAV,CAAN;AACD;;AAED,MAAIzyB,SAAS,CAACC,OAAD,EAAU,kBAAV,CAAb,EAA4C;AAC1C,UAAMstD,QAAQ,GAAGptD,eAAe,CAACF,OAAD,EAAU,kBAAV,EAA8B,UAA9B,CAAhC;;AAEA,QAAI,CAACitD,kBAAkB,CAAC5pC,QAAnB,CAA4BiqC,QAA5B,CAAL,EAA4C;AAC1C,YAAMC,YAAY,GAAGN,kBAAkB,CAACx7C,GAAnB,CAAuB+7C,CAAC,IAAK,IAAGA,CAAE,GAAlC,EAAsCtiC,IAAtC,CAA2C,IAA3C,CAArB;AACA,YAAM,IAAIsH,KAAJ,CAAW,6EAA4E+6B,YAAa,GAApG,CAAN;AACD;;AAED,UAAME,iBAAiB,GAAG1tD,SAAS,CAACC,OAAD,EAAU,gBAAV,CAAT,IAAwCE,eAAe,CAACF,OAAD,EAAU,gBAAV,EAA4B,YAA5B,CAAf,KAA6D,MAA/H;;AAEA,QAAIstD,QAAQ,KAAK,MAAjB,EAAyB;AACvB,UAAIvtD,SAAS,CAACC,OAAD,EAAU,cAAV,CAAb,EAAwC;AACtC,cAAM,IAAIwyB,KAAJ,CAAU,0DAAV,CAAN;AACD;;AAED,UAAIzyB,SAAS,CAACC,OAAD,EAAU,aAAV,CAAb,EAAuC;AACrC,cAAM,IAAIwyB,KAAJ,CAAU,yDAAV,CAAN;AACD;;AAED,YAAMk7B,UAAU,GAAGxtD,eAAe,CAACF,OAAD,EAAU,kBAAV,EAA8B,YAA9B,CAAlC;;AAEA,UAAI,CAACktD,YAAY,CAAC7pC,QAAb,CAAsBqqC,UAAtB,CAAL,EAAwC;AACtC,cAAMC,SAAS,GAAGT,YAAY,CAACz7C,GAAb,CAAiBgyC,CAAC,IAAK,IAAGA,CAAE,GAA5B,EAAgCv4B,IAAhC,CAAqC,IAArC,CAAlB;AACA,cAAM,IAAIsH,KAAJ,CAAW,iHAAgHm7B,SAAU,GAArI,CAAN;AACD;;AAED,UAAID,UAAU,KAAK,GAAf,IAAsBD,iBAA1B,EAA6C;AAC3C,cAAM,IAAIj7B,KAAJ,CAAU,wIAAV,CAAN;AACD;AACF,KAnBD,MAmBO,IAAI86B,QAAQ,KAAK,OAAb,IAAwBG,iBAA5B,EAA+C;AACpD,YAAM,IAAIj7B,KAAJ,CAAU,wHAAV,CAAN;AACD;AACF;;AAED,MAAIzyB,SAAS,CAACC,OAAD,EAAU,kBAAV,CAAb,EAA4C;AAC1C;AACE,UAAID,SAAS,CAACC,OAAD,EAAU,kBAAV,CAAb,EAA4C;AAC1C,cAAM,IAAIwyB,KAAJ,CAAU,+DAAV,CAAN;AACD;;AAED,YAAMo7B,kCAAkC,GAAG1tD,eAAe,CAACF,OAAD,EAAU,kBAAV,EAA8B,SAA9B,CAA1D;;AAEA,UAAI4tD,kCAAkC,KAAK,UAA3C,EAAuD;AACrD,cAAM,IAAIp7B,KAAJ,CAAU,+DAA+D,wDAA/D,GAA0H,sCAApI,CAAN;AACD;AACF;AACF;;AAED,MAAIzyB,SAAS,CAACC,OAAD,EAAU,gBAAV,CAAT,IAAwC,CAACmtD,6BAA6B,CAAC9pC,QAA9B,CAAuCnjB,eAAe,CAACF,OAAD,EAAU,gBAAV,EAA4B,YAA5B,CAAtD,CAA7C,EAA+I;AAC7I,UAAM,IAAIwyB,KAAJ,CAAU,iFAAiF26B,6BAA6B,CAAC17C,GAA9B,CAAkC+7C,CAAC,IAAK,IAAGA,CAAE,GAA7C,EAAiDtiC,IAAjD,CAAsD,IAAtD,CAA3F,CAAN;AACD;;AAED,MAAInrB,SAAS,CAACC,OAAD,EAAU,oBAAV,CAAT,IAA4C,CAACD,SAAS,CAACC,OAAD,EAAU,eAAV,CAA1D,EAAsF;AACpF,UAAMqO,KAAK,GAAG,IAAImkB,KAAJ,CAAU,8FAAV,CAAd;AACAnkB,IAAAA,KAAK,CAACw/C,cAAN,GAAuB,eAAvB;AACA,UAAMx/C,KAAN;AACD;AACF;;AACD,MAAMy/C,YAAY,GAAG;AACnBl/C,EAAAA,MADmB;AAEnBkyB,EAAAA,GAFmB;AAGnB3O,EAAAA,IAHmB;AAInB+pB,EAAAA,UAJmB;AAKnByQ,EAAAA,WALmB;AAMnBlB,EAAAA;AANmB,CAArB;AAQA,MAAMsC,gBAAgB,GAAGp3D,MAAM,CAACsW,IAAP,CAAY6gD,YAAZ,CAAzB;AAEA,MAAME,cAAc,GAAG;AACrB5vC,EAAAA,UAAU,EAAE,QADS;AAErB6vC,EAAAA,cAAc,EAAExtD,SAFK;AAGrB4d,EAAAA,SAAS,EAAE,CAHU;AAIrB6vC,EAAAA,yBAAyB,EAAE,KAJN;AAKrBC,EAAAA,0BAA0B,EAAE,KALP;AAMrBC,EAAAA,2BAA2B,EAAE,KANR;AAOrBC,EAAAA,uBAAuB,EAAE,KAPJ;AAQrBC,EAAAA,sBAAsB,EAAE,KARH;AASrBtuD,EAAAA,OAAO,EAAE,EATY;AAUrBme,EAAAA,UAAU,EAAE,IAVS;AAWrB+O,EAAAA,MAAM,EAAE,KAXa;AAYrB1N,EAAAA,MAAM,EAAE,KAZa;AAarB+uC,EAAAA,8BAA8B,EAAE,KAbX;AAcrBpgD,EAAAA,aAAa,EAAE,KAdM;AAerBkT,EAAAA,aAAa,EAAE;AAfM,CAAvB;;AAiBA,SAASmtC,UAAT,CAAoBC,IAApB,EAA0B;AACxB,QAAMx2D,OAAO,GAAG,EAAhB;;AAEA,OAAK,MAAMkc,GAAX,IAAkBxd,MAAM,CAACsW,IAAP,CAAY+gD,cAAZ,CAAlB,EAA+C;AAC7C/1D,IAAAA,OAAO,CAACkc,GAAD,CAAP,GAAes6C,IAAI,IAAIA,IAAI,CAACt6C,GAAD,CAAJ,IAAa,IAArB,GAA4Bs6C,IAAI,CAACt6C,GAAD,CAAhC,GAAwC65C,cAAc,CAAC75C,GAAD,CAArE;AACD;;AAED,SAAOlc,OAAP;AACD;;AAED,MAAMy2D,6BAA6B,GAAGpuD,IAAI,IAAI;AAC5C,SAAOA,IAAI,CAACiC,IAAL,KAAc,yBAAd,GAA0CmsD,6BAA6B,CAACpuD,IAAI,CAAC8P,UAAN,CAAvE,GAA2F9P,IAAlG;AACD,CAFD;;AAIA,MAAMquD,UAAN,SAAyB7gC,SAAzB,CAAmC;AACjC9Z,EAAAA,YAAY,CAAC1T,IAAD,EAAO2T,KAAK,GAAG,KAAf,EAAsB;AAChC,QAAIkoB,WAAJ,EAAiByyB,YAAjB;;AAEA,QAAI19C,aAAa,GAAGzQ,SAApB;;AAEA,QAAIH,IAAI,CAACiC,IAAL,KAAc,yBAAd,IAA2C,CAAC45B,WAAW,GAAG77B,IAAI,CAAC+P,KAApB,KAA8B,IAA9B,IAAsC8rB,WAAW,CAACjrB,aAAjG,EAAgH;AAC9GA,MAAAA,aAAa,GAAGw9C,6BAA6B,CAACpuD,IAAD,CAA7C;;AAEA,UAAI2T,KAAJ,EAAW;AACT,YAAI/C,aAAa,CAAC3O,IAAd,KAAuB,YAA3B,EAAyC;AACvC,eAAKqqB,eAAL,CAAqBxE,kCAArB,CAAwD9nB,IAAI,CAACtB,KAA7D,EAAoEkE,aAAa,CAAC4D,8BAAlF;AACD,SAFD,MAEO,IAAIoK,aAAa,CAAC3O,IAAd,KAAuB,kBAA3B,EAA+C;AACpD,eAAKsL,KAAL,CAAWvN,IAAI,CAACtB,KAAhB,EAAuBkE,aAAa,CAAC4D,8BAArC;AACD;AACF,OAND,MAMO;AACL,aAAK+G,KAAL,CAAWvN,IAAI,CAACtB,KAAhB,EAAuBkE,aAAa,CAAC4D,8BAArC;AACD;AACF;;AAED,YAAQxG,IAAI,CAACiC,IAAb;AACE,WAAK,YAAL;AACA,WAAK,eAAL;AACA,WAAK,cAAL;AACA,WAAK,mBAAL;AACA,WAAK,aAAL;AACE;;AAEF,WAAK,kBAAL;AACEjC,QAAAA,IAAI,CAACiC,IAAL,GAAY,eAAZ;;AAEA,aAAK,IAAItB,CAAC,GAAG,CAAR,EAAWC,MAAM,GAAGZ,IAAI,CAACkC,UAAL,CAAgBtB,MAApC,EAA4C2tD,IAAI,GAAG3tD,MAAM,GAAG,CAAjE,EAAoED,CAAC,GAAGC,MAAxE,EAAgFD,CAAC,EAAjF,EAAqF;AACnF,cAAI6tD,YAAJ;;AAEA,gBAAMv7C,IAAI,GAAGjT,IAAI,CAACkC,UAAL,CAAgBvB,CAAhB,CAAb;AACA,gBAAM8tD,MAAM,GAAG9tD,CAAC,KAAK4tD,IAArB;AACA,eAAK36C,gCAAL,CAAsCX,IAAtC,EAA4Cw7C,MAA5C,EAAoD96C,KAApD;;AAEA,cAAI86C,MAAM,IAAIx7C,IAAI,CAAChR,IAAL,KAAc,aAAxB,IAAyC,CAACusD,YAAY,GAAGxuD,IAAI,CAAC+P,KAArB,KAA+B,IAAxE,IAAgFy+C,YAAY,CAACzyB,aAAjG,EAAgH;AAC9G,iBAAK2yB,gBAAL,CAAsB1uD,IAAI,CAAC+P,KAAL,CAAWgsB,aAAjC;AACD;AACF;;AAED;;AAEF,WAAK,gBAAL;AACE,aAAKroB,YAAL,CAAkB1T,IAAI,CAACxJ,KAAvB,EAA8Bmd,KAA9B;AACA;;AAEF,WAAK,eAAL;AACE;AACE,eAAKg7C,qBAAL,CAA2B3uD,IAA3B;AACAA,UAAAA,IAAI,CAACiC,IAAL,GAAY,aAAZ;AACA,gBAAM2sD,GAAG,GAAG5uD,IAAI,CAACs4B,QAAjB;AACA,eAAK5kB,YAAL,CAAkBk7C,GAAlB,EAAuBj7C,KAAvB;AACA;AACD;;AAEH,WAAK,iBAAL;AACE3T,QAAAA,IAAI,CAACiC,IAAL,GAAY,cAAZ;AACA,aAAK65B,gBAAL,CAAsB97B,IAAI,CAACQ,QAA3B,EAAqC,CAAC8tD,YAAY,GAAGtuD,IAAI,CAAC+P,KAArB,KAA+B,IAA/B,GAAsC,KAAK,CAA3C,GAA+Cu+C,YAAY,CAACvyB,aAAjG,EAAgHpoB,KAAhH;AACA;;AAEF,WAAK,sBAAL;AACE,YAAI3T,IAAI,CAACoiD,QAAL,KAAkB,GAAtB,EAA2B;AACzB,eAAK70C,KAAL,CAAWvN,IAAI,CAAC++B,IAAL,CAAUpgC,GAArB,EAA0BiE,aAAa,CAACsE,qBAAxC;AACD;;AAEDlH,QAAAA,IAAI,CAACiC,IAAL,GAAY,mBAAZ;AACA,eAAOjC,IAAI,CAACoiD,QAAZ;AACA,aAAK1uC,YAAL,CAAkB1T,IAAI,CAAC++B,IAAvB,EAA6BprB,KAA7B;AACA;;AAEF,WAAK,yBAAL;AACE,aAAKD,YAAL,CAAkB9C,aAAlB,EAAiC+C,KAAjC;AACA;AAvDJ;;AA0DA,WAAO3T,IAAP;AACD;;AAED4T,EAAAA,gCAAgC,CAACX,IAAD,EAAOw7C,MAAP,EAAe96C,KAAf,EAAsB;AACpD,QAAIV,IAAI,CAAChR,IAAL,KAAc,cAAlB,EAAkC;AAChC,YAAM8L,KAAK,GAAGkF,IAAI,CAACP,IAAL,KAAc,KAAd,IAAuBO,IAAI,CAACP,IAAL,KAAc,KAArC,GAA6C9P,aAAa,CAACyF,kBAA3D,GAAgFzF,aAAa,CAAC0F,gBAA5G;AACA,WAAKiF,KAAL,CAAW0F,IAAI,CAACY,GAAL,CAASnV,KAApB,EAA2BqP,KAA3B;AACD,KAHD,MAGO,IAAIkF,IAAI,CAAChR,IAAL,KAAc,eAAd,IAAiC,CAACwsD,MAAtC,EAA8C;AACnD,WAAKC,gBAAL,CAAsBz7C,IAAI,CAACvU,KAA3B;AACD,KAFM,MAEA;AACL,WAAKgV,YAAL,CAAkBT,IAAlB,EAAwBU,KAAxB;AACD;AACF;;AAEDmoB,EAAAA,gBAAgB,CAACyB,QAAD,EAAWC,gBAAX,EAA6B7pB,KAA7B,EAAoC;AAClD,QAAIhV,GAAG,GAAG4+B,QAAQ,CAAC38B,MAAnB;;AAEA,QAAIjC,GAAJ,EAAS;AACP,YAAM4vD,IAAI,GAAGhxB,QAAQ,CAAC5+B,GAAG,GAAG,CAAP,CAArB;;AAEA,UAAI,CAAC4vD,IAAI,IAAI,IAAR,GAAe,KAAK,CAApB,GAAwBA,IAAI,CAACtsD,IAA9B,MAAwC,aAA5C,EAA2D;AACzD,UAAEtD,GAAF;AACD,OAFD,MAEO,IAAI,CAAC4vD,IAAI,IAAI,IAAR,GAAe,KAAK,CAApB,GAAwBA,IAAI,CAACtsD,IAA9B,MAAwC,eAA5C,EAA6D;AAClEssD,QAAAA,IAAI,CAACtsD,IAAL,GAAY,aAAZ;AACA,YAAI2sD,GAAG,GAAGL,IAAI,CAACj2B,QAAf;AACA,aAAK5kB,YAAL,CAAkBk7C,GAAlB,EAAuBj7C,KAAvB;AACAi7C,QAAAA,GAAG,GAAGR,6BAA6B,CAACQ,GAAD,CAAnC;;AAEA,YAAIA,GAAG,CAAC3sD,IAAJ,KAAa,YAAb,IAA6B2sD,GAAG,CAAC3sD,IAAJ,KAAa,kBAA1C,IAAgE2sD,GAAG,CAAC3sD,IAAJ,KAAa,cAA7E,IAA+F2sD,GAAG,CAAC3sD,IAAJ,KAAa,eAAhH,EAAiI;AAC/H,eAAKqnB,UAAL,CAAgBslC,GAAG,CAAClwD,KAApB;AACD;;AAED,YAAI8+B,gBAAJ,EAAsB;AACpB,eAAKqxB,2BAAL,CAAiCrxB,gBAAjC;AACD;;AAED,UAAE7+B,GAAF;AACD;AACF;;AAED,SAAK,IAAIgC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhC,GAApB,EAAyBgC,CAAC,EAA1B,EAA8B;AAC5B,YAAMwmD,GAAG,GAAG5pB,QAAQ,CAAC58B,CAAD,CAApB;;AAEA,UAAIwmD,GAAJ,EAAS;AACP,aAAKzzC,YAAL,CAAkByzC,GAAlB,EAAuBxzC,KAAvB;;AAEA,YAAIwzC,GAAG,CAACllD,IAAJ,KAAa,aAAjB,EAAgC;AAC9B,eAAKysD,gBAAL,CAAsBvH,GAAG,CAACzoD,KAA1B;AACD;AACF;AACF;;AAED,WAAO6+B,QAAP;AACD;;AAED/pB,EAAAA,YAAY,CAACxT,IAAD,EAAOyT,SAAP,EAAkB;AAC5B,YAAQzT,IAAI,CAACiC,IAAb;AACE,WAAK,YAAL;AACA,WAAK,eAAL;AACA,WAAK,cAAL;AACA,WAAK,mBAAL;AACA,WAAK,aAAL;AACE,eAAO,IAAP;;AAEF,WAAK,kBAAL;AACE;AACE,gBAAMssD,IAAI,GAAGvuD,IAAI,CAACkC,UAAL,CAAgBtB,MAAhB,GAAyB,CAAtC;AACA,iBAAOZ,IAAI,CAACkC,UAAL,CAAgB05B,KAAhB,CAAsB,CAAC3oB,IAAD,EAAOtS,CAAP,KAAa;AACxC,mBAAOsS,IAAI,CAAChR,IAAL,KAAc,cAAd,KAAiCtB,CAAC,KAAK4tD,IAAN,IAAct7C,IAAI,CAAChR,IAAL,KAAc,eAA7D,KAAiF,KAAKuR,YAAL,CAAkBP,IAAlB,CAAxF;AACD,WAFM,CAAP;AAGD;;AAEH,WAAK,gBAAL;AACE,eAAO,KAAKO,YAAL,CAAkBxT,IAAI,CAACxJ,KAAvB,CAAP;;AAEF,WAAK,eAAL;AACE,eAAO,KAAKgd,YAAL,CAAkBxT,IAAI,CAACs4B,QAAvB,CAAP;;AAEF,WAAK,iBAAL;AACE,eAAOt4B,IAAI,CAACQ,QAAL,CAAco7B,KAAd,CAAoBwhB,OAAO,IAAIA,OAAO,KAAK,IAAZ,IAAoB,KAAK5pC,YAAL,CAAkB4pC,OAAlB,CAAnD,CAAP;;AAEF,WAAK,sBAAL;AACE,eAAOp9C,IAAI,CAACoiD,QAAL,KAAkB,GAAzB;;AAEF,WAAK,yBAAL;AACE,eAAO,KAAK5uC,YAAL,CAAkBxT,IAAI,CAAC8P,UAAvB,CAAP;;AAEF,WAAK,kBAAL;AACA,WAAK,0BAAL;AACE,eAAO,CAAC2D,SAAR;;AAEF;AACE,eAAO,KAAP;AApCJ;AAsCD;;AAEDgqB,EAAAA,gBAAgB,CAACF,QAAD,EAAWG,mBAAX,EAAgC;AAC9C,WAAOH,QAAP;AACD;;AAEDuxB,EAAAA,oBAAoB,CAACvxB,QAAD,EAAWG,mBAAX,EAAgC;AAClD,SAAKD,gBAAL,CAAsBF,QAAtB,EAAgCG,mBAAhC;;AAEA,SAAK,MAAMhD,IAAX,IAAmB6C,QAAnB,EAA6B;AAC3B,UAAI,CAAC7C,IAAI,IAAI,IAAR,GAAe,KAAK,CAApB,GAAwBA,IAAI,CAACz4B,IAA9B,MAAwC,iBAA5C,EAA+D;AAC7D,aAAK6sD,oBAAL,CAA0Bp0B,IAAI,CAACl6B,QAA/B;AACD;AACF;AACF;;AAEDuuD,EAAAA,WAAW,CAACx7C,mBAAD,EAAsBy7C,gBAAtB,EAAwC;AACjD,UAAMhvD,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACA,SAAKyE,IAAL;AACAlX,IAAAA,IAAI,CAACs4B,QAAL,GAAgB,KAAKkD,uBAAL,CAA6BjoB,mBAA7B,EAAkDpT,SAAlD,EAA6D6uD,gBAA7D,CAAhB;AACA,WAAO,KAAKp8C,UAAL,CAAgB5S,IAAhB,EAAsB,eAAtB,CAAP;AACD;;AAEDivD,EAAAA,gBAAgB,GAAG;AACjB,UAAMjvD,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACA,SAAKyE,IAAL;AACAlX,IAAAA,IAAI,CAACs4B,QAAL,GAAgB,KAAK0H,gBAAL,EAAhB;AACA,WAAO,KAAKptB,UAAL,CAAgB5S,IAAhB,EAAsB,aAAtB,CAAP;AACD;;AAEDggC,EAAAA,gBAAgB,GAAG;AACjB,YAAQ,KAAK/+B,KAAL,CAAWgB,IAAnB;AACE,WAAKlK,OAAO,CAACQ,QAAb;AACE;AACE,gBAAMyH,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACA,eAAKyE,IAAL;AACAlX,UAAAA,IAAI,CAACQ,QAAL,GAAgB,KAAK6+C,gBAAL,CAAsBtnD,OAAO,CAACW,QAA9B,EAAwC,EAAxC,EAA4C,IAA5C,CAAhB;AACA,iBAAO,KAAKka,UAAL,CAAgB5S,IAAhB,EAAsB,cAAtB,CAAP;AACD;;AAEH,WAAKjI,OAAO,CAACa,MAAb;AACE,eAAO,KAAKs2D,eAAL,CAAqBn3D,OAAO,CAACgB,MAA7B,EAAqC,IAArC,CAAP;AAVJ;;AAaA,WAAO,KAAKg6B,eAAL,EAAP;AACD;;AAEDssB,EAAAA,gBAAgB,CAACxhB,KAAD,EAAQsxB,aAAR,EAAuBC,UAAvB,EAAmClvB,cAAnC,EAAmD;AACjE,UAAMmvB,IAAI,GAAG,EAAb;AACA,QAAIr2B,KAAK,GAAG,IAAZ;;AAEA,WAAO,CAAC,KAAK1Z,GAAL,CAASue,KAAT,CAAR,EAAyB;AACvB,UAAI7E,KAAJ,EAAW;AACTA,QAAAA,KAAK,GAAG,KAAR;AACD,OAFD,MAEO;AACL,aAAK3O,MAAL,CAAYtyB,OAAO,CAACoB,KAApB;AACD;;AAED,UAAIi2D,UAAU,IAAI,KAAKlwD,KAAL,CAAWnH,OAAO,CAACoB,KAAnB,CAAlB,EAA6C;AAC3Ck2D,QAAAA,IAAI,CAACnuD,IAAL,CAAU,IAAV;AACD,OAFD,MAEO,IAAI,KAAKoe,GAAL,CAASue,KAAT,CAAJ,EAAqB;AAC1B;AACD,OAFM,MAEA,IAAI,KAAK3+B,KAAL,CAAWnH,OAAO,CAAC6B,QAAnB,CAAJ,EAAkC;AACvCy1D,QAAAA,IAAI,CAACnuD,IAAL,CAAU,KAAK29B,4BAAL,CAAkC,KAAKowB,gBAAL,EAAlC,CAAV;AACA,aAAK7E,mBAAL,CAAyB+E,aAAzB;AACA,aAAK9kC,MAAL,CAAYwT,KAAZ;AACA;AACD,OALM,MAKA;AACL,cAAMopB,UAAU,GAAG,EAAnB;;AAEA,YAAI,KAAK/nD,KAAL,CAAWnH,OAAO,CAACgC,EAAnB,KAA0B,KAAK0F,SAAL,CAAe,YAAf,CAA9B,EAA4D;AAC1D,eAAK8N,KAAL,CAAW,KAAKtM,KAAL,CAAWvC,KAAtB,EAA6BkE,aAAa,CAAC+I,6BAA3C;AACD;;AAED,eAAO,KAAKzM,KAAL,CAAWnH,OAAO,CAACgC,EAAnB,CAAP,EAA+B;AAC7BktD,UAAAA,UAAU,CAAC/lD,IAAX,CAAgB,KAAKouD,cAAL,EAAhB;AACD;;AAEDD,QAAAA,IAAI,CAACnuD,IAAL,CAAU,KAAK8lD,uBAAL,CAA6B9mB,cAA7B,EAA6C+mB,UAA7C,CAAV;AACD;AACF;;AAED,WAAOoI,IAAP;AACD;;AAEDrI,EAAAA,uBAAuB,CAAC9mB,cAAD,EAAiB+mB,UAAjB,EAA6B;AAClD,UAAMloB,IAAI,GAAG,KAAKD,iBAAL,EAAb;AACA,SAAKD,4BAAL,CAAkCE,IAAlC;AACA,UAAMooB,GAAG,GAAG,KAAKroB,iBAAL,CAAuBC,IAAI,CAACrgC,KAA5B,EAAmCqgC,IAAI,CAAC/9B,GAAL,CAAStC,KAA5C,EAAmDqgC,IAAnD,CAAZ;;AAEA,QAAIkoB,UAAU,CAACrmD,MAAf,EAAuB;AACrBm+B,MAAAA,IAAI,CAACkoB,UAAL,GAAkBA,UAAlB;AACD;;AAED,WAAOE,GAAP;AACD;;AAEDtoB,EAAAA,4BAA4B,CAAC/E,KAAD,EAAQ;AAClC,WAAOA,KAAP;AACD;;AAEDgF,EAAAA,iBAAiB,CAACxrB,QAAD,EAAWrG,QAAX,EAAqB8xB,IAArB,EAA2B;AAC1C,QAAIwwB,SAAJ,EAAeC,SAAf,EAA0BC,KAA1B;;AAEAxiD,IAAAA,QAAQ,GAAG,CAACsiD,SAAS,GAAGtiD,QAAb,KAA0B,IAA1B,GAAiCsiD,SAAjC,GAA6C,KAAKtuD,KAAL,CAAWgM,QAAnE;AACAqG,IAAAA,QAAQ,GAAG,CAACk8C,SAAS,GAAGl8C,QAAb,KAA0B,IAA1B,GAAiCk8C,SAAjC,GAA6C,KAAKvuD,KAAL,CAAWvC,KAAnE;AACAqgC,IAAAA,IAAI,GAAG,CAAC0wB,KAAK,GAAG1wB,IAAT,KAAkB,IAAlB,GAAyB0wB,KAAzB,GAAiC,KAAKzvB,gBAAL,EAAxC;AACA,QAAI,CAAC,KAAK1gB,GAAL,CAASvnB,OAAO,CAACmC,EAAjB,CAAL,EAA2B,OAAO6kC,IAAP;AAC3B,UAAM/+B,IAAI,GAAG,KAAK6P,WAAL,CAAiByD,QAAjB,EAA2BrG,QAA3B,CAAb;AACAjN,IAAAA,IAAI,CAAC++B,IAAL,GAAYA,IAAZ;AACA/+B,IAAAA,IAAI,CAACg2B,KAAL,GAAa,KAAKwF,uBAAL,EAAb;AACA,WAAO,KAAK5oB,UAAL,CAAgB5S,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAEDg+B,EAAAA,SAAS,CAACtD,IAAD,EAAOyE,kBAAP,EAA2B1jB,WAAW,GAAGtC,SAAzC,EAAoDu2C,YAApD,EAAkEC,kBAAlE,EAAsFC,iBAAiB,GAAG,KAA1G,EAAiH;AACxH,YAAQl1B,IAAI,CAACz4B,IAAb;AACE,WAAK,YAAL;AACE;AACE,gBAAM;AACJvK,YAAAA;AADI,cAEFgjC,IAFJ;;AAIA,cAAI,KAAKz5B,KAAL,CAAWkV,MAAX,KAAsBy5C,iBAAiB,GAAG94C,wBAAwB,CAACpf,IAAD,EAAO,KAAKif,QAAZ,CAA3B,GAAmDE,4BAA4B,CAACnf,IAAD,CAAtH,CAAJ,EAAmI;AACjI,iBAAK6V,KAAL,CAAWmtB,IAAI,CAACh8B,KAAhB,EAAuB+c,WAAW,KAAKtC,SAAhB,GAA4BvW,aAAa,CAACgH,mBAA1C,GAAgEhH,aAAa,CAACiH,0BAArG,EAAiInS,IAAjI;AACD;;AAED,cAAIg4D,YAAJ,EAAkB;AAChB,gBAAIA,YAAY,CAAC/vD,GAAb,CAAiBjI,IAAjB,CAAJ,EAA4B;AAC1B,mBAAK6V,KAAL,CAAWmtB,IAAI,CAACh8B,KAAhB,EAAuBkE,aAAa,CAACwF,SAArC;AACD,aAFD,MAEO;AACLsnD,cAAAA,YAAY,CAAC/zC,GAAb,CAAiBjkB,IAAjB;AACD;AACF;;AAED,cAAIi4D,kBAAkB,IAAIj4D,IAAI,KAAK,KAAnC,EAA0C;AACxC,iBAAK6V,KAAL,CAAWmtB,IAAI,CAACh8B,KAAhB,EAAuBkE,aAAa,CAACkE,mBAArC;AACD;;AAED,cAAI,EAAE2U,WAAW,GAAGtC,SAAhB,CAAJ,EAAgC;AAC9B,iBAAKoC,KAAL,CAAWC,WAAX,CAAuB9jB,IAAvB,EAA6B+jB,WAA7B,EAA0Cif,IAAI,CAACh8B,KAA/C;AACD;;AAED;AACD;;AAEH,WAAK,kBAAL;AACE,YAAI+c,WAAW,KAAKtC,SAApB,EAA+B;AAC7B,eAAK5L,KAAL,CAAWmtB,IAAI,CAACh8B,KAAhB,EAAuBkE,aAAa,CAAC8D,6BAArC;AACD;;AAED;;AAEF,WAAK,eAAL;AACE,aAAK,IAAIuM,IAAT,IAAiBynB,IAAI,CAACx4B,UAAtB,EAAkC;AAChC,cAAI,KAAKqO,gBAAL,CAAsB0C,IAAtB,CAAJ,EAAiCA,IAAI,GAAGA,IAAI,CAACzc,KAAZ,CAAjC,KAAwD,IAAI,KAAKwe,cAAL,CAAoB/B,IAApB,CAAJ,EAA+B;AACvF,eAAK+qB,SAAL,CAAe/qB,IAAf,EAAqB,8BAArB,EAAqDwI,WAArD,EAAkEi0C,YAAlE,EAAgFC,kBAAhF;AACD;;AAED;;AAEF,WAAK,cAAL;AACE,aAAK,MAAME,IAAX,IAAmBn1B,IAAI,CAACl6B,QAAxB,EAAkC;AAChC,cAAIqvD,IAAJ,EAAU;AACR,iBAAK7xB,SAAL,CAAe6xB,IAAf,EAAqB,6BAArB,EAAoDp0C,WAApD,EAAiEi0C,YAAjE,EAA+EC,kBAA/E;AACD;AACF;;AAED;;AAEF,WAAK,mBAAL;AACE,aAAK3xB,SAAL,CAAetD,IAAI,CAACqE,IAApB,EAA0B,oBAA1B,EAAgDtjB,WAAhD,EAA6Di0C,YAA7D;AACA;;AAEF,WAAK,aAAL;AACE,aAAK1xB,SAAL,CAAetD,IAAI,CAACpC,QAApB,EAA8B,cAA9B,EAA8C7c,WAA9C,EAA2Di0C,YAA3D;AACA;;AAEF,WAAK,yBAAL;AACE,aAAK1xB,SAAL,CAAetD,IAAI,CAAC5qB,UAApB,EAAgC,0BAAhC,EAA4D2L,WAA5D,EAAyEi0C,YAAzE;AACA;;AAEF;AACE;AACE,eAAKniD,KAAL,CAAWmtB,IAAI,CAACh8B,KAAhB,EAAuB+c,WAAW,KAAKtC,SAAhB,GAA4BvW,aAAa,CAACuD,UAA1C,GAAuDvD,aAAa,CAACwD,iBAA5F,EAA+G+4B,kBAA/G;AACD;AArEL;AAuED;;AAEDwvB,EAAAA,qBAAqB,CAAC3uD,IAAD,EAAO;AAC1B,QAAIA,IAAI,CAACs4B,QAAL,CAAcr2B,IAAd,KAAuB,YAAvB,IAAuCjC,IAAI,CAACs4B,QAAL,CAAcr2B,IAAd,KAAuB,kBAAlE,EAAsF;AACpF,WAAKsL,KAAL,CAAWvN,IAAI,CAACs4B,QAAL,CAAc55B,KAAzB,EAAgCkE,aAAa,CAACgE,4BAA9C;AACD;AACF;;AAEDwjD,EAAAA,mBAAmB,CAACvsB,KAAD,EAAQ;AACzB,QAAI,KAAK3+B,KAAL,CAAWnH,OAAO,CAACoB,KAAnB,CAAJ,EAA+B;AAC7B,UAAI,KAAK2mB,iBAAL,OAA6B+d,KAAjC,EAAwC;AACtC,aAAKgxB,2BAAL,CAAiC,KAAK5tD,KAAL,CAAWvC,KAA5C;AACD,OAFD,MAEO;AACL,aAAKgwD,gBAAL,CAAsB,KAAKztD,KAAL,CAAWvC,KAAjC;AACD;AACF;AACF;;AAEDgwD,EAAAA,gBAAgB,CAAC1hD,GAAD,EAAM;AACpB,UAAM,KAAKO,KAAL,CAAWP,GAAX,EAAgBpK,aAAa,CAAC+B,gBAA9B,CAAN;AACD;;AAEDkqD,EAAAA,2BAA2B,CAAC7hD,GAAD,EAAM;AAC/B,SAAKO,KAAL,CAAWP,GAAX,EAAgBpK,aAAa,CAAC4G,iBAA9B;AACD;;AA9XgC;;AAkYnC,MAAMsmD,gBAAN,SAA+BzB,UAA/B,CAA0C;AACxC0B,EAAAA,UAAU,CAAC98C,IAAD,EAAO+8C,QAAP,EAAiBC,QAAjB,EAA2B18C,mBAA3B,EAAgD;AACxD,QAAIN,IAAI,CAAChR,IAAL,KAAc,eAAd,IAAiC,KAAK+S,cAAL,CAAoB/B,IAApB,CAAjC,IAA8DA,IAAI,CAACN,QAAnE,IAA+EM,IAAI,CAACG,SAAxF,EAAmG;AACjG;AACD;;AAED,UAAMS,GAAG,GAAGZ,IAAI,CAACY,GAAjB;AACA,UAAMnc,IAAI,GAAGmc,GAAG,CAAC5R,IAAJ,KAAa,YAAb,GAA4B4R,GAAG,CAACnc,IAAhC,GAAuCmc,GAAG,CAACrd,KAAxD;;AAEA,QAAIkB,IAAI,KAAK,WAAb,EAA0B;AACxB,UAAIs4D,QAAJ,EAAc;AACZ,aAAKziD,KAAL,CAAWsG,GAAG,CAACnV,KAAf,EAAsBkE,aAAa,CAAC2G,aAApC;AACA;AACD;;AAED,UAAI0mD,QAAQ,CAACC,IAAb,EAAmB;AACjB,YAAI38C,mBAAJ,EAAyB;AACvB,cAAIA,mBAAmB,CAACgY,WAApB,KAAoC,CAAC,CAAzC,EAA4C;AAC1ChY,YAAAA,mBAAmB,CAACgY,WAApB,GAAkC1X,GAAG,CAACnV,KAAtC;AACD;AACF,SAJD,MAIO;AACL,eAAK6O,KAAL,CAAWsG,GAAG,CAACnV,KAAf,EAAsBkE,aAAa,CAAC6B,cAApC;AACD;AACF;;AAEDwrD,MAAAA,QAAQ,CAACC,IAAT,GAAgB,IAAhB;AACD;AACF;;AAEDC,EAAAA,oBAAoB,CAACz1B,IAAD,EAAOne,gBAAP,EAAyB;AAC3C,WAAOme,IAAI,CAACz4B,IAAL,KAAc,yBAAd,IAA2Cy4B,IAAI,CAACh8B,KAAL,KAAe6d,gBAAjE;AACD;;AAEDwuC,EAAAA,aAAa,GAAG;AACd,SAAKx+B,kBAAL;AACA,SAAKlN,SAAL;AACA,UAAMqb,IAAI,GAAG,KAAKjI,eAAL,EAAb;;AAEA,QAAI,CAAC,KAAKvzB,KAAL,CAAWnH,OAAO,CAACO,GAAnB,CAAL,EAA8B;AAC5B,WAAKgxB,UAAL;AACD;;AAED,SAAKhnB,yBAAL;AACAo4B,IAAAA,IAAI,CAACz6B,QAAL,GAAgB,KAAKgB,KAAL,CAAWhB,QAA3B;AACAy6B,IAAAA,IAAI,CAAC5sB,MAAL,GAAc,KAAK7M,KAAL,CAAW6M,MAAzB;;AAEA,QAAI,KAAKnW,OAAL,CAAaunB,MAAjB,EAAyB;AACvBwb,MAAAA,IAAI,CAACxb,MAAL,GAAc,KAAKA,MAAnB;AACD;;AAED,WAAOwb,IAAP;AACD;;AAEDjI,EAAAA,eAAe,CAAC29B,UAAD,EAAa78C,mBAAb,EAAkC;AAC/C,QAAI68C,UAAJ,EAAgB;AACd,aAAO,KAAKC,aAAL,CAAmB,MAAM,KAAKC,mBAAL,CAAyB/8C,mBAAzB,CAAzB,CAAP;AACD;;AAED,WAAO,KAAKg9C,UAAL,CAAgB,MAAM,KAAKD,mBAAL,CAAyB/8C,mBAAzB,CAAtB,CAAP;AACD;;AAED+8C,EAAAA,mBAAmB,CAAC/8C,mBAAD,EAAsB;AACvC,UAAMD,QAAQ,GAAG,KAAKrS,KAAL,CAAWvC,KAA5B;AACA,UAAMuO,QAAQ,GAAG,KAAKhM,KAAL,CAAWgM,QAA5B;AACA,UAAMytB,IAAI,GAAG,KAAKa,gBAAL,CAAsBhoB,mBAAtB,CAAb;;AAEA,QAAI,KAAKrU,KAAL,CAAWnH,OAAO,CAACoB,KAAnB,CAAJ,EAA+B;AAC7B,YAAM6G,IAAI,GAAG,KAAK6P,WAAL,CAAiByD,QAAjB,EAA2BrG,QAA3B,CAAb;AACAjN,MAAAA,IAAI,CAACwwD,WAAL,GAAmB,CAAC91B,IAAD,CAAnB;;AAEA,aAAO,KAAKpb,GAAL,CAASvnB,OAAO,CAACoB,KAAjB,CAAP,EAAgC;AAC9B6G,QAAAA,IAAI,CAACwwD,WAAL,CAAiBtvD,IAAjB,CAAsB,KAAKq6B,gBAAL,CAAsBhoB,mBAAtB,CAAtB;AACD;;AAED,WAAKkqB,gBAAL,CAAsBz9B,IAAI,CAACwwD,WAA3B;AACA,aAAO,KAAK59C,UAAL,CAAgB5S,IAAhB,EAAsB,oBAAtB,CAAP;AACD;;AAED,WAAO06B,IAAP;AACD;;AAED+1B,EAAAA,0BAA0B,CAACl9C,mBAAD,EAAsB+sB,cAAtB,EAAsC;AAC9D,WAAO,KAAK+vB,aAAL,CAAmB,MAAM,KAAK90B,gBAAL,CAAsBhoB,mBAAtB,EAA2C+sB,cAA3C,CAAzB,CAAP;AACD;;AAED9E,EAAAA,uBAAuB,CAACjoB,mBAAD,EAAsB+sB,cAAtB,EAAsC;AAC3D,WAAO,KAAKiwB,UAAL,CAAgB,MAAM,KAAKh1B,gBAAL,CAAsBhoB,mBAAtB,EAA2C+sB,cAA3C,CAAtB,CAAP;AACD;;AAEDvF,EAAAA,0BAA0B,CAACxnB,mBAAD,EAAsBm9C,WAAtB,EAAmC;AAC3D,QAAIC,gBAAJ;;AAEAp9C,IAAAA,mBAAmB,CAACiY,kBAApB,GAAyC,CAACmlC,gBAAgB,GAAGD,WAAW,IAAI,IAAf,GAAsB,KAAK,CAA3B,GAA+BA,WAAW,CAAC1jD,GAA/D,KAAuE,IAAvE,GAA8E2jD,gBAA9E,GAAiG,KAAK1vD,KAAL,CAAWvC,KAArJ;AACD;;AAED68B,EAAAA,gBAAgB,CAAChoB,mBAAD,EAAsB+sB,cAAtB,EAAsC;AACpD,UAAMhtB,QAAQ,GAAG,KAAKrS,KAAL,CAAWvC,KAA5B;AACA,UAAMuO,QAAQ,GAAG,KAAKhM,KAAL,CAAWgM,QAA5B;;AAEA,QAAI,KAAKsc,YAAL,CAAkB,OAAlB,CAAJ,EAAgC;AAC9B,UAAI,KAAK6C,SAAL,CAAetD,QAAnB,EAA6B;AAC3B,YAAIiW,IAAI,GAAG,KAAK6xB,UAAL,EAAX;;AAEA,YAAItwB,cAAJ,EAAoB;AAClBvB,UAAAA,IAAI,GAAGuB,cAAc,CAACxa,IAAf,CAAoB,IAApB,EAA0BiZ,IAA1B,EAAgCzrB,QAAhC,EAA0CrG,QAA1C,CAAP;AACD;;AAED,eAAO8xB,IAAP;AACD;AACF;;AAED,QAAI8xB,mBAAJ;;AAEA,QAAIt9C,mBAAJ,EAAyB;AACvBs9C,MAAAA,mBAAmB,GAAG,KAAtB;AACD,KAFD,MAEO;AACLt9C,MAAAA,mBAAmB,GAAG,IAAIkZ,gBAAJ,EAAtB;AACAokC,MAAAA,mBAAmB,GAAG,IAAtB;AACD;;AAED,QAAI,KAAK3xD,KAAL,CAAWnH,OAAO,CAACkB,MAAnB,KAA8B,KAAKiG,KAAL,CAAWnH,OAAO,CAACL,IAAnB,CAAlC,EAA4D;AAC1D,WAAKuJ,KAAL,CAAWsb,gBAAX,GAA8B,KAAKtb,KAAL,CAAWvC,KAAzC;AACD;;AAED,QAAIqgC,IAAI,GAAG,KAAK+xB,qBAAL,CAA2Bv9C,mBAA3B,CAAX;;AAEA,QAAI+sB,cAAJ,EAAoB;AAClBvB,MAAAA,IAAI,GAAGuB,cAAc,CAACxa,IAAf,CAAoB,IAApB,EAA0BiZ,IAA1B,EAAgCzrB,QAAhC,EAA0CrG,QAA1C,CAAP;AACD;;AAED,QAAI,KAAKhM,KAAL,CAAWgB,IAAX,CAAgBrL,QAApB,EAA8B;AAC5B,YAAMoJ,IAAI,GAAG,KAAK6P,WAAL,CAAiByD,QAAjB,EAA2BrG,QAA3B,CAAb;AACA,YAAMm1C,QAAQ,GAAG,KAAKnhD,KAAL,CAAWzK,KAA5B;AACAwJ,MAAAA,IAAI,CAACoiD,QAAL,GAAgBA,QAAhB;AACA,YAAM2O,wBAAwB,GAAGhyB,IAAI,CAAC98B,IAAL,KAAc,kBAAd,IAAoC88B,IAAI,CAACqjB,QAAL,KAAkB,IAAtD,IAA8D,KAAKxiD,eAAL,CAAqB,kBAArB,EAAyC,UAAzC,MAAyD,MAAxJ;;AAEA,UAAImxD,wBAAJ,EAA8B;AAC5B,cAAM,KAAKxjD,KAAL,CAAW,KAAKtM,KAAL,CAAWvC,KAAtB,EAA6BkE,aAAa,CAAC2F,iBAA3C,EAA8D65C,QAA9D,CAAN;AACD;;AAED,UAAI,KAAKljD,KAAL,CAAWnH,OAAO,CAACmC,EAAnB,CAAJ,EAA4B;AAC1B8F,QAAAA,IAAI,CAAC++B,IAAL,GAAY,KAAKrrB,YAAL,CAAkBqrB,IAAlB,EAAwB,IAAxB,CAAZ;AACAxrB,QAAAA,mBAAmB,CAACgY,WAApB,GAAkC,CAAC,CAAnC;AACD,OAHD,MAGO;AACLvrB,QAAAA,IAAI,CAAC++B,IAAL,GAAYA,IAAZ;AACD;;AAED,UAAIxrB,mBAAmB,CAAC+X,eAApB,IAAuCtrB,IAAI,CAAC++B,IAAL,CAAUrgC,KAArD,EAA4D;AAC1D6U,QAAAA,mBAAmB,CAAC+X,eAApB,GAAsC,CAAC,CAAvC;AACD;;AAED,WAAK0S,SAAL,CAAee,IAAf,EAAqB,uBAArB;AACA,WAAK7nB,IAAL;AACAlX,MAAAA,IAAI,CAACg2B,KAAL,GAAa,KAAKuF,gBAAL,EAAb;AACA,aAAO,KAAK3oB,UAAL,CAAgB5S,IAAhB,EAAsB,sBAAtB,CAAP;AACD,KAzBD,MAyBO,IAAI6wD,mBAAJ,EAAyB;AAC9B,WAAKzlC,qBAAL,CAA2B7X,mBAA3B,EAAgD,IAAhD;AACD;;AAED,WAAOwrB,IAAP;AACD;;AAED+xB,EAAAA,qBAAqB,CAACv9C,mBAAD,EAAsB;AACzC,UAAMD,QAAQ,GAAG,KAAKrS,KAAL,CAAWvC,KAA5B;AACA,UAAMuO,QAAQ,GAAG,KAAKhM,KAAL,CAAWgM,QAA5B;AACA,UAAMsP,gBAAgB,GAAG,KAAKtb,KAAL,CAAWsb,gBAApC;AACA,UAAMme,IAAI,GAAG,KAAKs2B,YAAL,CAAkBz9C,mBAAlB,CAAb;;AAEA,QAAI,KAAK48C,oBAAL,CAA0Bz1B,IAA1B,EAAgCne,gBAAhC,CAAJ,EAAuD;AACrD,aAAOme,IAAP;AACD;;AAED,WAAO,KAAKI,gBAAL,CAAsBJ,IAAtB,EAA4BpnB,QAA5B,EAAsCrG,QAAtC,EAAgDsG,mBAAhD,CAAP;AACD;;AAEDunB,EAAAA,gBAAgB,CAACJ,IAAD,EAAOpnB,QAAP,EAAiBrG,QAAjB,EAA2BsG,mBAA3B,EAAgD;AAC9D,QAAI,KAAK+L,GAAL,CAASvnB,OAAO,CAACyB,QAAjB,CAAJ,EAAgC;AAC9B,YAAMwG,IAAI,GAAG,KAAK6P,WAAL,CAAiByD,QAAjB,EAA2BrG,QAA3B,CAAb;AACAjN,MAAAA,IAAI,CAAC+V,IAAL,GAAY2kB,IAAZ;AACA16B,MAAAA,IAAI,CAACi7B,UAAL,GAAkB,KAAKO,uBAAL,EAAlB;AACA,WAAKnR,MAAL,CAAYtyB,OAAO,CAACsB,KAApB;AACA2G,MAAAA,IAAI,CAACs7B,SAAL,GAAiB,KAAKC,gBAAL,EAAjB;AACA,aAAO,KAAK3oB,UAAL,CAAgB5S,IAAhB,EAAsB,uBAAtB,CAAP;AACD;;AAED,WAAO06B,IAAP;AACD;;AAEDs2B,EAAAA,YAAY,CAACz9C,mBAAD,EAAsB;AAChC,UAAMD,QAAQ,GAAG,KAAKrS,KAAL,CAAWvC,KAA5B;AACA,UAAMuO,QAAQ,GAAG,KAAKhM,KAAL,CAAWgM,QAA5B;AACA,UAAMsP,gBAAgB,GAAG,KAAKtb,KAAL,CAAWsb,gBAApC;AACA,UAAMme,IAAI,GAAG,KAAKunB,eAAL,CAAqB1uC,mBAArB,CAAb;;AAEA,QAAI,KAAK48C,oBAAL,CAA0Bz1B,IAA1B,EAAgCne,gBAAhC,CAAJ,EAAuD;AACrD,aAAOme,IAAP;AACD;;AAED,WAAO,KAAKutB,WAAL,CAAiBvtB,IAAjB,EAAuBpnB,QAAvB,EAAiCrG,QAAjC,EAA2C,CAAC,CAA5C,CAAP;AACD;;AAEDg7C,EAAAA,WAAW,CAAClpB,IAAD,EAAOmpB,YAAP,EAAqBC,YAArB,EAAmCC,OAAnC,EAA4C;AACrD,QAAI6I,IAAI,GAAG,KAAKhwD,KAAL,CAAWgB,IAAX,CAAgB5K,KAA3B;;AAEA,QAAI45D,IAAI,IAAI,IAAR,KAAiB,KAAK7kC,SAAL,CAAepD,KAAf,IAAwB,CAAC,KAAK9pB,KAAL,CAAWnH,OAAO,CAACuF,GAAnB,CAA1C,CAAJ,EAAwE;AACtE,UAAI2zD,IAAI,GAAG7I,OAAX,EAAoB;AAClB,cAAMh/B,EAAE,GAAG,KAAKnoB,KAAL,CAAWgB,IAAtB;;AAEA,YAAImnB,EAAE,KAAKrxB,OAAO,CAAC0C,QAAnB,EAA6B;AAC3B,eAAK4mB,YAAL,CAAkB,kBAAlB;;AAEA,cAAI,KAAKpgB,KAAL,CAAWoc,0BAAf,EAA2C;AACzC,mBAAO0hB,IAAP;AACD;;AAED,eAAKmyB,4BAAL,CAAkCnyB,IAAlC,EAAwCmpB,YAAxC;AACD;;AAED,cAAMloD,IAAI,GAAG,KAAK6P,WAAL,CAAiBq4C,YAAjB,EAA+BC,YAA/B,CAAb;AACAnoD,QAAAA,IAAI,CAAC++B,IAAL,GAAYA,IAAZ;AACA/+B,QAAAA,IAAI,CAACoiD,QAAL,GAAgB,KAAKnhD,KAAL,CAAWzK,KAA3B;AACA,cAAM26D,OAAO,GAAG/nC,EAAE,KAAKrxB,OAAO,CAAC4C,SAAf,IAA4ByuB,EAAE,KAAKrxB,OAAO,CAAC6C,UAA3D;AACA,cAAMw2D,QAAQ,GAAGhoC,EAAE,KAAKrxB,OAAO,CAAC2C,iBAAhC;;AAEA,YAAI02D,QAAJ,EAAc;AACZH,UAAAA,IAAI,GAAGl5D,OAAO,CAAC6C,UAAR,CAAmBvD,KAA1B;AACD;;AAED,aAAK6f,IAAL;;AAEA,YAAIkS,EAAE,KAAKrxB,OAAO,CAAC0C,QAAf,IAA2B,KAAKmF,eAAL,CAAqB,kBAArB,EAAyC,UAAzC,MAAyD,SAAxF,EAAmG;AACjG,cAAI,KAAKV,KAAL,CAAWnH,OAAO,CAACL,IAAnB,KAA4B,KAAKuJ,KAAL,CAAWzK,KAAX,KAAqB,OAAjD,IAA4D,KAAK41B,SAAL,CAAevD,QAA/E,EAAyF;AACvF,kBAAM,KAAKtb,KAAL,CAAW,KAAKtM,KAAL,CAAWvC,KAAtB,EAA6BkE,aAAa,CAAC6H,gCAA3C,CAAN;AACD;AACF;;AAEDzK,QAAAA,IAAI,CAACg2B,KAAL,GAAa,KAAKq7B,oBAAL,CAA0BjoC,EAA1B,EAA8B6nC,IAA9B,CAAb;AACA,aAAKr+C,UAAL,CAAgB5S,IAAhB,EAAsBmxD,OAAO,IAAIC,QAAX,GAAsB,mBAAtB,GAA4C,kBAAlE;AACA,cAAME,MAAM,GAAG,KAAKrwD,KAAL,CAAWgB,IAA1B;;AAEA,YAAImvD,QAAQ,KAAKE,MAAM,KAAKv5D,OAAO,CAAC4C,SAAnB,IAAgC22D,MAAM,KAAKv5D,OAAO,CAAC6C,UAAxD,CAAR,IAA+Eu2D,OAAO,IAAIG,MAAM,KAAKv5D,OAAO,CAAC2C,iBAAjH,EAAoI;AAClI,gBAAM,KAAK6S,KAAL,CAAW,KAAKtM,KAAL,CAAWvC,KAAtB,EAA6BkE,aAAa,CAACyE,yBAA3C,CAAN;AACD;;AAED,eAAO,KAAK4gD,WAAL,CAAiBjoD,IAAjB,EAAuBkoD,YAAvB,EAAqCC,YAArC,EAAmDC,OAAnD,CAAP;AACD;AACF;;AAED,WAAOrpB,IAAP;AACD;;AAEDsyB,EAAAA,oBAAoB,CAACjoC,EAAD,EAAK6nC,IAAL,EAAW;AAC7B,UAAM39C,QAAQ,GAAG,KAAKrS,KAAL,CAAWvC,KAA5B;AACA,UAAMuO,QAAQ,GAAG,KAAKhM,KAAL,CAAWgM,QAA5B;;AAEA,YAAQmc,EAAR;AACE,WAAKrxB,OAAO,CAAC0C,QAAb;AACE,gBAAQ,KAAKmF,eAAL,CAAqB,kBAArB,EAAyC,UAAzC,CAAR;AACE,eAAK,MAAL;AACE,mBAAO,KAAK2xD,uBAAL,CAA6B,MAAM;AACxC,oBAAMC,QAAQ,GAAG,KAAKC,iBAAL,CAAuBroC,EAAvB,EAA2B6nC,IAA3B,CAAjB;AACA,mBAAKS,4BAAL,CAAkCp+C,QAAlC;AACA,qBAAOk+C,QAAP;AACD,aAJM,CAAP;;AAMF,eAAK,OAAL;AACE,mBAAO,KAAKD,uBAAL,CAA6B,MAAM;AACxC,oBAAMI,SAAS,GAAG,KAAKF,iBAAL,CAAuBroC,EAAvB,EAA2B6nC,IAA3B,CAAlB;AACA,qBAAO,KAAKW,6BAAL,CAAmCD,SAAnC,EAA8Cr+C,QAA9C,EAAwDrG,QAAxD,CAAP;AACD,aAHM,CAAP;;AAKF,eAAK,QAAL;AACE,mBAAO,KAAK4kD,8BAAL,CAAoC,MAAM;AAC/C,qBAAO,KAAKC,uBAAL,CAA6Bb,IAA7B,CAAP;AACD,aAFM,CAAP;AAfJ;;AAoBF;AACE,eAAO,KAAKc,wBAAL,CAA8B3oC,EAA9B,EAAkC6nC,IAAlC,CAAP;AAvBJ;AAyBD;;AAEDc,EAAAA,wBAAwB,CAAC3oC,EAAD,EAAK6nC,IAAL,EAAW;AACjC,UAAM39C,QAAQ,GAAG,KAAKrS,KAAL,CAAWvC,KAA5B;AACA,UAAMuO,QAAQ,GAAG,KAAKhM,KAAL,CAAWgM,QAA5B;AACA,WAAO,KAAKg7C,WAAL,CAAiB,KAAKhG,eAAL,EAAjB,EAAyC3uC,QAAzC,EAAmDrG,QAAnD,EAA6Dmc,EAAE,CAAChyB,gBAAH,GAAsB65D,IAAI,GAAG,CAA7B,GAAiCA,IAA9F,CAAP;AACD;;AAEDQ,EAAAA,iBAAiB,CAACroC,EAAD,EAAK6nC,IAAL,EAAW;AAC1B,UAAMe,wBAAwB,GAAG,KAAK5lC,SAAL,CAAetD,QAAhD;AACA,UAAMmpC,qBAAqB,GAAGD,wBAAwB,IAAI,KAAKzoC,YAAL,CAAkB,OAAlB,CAA1D;;AAEA,QAAI0oC,qBAAJ,EAA2B;AACzB,YAAM,KAAK1kD,KAAL,CAAW,KAAKtM,KAAL,CAAWvC,KAAtB,EAA6BkE,aAAa,CAAC2F,iBAA3C,EAA8D,KAAKtH,KAAL,CAAWzK,KAAzE,CAAN;AACD,KAFD,MAEO;AACL,aAAO,KAAKu7D,wBAAL,CAA8B3oC,EAA9B,EAAkC6nC,IAAlC,CAAP;AACD;AACF;;AAEDiB,EAAAA,0BAA0B,CAAClyD,IAAD,EAAO;AAC/B,QAAI,KAAKd,KAAL,CAAWnH,OAAO,CAACwD,QAAnB,CAAJ,EAAkC;AAChC,WAAKgS,KAAL,CAAWvN,IAAI,CAACs4B,QAAL,CAAc55B,KAAzB,EAAgCkE,aAAa,CAACyI,kCAA9C;AACD;AACF;;AAED42C,EAAAA,eAAe,CAAC1uC,mBAAD,EAAsB4+C,QAAtB,EAAgC;AAC7C,UAAM7+C,QAAQ,GAAG,KAAKrS,KAAL,CAAWvC,KAA5B;AACA,UAAMuO,QAAQ,GAAG,KAAKhM,KAAL,CAAWgM,QAA5B;AACA,UAAMmlD,OAAO,GAAG,KAAK7oC,YAAL,CAAkB,OAAlB,CAAhB;;AAEA,QAAI6oC,OAAO,IAAI,KAAKC,cAAL,EAAf,EAAsC;AACpC,WAAKn7C,IAAL;AACA,YAAMwjB,IAAI,GAAG,KAAK43B,UAAL,CAAgBh/C,QAAhB,EAA0BrG,QAA1B,CAAb;AACA,UAAI,CAACklD,QAAL,EAAe,KAAKD,0BAAL,CAAgCx3B,IAAhC;AACf,aAAOA,IAAP;AACD;;AAED,UAAM63B,MAAM,GAAG,KAAKrzD,KAAL,CAAWnH,OAAO,CAACuC,MAAnB,CAAf;AACA,UAAM0F,IAAI,GAAG,KAAKyS,SAAL,EAAb;;AAEA,QAAI,KAAKxR,KAAL,CAAWgB,IAAX,CAAgBpL,MAApB,EAA4B;AAC1BmJ,MAAAA,IAAI,CAACoiD,QAAL,GAAgB,KAAKnhD,KAAL,CAAWzK,KAA3B;AACAwJ,MAAAA,IAAI,CAACnJ,MAAL,GAAc,IAAd;;AAEA,UAAI,KAAKqI,KAAL,CAAWnH,OAAO,CAACuE,MAAnB,CAAJ,EAAgC;AAC9B,aAAK+kB,YAAL,CAAkB,kBAAlB;AACD;;AAED,YAAMmxC,QAAQ,GAAG,KAAKtzD,KAAL,CAAWnH,OAAO,CAAC2F,OAAnB,CAAjB;AACA,WAAKwZ,IAAL;AACAlX,MAAAA,IAAI,CAACs4B,QAAL,GAAgB,KAAK2pB,eAAL,CAAqB,IAArB,EAA2B,IAA3B,CAAhB;AACA,WAAK72B,qBAAL,CAA2B7X,mBAA3B,EAAgD,IAAhD;;AAEA,UAAI,KAAKtS,KAAL,CAAWkV,MAAX,IAAqBq8C,QAAzB,EAAmC;AACjC,cAAM5D,GAAG,GAAG5uD,IAAI,CAACs4B,QAAjB;;AAEA,YAAIs2B,GAAG,CAAC3sD,IAAJ,KAAa,YAAjB,EAA+B;AAC7B,eAAKsL,KAAL,CAAWvN,IAAI,CAACtB,KAAhB,EAAuBkE,aAAa,CAAC+G,YAArC;AACD,SAFD,MAEO,IAAI,KAAKmL,wBAAL,CAA8B85C,GAA9B,CAAJ,EAAwC;AAC7C,eAAKrhD,KAAL,CAAWvN,IAAI,CAACtB,KAAhB,EAAuBkE,aAAa,CAACwB,kBAArC;AACD;AACF;;AAED,UAAI,CAACmuD,MAAL,EAAa;AACX,YAAI,CAACJ,QAAL,EAAe,KAAKD,0BAAL,CAAgClyD,IAAhC;AACf,eAAO,KAAK4S,UAAL,CAAgB5S,IAAhB,EAAsB,iBAAtB,CAAP;AACD;AACF;;AAED,UAAM06B,IAAI,GAAG,KAAK+3B,WAAL,CAAiBzyD,IAAjB,EAAuBuyD,MAAvB,EAA+Bh/C,mBAA/B,CAAb;;AAEA,QAAI6+C,OAAJ,EAAa;AACX,YAAM17D,UAAU,GAAG,KAAK+I,SAAL,CAAe,aAAf,IAAgC,KAAKwB,KAAL,CAAWgB,IAAX,CAAgBvL,UAAhD,GAA6D,KAAKuK,KAAL,CAAWgB,IAAX,CAAgBvL,UAAhB,IAA8B,CAAC,KAAKwI,KAAL,CAAWnH,OAAO,CAACqD,MAAnB,CAA/G;;AAEA,UAAI1E,UAAU,IAAI,CAAC,KAAKg8D,gBAAL,EAAnB,EAA4C;AAC1C,aAAKjlD,cAAL,CAAoB6F,QAApB,EAA8B1Q,aAAa,CAACQ,sBAA5C;AACA,eAAO,KAAKkvD,UAAL,CAAgBh/C,QAAhB,EAA0BrG,QAA1B,CAAP;AACD;AACF;;AAED,WAAOytB,IAAP;AACD;;AAED+3B,EAAAA,WAAW,CAACzyD,IAAD,EAAOuyD,MAAP,EAAeh/C,mBAAf,EAAoC;AAC7C,QAAIg/C,MAAJ,EAAY;AACV,WAAKv0B,SAAL,CAAeh+B,IAAI,CAACs4B,QAApB,EAA8B,kBAA9B;AACA,aAAO,KAAK1lB,UAAL,CAAgB5S,IAAhB,EAAsB,kBAAtB,CAAP;AACD;;AAED,UAAMsT,QAAQ,GAAG,KAAKrS,KAAL,CAAWvC,KAA5B;AACA,UAAMuO,QAAQ,GAAG,KAAKhM,KAAL,CAAWgM,QAA5B;AACA,QAAIytB,IAAI,GAAG,KAAKi4B,mBAAL,CAAyBp/C,mBAAzB,CAAX;AACA,QAAI,KAAK6X,qBAAL,CAA2B7X,mBAA3B,EAAgD,KAAhD,CAAJ,EAA4D,OAAOmnB,IAAP;;AAE5D,WAAO,KAAKz5B,KAAL,CAAWgB,IAAX,CAAgBnL,OAAhB,IAA2B,CAAC,KAAKizB,kBAAL,EAAnC,EAA8D;AAC5D,YAAM/pB,IAAI,GAAG,KAAK6P,WAAL,CAAiByD,QAAjB,EAA2BrG,QAA3B,CAAb;AACAjN,MAAAA,IAAI,CAACoiD,QAAL,GAAgB,KAAKnhD,KAAL,CAAWzK,KAA3B;AACAwJ,MAAAA,IAAI,CAACnJ,MAAL,GAAc,KAAd;AACAmJ,MAAAA,IAAI,CAACs4B,QAAL,GAAgBoC,IAAhB;AACA,WAAKsD,SAAL,CAAetD,IAAf,EAAqB,mBAArB;AACA,WAAKxjB,IAAL;AACAwjB,MAAAA,IAAI,GAAG,KAAK9nB,UAAL,CAAgB5S,IAAhB,EAAsB,kBAAtB,CAAP;AACD;;AAED,WAAO06B,IAAP;AACD;;AAEDi4B,EAAAA,mBAAmB,CAACp/C,mBAAD,EAAsB;AACvC,UAAMD,QAAQ,GAAG,KAAKrS,KAAL,CAAWvC,KAA5B;AACA,UAAMuO,QAAQ,GAAG,KAAKhM,KAAL,CAAWgM,QAA5B;AACA,UAAMsP,gBAAgB,GAAG,KAAKtb,KAAL,CAAWsb,gBAApC;AACA,UAAMme,IAAI,GAAG,KAAKvG,aAAL,CAAmB5gB,mBAAnB,CAAb;;AAEA,QAAI,KAAK48C,oBAAL,CAA0Bz1B,IAA1B,EAAgCne,gBAAhC,CAAJ,EAAuD;AACrD,aAAOme,IAAP;AACD;;AAED,WAAO,KAAK+G,eAAL,CAAqB/G,IAArB,EAA2BpnB,QAA3B,EAAqCrG,QAArC,CAAP;AACD;;AAEDw0B,EAAAA,eAAe,CAACltB,IAAD,EAAOjB,QAAP,EAAiBrG,QAAjB,EAA2BuH,OAA3B,EAAoC;AACjD,UAAMvT,KAAK,GAAG;AACZwT,MAAAA,mBAAmB,EAAE,KADT;AAEZm+C,MAAAA,eAAe,EAAE,KAAK9K,oBAAL,CAA0BvzC,IAA1B,CAFL;AAGZI,MAAAA,IAAI,EAAE;AAHM,KAAd;;AAMA,OAAG;AACDJ,MAAAA,IAAI,GAAG,KAAKD,cAAL,CAAoBC,IAApB,EAA0BjB,QAA1B,EAAoCrG,QAApC,EAA8CuH,OAA9C,EAAuDvT,KAAvD,CAAP;AACAA,MAAAA,KAAK,CAAC2xD,eAAN,GAAwB,KAAxB;AACD,KAHD,QAGS,CAAC3xD,KAAK,CAAC0T,IAHhB;;AAKA,WAAOJ,IAAP;AACD;;AAEDD,EAAAA,cAAc,CAACC,IAAD,EAAOjB,QAAP,EAAiBrG,QAAjB,EAA2BuH,OAA3B,EAAoCvT,KAApC,EAA2C;AACvD,QAAI,CAACuT,OAAD,IAAY,KAAK8K,GAAL,CAASvnB,OAAO,CAACuB,WAAjB,CAAhB,EAA+C;AAC7C,aAAO,KAAKu5D,SAAL,CAAet+C,IAAf,EAAqBjB,QAArB,EAA+BrG,QAA/B,EAAyCuH,OAAzC,EAAkDvT,KAAlD,CAAP;AACD,KAFD,MAEO,IAAI,KAAK/B,KAAL,CAAWnH,OAAO,CAAC8B,SAAnB,CAAJ,EAAmC;AACxC,aAAO,KAAKmuD,6BAAL,CAAmCzzC,IAAnC,EAAyCjB,QAAzC,EAAmDrG,QAAnD,EAA6DhM,KAA7D,CAAP;AACD;;AAED,QAAI8S,QAAQ,GAAG,KAAf;;AAEA,QAAI,KAAK7U,KAAL,CAAWnH,OAAO,CAAC0B,WAAnB,CAAJ,EAAqC;AACnC,UAAI+a,OAAO,IAAI,KAAKsL,iBAAL,OAA6B,EAA5C,EAAgD;AAC9C7e,QAAAA,KAAK,CAAC0T,IAAN,GAAa,IAAb;AACA,eAAOJ,IAAP;AACD;;AAEDtT,MAAAA,KAAK,CAACwT,mBAAN,GAA4BV,QAAQ,GAAG,IAAvC;AACA,WAAKmD,IAAL;AACD;;AAED,QAAI,CAAC1C,OAAD,IAAY,KAAKtV,KAAL,CAAWnH,OAAO,CAACkB,MAAnB,CAAhB,EAA4C;AAC1C,aAAO,KAAK65D,+BAAL,CAAqCv+C,IAArC,EAA2CjB,QAA3C,EAAqDrG,QAArD,EAA+DhM,KAA/D,EAAsE8S,QAAtE,CAAP;AACD,KAFD,MAEO,IAAIA,QAAQ,IAAI,KAAK7U,KAAL,CAAWnH,OAAO,CAACQ,QAAnB,CAAZ,IAA4C,KAAK+mB,GAAL,CAASvnB,OAAO,CAACwB,GAAjB,CAAhD,EAAuE;AAC5E,aAAO,KAAKw5D,WAAL,CAAiBx+C,IAAjB,EAAuBjB,QAAvB,EAAiCrG,QAAjC,EAA2ChM,KAA3C,EAAkD8S,QAAlD,CAAP;AACD,KAFM,MAEA;AACL9S,MAAAA,KAAK,CAAC0T,IAAN,GAAa,IAAb;AACA,aAAOJ,IAAP;AACD;AACF;;AAEDw+C,EAAAA,WAAW,CAACx+C,IAAD,EAAOjB,QAAP,EAAiBrG,QAAjB,EAA2BhM,KAA3B,EAAkC8S,QAAlC,EAA4C;AACrD,UAAM/T,IAAI,GAAG,KAAK6P,WAAL,CAAiByD,QAAjB,EAA2BrG,QAA3B,CAAb;AACA,UAAM0F,QAAQ,GAAG,KAAK2M,GAAL,CAASvnB,OAAO,CAACQ,QAAjB,CAAjB;AACAyH,IAAAA,IAAI,CAAC41C,MAAL,GAAcrhC,IAAd;AACAvU,IAAAA,IAAI,CAAC2S,QAAL,GAAgBA,QAAhB;AACA,UAAMta,WAAW,GAAG,CAACsa,QAAD,IAAa,KAAKzT,KAAL,CAAWnH,OAAO,CAACM,WAAnB,CAAb,IAAgD,KAAK4I,KAAL,CAAWzK,KAA/E;AACA,UAAMk1B,QAAQ,GAAG/Y,QAAQ,GAAG,KAAK8f,eAAL,EAAH,GAA4Bp6B,WAAW,GAAG,KAAK26D,gBAAL,EAAH,GAA6B,KAAKjgC,eAAL,CAAqB,IAArB,CAA7F;;AAEA,QAAI16B,WAAW,KAAK,KAApB,EAA2B;AACzB,UAAI2H,IAAI,CAAC41C,MAAL,CAAY3zC,IAAZ,KAAqB,OAAzB,EAAkC;AAChC,aAAKsL,KAAL,CAAW+F,QAAX,EAAqB1Q,aAAa,CAACuH,iBAAnC;AACD;;AAED,WAAKqc,UAAL,CAAgBO,cAAhB,CAA+B1uB,WAA/B,EAA4CqzB,QAAQ,CAAChtB,KAArD;AACD;;AAEDsB,IAAAA,IAAI,CAAC0rB,QAAL,GAAgBA,QAAhB;;AAEA,QAAI/Y,QAAJ,EAAc;AACZ,WAAK0X,MAAL,CAAYtyB,OAAO,CAACW,QAApB;AACD;;AAED,QAAIuI,KAAK,CAACwT,mBAAV,EAA+B;AAC7BzU,MAAAA,IAAI,CAAC+T,QAAL,GAAgBA,QAAhB;AACA,aAAO,KAAKnB,UAAL,CAAgB5S,IAAhB,EAAsB,0BAAtB,CAAP;AACD,KAHD,MAGO;AACL,aAAO,KAAK4S,UAAL,CAAgB5S,IAAhB,EAAsB,kBAAtB,CAAP;AACD;AACF;;AAED6yD,EAAAA,SAAS,CAACt+C,IAAD,EAAOjB,QAAP,EAAiBrG,QAAjB,EAA2BuH,OAA3B,EAAoCvT,KAApC,EAA2C;AAClD,UAAMjB,IAAI,GAAG,KAAK6P,WAAL,CAAiByD,QAAjB,EAA2BrG,QAA3B,CAAb;AACAjN,IAAAA,IAAI,CAAC41C,MAAL,GAAcrhC,IAAd;AACAvU,IAAAA,IAAI,CAACgU,MAAL,GAAc,KAAKi/C,eAAL,EAAd;AACAhyD,IAAAA,KAAK,CAAC0T,IAAN,GAAa,IAAb;AACA,WAAO,KAAK8sB,eAAL,CAAqB,KAAK7uB,UAAL,CAAgB5S,IAAhB,EAAsB,gBAAtB,CAArB,EAA8DsT,QAA9D,EAAwErG,QAAxE,EAAkFuH,OAAlF,CAAP;AACD;;AAEDs+C,EAAAA,+BAA+B,CAACv+C,IAAD,EAAOjB,QAAP,EAAiBrG,QAAjB,EAA2BhM,KAA3B,EAAkC8S,QAAlC,EAA4C;AACzE,UAAM+yC,yBAAyB,GAAG,KAAK7lD,KAAL,CAAWyb,sBAA7C;AACA,QAAInJ,mBAAmB,GAAG,IAA1B;AACA,SAAKtS,KAAL,CAAWyb,sBAAX,GAAoC,IAApC;AACA,SAAKxF,IAAL;AACA,QAAIlX,IAAI,GAAG,KAAK6P,WAAL,CAAiByD,QAAjB,EAA2BrG,QAA3B,CAAX;AACAjN,IAAAA,IAAI,CAACgU,MAAL,GAAcO,IAAd;;AAEA,QAAItT,KAAK,CAAC2xD,eAAV,EAA2B;AACzB,WAAKtmC,eAAL,CAAqBjR,KAArB,CAA2B8M,kBAAkB,EAA7C;AACA5U,MAAAA,mBAAmB,GAAG,IAAIkZ,gBAAJ,EAAtB;AACD;;AAED,QAAIxrB,KAAK,CAACwT,mBAAV,EAA+B;AAC7BzU,MAAAA,IAAI,CAAC+T,QAAL,GAAgBA,QAAhB;AACD;;AAED,QAAIA,QAAJ,EAAc;AACZ/T,MAAAA,IAAI,CAACmC,SAAL,GAAiB,KAAKu/B,4BAAL,CAAkC3pC,OAAO,CAACmB,MAA1C,CAAjB;AACD,KAFD,MAEO;AACL8G,MAAAA,IAAI,CAACmC,SAAL,GAAiB,KAAKu/B,4BAAL,CAAkC3pC,OAAO,CAACmB,MAA1C,EAAkDqb,IAAI,CAACtS,IAAL,KAAc,QAAhE,EAA0EsS,IAAI,CAACtS,IAAL,KAAc,OAAxF,EAAiGjC,IAAjG,EAAuGuT,mBAAvG,CAAjB;AACD;;AAED,SAAKO,oBAAL,CAA0B9T,IAA1B,EAAgCiB,KAAK,CAACwT,mBAAtC;;AAEA,QAAIxT,KAAK,CAAC2xD,eAAN,IAAyB,KAAKvyB,qBAAL,EAAzB,IAAyD,CAACtsB,QAA9D,EAAwE;AACtE9S,MAAAA,KAAK,CAAC0T,IAAN,GAAa,IAAb;AACA,WAAK2X,eAAL,CAAqBtE,iBAArB;AACA,WAAKsE,eAAL,CAAqBhR,IAArB;AACAtb,MAAAA,IAAI,GAAG,KAAKogC,iCAAL,CAAuC,KAAKvwB,WAAL,CAAiByD,QAAjB,EAA2BrG,QAA3B,CAAvC,EAA6EjN,IAA7E,CAAP;AACD,KALD,MAKO;AACL,UAAIiB,KAAK,CAAC2xD,eAAV,EAA2B;AACzB,aAAKxnC,qBAAL,CAA2B7X,mBAA3B,EAAgD,IAAhD;AACA,aAAK+Y,eAAL,CAAqBhR,IAArB;AACD;;AAED,WAAKnH,qBAAL,CAA2BnU,IAA3B;AACD;;AAED,SAAKiB,KAAL,CAAWyb,sBAAX,GAAoCoqC,yBAApC;AACA,WAAO9mD,IAAP;AACD;;AAEDmU,EAAAA,qBAAqB,CAACnU,IAAD,EAAO09B,mBAAP,EAA4B;AAC/C,SAAKoxB,oBAAL,CAA0B9uD,IAAI,CAACmC,SAA/B,EAA0Cu7B,mBAA1C;AACD;;AAEDsqB,EAAAA,6BAA6B,CAACzzC,IAAD,EAAOjB,QAAP,EAAiBrG,QAAjB,EAA2BhM,KAA3B,EAAkC;AAC7D,UAAMjB,IAAI,GAAG,KAAK6P,WAAL,CAAiByD,QAAjB,EAA2BrG,QAA3B,CAAb;AACAjN,IAAAA,IAAI,CAACkzD,GAAL,GAAW3+C,IAAX;AACAvU,IAAAA,IAAI,CAACmzD,KAAL,GAAa,KAAKvR,aAAL,CAAmB,IAAnB,CAAb;;AAEA,QAAI3gD,KAAK,CAACwT,mBAAV,EAA+B;AAC7B,WAAKlH,KAAL,CAAW+F,QAAX,EAAqB1Q,aAAa,CAACsF,0BAAnC;AACD;;AAED,WAAO,KAAK0K,UAAL,CAAgB5S,IAAhB,EAAsB,0BAAtB,CAAP;AACD;;AAED8nD,EAAAA,oBAAoB,CAACvzC,IAAD,EAAO;AACzB,WAAOA,IAAI,CAACtS,IAAL,KAAc,YAAd,IAA8BsS,IAAI,CAAC7c,IAAL,KAAc,OAA5C,IAAuD,KAAKuJ,KAAL,CAAWoM,UAAX,KAA0BkH,IAAI,CAAC5V,GAAtF,IAA6F,CAAC,KAAKorB,kBAAL,EAA9F,IAA2HxV,IAAI,CAAC5V,GAAL,GAAW4V,IAAI,CAAC7V,KAAhB,KAA0B,CAArJ,IAA0J6V,IAAI,CAAC7V,KAAL,KAAe,KAAKuC,KAAL,CAAWsb,gBAA3L;AACD;;AAEDzI,EAAAA,oBAAoB,CAAC9T,IAAD,EAAO+T,QAAP,EAAiB;AACnC,QAAI/T,IAAI,CAACgU,MAAL,CAAY/R,IAAZ,KAAqB,QAAzB,EAAmC;AACjC,UAAIjC,IAAI,CAACmC,SAAL,CAAevB,MAAf,KAA0B,CAA9B,EAAiC;AAC/B;AACE,cAAI,CAAC,KAAKnB,SAAL,CAAe,kBAAf,CAAL,EAAyC;AACvC,iBAAK4hB,YAAL,CAAkB,kBAAlB;AACD;AACF;AACF;;AAED,UAAIrhB,IAAI,CAACmC,SAAL,CAAevB,MAAf,KAA0B,CAA1B,IAA+BZ,IAAI,CAACmC,SAAL,CAAevB,MAAf,GAAwB,CAA3D,EAA8D;AAC5D,aAAK2M,KAAL,CAAWvN,IAAI,CAACtB,KAAhB,EAAuBkE,aAAa,CAAC4C,eAArC,EAAsD,KAAK/F,SAAL,CAAe,kBAAf,KAAsC,KAAKA,SAAL,CAAe,kBAAf,CAAtC,GAA2E,sBAA3E,GAAoG,cAA1J;AACD,OAFD,MAEO;AACL,aAAK,MAAMmvD,GAAX,IAAkB5uD,IAAI,CAACmC,SAAvB,EAAkC;AAChC,cAAIysD,GAAG,CAAC3sD,IAAJ,KAAa,eAAjB,EAAkC;AAChC,iBAAKsL,KAAL,CAAWqhD,GAAG,CAAClwD,KAAf,EAAsBkE,aAAa,CAAC8C,wBAApC;AACD;AACF;AACF;AACF;;AAED,WAAO,KAAKkN,UAAL,CAAgB5S,IAAhB,EAAsB+T,QAAQ,GAAG,wBAAH,GAA8B,gBAA5D,CAAP;AACD;;AAED2tB,EAAAA,4BAA4B,CAAC7D,KAAD,EAAQu1B,aAAR,EAAuBC,gBAAvB,EAAyCC,YAAzC,EAAuD//C,mBAAvD,EAA4E;AACtG,UAAM87C,IAAI,GAAG,EAAb;AACA,QAAIr2B,KAAK,GAAG,IAAZ;AACA,UAAMu6B,6BAA6B,GAAG,KAAKtyD,KAAL,CAAWoc,0BAAjD;AACA,SAAKpc,KAAL,CAAWoc,0BAAX,GAAwC,KAAxC;;AAEA,WAAO,CAAC,KAAKiC,GAAL,CAASue,KAAT,CAAR,EAAyB;AACvB,UAAI7E,KAAJ,EAAW;AACTA,QAAAA,KAAK,GAAG,KAAR;AACD,OAFD,MAEO;AACL,aAAK3O,MAAL,CAAYtyB,OAAO,CAACoB,KAApB;;AAEA,YAAI,KAAK+F,KAAL,CAAW2+B,KAAX,CAAJ,EAAuB;AACrB,cAAIu1B,aAAa,IAAI,CAAC,KAAK3zD,SAAL,CAAe,kBAAf,CAAlB,IAAwD,CAAC,KAAKA,SAAL,CAAe,kBAAf,CAA7D,EAAiG;AAC/F,iBAAK8N,KAAL,CAAW,KAAKtM,KAAL,CAAWiM,YAAtB,EAAoCtK,aAAa,CAAC2C,+BAAlD;AACD;;AAED,cAAI+tD,YAAJ,EAAkB;AAChB,iBAAKxiD,QAAL,CAAcwiD,YAAd,EAA4B,eAA5B,EAA6C,KAAKryD,KAAL,CAAWiM,YAAxD;AACD;;AAED,eAAKgK,IAAL;AACA;AACD;AACF;;AAEDm4C,MAAAA,IAAI,CAACnuD,IAAL,CAAU,KAAKsyD,iBAAL,CAAuB,KAAvB,EAA8BjgD,mBAA9B,EAAmD8/C,gBAAnD,CAAV;AACD;;AAED,SAAKpyD,KAAL,CAAWoc,0BAAX,GAAwCk2C,6BAAxC;AACA,WAAOlE,IAAP;AACD;;AAEDhvB,EAAAA,qBAAqB,GAAG;AACtB,WAAO,KAAKnhC,KAAL,CAAWnH,OAAO,CAAC2B,KAAnB,KAA6B,CAAC,KAAKqwB,kBAAL,EAArC;AACD;;AAEDqW,EAAAA,iCAAiC,CAACpgC,IAAD,EAAO8lB,IAAP,EAAa;AAC5C,QAAI2tC,WAAJ;;AAEA,SAAKlxD,iCAAL,CAAuCujB,IAAvC;AACA,SAAKuE,MAAL,CAAYtyB,OAAO,CAAC2B,KAApB;AACA,SAAKuoC,oBAAL,CAA0BjiC,IAA1B,EAAgC8lB,IAAI,CAAC3jB,SAArC,EAAgD,IAAhD,EAAsD,CAACsxD,WAAW,GAAG3tC,IAAI,CAAC/V,KAApB,KAA8B,IAA9B,GAAqC,KAAK,CAA1C,GAA8C0jD,WAAW,CAAC13B,aAAhH;AACA17B,IAAAA,gBAAgB,CAACL,IAAD,EAAO8lB,IAAI,CAACxlB,aAAZ,CAAhB;AACAD,IAAAA,gBAAgB,CAACL,IAAD,EAAO8lB,IAAI,CAAC9R,MAAL,CAAY9T,gBAAnB,CAAhB;AACA,WAAOF,IAAP;AACD;;AAEDizD,EAAAA,eAAe,GAAG;AAChB,UAAM3/C,QAAQ,GAAG,KAAKrS,KAAL,CAAWvC,KAA5B;AACA,UAAMuO,QAAQ,GAAG,KAAKhM,KAAL,CAAWgM,QAA5B;AACA,WAAO,KAAKw0B,eAAL,CAAqB,KAAKtN,aAAL,EAArB,EAA2C7gB,QAA3C,EAAqDrG,QAArD,EAA+D,IAA/D,CAAP;AACD;;AAEDknB,EAAAA,aAAa,CAAC5gB,mBAAD,EAAsB;AACjC,QAAIvT,IAAJ;;AAEA,YAAQ,KAAKiB,KAAL,CAAWgB,IAAnB;AACE,WAAKlK,OAAO,CAAC+E,MAAb;AACE,eAAO,KAAK42D,UAAL,EAAP;;AAEF,WAAK37D,OAAO,CAACmF,OAAb;AACE8C,QAAAA,IAAI,GAAG,KAAKyS,SAAL,EAAP;AACA,aAAKyE,IAAL;;AAEA,YAAI,KAAKhY,KAAL,CAAWnH,OAAO,CAACwB,GAAnB,CAAJ,EAA6B;AAC3B,iBAAO,KAAKo6D,uBAAL,CAA6B3zD,IAA7B,CAAP;AACD;;AAED,YAAI,CAAC,KAAKd,KAAL,CAAWnH,OAAO,CAACkB,MAAnB,CAAL,EAAiC;AAC/B,eAAKsU,KAAL,CAAW,KAAKtM,KAAL,CAAWiM,YAAtB,EAAoCtK,aAAa,CAAC6I,iBAAlD;AACD;;AAED,eAAO,KAAKmH,UAAL,CAAgB5S,IAAhB,EAAsB,QAAtB,CAAP;;AAEF,WAAKjI,OAAO,CAAC8E,KAAb;AACEmD,QAAAA,IAAI,GAAG,KAAKyS,SAAL,EAAP;AACA,aAAKyE,IAAL;AACA,eAAO,KAAKtE,UAAL,CAAgB5S,IAAhB,EAAsB,gBAAtB,CAAP;;AAEF,WAAKjI,OAAO,CAACL,IAAb;AACE;AACE,cAAI,KAAK6xB,YAAL,CAAkB,QAAlB,KAA+B,KAAKzJ,iBAAL,OAA6B,GAA5D,IAAmE,CAAC,KAAKmK,qBAAL,EAAxE,EAAsG;AACpG,mBAAO,KAAK2pC,qBAAL,EAAP;AACD;;AAED,gBAAMpyB,UAAU,GAAG,KAAKvgC,KAAL,CAAWsb,gBAAX,KAAgC,KAAKtb,KAAL,CAAWvC,KAA9D;AACA,gBAAM+e,WAAW,GAAG,KAAKxc,KAAL,CAAWwc,WAA/B;AACA,gBAAMxL,EAAE,GAAG,KAAK8gB,eAAL,EAAX;;AAEA,cAAI,CAACtV,WAAD,IAAgBxL,EAAE,CAACva,IAAH,KAAY,OAA5B,IAAuC,CAAC,KAAKqyB,kBAAL,EAA5C,EAAuE;AACrE,gBAAI,KAAK7qB,KAAL,CAAWnH,OAAO,CAACmE,SAAnB,CAAJ,EAAmC;AACjC,mBAAKqG,iCAAL,CAAuC0P,EAAvC;AACA,mBAAKiF,IAAL;AACA,qBAAO,KAAK28C,aAAL,CAAmB,KAAKh/C,eAAL,CAAqB5C,EAArB,CAAnB,EAA6C9R,SAA7C,EAAwD,IAAxD,CAAP;AACD,aAJD,MAIO,IAAI,KAAKjB,KAAL,CAAWnH,OAAO,CAACL,IAAnB,CAAJ,EAA8B;AACnC,kBAAI,KAAKooB,iBAAL,OAA6B,EAAjC,EAAqC;AACnC,uBAAO,KAAKg0C,4BAAL,CAAkC,KAAKj/C,eAAL,CAAqB5C,EAArB,CAAlC,CAAP;AACD,eAFD,MAEO;AACL,uBAAOA,EAAP;AACD;AACF,aANM,MAMA,IAAI,KAAK/S,KAAL,CAAWnH,OAAO,CAAC+D,GAAnB,CAAJ,EAA6B;AAClC,mBAAKyG,iCAAL,CAAuC0P,EAAvC;AACA,qBAAO,KAAK8hD,OAAL,CAAa,KAAKl/C,eAAL,CAAqB5C,EAArB,CAAb,EAAuC,IAAvC,CAAP;AACD;AACF;;AAED,cAAIuvB,UAAU,IAAI,KAAKtiC,KAAL,CAAWnH,OAAO,CAAC2B,KAAnB,CAAd,IAA2C,CAAC,KAAKqwB,kBAAL,EAAhD,EAA2E;AACzE,iBAAK7S,IAAL;AACA,mBAAO,KAAK+qB,oBAAL,CAA0B,KAAKptB,eAAL,CAAqB5C,EAArB,CAA1B,EAAoD,CAACA,EAAD,CAApD,EAA0D,KAA1D,CAAP;AACD;;AAED,iBAAOA,EAAP;AACD;;AAEH,WAAKla,OAAO,CAAC+D,GAAb;AACE;AACE,iBAAO,KAAKi4D,OAAL,CAAa,KAAKthD,SAAL,EAAb,EAA+B,KAA/B,CAAP;AACD;;AAEH,WAAK1a,OAAO,CAACuD,KAAb;AACA,WAAKvD,OAAO,CAACqC,WAAb;AACE;AACE,eAAKsoB,UAAL;AACA,iBAAO,KAAKlU,kBAAL,CAAwB,KAAKvN,KAAL,CAAWzK,KAAnC,CAAP;AACD;;AAEH,WAAKuB,OAAO,CAACC,GAAb;AACE,eAAO,KAAKsX,mBAAL,CAAyB,KAAKrO,KAAL,CAAWzK,KAApC,CAAP;;AAEF,WAAKuB,OAAO,CAACE,MAAb;AACE,eAAO,KAAK6W,kBAAL,CAAwB,KAAK7N,KAAL,CAAWzK,KAAnC,CAAP;;AAEF,WAAKuB,OAAO,CAACG,OAAb;AACE,eAAO,KAAKiX,mBAAL,CAAyB,KAAKlO,KAAL,CAAWzK,KAApC,CAAP;;AAEF,WAAKuB,OAAO,CAACK,MAAb;AACE,eAAO,KAAKiX,kBAAL,CAAwB,KAAKpO,KAAL,CAAWzK,KAAnC,CAAP;;AAEF,WAAKuB,OAAO,CAACoF,KAAb;AACE,eAAO,KAAKoS,gBAAL,EAAP;;AAEF,WAAKxX,OAAO,CAACqF,KAAb;AACE,eAAO,KAAKoS,mBAAL,CAAyB,IAAzB,CAAP;;AAEF,WAAKzX,OAAO,CAACsF,MAAb;AACE,eAAO,KAAKmS,mBAAL,CAAyB,KAAzB,CAAP;;AAEF,WAAKzX,OAAO,CAACkB,MAAb;AACE;AACE,gBAAMuoC,UAAU,GAAG,KAAKvgC,KAAL,CAAWsb,gBAAX,KAAgC,KAAKtb,KAAL,CAAWvC,KAA9D;AACA,iBAAO,KAAK6iC,kCAAL,CAAwCC,UAAxC,CAAP;AACD;;AAEH,WAAKzpC,OAAO,CAACU,WAAb;AACA,WAAKV,OAAO,CAACS,YAAb;AACE;AACE,iBAAO,KAAKolC,cAAL,CAAoB,KAAK38B,KAAL,CAAWgB,IAAX,KAAoBlK,OAAO,CAACU,WAA5B,GAA0CV,OAAO,CAACY,WAAlD,GAAgEZ,OAAO,CAACW,QAA5F,EAAsG,KAAtG,EAA6G,IAA7G,EAAmH6a,mBAAnH,CAAP;AACD;;AAEH,WAAKxb,OAAO,CAACQ,QAAb;AACE;AACE,iBAAO,KAAKqlC,cAAL,CAAoB7lC,OAAO,CAACW,QAA5B,EAAsC,IAAtC,EAA4C,KAA5C,EAAmD6a,mBAAnD,CAAP;AACD;;AAEH,WAAKxb,OAAO,CAACc,SAAb;AACA,WAAKd,OAAO,CAACe,UAAb;AACE;AACE,iBAAO,KAAKo2D,eAAL,CAAqB,KAAKjuD,KAAL,CAAWgB,IAAX,KAAoBlK,OAAO,CAACc,SAA5B,GAAwCd,OAAO,CAACiB,SAAhD,GAA4DjB,OAAO,CAACgB,MAAzF,EAAiG,KAAjG,EAAwG,IAAxG,EAA8Gwa,mBAA9G,CAAP;AACD;;AAEH,WAAKxb,OAAO,CAACa,MAAb;AACE;AACE,iBAAO,KAAKs2D,eAAL,CAAqBn3D,OAAO,CAACgB,MAA7B,EAAqC,KAArC,EAA4C,KAA5C,EAAmDwa,mBAAnD,CAAP;AACD;;AAEH,WAAKxb,OAAO,CAACmE,SAAb;AACE,eAAO,KAAK83D,2BAAL,EAAP;;AAEF,WAAKj8D,OAAO,CAACgC,EAAb;AACE,aAAKk6D,eAAL;;AAEF,WAAKl8D,OAAO,CAACgF,MAAb;AACEiD,QAAAA,IAAI,GAAG,KAAKyS,SAAL,EAAP;AACA,aAAKi5C,cAAL,CAAoB1rD,IAApB;AACA,eAAO,KAAKqmD,UAAL,CAAgBrmD,IAAhB,EAAsB,KAAtB,CAAP;;AAEF,WAAKjI,OAAO,CAAC6E,IAAb;AACE,eAAO,KAAKs3D,mBAAL,EAAP;;AAEF,WAAKn8D,OAAO,CAAC8B,SAAb;AACE,eAAO,KAAK+nD,aAAL,CAAmB,KAAnB,CAAP;;AAEF,WAAK7pD,OAAO,CAACuB,WAAb;AACE;AACE0G,UAAAA,IAAI,GAAG,KAAKyS,SAAL,EAAP;AACA,eAAKyE,IAAL;AACAlX,UAAAA,IAAI,CAAC41C,MAAL,GAAc,IAAd;AACA,gBAAM5hC,MAAM,GAAGhU,IAAI,CAACgU,MAAL,GAAc,KAAKi/C,eAAL,EAA7B;;AAEA,cAAIj/C,MAAM,CAAC/R,IAAP,KAAgB,kBAApB,EAAwC;AACtC,mBAAO,KAAK2Q,UAAL,CAAgB5S,IAAhB,EAAsB,gBAAtB,CAAP;AACD,WAFD,MAEO;AACL,kBAAM,KAAKuN,KAAL,CAAWyG,MAAM,CAACtV,KAAlB,EAAyBkE,aAAa,CAAC0I,eAAvC,CAAN;AACD;AACF;;AAEH,WAAKvT,OAAO,CAACM,WAAb;AACE;AACE,gBAAM;AACJ7B,YAAAA,KADI;AAEJkI,YAAAA;AAFI,cAGF,KAAKuC,KAHT;AAIAjB,UAAAA,IAAI,GAAG,KAAKgzD,gBAAL,EAAP;;AAEA,cAAI,KAAK9zD,KAAL,CAAWnH,OAAO,CAACuF,GAAnB,CAAJ,EAA6B;AAC3B,iBAAKkpB,UAAL,CAAgBO,cAAhB,CAA+BvwB,KAA/B,EAAsCkI,KAAtC;AACD,WAFD,MAEO;AACL,iBAAK6O,KAAL,CAAW7O,KAAX,EAAkBkE,aAAa,CAACsG,mBAAhC,EAAqD1S,KAArD;AACD;;AAED,iBAAOwJ,IAAP;AACD;;AAEH,WAAKjI,OAAO,CAACsC,YAAb;AACE,YAAI,KAAKuF,eAAL,CAAqB,kBAArB,EAAyC,UAAzC,MAAyD,MAAzD,IAAmE,KAAKA,eAAL,CAAqB,kBAArB,EAAyC,YAAzC,MAA2D,GAAlI,EAAuI;AACrI,eAAKqB,KAAL,CAAWzK,KAAX,GAAmB,GAAnB;AACA,eAAKyK,KAAL,CAAWgB,IAAX,GAAkBlK,OAAO,CAACqD,MAA1B;AACA,eAAK6F,KAAL,CAAW+L,GAAX;AACA,eAAK/L,KAAL,CAAWtC,GAAX;AACA,eAAKsC,KAAL,CAAWmM,MAAX,CAAkB5O,MAAlB;AACD,SAND,MAMO;AACL,gBAAM,KAAK8qB,UAAL,EAAN;AACD;;AAEH,WAAKvxB,OAAO,CAACqD,MAAb;AACA,WAAKrD,OAAO,CAACiC,IAAb;AACE;AACE,gBAAMm6D,YAAY,GAAG,KAAKv0D,eAAL,CAAqB,kBAArB,EAAyC,UAAzC,CAArB;;AAEA,cAAIu0D,YAAJ,EAAkB;AAChBn0D,YAAAA,IAAI,GAAG,KAAKyS,SAAL,EAAP;AACA,kBAAM/T,KAAK,GAAG,KAAKuC,KAAL,CAAWvC,KAAzB;AACA,kBAAM01D,SAAS,GAAG,KAAKnzD,KAAL,CAAWgB,IAA7B;AACA,iBAAKiV,IAAL;AACA,mBAAO,KAAKm9C,oBAAL,CAA0Br0D,IAA1B,EAAgCtB,KAAhC,EAAuCy1D,YAAvC,EAAqDC,SAArD,CAAP;AACD;AACF;;AAEH,WAAKr8D,OAAO,CAACkD,UAAb;AACE;AACE,cAAI,KAAKgG,KAAL,CAAWzK,KAAX,KAAqB,GAAzB,EAA8B;AAC5B,kBAAM89D,WAAW,GAAG,KAAKv1D,KAAL,CAAWw1D,WAAX,CAAuB,KAAK30C,cAAL,EAAvB,CAApB;;AAEA,gBAAI9J,iBAAiB,CAACw+C,WAAD,CAAjB,IAAkCA,WAAW,KAAK,EAAtD,EAA0D;AACxD,mBAAK7pC,eAAL,CAAqB,CAAC,KAAD,EAAQ,MAAR,EAAgB,YAAhB,CAArB;AACD;AACF;AACF;;AAEH;AACE,cAAM,KAAKnB,UAAL,EAAN;AA5MJ;AA8MD;;AAED+qC,EAAAA,oBAAoB,CAACr0D,IAAD,EAAOtB,KAAP,EAAcy1D,YAAd,EAA4BC,SAA5B,EAAuC;AACzD,QAAI,KAAKI,+BAAL,CAAqCL,YAArC,EAAmDz1D,KAAnD,EAA0D01D,SAA1D,CAAJ,EAA0E;AACxE,UAAIK,QAAJ;;AAEA,UAAIN,YAAY,KAAK,OAArB,EAA8B;AAC5BM,QAAAA,QAAQ,GAAG,+BAAX;AACD,OAFD,MAEO;AACLA,QAAAA,QAAQ,GAAG,gBAAX;AACD;;AAED,UAAI,CAAC,KAAKC,uCAAL,EAAL,EAAqD;AACnD,YAAIP,YAAY,KAAK,OAArB,EAA8B;AAC5B,eAAK5mD,KAAL,CAAW7O,KAAX,EAAkBkE,aAAa,CAACoG,sBAAhC;AACD,SAFD,MAEO;AACL,eAAKuE,KAAL,CAAW7O,KAAX,EAAkBkE,aAAa,CAAC6F,gBAAhC;AACD;AACF;;AAED,WAAKksD,sBAAL;AACA,aAAO,KAAK/hD,UAAL,CAAgB5S,IAAhB,EAAsBy0D,QAAtB,CAAP;AACD,KAnBD,MAmBO;AACL,YAAM,KAAKlnD,KAAL,CAAW7O,KAAX,EAAkBkE,aAAa,CAAC8F,0BAAhC,EAA4D0rD,SAAS,CAACn9D,KAAtE,CAAN;AACD;AACF;;AAEDu9D,EAAAA,+BAA+B,CAACL,YAAD,EAAez1D,KAAf,EAAsB01D,SAAtB,EAAiC;AAC9D,YAAQD,YAAR;AACE,WAAK,MAAL;AACE;AACE,gBAAMS,gBAAgB,GAAG,KAAKh1D,eAAL,CAAqB,kBAArB,EAAyC,YAAzC,CAAzB;AACA,iBAAOw0D,SAAS,CAACn9D,KAAV,KAAoB29D,gBAA3B;AACD;;AAEH,WAAK,OAAL;AACE,eAAOR,SAAS,KAAKr8D,OAAO,CAACiC,IAA7B;;AAEF;AACE,cAAM,KAAKuT,KAAL,CAAW7O,KAAX,EAAkBkE,aAAa,CAAC4F,0BAAhC,CAAN;AAXJ;AAaD;;AAEDsrD,EAAAA,4BAA4B,CAAC9zD,IAAD,EAAO;AACjC,SAAKosB,SAAL,CAAe/Q,KAAf,CAAqB4N,aAAa,CAAC,IAAD,EAAO,KAAKmD,SAAL,CAAetD,QAAtB,CAAlC;AACA,UAAM1mB,MAAM,GAAG,CAAC,KAAK2wB,eAAL,EAAD,CAAf;AACA,SAAK3G,SAAL,CAAe9Q,IAAf;;AAEA,QAAI,KAAK0O,qBAAL,EAAJ,EAAkC;AAChC,WAAKzc,KAAL,CAAW,KAAKtM,KAAL,CAAW+L,GAAtB,EAA2BpK,aAAa,CAACmE,yBAAzC;AACD;;AAED,SAAKsjB,MAAL,CAAYtyB,OAAO,CAAC2B,KAApB;AACA,SAAKuoC,oBAAL,CAA0BjiC,IAA1B,EAAgCoC,MAAhC,EAAwC,IAAxC;AACA,WAAOpC,IAAP;AACD;;AAED+zD,EAAAA,OAAO,CAAC/zD,IAAD,EAAOqQ,OAAP,EAAgB;AACrB,SAAKgR,YAAL,CAAkB,eAAlB;;AAEA,QAAIhR,OAAJ,EAAa;AACX,WAAKgR,YAAL,CAAkB,oBAAlB;AACD;;AAEDrhB,IAAAA,IAAI,CAACihC,KAAL,GAAa5wB,OAAb;AACA,SAAK6G,IAAL;AACA,UAAM0U,SAAS,GAAG,KAAK3qB,KAAL,CAAWqc,MAA7B;AACA,SAAKrc,KAAL,CAAWqc,MAAX,GAAoB,EAApB;;AAEA,QAAIjN,OAAJ,EAAa;AACX,WAAK+b,SAAL,CAAe/Q,KAAf,CAAqBkN,WAArB;AACAvoB,MAAAA,IAAI,CAACqR,IAAL,GAAY,KAAKm6C,UAAL,EAAZ;AACA,WAAKp/B,SAAL,CAAe9Q,IAAf;AACD,KAJD,MAIO;AACLtb,MAAAA,IAAI,CAACqR,IAAL,GAAY,KAAKm6C,UAAL,EAAZ;AACD;;AAED,SAAKvqD,KAAL,CAAWqc,MAAX,GAAoBsO,SAApB;AACA,WAAO,KAAKhZ,UAAL,CAAgB5S,IAAhB,EAAsB,cAAtB,CAAP;AACD;;AAED0zD,EAAAA,UAAU,GAAG;AACX,UAAM1zD,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACA,SAAKyE,IAAL;;AAEA,QAAI,KAAKhY,KAAL,CAAWnH,OAAO,CAACkB,MAAnB,KAA8B,CAAC,KAAKsiB,KAAL,CAAWjJ,gBAA1C,IAA8D,CAAC,KAAK3a,OAAL,CAAao2D,uBAAhF,EAAyG;AACvG,WAAKxgD,KAAL,CAAWvN,IAAI,CAACtB,KAAhB,EAAuBkE,aAAa,CAACsH,eAArC;AACD,KAFD,MAEO,IAAI,CAAC,KAAKqR,KAAL,CAAWZ,UAAZ,IAA0B,CAAC,KAAKhjB,OAAL,CAAao2D,uBAA5C,EAAqE;AAC1E,WAAKxgD,KAAL,CAAWvN,IAAI,CAACtB,KAAhB,EAAuBkE,aAAa,CAACuI,eAArC;AACD;;AAED,QAAI,CAAC,KAAKjM,KAAL,CAAWnH,OAAO,CAACkB,MAAnB,CAAD,IAA+B,CAAC,KAAKiG,KAAL,CAAWnH,OAAO,CAACQ,QAAnB,CAAhC,IAAgE,CAAC,KAAK2G,KAAL,CAAWnH,OAAO,CAACwB,GAAnB,CAArE,EAA8F;AAC5F,WAAKgU,KAAL,CAAWvN,IAAI,CAACtB,KAAhB,EAAuBkE,aAAa,CAACiJ,gBAArC;AACD;;AAED,WAAO,KAAK+G,UAAL,CAAgB5S,IAAhB,EAAsB,OAAtB,CAAP;AACD;;AAED8R,EAAAA,qBAAqB,CAAC6sB,oBAAD,EAAuB;AAC1C,UAAMk2B,SAAS,GAAG,KAAK31D,KAAL,CAAWnH,OAAO,CAACM,WAAnB,CAAlB;;AAEA,QAAIw8D,SAAJ,EAAe;AACb,UAAI,CAACl2B,oBAAL,EAA2B;AACzB,aAAKpxB,KAAL,CAAW,KAAKtM,KAAL,CAAWvC,KAAX,GAAmB,CAA9B,EAAiCkE,aAAa,CAACqI,sBAA/C;AACD;;AAED,aAAO,KAAK+nD,gBAAL,EAAP;AACD,KAND,MAMO;AACL,aAAO,KAAKjgC,eAAL,CAAqB,IAArB,CAAP;AACD;AACF;;AAEDigC,EAAAA,gBAAgB,GAAG;AACjB,UAAMhzD,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACA,UAAMR,EAAE,GAAG,KAAKpC,WAAL,CAAiB,KAAK5O,KAAL,CAAWvC,KAAX,GAAmB,CAApC,EAAuC,IAAIL,QAAJ,CAAa,KAAK4C,KAAL,CAAWqb,OAAxB,EAAiC,KAAKrb,KAAL,CAAWvC,KAAX,GAAmB,CAAnB,GAAuB,KAAKuC,KAAL,CAAWhC,SAAnE,CAAvC,CAAX;AACA,UAAMvH,IAAI,GAAG,KAAKuJ,KAAL,CAAWzK,KAAxB;AACA,SAAK0gB,IAAL;AACAlX,IAAAA,IAAI,CAACiS,EAAL,GAAU,KAAKsnB,gBAAL,CAAsBtnB,EAAtB,EAA0Bva,IAA1B,CAAV;AACA,WAAO,KAAKkb,UAAL,CAAgB5S,IAAhB,EAAsB,aAAtB,CAAP;AACD;;AAEDg0D,EAAAA,2BAA2B,GAAG;AAC5B,UAAMh0D,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACA,SAAKyE,IAAL;;AAEA,QAAI,KAAKkV,SAAL,CAAetD,QAAf,IAA2B,KAAK5pB,KAAL,CAAWnH,OAAO,CAACwB,GAAnB,CAA/B,EAAwD;AACtD,YAAMu7D,IAAI,GAAG,KAAKv7B,gBAAL,CAAsB,KAAK1kB,eAAL,CAAqB7U,IAArB,CAAtB,EAAkD,UAAlD,CAAb;AACA,WAAKkX,IAAL;AACA,aAAO,KAAK69C,iBAAL,CAAuB/0D,IAAvB,EAA6B80D,IAA7B,EAAmC,MAAnC,CAAP;AACD;;AAED,WAAO,KAAKjB,aAAL,CAAmB7zD,IAAnB,CAAP;AACD;;AAED+0D,EAAAA,iBAAiB,CAAC/0D,IAAD,EAAO80D,IAAP,EAAaE,YAAb,EAA2B;AAC1Ch1D,IAAAA,IAAI,CAAC80D,IAAL,GAAYA,IAAZ;;AAEA,QAAIA,IAAI,CAACp9D,IAAL,KAAc,UAAd,IAA4Bs9D,YAAY,KAAK,MAAjD,EAAyD;AACvD,UAAI,KAAKzrC,YAAL,CAAkByrC,YAAlB,CAAJ,EAAqC;AACnC,aAAK3zC,YAAL,CAAkB,cAAlB;AACD,OAFD,MAEO,IAAI,CAAC,KAAK5hB,SAAL,CAAe,cAAf,CAAL,EAAqC;AAC1C,aAAK6pB,UAAL;AACD;AACF;;AAED,UAAM7L,WAAW,GAAG,KAAKxc,KAAL,CAAWwc,WAA/B;AACAzd,IAAAA,IAAI,CAAC0rB,QAAL,GAAgB,KAAKqH,eAAL,CAAqB,IAArB,CAAhB;;AAEA,QAAI/yB,IAAI,CAAC0rB,QAAL,CAAch0B,IAAd,KAAuBs9D,YAAvB,IAAuCv3C,WAA3C,EAAwD;AACtD,WAAKlQ,KAAL,CAAWvN,IAAI,CAAC0rB,QAAL,CAAchtB,KAAzB,EAAgCkE,aAAa,CAAC8I,uBAA9C,EAAuEopD,IAAI,CAACp9D,IAA5E,EAAkFs9D,YAAlF;AACD;;AAED,WAAO,KAAKpiD,UAAL,CAAgB5S,IAAhB,EAAsB,cAAtB,CAAP;AACD;;AAED2zD,EAAAA,uBAAuB,CAAC3zD,IAAD,EAAO;AAC5B,UAAMiS,EAAE,GAAG,KAAKsnB,gBAAL,CAAsB,KAAK1kB,eAAL,CAAqB7U,IAArB,CAAtB,EAAkD,QAAlD,CAAX;AACA,SAAKkX,IAAL;;AAEA,QAAI,KAAKqS,YAAL,CAAkB,MAAlB,CAAJ,EAA+B;AAC7B,UAAI,CAAC,KAAK5S,QAAV,EAAoB;AAClB,aAAKpJ,KAAL,CAAW0E,EAAE,CAACvT,KAAd,EAAqB4N,6BAA6B,CAACC,uBAAnD;AACD;;AAED,WAAKhN,iBAAL,GAAyB,IAAzB;AACD;;AAED,WAAO,KAAKw1D,iBAAL,CAAuB/0D,IAAvB,EAA6BiS,EAA7B,EAAiC,MAAjC,CAAP;AACD;;AAEDqnB,EAAAA,kBAAkB,CAAC9iC,KAAD,EAAQyL,IAAR,EAAcjC,IAAd,EAAoB;AACpC,SAAK8Q,QAAL,CAAc9Q,IAAd,EAAoB,UAApB,EAAgCxJ,KAAhC;AACA,SAAKsa,QAAL,CAAc9Q,IAAd,EAAoB,KAApB,EAA2B,KAAKjB,KAAL,CAAWoR,KAAX,CAAiBnQ,IAAI,CAACtB,KAAtB,EAA6B,KAAKuC,KAAL,CAAWtC,GAAxC,CAA3B;AACAqB,IAAAA,IAAI,CAACxJ,KAAL,GAAaA,KAAb;AACA,SAAK0gB,IAAL;AACA,WAAO,KAAKtE,UAAL,CAAgB5S,IAAhB,EAAsBiC,IAAtB,CAAP;AACD;;AAEDmN,EAAAA,YAAY,CAAC5Y,KAAD,EAAQyL,IAAR,EAAc;AACxB,UAAMjC,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACA,WAAO,KAAK6mB,kBAAL,CAAwB9iC,KAAxB,EAA+ByL,IAA/B,EAAqCjC,IAArC,CAAP;AACD;;AAEDqP,EAAAA,kBAAkB,CAAC7Y,KAAD,EAAQ;AACxB,WAAO,KAAK4Y,YAAL,CAAkB5Y,KAAlB,EAAyB,eAAzB,CAAP;AACD;;AAED8Y,EAAAA,mBAAmB,CAAC9Y,KAAD,EAAQ;AACzB,WAAO,KAAK4Y,YAAL,CAAkB5Y,KAAlB,EAAyB,gBAAzB,CAAP;AACD;;AAEDsY,EAAAA,kBAAkB,CAACtY,KAAD,EAAQ;AACxB,WAAO,KAAK4Y,YAAL,CAAkB5Y,KAAlB,EAAyB,eAAzB,CAAP;AACD;;AAED2Y,EAAAA,mBAAmB,CAAC3Y,KAAD,EAAQ;AACzB,WAAO,KAAK4Y,YAAL,CAAkB5Y,KAAlB,EAAyB,gBAAzB,CAAP;AACD;;AAEDgY,EAAAA,kBAAkB,CAAChY,KAAD,EAAQ;AACxB,UAAMwJ,IAAI,GAAG,KAAKoP,YAAL,CAAkB5Y,KAAK,CAACA,KAAxB,EAA+B,eAA/B,CAAb;AACAwJ,IAAAA,IAAI,CAACyO,OAAL,GAAejY,KAAK,CAACiY,OAArB;AACAzO,IAAAA,IAAI,CAAC0O,KAAL,GAAalY,KAAK,CAACkY,KAAnB;AACA,WAAO1O,IAAP;AACD;;AAEDwP,EAAAA,mBAAmB,CAAChZ,KAAD,EAAQ;AACzB,UAAMwJ,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACAzS,IAAAA,IAAI,CAACxJ,KAAL,GAAaA,KAAb;AACA,SAAK0gB,IAAL;AACA,WAAO,KAAKtE,UAAL,CAAgB5S,IAAhB,EAAsB,gBAAtB,CAAP;AACD;;AAEDuP,EAAAA,gBAAgB,GAAG;AACjB,UAAMvP,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACA,SAAKyE,IAAL;AACA,WAAO,KAAKtE,UAAL,CAAgB5S,IAAhB,EAAsB,aAAtB,CAAP;AACD;;AAEDuhC,EAAAA,kCAAkC,CAACC,UAAD,EAAa;AAC7C,UAAMluB,QAAQ,GAAG,KAAKrS,KAAL,CAAWvC,KAA5B;AACA,UAAMuO,QAAQ,GAAG,KAAKhM,KAAL,CAAWgM,QAA5B;AACA,QAAIkR,GAAJ;AACA,SAAKjH,IAAL;AACA,SAAKoV,eAAL,CAAqBjR,KAArB,CAA2B6M,iBAAiB,EAA5C;AACA,UAAM4+B,yBAAyB,GAAG,KAAK7lD,KAAL,CAAWyb,sBAA7C;AACA,UAAM62C,6BAA6B,GAAG,KAAKtyD,KAAL,CAAWoc,0BAAjD;AACA,SAAKpc,KAAL,CAAWyb,sBAAX,GAAoC,IAApC;AACA,SAAKzb,KAAL,CAAWoc,0BAAX,GAAwC,KAAxC;AACA,UAAM43C,aAAa,GAAG,KAAKh0D,KAAL,CAAWvC,KAAjC;AACA,UAAMw2D,aAAa,GAAG,KAAKj0D,KAAL,CAAWgM,QAAjC;AACA,UAAMswB,QAAQ,GAAG,EAAjB;AACA,UAAMhqB,mBAAmB,GAAG,IAAIkZ,gBAAJ,EAA5B;AACA,QAAIuM,KAAK,GAAG,IAAZ;AACA,QAAIm8B,WAAJ;AACA,QAAIC,kBAAJ;;AAEA,WAAO,CAAC,KAAKl2D,KAAL,CAAWnH,OAAO,CAACmB,MAAnB,CAAR,EAAoC;AAClC,UAAI8/B,KAAJ,EAAW;AACTA,QAAAA,KAAK,GAAG,KAAR;AACD,OAFD,MAEO;AACL,aAAK3O,MAAL,CAAYtyB,OAAO,CAACoB,KAApB,EAA2Boa,mBAAmB,CAACiY,kBAApB,KAA2C,CAAC,CAA5C,GAAgD,IAAhD,GAAuDjY,mBAAmB,CAACiY,kBAAtG;;AAEA,YAAI,KAAKtsB,KAAL,CAAWnH,OAAO,CAACmB,MAAnB,CAAJ,EAAgC;AAC9Bk8D,UAAAA,kBAAkB,GAAG,KAAKn0D,KAAL,CAAWvC,KAAhC;AACA;AACD;AACF;;AAED,UAAI,KAAKQ,KAAL,CAAWnH,OAAO,CAAC6B,QAAnB,CAAJ,EAAkC;AAChC,cAAMy7D,kBAAkB,GAAG,KAAKp0D,KAAL,CAAWvC,KAAtC;AACA,cAAM42D,kBAAkB,GAAG,KAAKr0D,KAAL,CAAWgM,QAAtC;AACAkoD,QAAAA,WAAW,GAAG,KAAKl0D,KAAL,CAAWvC,KAAzB;AACA6+B,QAAAA,QAAQ,CAACr8B,IAAT,CAAc,KAAKi7B,cAAL,CAAoB,KAAK8yB,gBAAL,EAApB,EAA6CoG,kBAA7C,EAAiEC,kBAAjE,CAAd;AACA,aAAKlL,mBAAL,CAAyB,EAAzB;AACA;AACD,OAPD,MAOO;AACL7sB,QAAAA,QAAQ,CAACr8B,IAAT,CAAc,KAAKs6B,uBAAL,CAA6BjoB,mBAA7B,EAAkD,KAAK4oB,cAAvD,CAAd;AACD;AACF;;AAED,UAAMo5B,WAAW,GAAG,KAAKt0D,KAAL,CAAWoM,UAA/B;AACA,UAAMmoD,WAAW,GAAG,KAAKv0D,KAAL,CAAWqM,aAA/B;AACA,SAAK+c,MAAL,CAAYtyB,OAAO,CAACmB,MAApB;AACA,SAAK+H,KAAL,CAAWyb,sBAAX,GAAoCoqC,yBAApC;AACA,SAAK7lD,KAAL,CAAWoc,0BAAX,GAAwCk2C,6BAAxC;AACA,QAAIkC,SAAS,GAAG,KAAK5lD,WAAL,CAAiByD,QAAjB,EAA2BrG,QAA3B,CAAhB;;AAEA,QAAIu0B,UAAU,IAAI,KAAKL,gBAAL,CAAsB5D,QAAtB,CAAd,KAAkDk4B,SAAS,GAAG,KAAKv0B,UAAL,CAAgBu0B,SAAhB,CAA9D,CAAJ,EAA+F;AAC7F,WAAKnpC,eAAL,CAAqBtE,iBAArB;AACA,WAAKsE,eAAL,CAAqBhR,IAArB;AACA,WAAK2mB,oBAAL,CAA0BwzB,SAA1B,EAAqCl4B,QAArC,EAA+C,KAA/C;AACA,aAAOk4B,SAAP;AACD;;AAED,SAAKnpC,eAAL,CAAqBhR,IAArB;;AAEA,QAAI,CAACiiB,QAAQ,CAAC38B,MAAd,EAAsB;AACpB,WAAK0oB,UAAL,CAAgB,KAAKroB,KAAL,CAAWiM,YAA3B;AACD;;AAED,QAAIkoD,kBAAJ,EAAwB,KAAK9rC,UAAL,CAAgB8rC,kBAAhB;AACxB,QAAID,WAAJ,EAAiB,KAAK7rC,UAAL,CAAgB6rC,WAAhB;AACjB,SAAK/pC,qBAAL,CAA2B7X,mBAA3B,EAAgD,IAAhD;AACA,SAAKu7C,oBAAL,CAA0BvxB,QAA1B,EAAoC,IAApC;;AAEA,QAAIA,QAAQ,CAAC38B,MAAT,GAAkB,CAAtB,EAAyB;AACvBud,MAAAA,GAAG,GAAG,KAAKtO,WAAL,CAAiBolD,aAAjB,EAAgCC,aAAhC,CAAN;AACA/2C,MAAAA,GAAG,CAACqyC,WAAJ,GAAkBjzB,QAAlB;AACA,WAAK3qB,UAAL,CAAgBuL,GAAhB,EAAqB,oBAArB;AACAA,MAAAA,GAAG,CAACxf,GAAJ,GAAU42D,WAAV;AACAp3C,MAAAA,GAAG,CAACnd,GAAJ,CAAQrC,GAAR,GAAc62D,WAAd;AACD,KAND,MAMO;AACLr3C,MAAAA,GAAG,GAAGof,QAAQ,CAAC,CAAD,CAAd;AACD;;AAED,QAAI,CAAC,KAAK5lC,OAAL,CAAas2D,8BAAlB,EAAkD;AAChD,WAAKn9C,QAAL,CAAcqN,GAAd,EAAmB,eAAnB,EAAoC,IAApC;AACA,WAAKrN,QAAL,CAAcqN,GAAd,EAAmB,YAAnB,EAAiC7K,QAAjC;AACA,aAAO6K,GAAP;AACD;;AAED,UAAMu3C,eAAe,GAAG,KAAK7lD,WAAL,CAAiByD,QAAjB,EAA2BrG,QAA3B,CAAxB;AACAyoD,IAAAA,eAAe,CAAC5lD,UAAhB,GAA6BqO,GAA7B;AACA,SAAKvL,UAAL,CAAgB8iD,eAAhB,EAAiC,yBAAjC;AACA,WAAOA,eAAP;AACD;;AAEDv0B,EAAAA,gBAAgB,CAAC/+B,MAAD,EAAS;AACvB,WAAO,CAAC,KAAK2nB,kBAAL,EAAR;AACD;;AAEDmX,EAAAA,UAAU,CAAClhC,IAAD,EAAO;AACf,QAAI,KAAKsf,GAAL,CAASvnB,OAAO,CAAC2B,KAAjB,CAAJ,EAA6B;AAC3B,aAAOsG,IAAP;AACD;AACF;;AAEDm8B,EAAAA,cAAc,CAACn8B,IAAD,EAAOsT,QAAP,EAAiBrG,QAAjB,EAA2B;AACvC,WAAOjN,IAAP;AACD;;AAEDk0D,EAAAA,mBAAmB,GAAG;AACpB,UAAMl0D,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACA,SAAKyE,IAAL;;AAEA,QAAI,KAAKhY,KAAL,CAAWnH,OAAO,CAACwB,GAAnB,CAAJ,EAA6B;AAC3B,YAAMu7D,IAAI,GAAG,KAAKv7B,gBAAL,CAAsB,KAAK1kB,eAAL,CAAqB7U,IAArB,CAAtB,EAAkD,KAAlD,CAAb;AACA,WAAKkX,IAAL;AACA,YAAMy+C,QAAQ,GAAG,KAAKZ,iBAAL,CAAuB/0D,IAAvB,EAA6B80D,IAA7B,EAAmC,QAAnC,CAAjB;;AAEA,UAAI,CAAC,KAAKv5C,KAAL,CAAWP,kBAAZ,IAAkC,CAAC,KAAKO,KAAL,CAAWV,OAAlD,EAA2D;AACzD,aAAKtN,KAAL,CAAWooD,QAAQ,CAACj3D,KAApB,EAA2BkE,aAAa,CAACmI,mBAAzC;AACD;;AAED,aAAO4qD,QAAP;AACD;;AAED,WAAO,KAAKC,QAAL,CAAc51D,IAAd,CAAP;AACD;;AAED41D,EAAAA,QAAQ,CAAC51D,IAAD,EAAO;AACbA,IAAAA,IAAI,CAACgU,MAAL,GAAc,KAAKi/C,eAAL,EAAd;;AAEA,QAAIjzD,IAAI,CAACgU,MAAL,CAAY/R,IAAZ,KAAqB,QAAzB,EAAmC;AACjC,WAAKsL,KAAL,CAAWvN,IAAI,CAACgU,MAAL,CAAYtV,KAAvB,EAA8BkE,aAAa,CAAC6C,0BAA5C;AACD,KAFD,MAEO,IAAI,KAAKsP,eAAL,CAAqB/U,IAAI,CAACgU,MAA1B,CAAJ,EAAuC;AAC5C,WAAKzG,KAAL,CAAW,KAAKtM,KAAL,CAAWoM,UAAtB,EAAkCzK,aAAa,CAACqF,qBAAhD;AACD,KAFM,MAEA,IAAI,KAAKqX,GAAL,CAASvnB,OAAO,CAAC0B,WAAjB,CAAJ,EAAmC;AACxC,WAAK8T,KAAL,CAAW,KAAKtM,KAAL,CAAWvC,KAAtB,EAA6BkE,aAAa,CAACqF,qBAA3C;AACD;;AAED,SAAK85B,iBAAL,CAAuB/hC,IAAvB;AACA,WAAO,KAAK4S,UAAL,CAAgB5S,IAAhB,EAAsB,eAAtB,CAAP;AACD;;AAED+hC,EAAAA,iBAAiB,CAAC/hC,IAAD,EAAO;AACtB,QAAI,KAAKsf,GAAL,CAASvnB,OAAO,CAACkB,MAAjB,CAAJ,EAA8B;AAC5B,YAAM+X,IAAI,GAAG,KAAK6kD,aAAL,CAAmB99D,OAAO,CAACmB,MAA3B,CAAb;AACA,WAAKukC,gBAAL,CAAsBzsB,IAAtB;AACAhR,MAAAA,IAAI,CAACmC,SAAL,GAAiB6O,IAAjB;AACD,KAJD,MAIO;AACLhR,MAAAA,IAAI,CAACmC,SAAL,GAAiB,EAAjB;AACD;AACF;;AAED2zD,EAAAA,oBAAoB,CAACC,QAAD,EAAW;AAC7B,UAAMlG,IAAI,GAAG,KAAKp9C,SAAL,EAAb;;AAEA,QAAI,KAAKxR,KAAL,CAAWzK,KAAX,KAAqB,IAAzB,EAA+B;AAC7B,UAAI,CAACu/D,QAAL,EAAe;AACb,aAAKxoD,KAAL,CAAW,KAAKtM,KAAL,CAAWvC,KAAX,GAAmB,CAA9B,EAAiCkE,aAAa,CAACoD,6BAA/C;AACD;AACF;;AAED6pD,IAAAA,IAAI,CAACr5D,KAAL,GAAa;AACXyZ,MAAAA,GAAG,EAAE,KAAKlR,KAAL,CAAWoR,KAAX,CAAiB,KAAKlP,KAAL,CAAWvC,KAA5B,EAAmC,KAAKuC,KAAL,CAAWtC,GAA9C,EAAmDgP,OAAnD,CAA2D,QAA3D,EAAqE,IAArE,CADM;AAEXqoD,MAAAA,MAAM,EAAE,KAAK/0D,KAAL,CAAWzK;AAFR,KAAb;AAIA,SAAK0gB,IAAL;AACA24C,IAAAA,IAAI,CAACoG,IAAL,GAAY,KAAK/2D,KAAL,CAAWnH,OAAO,CAAC8B,SAAnB,CAAZ;AACA,WAAO,KAAK+Y,UAAL,CAAgBi9C,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAEDjO,EAAAA,aAAa,CAACmU,QAAD,EAAW;AACtB,UAAM/1D,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACA,SAAKyE,IAAL;AACAlX,IAAAA,IAAI,CAACwwD,WAAL,GAAmB,EAAnB;AACA,QAAI0F,MAAM,GAAG,KAAKJ,oBAAL,CAA0BC,QAA1B,CAAb;AACA/1D,IAAAA,IAAI,CAACm2D,MAAL,GAAc,CAACD,MAAD,CAAd;;AAEA,WAAO,CAACA,MAAM,CAACD,IAAf,EAAqB;AACnB,WAAK5rC,MAAL,CAAYtyB,OAAO,CAAC+B,YAApB;AACAkG,MAAAA,IAAI,CAACwwD,WAAL,CAAiBtvD,IAAjB,CAAsB,KAAK2gD,yBAAL,EAAtB;AACA,WAAKx3B,MAAL,CAAYtyB,OAAO,CAACgB,MAApB;AACAiH,MAAAA,IAAI,CAACm2D,MAAL,CAAYj1D,IAAZ,CAAiBg1D,MAAM,GAAG,KAAKJ,oBAAL,CAA0BC,QAA1B,CAA1B;AACD;;AAED,SAAK7+C,IAAL;AACA,WAAO,KAAKtE,UAAL,CAAgB5S,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAED6hD,EAAAA,yBAAyB,GAAG;AAC1B,WAAO,KAAKpvB,eAAL,EAAP;AACD;;AAEDy8B,EAAAA,eAAe,CAACrxB,KAAD,EAAQ3qB,SAAR,EAAmB88C,QAAnB,EAA6Bz8C,mBAA7B,EAAkD;AAC/D,QAAIy8C,QAAJ,EAAc;AACZ,WAAK3uC,YAAL,CAAkB,gBAAlB;AACD;;AAED,UAAMkyC,6BAA6B,GAAG,KAAKtyD,KAAL,CAAWoc,0BAAjD;AACA,SAAKpc,KAAL,CAAWoc,0BAAX,GAAwC,KAAxC;AACA,UAAM+4C,QAAQ,GAAG//D,MAAM,CAACg3B,MAAP,CAAc,IAAd,CAAjB;AACA,QAAI2L,KAAK,GAAG,IAAZ;AACA,UAAMh5B,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACAzS,IAAAA,IAAI,CAACkC,UAAL,GAAkB,EAAlB;AACA,SAAKgV,IAAL;;AAEA,WAAO,CAAC,KAAKhY,KAAL,CAAW2+B,KAAX,CAAR,EAA2B;AACzB,UAAI7E,KAAJ,EAAW;AACTA,QAAAA,KAAK,GAAG,KAAR;AACD,OAFD,MAEO;AACL,aAAK3O,MAAL,CAAYtyB,OAAO,CAACoB,KAApB;;AAEA,YAAI,KAAK+F,KAAL,CAAW2+B,KAAX,CAAJ,EAAuB;AACrB,eAAK/sB,QAAL,CAAc9Q,IAAd,EAAoB,eAApB,EAAqC,KAAKiB,KAAL,CAAWiM,YAAhD;AACA;AACD;AACF;;AAED,YAAM+F,IAAI,GAAG,KAAKojD,uBAAL,CAA6BnjD,SAA7B,EAAwCK,mBAAxC,CAAb;;AAEA,UAAI,CAACL,SAAL,EAAgB;AACd,aAAK68C,UAAL,CAAgB98C,IAAhB,EAAsB+8C,QAAtB,EAAgCoG,QAAhC,EAA0C7iD,mBAA1C;AACD;;AAED,UAAIy8C,QAAQ,IAAI,CAAC,KAAKz/C,gBAAL,CAAsB0C,IAAtB,CAAb,IAA4CA,IAAI,CAAChR,IAAL,KAAc,eAA9D,EAA+E;AAC7E,aAAKsL,KAAL,CAAW0F,IAAI,CAACvU,KAAhB,EAAuBkE,aAAa,CAAC+D,qBAArC;AACD;;AAED,UAAIsM,IAAI,CAACG,SAAT,EAAoB;AAClB,aAAKtC,QAAL,CAAcmC,IAAd,EAAoB,WAApB,EAAiC,IAAjC;AACD;;AAEDjT,MAAAA,IAAI,CAACkC,UAAL,CAAgBhB,IAAhB,CAAqB+R,IAArB;AACD;;AAED,SAAKiE,IAAL;AACA,SAAKjW,KAAL,CAAWoc,0BAAX,GAAwCk2C,6BAAxC;AACA,QAAItxD,IAAI,GAAG,kBAAX;;AAEA,QAAIiR,SAAJ,EAAe;AACbjR,MAAAA,IAAI,GAAG,eAAP;AACD,KAFD,MAEO,IAAI+tD,QAAJ,EAAc;AACnB/tD,MAAAA,IAAI,GAAG,kBAAP;AACD;;AAED,WAAO,KAAK2Q,UAAL,CAAgB5S,IAAhB,EAAsBiC,IAAtB,CAAP;AACD;;AAEDq0D,EAAAA,wBAAwB,CAACrjD,IAAD,EAAO;AAC7B,WAAO,CAACA,IAAI,CAACN,QAAN,IAAkBM,IAAI,CAACY,GAAL,CAAS5R,IAAT,KAAkB,YAApC,KAAqD,KAAKwpB,qBAAL,MAAgC,KAAKvsB,KAAL,CAAWnH,OAAO,CAACQ,QAAnB,CAAhC,IAAgE,KAAK2G,KAAL,CAAWnH,OAAO,CAACsD,IAAnB,CAArH,CAAP;AACD;;AAEDg7D,EAAAA,uBAAuB,CAACnjD,SAAD,EAAYK,mBAAZ,EAAiC;AACtD,QAAI0zC,UAAU,GAAG,EAAjB;;AAEA,QAAI,KAAK/nD,KAAL,CAAWnH,OAAO,CAACgC,EAAnB,CAAJ,EAA4B;AAC1B,UAAI,KAAK0F,SAAL,CAAe,YAAf,CAAJ,EAAkC;AAChC,aAAK8N,KAAL,CAAW,KAAKtM,KAAL,CAAWvC,KAAtB,EAA6BkE,aAAa,CAACgJ,4BAA3C;AACD;;AAED,aAAO,KAAK1M,KAAL,CAAWnH,OAAO,CAACgC,EAAnB,CAAP,EAA+B;AAC7BktD,QAAAA,UAAU,CAAC/lD,IAAX,CAAgB,KAAKouD,cAAL,EAAhB;AACD;AACF;;AAED,UAAMr8C,IAAI,GAAG,KAAKR,SAAL,EAAb;AACA,QAAIhB,WAAW,GAAG,KAAlB;AACA,QAAIpB,OAAO,GAAG,KAAd;AACA,QAAI8C,UAAU,GAAG,KAAjB;AACA,QAAIG,QAAJ;AACA,QAAIrG,QAAJ;;AAEA,QAAI,KAAK/N,KAAL,CAAWnH,OAAO,CAAC6B,QAAnB,CAAJ,EAAkC;AAChC,UAAIqtD,UAAU,CAACrmD,MAAf,EAAuB,KAAK0oB,UAAL;;AAEvB,UAAIpW,SAAJ,EAAe;AACb,aAAKgE,IAAL;AACAjE,QAAAA,IAAI,CAACqlB,QAAL,GAAgB,KAAKvF,eAAL,EAAhB;AACA,aAAKq3B,mBAAL,CAAyB,GAAzB;AACA,eAAO,KAAKx3C,UAAL,CAAgBK,IAAhB,EAAsB,aAAtB,CAAP;AACD;;AAED,aAAO,KAAK87C,WAAL,EAAP;AACD;;AAED,QAAI9H,UAAU,CAACrmD,MAAf,EAAuB;AACrBqS,MAAAA,IAAI,CAACg0C,UAAL,GAAkBA,UAAlB;AACAA,MAAAA,UAAU,GAAG,EAAb;AACD;;AAEDh0C,IAAAA,IAAI,CAACxC,MAAL,GAAc,KAAd;;AAEA,QAAIyC,SAAS,IAAIK,mBAAjB,EAAsC;AACpCD,MAAAA,QAAQ,GAAG,KAAKrS,KAAL,CAAWvC,KAAtB;AACAuO,MAAAA,QAAQ,GAAG,KAAKhM,KAAL,CAAWgM,QAAtB;AACD;;AAED,QAAI,CAACiG,SAAL,EAAgB;AACdzB,MAAAA,WAAW,GAAG,KAAK6N,GAAL,CAASvnB,OAAO,CAACsD,IAAjB,CAAd;AACD;;AAED,UAAMoiB,WAAW,GAAG,KAAKxc,KAAL,CAAWwc,WAA/B;AACA,UAAM5J,GAAG,GAAG,KAAK6qB,iBAAL,CAAuBzrB,IAAvB,EAA6B,KAA7B,CAAZ;;AAEA,QAAI,CAACC,SAAD,IAAc,CAACzB,WAAf,IAA8B,CAACgM,WAA/B,IAA8C,KAAK64C,wBAAL,CAA8BrjD,IAA9B,CAAlD,EAAuF;AACrF,YAAMsjD,OAAO,GAAG1iD,GAAG,CAACnc,IAApB;;AAEA,UAAI6+D,OAAO,KAAK,OAAZ,IAAuB,CAAC,KAAKvsC,qBAAL,EAA5B,EAA0D;AACxD3Z,QAAAA,OAAO,GAAG,IAAV;AACA,aAAK9N,iCAAL,CAAuCsR,GAAvC;AACApC,QAAAA,WAAW,GAAG,KAAK6N,GAAL,CAASvnB,OAAO,CAACsD,IAAjB,CAAd;AACA,aAAKqjC,iBAAL,CAAuBzrB,IAAvB,EAA6B,KAA7B;AACD;;AAED,UAAIsjD,OAAO,KAAK,KAAZ,IAAqBA,OAAO,KAAK,KAArC,EAA4C;AAC1CpjD,QAAAA,UAAU,GAAG,IAAb;AACA,aAAK5Q,iCAAL,CAAuCsR,GAAvC;AACAZ,QAAAA,IAAI,CAACP,IAAL,GAAY6jD,OAAZ;;AAEA,YAAI,KAAKr3D,KAAL,CAAWnH,OAAO,CAACsD,IAAnB,CAAJ,EAA8B;AAC5BoW,UAAAA,WAAW,GAAG,IAAd;AACA,eAAKlE,KAAL,CAAW,KAAKtM,KAAL,CAAW+L,GAAtB,EAA2BpK,aAAa,CAACE,mBAAzC,EAA8DyzD,OAA9D;AACA,eAAKr/C,IAAL;AACD;;AAED,aAAKwnB,iBAAL,CAAuBzrB,IAAvB,EAA6B,KAA7B;AACD;AACF;;AAED,SAAK2rB,iBAAL,CAAuB3rB,IAAvB,EAA6BK,QAA7B,EAAuCrG,QAAvC,EAAiDwE,WAAjD,EAA8DpB,OAA9D,EAAuE6C,SAAvE,EAAkFC,UAAlF,EAA8FI,mBAA9F;AACA,WAAON,IAAP;AACD;;AAEDq3C,EAAAA,iCAAiC,CAAC75C,MAAD,EAAS;AACxC,WAAOA,MAAM,CAACiC,IAAP,KAAgB,KAAhB,GAAwB,CAAxB,GAA4B,CAAnC;AACD;;AAEDlC,EAAAA,4BAA4B,CAACC,MAAD,EAAS;AACnC,WAAOA,MAAM,CAACrO,MAAd;AACD;;AAEDq8B,EAAAA,uBAAuB,CAAChuB,MAAD,EAAS;AAC9B,QAAI+lD,OAAJ;;AAEA,UAAM/9B,UAAU,GAAG,KAAK6xB,iCAAL,CAAuC75C,MAAvC,CAAnB;AACA,UAAMrO,MAAM,GAAG,KAAKoO,4BAAL,CAAkCC,MAAlC,CAAf;AACA,UAAM/R,KAAK,GAAG+R,MAAM,CAAC/R,KAArB;;AAEA,QAAI0D,MAAM,CAACxB,MAAP,KAAkB63B,UAAtB,EAAkC;AAChC,UAAIhoB,MAAM,CAACiC,IAAP,KAAgB,KAApB,EAA2B;AACzB,aAAKnF,KAAL,CAAW7O,KAAX,EAAkBkE,aAAa,CAACU,cAAhC;AACD,OAFD,MAEO;AACL,aAAKiK,KAAL,CAAW7O,KAAX,EAAkBkE,aAAa,CAACW,cAAhC;AACD;AACF;;AAED,QAAIkN,MAAM,CAACiC,IAAP,KAAgB,KAAhB,IAAyB,CAAC,CAAC8jD,OAAO,GAAGp0D,MAAM,CAACA,MAAM,CAACxB,MAAP,GAAgB,CAAjB,CAAjB,KAAyC,IAAzC,GAAgD,KAAK,CAArD,GAAyD41D,OAAO,CAACv0D,IAAlE,MAA4E,aAAzG,EAAwH;AACtH,WAAKsL,KAAL,CAAW7O,KAAX,EAAkBkE,aAAa,CAACY,sBAAhC;AACD;AACF;;AAEDwP,EAAAA,iBAAiB,CAACC,IAAD,EAAOxB,WAAP,EAAoBpB,OAApB,EAA6B6C,SAA7B,EAAwCC,UAAxC,EAAoD;AACnE,QAAIA,UAAJ,EAAgB;AACd,WAAKvB,WAAL,CAAiBqB,IAAjB,EAAuBxB,WAAvB,EAAoC,KAApC,EAA2C,KAA3C,EAAkD,KAAlD,EAAyD,cAAzD;AACA,WAAKgtB,uBAAL,CAA6BxrB,IAA7B;AACA,aAAOA,IAAP;AACD;;AAED,QAAI5C,OAAO,IAAIoB,WAAX,IAA0B,KAAKvS,KAAL,CAAWnH,OAAO,CAACkB,MAAnB,CAA9B,EAA0D;AACxD,UAAIia,SAAJ,EAAe,KAAKoW,UAAL;AACfrW,MAAAA,IAAI,CAACP,IAAL,GAAY,QAAZ;AACAO,MAAAA,IAAI,CAACxC,MAAL,GAAc,IAAd;AACA,aAAO,KAAKmB,WAAL,CAAiBqB,IAAjB,EAAuBxB,WAAvB,EAAoCpB,OAApC,EAA6C,KAA7C,EAAoD,KAApD,EAA2D,cAA3D,CAAP;AACD;AACF;;AAEDgD,EAAAA,mBAAmB,CAACJ,IAAD,EAAOK,QAAP,EAAiBrG,QAAjB,EAA2BiG,SAA3B,EAAsCK,mBAAtC,EAA2D;AAC5EN,IAAAA,IAAI,CAACG,SAAL,GAAiB,KAAjB;;AAEA,QAAI,KAAKkM,GAAL,CAASvnB,OAAO,CAACsB,KAAjB,CAAJ,EAA6B;AAC3B4Z,MAAAA,IAAI,CAACzc,KAAL,GAAa0c,SAAS,GAAG,KAAK4rB,iBAAL,CAAuB,KAAK79B,KAAL,CAAWvC,KAAlC,EAAyC,KAAKuC,KAAL,CAAWgM,QAApD,CAAH,GAAmE,KAAKuuB,uBAAL,CAA6BjoB,mBAA7B,CAAzF;AACA,aAAO,KAAKX,UAAL,CAAgBK,IAAhB,EAAsB,gBAAtB,CAAP;AACD;;AAED,QAAI,CAACA,IAAI,CAACN,QAAN,IAAkBM,IAAI,CAACY,GAAL,CAAS5R,IAAT,KAAkB,YAAxC,EAAsD;AACpD,WAAK89B,iBAAL,CAAuB9sB,IAAI,CAACY,GAAL,CAASnc,IAAhC,EAAsCub,IAAI,CAACY,GAAL,CAASnV,KAA/C,EAAsD,IAAtD,EAA4D,KAA5D;;AAEA,UAAIwU,SAAJ,EAAe;AACbD,QAAAA,IAAI,CAACzc,KAAL,GAAa,KAAKsoC,iBAAL,CAAuBxrB,QAAvB,EAAiCrG,QAAjC,EAA2CkgB,eAAe,CAACla,IAAI,CAACY,GAAN,CAA1D,CAAb;AACD,OAFD,MAEO,IAAI,KAAK3U,KAAL,CAAWnH,OAAO,CAACmC,EAAnB,KAA0BqZ,mBAA9B,EAAmD;AACxD,YAAIA,mBAAmB,CAAC+X,eAApB,KAAwC,CAAC,CAA7C,EAAgD;AAC9C/X,UAAAA,mBAAmB,CAAC+X,eAApB,GAAsC,KAAKrqB,KAAL,CAAWvC,KAAjD;AACD;;AAEDuU,QAAAA,IAAI,CAACzc,KAAL,GAAa,KAAKsoC,iBAAL,CAAuBxrB,QAAvB,EAAiCrG,QAAjC,EAA2CkgB,eAAe,CAACla,IAAI,CAACY,GAAN,CAA1D,CAAb;AACD,OANM,MAMA;AACLZ,QAAAA,IAAI,CAACzc,KAAL,GAAa22B,eAAe,CAACla,IAAI,CAACY,GAAN,CAA5B;AACD;;AAEDZ,MAAAA,IAAI,CAACG,SAAL,GAAiB,IAAjB;AACA,aAAO,KAAKR,UAAL,CAAgBK,IAAhB,EAAsB,gBAAtB,CAAP;AACD;AACF;;AAED2rB,EAAAA,iBAAiB,CAAC3rB,IAAD,EAAOK,QAAP,EAAiBrG,QAAjB,EAA2BwE,WAA3B,EAAwCpB,OAAxC,EAAiD6C,SAAjD,EAA4DC,UAA5D,EAAwEI,mBAAxE,EAA6F;AAC5G,UAAMvT,IAAI,GAAG,KAAKgT,iBAAL,CAAuBC,IAAvB,EAA6BxB,WAA7B,EAA0CpB,OAA1C,EAAmD6C,SAAnD,EAA8DC,UAA9D,KAA6E,KAAKE,mBAAL,CAAyBJ,IAAzB,EAA+BK,QAA/B,EAAyCrG,QAAzC,EAAmDiG,SAAnD,EAA8DK,mBAA9D,CAA1F;AACA,QAAI,CAACvT,IAAL,EAAW,KAAKspB,UAAL;AACX,WAAOtpB,IAAP;AACD;;AAED0+B,EAAAA,iBAAiB,CAACzrB,IAAD,EAAO0rB,oBAAP,EAA6B;AAC5C,QAAI,KAAKrf,GAAL,CAASvnB,OAAO,CAACQ,QAAjB,CAAJ,EAAgC;AAC9B0a,MAAAA,IAAI,CAACN,QAAL,GAAgB,IAAhB;AACAM,MAAAA,IAAI,CAACY,GAAL,GAAW,KAAK2nB,uBAAL,EAAX;AACA,WAAKnR,MAAL,CAAYtyB,OAAO,CAACW,QAApB;AACD,KAJD,MAIO;AACL,YAAM+9D,iBAAiB,GAAG,KAAKx1D,KAAL,CAAW4b,cAArC;AACA,WAAK5b,KAAL,CAAW4b,cAAX,GAA4B,IAA5B;AACA,YAAM5a,IAAI,GAAG,KAAKhB,KAAL,CAAWgB,IAAxB;AACAgR,MAAAA,IAAI,CAACY,GAAL,GAAW5R,IAAI,KAAKlK,OAAO,CAACC,GAAjB,IAAwBiK,IAAI,KAAKlK,OAAO,CAACK,MAAzC,IAAmD6J,IAAI,KAAKlK,OAAO,CAACE,MAApE,IAA8EgK,IAAI,KAAKlK,OAAO,CAACG,OAA/F,GAAyG,KAAKi8B,aAAL,EAAzG,GAAgI,KAAKriB,qBAAL,CAA2B6sB,oBAA3B,CAA3I;;AAEA,UAAI18B,IAAI,KAAKlK,OAAO,CAACM,WAArB,EAAkC;AAChC4a,QAAAA,IAAI,CAACN,QAAL,GAAgB,KAAhB;AACD;;AAED,WAAK1R,KAAL,CAAW4b,cAAX,GAA4B45C,iBAA5B;AACD;;AAED,WAAOxjD,IAAI,CAACY,GAAZ;AACD;;AAEDzD,EAAAA,YAAY,CAACpQ,IAAD,EAAOqQ,OAAP,EAAgB;AAC1BrQ,IAAAA,IAAI,CAACiS,EAAL,GAAU,IAAV;AACAjS,IAAAA,IAAI,CAAC02D,SAAL,GAAiB,KAAjB;AACA12D,IAAAA,IAAI,CAACihC,KAAL,GAAa,CAAC,CAAC5wB,OAAf;AACD;;AAEDuB,EAAAA,WAAW,CAAC5R,IAAD,EAAOyR,WAAP,EAAoBpB,OAApB,EAA6BqB,aAA7B,EAA4CY,gBAA5C,EAA8DrQ,IAA9D,EAAoEsQ,YAAY,GAAG,KAAnF,EAA0F;AACnG,SAAKnC,YAAL,CAAkBpQ,IAAlB,EAAwBqQ,OAAxB;AACArQ,IAAAA,IAAI,CAAC02D,SAAL,GAAiB,CAAC,CAACjlD,WAAnB;AACA,UAAMyuB,cAAc,GAAGxuB,aAAvB;AACA,SAAK6J,KAAL,CAAWF,KAAX,CAAiB9D,cAAc,GAAGG,WAAjB,IAAgCnF,YAAY,GAAGqF,WAAH,GAAiB,CAA7D,KAAmEtF,gBAAgB,GAAGqF,kBAAH,GAAwB,CAA3G,CAAjB;AACA,SAAKyU,SAAL,CAAe/Q,KAAf,CAAqB4N,aAAa,CAAC5Y,OAAD,EAAUrQ,IAAI,CAAC02D,SAAf,CAAlC;AACA,SAAKz2B,mBAAL,CAAyBjgC,IAAzB,EAA+BkgC,cAA/B;AACA,SAAK7F,0BAAL,CAAgCr6B,IAAhC,EAAsCiC,IAAtC,EAA4C,IAA5C;AACA,SAAKmqB,SAAL,CAAe9Q,IAAf;AACA,SAAKC,KAAL,CAAWD,IAAX;AACA,WAAOtb,IAAP;AACD;;AAED49B,EAAAA,cAAc,CAACC,KAAD,EAAQC,YAAR,EAAsBC,OAAtB,EAA+BxqB,mBAA/B,EAAoD;AAChE,QAAIwqB,OAAJ,EAAa;AACX,WAAK1c,YAAL,CAAkB,gBAAlB;AACD;;AAED,UAAMkyC,6BAA6B,GAAG,KAAKtyD,KAAL,CAAWoc,0BAAjD;AACA,SAAKpc,KAAL,CAAWoc,0BAAX,GAAwC,KAAxC;AACA,UAAMrd,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACA,SAAKyE,IAAL;AACAlX,IAAAA,IAAI,CAACQ,QAAL,GAAgB,KAAKq1D,aAAL,CAAmBh4B,KAAnB,EAA0B,CAACE,OAA3B,EAAoCxqB,mBAApC,EAAyDvT,IAAzD,CAAhB;AACA,SAAKiB,KAAL,CAAWoc,0BAAX,GAAwCk2C,6BAAxC;AACA,WAAO,KAAK3gD,UAAL,CAAgB5S,IAAhB,EAAsB+9B,OAAO,GAAG,iBAAH,GAAuB,iBAApD,CAAP;AACD;;AAEDkE,EAAAA,oBAAoB,CAACjiC,IAAD,EAAOoC,MAAP,EAAeiO,OAAf,EAAwBmtB,gBAAxB,EAA0C;AAC5D,SAAKjiB,KAAL,CAAWF,KAAX,CAAiB9D,cAAc,GAAGC,WAAlC;AACA,QAAI9I,KAAK,GAAGua,aAAa,CAAC5Y,OAAD,EAAU,KAAV,CAAzB;;AAEA,QAAI,CAAC,KAAKnR,KAAL,CAAWnH,OAAO,CAACQ,QAAnB,CAAD,IAAiC,KAAK6zB,SAAL,CAAepD,KAApD,EAA2D;AACzDta,MAAAA,KAAK,IAAI+Z,QAAT;AACD;;AAED,SAAK2D,SAAL,CAAe/Q,KAAf,CAAqB3M,KAArB;AACA,SAAK0B,YAAL,CAAkBpQ,IAAlB,EAAwBqQ,OAAxB;AACA,UAAMy2C,yBAAyB,GAAG,KAAK7lD,KAAL,CAAWyb,sBAA7C;;AAEA,QAAIta,MAAJ,EAAY;AACV,WAAKnB,KAAL,CAAWyb,sBAAX,GAAoC,IAApC;AACA,WAAK0kB,0BAAL,CAAgCphC,IAAhC,EAAsCoC,MAAtC,EAA8Co7B,gBAA9C;AACD;;AAED,SAAKv8B,KAAL,CAAWyb,sBAAX,GAAoC,KAApC;AACA,SAAKvK,iBAAL,CAAuBnS,IAAvB,EAA6B,IAA7B;AACA,SAAKosB,SAAL,CAAe9Q,IAAf;AACA,SAAKC,KAAL,CAAWD,IAAX;AACA,SAAKra,KAAL,CAAWyb,sBAAX,GAAoCoqC,yBAApC;AACA,WAAO,KAAKl0C,UAAL,CAAgB5S,IAAhB,EAAsB,yBAAtB,CAAP;AACD;;AAEDohC,EAAAA,0BAA0B,CAACphC,IAAD,EAAOoC,MAAP,EAAeo7B,gBAAf,EAAiC;AACzDx9B,IAAAA,IAAI,CAACoC,MAAL,GAAc,KAAK05B,gBAAL,CAAsB15B,MAAtB,EAA8Bo7B,gBAA9B,EAAgD,KAAhD,CAAd;AACD;;AAEDnD,EAAAA,0BAA0B,CAACr6B,IAAD,EAAOiC,IAAP,EAAaoQ,QAAQ,GAAG,KAAxB,EAA+B;AACvD,SAAKF,iBAAL,CAAuBnS,IAAvB,EAA6B,KAA7B,EAAoCqS,QAApC;AACA,SAAKO,UAAL,CAAgB5S,IAAhB,EAAsBiC,IAAtB;AACD;;AAEDkQ,EAAAA,iBAAiB,CAACnS,IAAD,EAAOoS,eAAP,EAAwBC,QAAQ,GAAG,KAAnC,EAA0C;AACzD,UAAMskD,YAAY,GAAGvkD,eAAe,IAAI,CAAC,KAAKlT,KAAL,CAAWnH,OAAO,CAACa,MAAnB,CAAzC;AACA,SAAK0zB,eAAL,CAAqBjR,KAArB,CAA2B+M,kBAAkB,EAA7C;;AAEA,QAAIuuC,YAAJ,EAAkB;AAChB32D,MAAAA,IAAI,CAACqR,IAAL,GAAY,KAAKkqB,gBAAL,EAAZ;AACA,WAAKS,WAAL,CAAiBh8B,IAAjB,EAAuB,KAAvB,EAA8BoS,eAA9B,EAA+C,KAA/C;AACD,KAHD,MAGO;AACL,YAAMu5C,SAAS,GAAG,KAAK1qD,KAAL,CAAWkV,MAA7B;AACA,YAAMyV,SAAS,GAAG,KAAK3qB,KAAL,CAAWqc,MAA7B;AACA,WAAKrc,KAAL,CAAWqc,MAAX,GAAoB,EAApB;AACA,WAAK8O,SAAL,CAAe/Q,KAAf,CAAqB,KAAK+Q,SAAL,CAAexD,YAAf,KAAgCJ,YAArD;AACAxoB,MAAAA,IAAI,CAACqR,IAAL,GAAY,KAAKm6C,UAAL,CAAgB,IAAhB,EAAsB,KAAtB,EAA6BoL,sBAAsB,IAAI;AACjE,cAAMC,SAAS,GAAG,CAAC,KAAKC,iBAAL,CAAuB92D,IAAI,CAACoC,MAA5B,CAAnB;;AAEA,YAAIw0D,sBAAsB,IAAIC,SAA9B,EAAyC;AACvC,gBAAME,QAAQ,GAAG,CAAC/2D,IAAI,CAAC0S,IAAL,KAAc,QAAd,IAA0B1S,IAAI,CAAC0S,IAAL,KAAc,aAAzC,KAA2D,CAAC,CAAC1S,IAAI,CAAC6T,GAAlE,GAAwE7T,IAAI,CAAC6T,GAAL,CAASlV,GAAjF,GAAuFqB,IAAI,CAACtB,KAA7G;AACA,eAAK6O,KAAL,CAAWwpD,QAAX,EAAqBn0D,aAAa,CAACwC,4BAAnC;AACD;;AAED,cAAMwqD,iBAAiB,GAAG,CAACjE,SAAD,IAAc,KAAK1qD,KAAL,CAAWkV,MAAnD;AACA,aAAK6lB,WAAL,CAAiBh8B,IAAjB,EAAuB,CAAC,KAAKiB,KAAL,CAAWkV,MAAZ,IAAsB,CAAC/D,eAAvB,IAA0C,CAACC,QAA3C,IAAuD,CAACwkD,SAA/E,EAA0FzkD,eAA1F,EAA2Gw9C,iBAA3G;;AAEA,YAAI,KAAK3uD,KAAL,CAAWkV,MAAX,IAAqBnW,IAAI,CAACiS,EAA9B,EAAkC;AAChC,eAAK+rB,SAAL,CAAeh+B,IAAI,CAACiS,EAApB,EAAwB,eAAxB,EAAyCmH,YAAzC,EAAuDjZ,SAAvD,EAAkEA,SAAlE,EAA6EyvD,iBAA7E;AACD;AACF,OAdW,CAAZ;AAeA,WAAKxjC,SAAL,CAAe9Q,IAAf;AACA,WAAKgR,eAAL,CAAqBhR,IAArB;AACA,WAAKra,KAAL,CAAWqc,MAAX,GAAoBsO,SAApB;AACD;AACF;;AAEDkrC,EAAAA,iBAAiB,CAAC10D,MAAD,EAAS;AACxB,SAAK,IAAIzB,CAAC,GAAG,CAAR,EAAWuiB,GAAG,GAAG9gB,MAAM,CAACxB,MAA7B,EAAqCD,CAAC,GAAGuiB,GAAzC,EAA8CviB,CAAC,EAA/C,EAAmD;AACjD,UAAIyB,MAAM,CAACzB,CAAD,CAAN,CAAUsB,IAAV,KAAmB,YAAvB,EAAqC,OAAO,KAAP;AACtC;;AAED,WAAO,IAAP;AACD;;AAED+5B,EAAAA,WAAW,CAACh8B,IAAD,EAAOqhC,eAAP,EAAwBC,eAAxB,EAAyCsuB,iBAAiB,GAAG,IAA7D,EAAmE;AAC5E,UAAMF,YAAY,GAAG,IAAIp5C,GAAJ,EAArB;;AAEA,SAAK,MAAMwjB,KAAX,IAAoB95B,IAAI,CAACoC,MAAzB,EAAiC;AAC/B,WAAK47B,SAAL,CAAelE,KAAf,EAAsB,yBAAtB,EAAiDjhB,QAAjD,EAA2DwoB,eAAe,GAAG,IAAH,GAAUquB,YAApF,EAAkGvvD,SAAlG,EAA6GyvD,iBAA7G;AACD;AACF;;AAEDiG,EAAAA,aAAa,CAACh4B,KAAD,EAAQuxB,UAAR,EAAoB77C,mBAApB,EAAyC+/C,YAAzC,EAAuD;AAClE,UAAMjE,IAAI,GAAG,EAAb;AACA,QAAIr2B,KAAK,GAAG,IAAZ;;AAEA,WAAO,CAAC,KAAK1Z,GAAL,CAASue,KAAT,CAAR,EAAyB;AACvB,UAAI7E,KAAJ,EAAW;AACTA,QAAAA,KAAK,GAAG,KAAR;AACD,OAFD,MAEO;AACL,aAAK3O,MAAL,CAAYtyB,OAAO,CAACoB,KAApB;;AAEA,YAAI,KAAK+F,KAAL,CAAW2+B,KAAX,CAAJ,EAAuB;AACrB,cAAIy1B,YAAJ,EAAkB;AAChB,iBAAKxiD,QAAL,CAAcwiD,YAAd,EAA4B,eAA5B,EAA6C,KAAKryD,KAAL,CAAWiM,YAAxD;AACD;;AAED,eAAKgK,IAAL;AACA;AACD;AACF;;AAEDm4C,MAAAA,IAAI,CAACnuD,IAAL,CAAU,KAAKsyD,iBAAL,CAAuBpE,UAAvB,EAAmC77C,mBAAnC,CAAV;AACD;;AAED,WAAO87C,IAAP;AACD;;AAEDmE,EAAAA,iBAAiB,CAACpE,UAAD,EAAa77C,mBAAb,EAAkC8/C,gBAAlC,EAAoD;AACnE,QAAIlM,GAAJ;;AAEA,QAAI,KAAKjoD,KAAL,CAAWnH,OAAO,CAACoB,KAAnB,CAAJ,EAA+B;AAC7B,UAAI,CAACi2D,UAAL,EAAiB;AACf,aAAK7hD,KAAL,CAAW,KAAKtM,KAAL,CAAW+L,GAAtB,EAA2BpK,aAAa,CAACwI,eAAzC,EAA0D,GAA1D;AACD;;AAED+7C,MAAAA,GAAG,GAAG,IAAN;AACD,KAND,MAMO,IAAI,KAAKjoD,KAAL,CAAWnH,OAAO,CAAC6B,QAAnB,CAAJ,EAAkC;AACvC,YAAMy7D,kBAAkB,GAAG,KAAKp0D,KAAL,CAAWvC,KAAtC;AACA,YAAM42D,kBAAkB,GAAG,KAAKr0D,KAAL,CAAWgM,QAAtC;AACAk6C,MAAAA,GAAG,GAAG,KAAKhrB,cAAL,CAAoB,KAAK4yB,WAAL,CAAiBx7C,mBAAjB,CAApB,EAA2D8hD,kBAA3D,EAA+EC,kBAA/E,CAAN;AACD,KAJM,MAIA,IAAI,KAAKp2D,KAAL,CAAWnH,OAAO,CAACyB,QAAnB,CAAJ,EAAkC;AACvC,WAAK6nB,YAAL,CAAkB,oBAAlB;;AAEA,UAAI,CAACgyC,gBAAL,EAAuB;AACrB,aAAK9lD,KAAL,CAAW,KAAKtM,KAAL,CAAWvC,KAAtB,EAA6BkE,aAAa,CAAC4H,6BAA3C;AACD;;AAED,YAAMxK,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACA,WAAKyE,IAAL;AACAiwC,MAAAA,GAAG,GAAG,KAAKv0C,UAAL,CAAgB5S,IAAhB,EAAsB,qBAAtB,CAAN;AACD,KAVM,MAUA;AACLmnD,MAAAA,GAAG,GAAG,KAAK3rB,uBAAL,CAA6BjoB,mBAA7B,EAAkD,KAAK4oB,cAAvD,CAAN;AACD;;AAED,WAAOgrB,GAAP;AACD;;AAEDp0B,EAAAA,eAAe,CAACgD,OAAD,EAAU;AACvB,UAAM/1B,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACA,UAAM/a,IAAI,GAAG,KAAK80D,mBAAL,CAAyBxsD,IAAI,CAACtB,KAA9B,EAAqCq3B,OAArC,CAAb;AACA,WAAO,KAAKwD,gBAAL,CAAsBv5B,IAAtB,EAA4BtI,IAA5B,CAAP;AACD;;AAED6hC,EAAAA,gBAAgB,CAACv5B,IAAD,EAAOtI,IAAP,EAAa;AAC3BsI,IAAAA,IAAI,CAACtI,IAAL,GAAYA,IAAZ;AACAsI,IAAAA,IAAI,CAACgB,GAAL,CAASnC,cAAT,GAA0BnH,IAA1B;AACA,WAAO,KAAKkb,UAAL,CAAgB5S,IAAhB,EAAsB,YAAtB,CAAP;AACD;;AAEDwsD,EAAAA,mBAAmB,CAACx/C,GAAD,EAAM+oB,OAAN,EAAe;AAChC,QAAIr+B,IAAJ;AACA,UAAM;AACJgH,MAAAA,KADI;AAEJuD,MAAAA;AAFI,QAGF,KAAKhB,KAHT;;AAKA,QAAIgB,IAAI,KAAKlK,OAAO,CAACL,IAArB,EAA2B;AACzBA,MAAAA,IAAI,GAAG,KAAKuJ,KAAL,CAAWzK,KAAlB;AACD,KAFD,MAEO,IAAIyL,IAAI,CAAC9K,OAAT,EAAkB;AACvBO,MAAAA,IAAI,GAAGuK,IAAI,CAAC9K,OAAZ;AACD,KAFM,MAEA;AACL,YAAM,KAAKmyB,UAAL,EAAN;AACD;;AAED,QAAIyM,OAAJ,EAAa;AACX,WAAK90B,KAAL,CAAWgB,IAAX,GAAkBlK,OAAO,CAACL,IAA1B;AACD,KAFD,MAEO;AACL,WAAKqoC,iBAAL,CAAuBroC,IAAvB,EAA6BgH,KAA7B,EAAoC,CAAC,CAACuD,IAAI,CAAC9K,OAA3C,EAAoD,KAApD;AACD;;AAED,SAAK+f,IAAL;AACA,WAAOxf,IAAP;AACD;;AAEDqoC,EAAAA,iBAAiB,CAACrpB,IAAD,EAAOzJ,QAAP,EAAiBq7C,aAAjB,EAAgC70C,SAAhC,EAA2C;AAC1D,QAAIiD,IAAI,CAAC9V,MAAL,GAAc,EAAlB,EAAsB;AACpB;AACD;;AAED,QAAI,CAACwW,iBAAiB,CAACV,IAAD,CAAtB,EAA8B;AAC5B;AACD;;AAED,QAAIA,IAAI,KAAK,OAAb,EAAsB;AACpB,UAAI,KAAK0V,SAAL,CAAetD,QAAnB,EAA6B;AAC3B,aAAKvb,KAAL,CAAWN,QAAX,EAAqBrK,aAAa,CAACuJ,sBAAnC;AACA;AACD;AACF,KALD,MAKO,IAAIuK,IAAI,KAAK,OAAb,EAAsB;AAC3B,UAAI,KAAK0V,SAAL,CAAevD,QAAnB,EAA6B;AAC3B,aAAKtb,KAAL,CAAWN,QAAX,EAAqBrK,aAAa,CAACK,sBAAnC;AACA;AACD,OAHD,MAGO,IAAI,KAAKsY,KAAL,CAAWR,aAAf,EAA8B;AACnC,aAAKxN,KAAL,CAAWN,QAAX,EAAqBrK,aAAa,CAACM,mCAAnC;AACA;AACD,OAHM,MAGA;AACL,aAAKopB,eAAL,CAAqBvE,+BAArB,CAAqD9a,QAArD,EAA+DrK,aAAa,CAACK,sBAA7E;AACD;AACF,KAVM,MAUA,IAAIyT,IAAI,KAAK,WAAb,EAA0B;AAC/B,UAAI,KAAK6E,KAAL,CAAWT,+BAAf,EAAgD;AAC9C,aAAKvN,KAAL,CAAWN,QAAX,EAAqBrK,aAAa,CAACG,gBAAnC;AACA;AACD;AACF;;AAED,QAAIulD,aAAa,IAAIvxC,SAAS,CAACL,IAAD,CAA9B,EAAsC;AACpC,WAAKnJ,KAAL,CAAWN,QAAX,EAAqBrK,aAAa,CAACgI,iBAAnC,EAAsD8L,IAAtD;AACA;AACD;;AAED,UAAMsgD,YAAY,GAAG,CAAC,KAAK/1D,KAAL,CAAWkV,MAAZ,GAAqBM,cAArB,GAAsChD,SAAS,GAAGqD,wBAAH,GAA8BF,oBAAlG;;AAEA,QAAIogD,YAAY,CAACtgD,IAAD,EAAO,KAAKC,QAAZ,CAAhB,EAAuC;AACrC,WAAKpJ,KAAL,CAAWN,QAAX,EAAqBrK,aAAa,CAACsI,sBAAnC,EAA2DwL,IAA3D;AACD;AACF;;AAED27C,EAAAA,cAAc,GAAG;AACf,QAAI,KAAKjmC,SAAL,CAAevD,QAAnB,EAA6B,OAAO,IAAP;;AAE7B,QAAI,KAAKlxB,OAAL,CAAai2D,yBAAb,IAA0C,CAAC,KAAKryC,KAAL,CAAWd,UAA1D,EAAsE;AACpE,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD;;AAED63C,EAAAA,UAAU,CAACh/C,QAAD,EAAWrG,QAAX,EAAqB;AAC7B,UAAMjN,IAAI,GAAG,KAAK6P,WAAL,CAAiByD,QAAjB,EAA2BrG,QAA3B,CAAb;AACA,SAAKqf,eAAL,CAAqBzE,+BAArB,CAAqD7nB,IAAI,CAACtB,KAA1D,EAAiEkE,aAAa,CAACO,8BAA/E;;AAEA,QAAI,KAAKmc,GAAL,CAASvnB,OAAO,CAACsD,IAAjB,CAAJ,EAA4B;AAC1B,WAAKkS,KAAL,CAAWvN,IAAI,CAACtB,KAAhB,EAAuBkE,aAAa,CAACoF,iBAArC;AACD;;AAED,QAAI,CAAC,KAAKuT,KAAL,CAAWd,UAAZ,IAA0B,CAAC,KAAK9iB,OAAL,CAAai2D,yBAA5C,EAAuE;AACrE,UAAI,KAAK8E,gBAAL,EAAJ,EAA6B;AAC3B,aAAKlzD,2BAAL,GAAmC,IAAnC;AACD,OAFD,MAEO;AACL,aAAKD,iBAAL,GAAyB,IAAzB;AACD;AACF;;AAED,QAAI,CAAC,KAAK0B,KAAL,CAAWmc,SAAhB,EAA2B;AACzBpd,MAAAA,IAAI,CAACs4B,QAAL,GAAgB,KAAK2pB,eAAL,CAAqB,IAArB,EAA2B,IAA3B,CAAhB;AACD;;AAED,WAAO,KAAKrvC,UAAL,CAAgB5S,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAED0yD,EAAAA,gBAAgB,GAAG;AACjB,WAAO,KAAK1oC,qBAAL,MAAgC,KAAK9qB,KAAL,CAAWnH,OAAO,CAACoD,OAAnB,CAAhC,IAA+D,KAAK+D,KAAL,CAAWnH,OAAO,CAACkB,MAAnB,CAA/D,IAA6F,KAAKiG,KAAL,CAAWnH,OAAO,CAACQ,QAAnB,CAA7F,IAA6H,KAAK2G,KAAL,CAAWnH,OAAO,CAAC8B,SAAnB,CAA7H,IAA8J,KAAKqF,KAAL,CAAWnH,OAAO,CAACI,MAAnB,CAA9J,IAA4L,KAAK+G,KAAL,CAAWnH,OAAO,CAACuD,KAAnB,CAA5L,IAAyN,KAAKmE,SAAL,CAAe,aAAf,KAAiC,KAAKP,KAAL,CAAWnH,OAAO,CAACqD,MAAnB,CAAjQ;AACD;;AAEDw1D,EAAAA,UAAU,GAAG;AACX,UAAM5wD,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACA,SAAK6Z,eAAL,CAAqBzE,+BAArB,CAAqD7nB,IAAI,CAACtB,KAA1D,EAAiEkE,aAAa,CAACwJ,gBAA/E;AACA,SAAK8K,IAAL;AACA,QAAI+/C,UAAU,GAAG,KAAjB;AACA,QAAI3+B,QAAQ,GAAG,IAAf;;AAEA,QAAI,CAAC,KAAKtO,qBAAL,EAAL,EAAmC;AACjCitC,MAAAA,UAAU,GAAG,KAAK33C,GAAL,CAASvnB,OAAO,CAACsD,IAAjB,CAAb;;AAEA,cAAQ,KAAK4F,KAAL,CAAWgB,IAAnB;AACE,aAAKlK,OAAO,CAACqB,IAAb;AACA,aAAKrB,OAAO,CAACO,GAAb;AACA,aAAKP,OAAO,CAACgB,MAAb;AACA,aAAKhB,OAAO,CAACmB,MAAb;AACA,aAAKnB,OAAO,CAACW,QAAb;AACA,aAAKX,OAAO,CAACiB,SAAb;AACA,aAAKjB,OAAO,CAACsB,KAAb;AACA,aAAKtB,OAAO,CAACoB,KAAb;AACE,cAAI,CAAC89D,UAAL,EAAiB;;AAEnB;AACE3+B,UAAAA,QAAQ,GAAG,KAAKiD,gBAAL,EAAX;AAZJ;AAcD;;AAEDv7B,IAAAA,IAAI,CAACk3D,QAAL,GAAgBD,UAAhB;AACAj3D,IAAAA,IAAI,CAACs4B,QAAL,GAAgBA,QAAhB;AACA,WAAO,KAAK1lB,UAAL,CAAgB5S,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAEDkxD,EAAAA,4BAA4B,CAACnyB,IAAD,EAAOmpB,YAAP,EAAqB;AAC/C,QAAI,KAAKtoD,eAAL,CAAqB,kBAArB,EAAyC,UAAzC,MAAyD,OAA7D,EAAsE;AACpE,UAAIm/B,IAAI,CAAC98B,IAAL,KAAc,oBAAlB,EAAwC;AACtC,aAAKsL,KAAL,CAAW26C,YAAX,EAAyBtlD,aAAa,CAACkG,8BAAvC;AACD;AACF;AACF;;AAED4oD,EAAAA,4BAA4B,CAACp+C,QAAD,EAAW;AACrC,QAAI,KAAKpU,KAAL,CAAWnH,OAAO,CAAC2B,KAAnB,CAAJ,EAA+B;AAC7B,YAAM,KAAK6T,KAAL,CAAW,KAAKtM,KAAL,CAAWvC,KAAtB,EAA6BkE,aAAa,CAAC2F,iBAA3C,EAA8DxQ,OAAO,CAAC2B,KAAR,CAAczC,KAA5E,CAAN;AACD,KAFD,MAEO,IAAI,CAAC,KAAKkgE,qCAAL,EAAL,EAAmD;AACxD,WAAK5pD,KAAL,CAAW+F,QAAX,EAAqB1Q,aAAa,CAAC+F,eAAnC;AACD;AACF;;AAEDipD,EAAAA,6BAA6B,CAACD,SAAD,EAAYr+C,QAAZ,EAAsBrG,QAAtB,EAAgC;AAC3D,UAAMmnB,QAAQ,GAAG,KAAKvkB,WAAL,CAAiByD,QAAjB,EAA2BrG,QAA3B,CAAjB;;AAEA,QAAI,KAAKmqD,iBAAL,CAAuBzF,SAAvB,CAAJ,EAAuC;AACrCv9B,MAAAA,QAAQ,CAACpgB,MAAT,GAAkB29C,SAAlB;AACA,aAAO,KAAK/+C,UAAL,CAAgBwhB,QAAhB,EAA0B,sBAA1B,CAAP;AACD,KAHD,MAGO;AACL,WAAKijC,kCAAL,CAAwC/jD,QAAxC;AACA8gB,MAAAA,QAAQ,CAACtkB,UAAT,GAAsB6hD,SAAtB;AACA,aAAO,KAAK/+C,UAAL,CAAgBwhB,QAAhB,EAA0B,yBAA1B,CAAP;AACD;AACF;;AAEDgjC,EAAAA,iBAAiB,CAACtnD,UAAD,EAAa;AAC5B,YAAQA,UAAU,CAAC7N,IAAnB;AACE,WAAK,kBAAL;AACE,eAAO,CAAC6N,UAAU,CAAC6C,QAAZ,IAAwB,KAAKykD,iBAAL,CAAuBtnD,UAAU,CAAC8lC,MAAlC,CAA/B;;AAEF,WAAK,YAAL;AACE,eAAO,IAAP;;AAEF;AACE,eAAO,KAAP;AARJ;AAUD;;AAEDyhB,EAAAA,kCAAkC,CAAC/jD,QAAD,EAAW;AAC3C,QAAI,KAAKpU,KAAL,CAAWnH,OAAO,CAAC2B,KAAnB,CAAJ,EAA+B;AAC7B,YAAM,KAAK6T,KAAL,CAAW,KAAKtM,KAAL,CAAWvC,KAAtB,EAA6BkE,aAAa,CAACgG,mBAA3C,CAAN;AACD,KAFD,MAEO,IAAI,CAAC,KAAKuuD,qCAAL,EAAL,EAAmD;AACxD,WAAK5pD,KAAL,CAAW+F,QAAX,EAAqB1Q,aAAa,CAACmG,mBAAnC;AACD;AACF;;AAEDwoD,EAAAA,uBAAuB,CAAC+F,QAAD,EAAW;AAChC,UAAMC,sBAAsB,GAAG,KAAKt2D,KAAL,CAAWgc,YAA1C;AACA,SAAKhc,KAAL,CAAWgc,YAAX,GAA0B;AACxBC,MAAAA,wBAAwB,EAAE,CADF;AAExBC,MAAAA,aAAa,EAAE;AAFS,KAA1B;;AAKA,QAAI;AACF,aAAOm6C,QAAQ,EAAf;AACD,KAFD,SAEU;AACR,WAAKr2D,KAAL,CAAWgc,YAAX,GAA0Bs6C,sBAA1B;AACD;AACF;;AAEDC,EAAAA,kCAAkC,CAACF,QAAD,EAAW;AAC3C,UAAMtK,QAAQ,GAAG,KAAKptD,eAAL,CAAqB,kBAArB,EAAyC,UAAzC,CAAjB;;AAEA,QAAIotD,QAAQ,KAAK,OAAjB,EAA0B;AACxB,YAAMuK,sBAAsB,GAAG,KAAKt2D,KAAL,CAAWgc,YAA1C;AACA,WAAKhc,KAAL,CAAWgc,YAAX,GAA0B;AACxBC,QAAAA,wBAAwB,EAAE,CADF;AAExBC,QAAAA,aAAa,EAAE;AAFS,OAA1B;;AAKA,UAAI;AACF,eAAOm6C,QAAQ,EAAf;AACD,OAFD,SAEU;AACR,aAAKr2D,KAAL,CAAWgc,YAAX,GAA0Bs6C,sBAA1B;AACD;AACF,KAZD,MAYO;AACL,aAAOD,QAAQ,EAAf;AACD;AACF;;AAEDzF,EAAAA,8BAA8B,CAACyF,QAAD,EAAW;AACvC,UAAMG,0BAA0B,GAAG,KAAKx2D,KAAL,CAAWmc,SAA9C;AACA,SAAKnc,KAAL,CAAWmc,SAAX,GAAuB,IAAvB;;AAEA,QAAI;AACF,aAAOk6C,QAAQ,EAAf;AACD,KAFD,SAEU;AACR,WAAKr2D,KAAL,CAAWmc,SAAX,GAAuBq6C,0BAAvB;AACD;AACF;;AAEDlH,EAAAA,UAAU,CAAC+G,QAAD,EAAW;AACnB,UAAM5oD,KAAK,GAAG,KAAK0d,SAAL,CAAexD,YAAf,EAAd;AACA,UAAM8uC,cAAc,GAAGjvC,QAAQ,GAAG,CAAC/Z,KAAnC;;AAEA,QAAIgpD,cAAJ,EAAoB;AAClB,WAAKtrC,SAAL,CAAe/Q,KAAf,CAAqB3M,KAAK,GAAG+Z,QAA7B;;AAEA,UAAI;AACF,eAAO6uC,QAAQ,EAAf;AACD,OAFD,SAEU;AACR,aAAKlrC,SAAL,CAAe9Q,IAAf;AACD;AACF;;AAED,WAAOg8C,QAAQ,EAAf;AACD;;AAEDjH,EAAAA,aAAa,CAACiH,QAAD,EAAW;AACtB,UAAM5oD,KAAK,GAAG,KAAK0d,SAAL,CAAexD,YAAf,EAAd;AACA,UAAM+uC,gBAAgB,GAAGlvC,QAAQ,GAAG/Z,KAApC;;AAEA,QAAIipD,gBAAJ,EAAsB;AACpB,WAAKvrC,SAAL,CAAe/Q,KAAf,CAAqB3M,KAAK,GAAG,CAAC+Z,QAA9B;;AAEA,UAAI;AACF,eAAO6uC,QAAQ,EAAf;AACD,OAFD,SAEU;AACR,aAAKlrC,SAAL,CAAe9Q,IAAf;AACD;AACF;;AAED,WAAOg8C,QAAQ,EAAf;AACD;;AAED3C,EAAAA,sBAAsB,GAAG;AACvB,SAAK1zD,KAAL,CAAWgc,YAAX,CAAwBE,aAAxB,GAAwC,CAAxC;AACD;;AAEDu3C,EAAAA,uCAAuC,GAAG;AACxC,WAAO,KAAKzzD,KAAL,CAAWgc,YAAX,CAAwBC,wBAAxB,IAAoD,CAA3D;AACD;;AAEDi6C,EAAAA,qCAAqC,GAAG;AACtC,WAAO,KAAKl2D,KAAL,CAAWgc,YAAX,CAAwBE,aAAxB,IAAyC,IAAzC,IAAiD,KAAKlc,KAAL,CAAWgc,YAAX,CAAwBE,aAAxB,IAAyC,CAAjG;AACD;;AAED20C,EAAAA,uBAAuB,CAACb,IAAD,EAAO;AAC5B,UAAM39C,QAAQ,GAAG,KAAKrS,KAAL,CAAWvC,KAA5B;AACA,UAAMuO,QAAQ,GAAG,KAAKhM,KAAL,CAAWgM,QAA5B;AACA,SAAKhM,KAAL,CAAWsb,gBAAX,GAA8B,KAAKtb,KAAL,CAAWvC,KAAzC;AACA,UAAM60D,6BAA6B,GAAG,KAAKtyD,KAAL,CAAWoc,0BAAjD;AACA,SAAKpc,KAAL,CAAWoc,0BAAX,GAAwC,IAAxC;AACA,UAAMu6C,GAAG,GAAG,KAAK3P,WAAL,CAAiB,KAAKhG,eAAL,EAAjB,EAAyC3uC,QAAzC,EAAmDrG,QAAnD,EAA6DgkD,IAA7D,CAAZ;AACA,SAAKhwD,KAAL,CAAWoc,0BAAX,GAAwCk2C,6BAAxC;AACA,WAAOqE,GAAP;AACD;;AAEDhE,EAAAA,qBAAqB,GAAG;AACtB,SAAKvyC,YAAL,CAAkB,cAAlB;AACA,UAAMrhB,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACA,SAAKyE,IAAL;AACA,SAAKoI,GAAL,CAASvnB,OAAO,CAACa,MAAjB;AACA,UAAMi/D,YAAY,GAAG,KAAKlsC,gBAAL,CAAsB,IAAtB,CAArB;AACA,SAAKY,kBAAL;AACA,UAAM6V,OAAO,GAAG,KAAK3vB,SAAL,EAAhB;;AAEA,QAAI;AACFzS,MAAAA,IAAI,CAACqR,IAAL,GAAY,KAAKymD,YAAL,CAAkB11B,OAAlB,EAA2BrqC,OAAO,CAACgB,MAAnC,EAA2C,QAA3C,CAAZ;AACD,KAFD,SAEU;AACR8+D,MAAAA,YAAY;AACb;;AAED,SAAKv4C,GAAL,CAASvnB,OAAO,CAACgB,MAAjB;AACA,WAAO,KAAK6Z,UAAL,CAAgB5S,IAAhB,EAAsB,kBAAtB,CAAP;AACD;;AA76DuC;;AAi7D1C,MAAM+3D,SAAS,GAAG;AAChBrlD,EAAAA,IAAI,EAAE;AADU,CAAlB;AAAA,MAGMslD,WAAW,GAAG;AAClBtlD,EAAAA,IAAI,EAAE;AADY,CAHpB;AAMA,MAAMulD,aAAa,GAAG,KAAtB;AAAA,MACMC,cAAc,GAAG,KADvB;AAAA,MAEMC,sBAAsB,GAAG,KAF/B;AAAA,MAGMC,gBAAgB,GAAG,KAHzB;AAIA,MAAMC,aAAa,GAAG,kBAAtB;AACA,MAAMC,yBAAyB,GAAG,kBAAlC;;AAEA,SAASC,kBAAT,CAA4Br5C,MAA5B,EAAoC;AAClC;AACE,SAAK,IAAIve,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGue,MAAM,CAACte,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,YAAM/I,KAAK,GAAGsnB,MAAM,CAACve,CAAD,CAApB;;AAEA,UAAI/I,KAAK,CAACqK,IAAN,KAAelK,OAAO,CAACM,WAA3B,EAAwC;AACtC,cAAM;AACJ2I,UAAAA,GADI;AAEJtC,UAAAA,KAFI;AAGJlI,UAAAA,KAHI;AAIJmI,UAAAA;AAJI,YAKF/G,KALJ;AAMA,cAAM4gE,UAAU,GAAG95D,KAAK,GAAG,CAA3B;AACA,cAAM+5D,UAAU,GAAG,IAAIp6D,QAAJ,CAAa2C,GAAG,CAACtC,KAAJ,CAAUJ,IAAvB,EAA6B0C,GAAG,CAACtC,KAAJ,CAAUF,MAAV,GAAmB,CAAhD,CAAnB;AACA0gB,QAAAA,MAAM,CAACtd,MAAP,CAAcjB,CAAd,EAAiB,CAAjB,EAAoB,IAAIqe,KAAJ,CAAU;AAC5B/c,UAAAA,IAAI,EAAElK,OAAO,CAACiC,IADc;AAE5BxD,UAAAA,KAAK,EAAE,GAFqB;AAG5BkI,UAAAA,KAAK,EAAEA,KAHqB;AAI5BC,UAAAA,GAAG,EAAE65D,UAJuB;AAK5BvrD,UAAAA,QAAQ,EAAEjM,GAAG,CAACtC,KALc;AAM5B0O,UAAAA,MAAM,EAAEqrD;AANoB,SAAV,CAApB,EAOI,IAAIz5C,KAAJ,CAAU;AACZ/c,UAAAA,IAAI,EAAElK,OAAO,CAACL,IADF;AAEZlB,UAAAA,KAAK,EAAEA,KAFK;AAGZkI,UAAAA,KAAK,EAAE85D,UAHK;AAIZ75D,UAAAA,GAAG,EAAEA,GAJO;AAKZsO,UAAAA,QAAQ,EAAEwrD,UALE;AAMZrrD,UAAAA,MAAM,EAAEpM,GAAG,CAACrC;AANA,SAAV,CAPJ;AAeD;AACF;AACF;AACD,SAAOugB,MAAP;AACD;;AAED,MAAMw5C,eAAN,SAA8B5I,gBAA9B,CAA+C;AAC7C5tB,EAAAA,aAAa,CAACC,IAAD,EAAOC,OAAP,EAAgB;AAC3BD,IAAAA,IAAI,CAACC,OAAL,GAAe,KAAK01B,YAAL,CAAkB11B,OAAlB,CAAf;AACAD,IAAAA,IAAI,CAACliC,QAAL,GAAgB,KAAKgB,KAAL,CAAWhB,QAA3B;AACA,QAAI,KAAKtI,OAAL,CAAaunB,MAAjB,EAAyBijB,IAAI,CAACjjB,MAAL,GAAcq5C,kBAAkB,CAAC,KAAKr5C,MAAN,CAAhC;AACzB,WAAO,KAAKtM,UAAL,CAAgBuvB,IAAhB,EAAsB,MAAtB,CAAP;AACD;;AAED21B,EAAAA,YAAY,CAAC11B,OAAD,EAAUzjC,GAAG,GAAG5G,OAAO,CAACO,GAAxB,EAA6BwlB,UAAU,GAAG,KAAKnmB,OAAL,CAAammB,UAAvD,EAAmE;AAC7EskB,IAAAA,OAAO,CAACtkB,UAAR,GAAqBA,UAArB;AACAskB,IAAAA,OAAO,CAACu2B,WAAR,GAAsB,KAAKC,yBAAL,EAAtB;AACA,SAAK7nD,cAAL,CAAoBqxB,OAApB,EAA6B,IAA7B,EAAmC,IAAnC,EAAyCzjC,GAAzC;;AAEA,QAAI,KAAKgY,QAAL,IAAiB,CAAC,KAAKhf,OAAL,CAAaq2D,sBAA/B,IAAyD,KAAKzyC,KAAL,CAAWhB,gBAAX,CAA4B0H,IAA5B,GAAmC,CAAhG,EAAmG;AACjG,WAAK,MAAM,CAACvqB,IAAD,CAAX,IAAqB0mB,KAAK,CAACiI,IAAN,CAAW,KAAK9K,KAAL,CAAWhB,gBAAtB,CAArB,EAA8D;AAC5D,cAAMvN,GAAG,GAAG,KAAKuO,KAAL,CAAWhB,gBAAX,CAA4Bza,GAA5B,CAAgCpI,IAAhC,CAAZ;AACA,aAAK6V,KAAL,CAAWP,GAAX,EAAgBpK,aAAa,CAAC8E,qBAA9B,EAAqDhQ,IAArD;AACD;AACF;;AAED,WAAO,KAAKkb,UAAL,CAAgBwvB,OAAhB,EAAyB,SAAzB,CAAP;AACD;;AAEDvxB,EAAAA,eAAe,CAACjB,IAAD,EAAO;AACpB,UAAMF,SAAS,GAAGE,IAAlB;AACAF,IAAAA,SAAS,CAACzN,IAAV,GAAiB,WAAjB;AACAyN,IAAAA,SAAS,CAAClZ,KAAV,GAAkBkZ,SAAS,CAACI,UAA5B;AACA,WAAOJ,SAAS,CAACI,UAAjB;AACA,UAAMH,gBAAgB,GAAGD,SAAS,CAAClZ,KAAnC;AACA,UAAMyZ,GAAG,GAAG,KAAKlR,KAAL,CAAWoR,KAAX,CAAiBR,gBAAgB,CAACjR,KAAlC,EAAyCiR,gBAAgB,CAAChR,GAA1D,CAAZ;AACA,UAAMwf,GAAG,GAAGxO,gBAAgB,CAACnZ,KAAjB,GAAyByZ,GAAG,CAACE,KAAJ,CAAU,CAAV,EAAa,CAAC,CAAd,CAArC;AACA,SAAKW,QAAL,CAAcnB,gBAAd,EAAgC,KAAhC,EAAuCM,GAAvC;AACA,SAAKa,QAAL,CAAcnB,gBAAd,EAAgC,UAAhC,EAA4CwO,GAA5C;AACAxO,IAAAA,gBAAgB,CAAC1N,IAAjB,GAAwB,kBAAxB;AACA,WAAOyN,SAAP;AACD;;AAEDkpD,EAAAA,yBAAyB,GAAG;AAC1B,QAAI,CAAC,KAAK15D,KAAL,CAAWnH,OAAO,CAACkC,oBAAnB,CAAL,EAA+C;AAC7C,aAAO,IAAP;AACD;;AAED,UAAM+F,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACAzS,IAAAA,IAAI,CAACxJ,KAAL,GAAa,KAAKyK,KAAL,CAAWzK,KAAxB;AACA,SAAK0gB,IAAL;AACA,WAAO,KAAKtE,UAAL,CAAgB5S,IAAhB,EAAsB,sBAAtB,CAAP;AACD;;AAEDw0B,EAAAA,KAAK,CAACnf,OAAD,EAAU;AACb,QAAI,CAAC,KAAKkU,YAAL,CAAkB,KAAlB,CAAL,EAA+B;AAC7B,aAAO,KAAP;AACD;;AAED,WAAO,KAAKsvC,YAAL,CAAkBxjD,OAAlB,CAAP;AACD;;AAEDwjD,EAAAA,YAAY,CAACxjD,OAAD,EAAU;AACpB,UAAM6B,IAAI,GAAG,KAAK0I,cAAL,EAAb;AACA,UAAM+J,MAAM,GAAG,KAAK5J,cAAL,CAAoB7I,IAApB,CAAf;;AAEA,QAAIyS,MAAM,KAAK,EAAX,IAAiBA,MAAM,KAAK,EAAhC,EAAoC;AAClC,aAAO,IAAP;AACD;;AAED,QAAItU,OAAJ,EAAa,OAAO,KAAP;AACb,QAAIsU,MAAM,KAAK,GAAf,EAAoB,OAAO,IAAP;;AAEpB,QAAI7T,iBAAiB,CAAC6T,MAAD,CAArB,EAA+B;AAC7B2uC,MAAAA,yBAAyB,CAACn5D,SAA1B,GAAsC+X,IAAtC;;AAEA,UAAIohD,yBAAyB,CAACviD,IAA1B,CAA+B,KAAKhX,KAApC,CAAJ,EAAgD;AAC9C,cAAM+5D,KAAK,GAAG,KAAK/4C,cAAL,CAAoBu4C,yBAAyB,CAACn5D,SAA9C,CAAd;;AAEA,YAAI,CAAC8W,gBAAgB,CAAC6iD,KAAD,CAAjB,IAA4BA,KAAK,KAAK,EAA1C,EAA8C;AAC5C,iBAAO,KAAP;AACD;AACF;;AAED,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD;;AAEDx+B,EAAAA,cAAc,CAACjlB,OAAD,EAAUklB,QAAV,EAAoB;AAChC,QAAI,KAAKr7B,KAAL,CAAWnH,OAAO,CAACgC,EAAnB,CAAJ,EAA4B;AAC1B,WAAKk6D,eAAL,CAAqB,IAArB;AACD;;AAED,WAAO,KAAKpL,qBAAL,CAA2BxzC,OAA3B,EAAoCklB,QAApC,CAAP;AACD;;AAEDsuB,EAAAA,qBAAqB,CAACxzC,OAAD,EAAUklB,QAAV,EAAoB;AACvC,QAAI2rB,SAAS,GAAG,KAAKjlD,KAAL,CAAWgB,IAA3B;AACA,UAAMjC,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACA,QAAIC,IAAJ;;AAEA,QAAI,KAAK8hB,KAAL,CAAWnf,OAAX,CAAJ,EAAyB;AACvB6wC,MAAAA,SAAS,GAAGnuD,OAAO,CAACyE,IAApB;AACAkW,MAAAA,IAAI,GAAG,KAAP;AACD;;AAED,YAAQwzC,SAAR;AACE,WAAKnuD,OAAO,CAACyD,MAAb;AACA,WAAKzD,OAAO,CAAC4D,SAAb;AACE,eAAO,KAAKo9D,2BAAL,CAAiC/4D,IAAjC,EAAuCkmD,SAAS,CAAC/uD,OAAjD,CAAP;;AAEF,WAAKY,OAAO,CAAC6D,SAAb;AACE,eAAO,KAAKo9D,sBAAL,CAA4Bh5D,IAA5B,CAAP;;AAEF,WAAKjI,OAAO,CAAC+D,GAAb;AACE,eAAO,KAAKm9D,gBAAL,CAAsBj5D,IAAtB,CAAP;;AAEF,WAAKjI,OAAO,CAACkE,IAAb;AACE,eAAO,KAAKi9D,iBAAL,CAAuBl5D,IAAvB,CAAP;;AAEF,WAAKjI,OAAO,CAACmE,SAAb;AACE,YAAI,KAAK4jB,iBAAL,OAA6B,EAAjC,EAAqC;;AAErC,YAAIzK,OAAJ,EAAa;AACX,cAAI,KAAKpU,KAAL,CAAWkV,MAAf,EAAuB;AACrB,iBAAK5I,KAAL,CAAW,KAAKtM,KAAL,CAAWvC,KAAtB,EAA6BkE,aAAa,CAACkH,cAA3C;AACD,WAFD,MAEO,IAAIuL,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,OAApC,EAA6C;AAClD,iBAAK9H,KAAL,CAAW,KAAKtM,KAAL,CAAWvC,KAAtB,EAA6BkE,aAAa,CAAC6G,cAA3C;AACD;AACF;;AAED,eAAO,KAAK28C,sBAAL,CAA4BpmD,IAA5B,EAAkC,KAAlC,EAAyC,CAACqV,OAA1C,CAAP;;AAEF,WAAKtd,OAAO,CAACgF,MAAb;AACE,YAAIsY,OAAJ,EAAa,KAAKiU,UAAL;AACb,eAAO,KAAK+8B,UAAL,CAAgBrmD,IAAhB,EAAsB,IAAtB,CAAP;;AAEF,WAAKjI,OAAO,CAACoE,GAAb;AACE,eAAO,KAAKg9D,gBAAL,CAAsBn5D,IAAtB,CAAP;;AAEF,WAAKjI,OAAO,CAACqE,OAAb;AACE,eAAO,KAAKg9D,oBAAL,CAA0Bp5D,IAA1B,CAAP;;AAEF,WAAKjI,OAAO,CAACsE,OAAb;AACE,eAAO,KAAKg9D,oBAAL,CAA0Br5D,IAA1B,CAAP;;AAEF,WAAKjI,OAAO,CAACuE,MAAb;AACE,eAAO,KAAKg9D,mBAAL,CAAyBt5D,IAAzB,CAAP;;AAEF,WAAKjI,OAAO,CAACwE,IAAb;AACE,eAAO,KAAKg9D,iBAAL,CAAuBv5D,IAAvB,CAAP;;AAEF,WAAKjI,OAAO,CAAC0E,MAAb;AACA,WAAK1E,OAAO,CAACyE,IAAb;AACEkW,QAAAA,IAAI,GAAGA,IAAI,IAAI,KAAKzR,KAAL,CAAWzK,KAA1B;;AAEA,YAAI6e,OAAO,IAAI3C,IAAI,KAAK,KAAxB,EAA+B;AAC7B,eAAKnF,KAAL,CAAW,KAAKtM,KAAL,CAAWvC,KAAtB,EAA6BkE,aAAa,CAACkI,4BAA3C;AACD;;AAED,eAAO,KAAKw7C,iBAAL,CAAuBtmD,IAAvB,EAA6B0S,IAA7B,CAAP;;AAEF,WAAK3a,OAAO,CAAC2E,MAAb;AACE,eAAO,KAAK88D,mBAAL,CAAyBx5D,IAAzB,CAAP;;AAEF,WAAKjI,OAAO,CAAC4E,KAAb;AACE,eAAO,KAAK88D,kBAAL,CAAwBz5D,IAAxB,CAAP;;AAEF,WAAKjI,OAAO,CAACa,MAAb;AACE,eAAO,KAAK4yD,UAAL,EAAP;;AAEF,WAAKzzD,OAAO,CAACqB,IAAb;AACE,eAAO,KAAKsgE,mBAAL,CAAyB15D,IAAzB,CAAP;;AAEF,WAAKjI,OAAO,CAACmF,OAAb;AACE;AACE,gBAAMy8D,iBAAiB,GAAG,KAAK75C,iBAAL,EAA1B;;AAEA,cAAI65C,iBAAiB,KAAK,EAAtB,IAA4BA,iBAAiB,KAAK,EAAtD,EAA0D;AACxD;AACD;AACF;;AAEH,WAAK5hE,OAAO,CAACkF,OAAb;AACE;AACE,cAAI,CAAC,KAAKtF,OAAL,CAAam2D,2BAAd,IAA6C,CAACvzB,QAAlD,EAA4D;AAC1D,iBAAKhtB,KAAL,CAAW,KAAKtM,KAAL,CAAWvC,KAAtB,EAA6BkE,aAAa,CAAC+H,sBAA3C;AACD;;AAED,eAAKuM,IAAL;AACA,cAAIglB,MAAJ;;AAEA,cAAIgqB,SAAS,KAAKnuD,OAAO,CAACmF,OAA1B,EAAmC;AACjCg/B,YAAAA,MAAM,GAAG,KAAK7H,WAAL,CAAiBr0B,IAAjB,CAAT;;AAEA,gBAAIk8B,MAAM,CAACj6B,IAAP,KAAgB,mBAAhB,KAAwC,CAACi6B,MAAM,CAAChL,UAAR,IAAsBgL,MAAM,CAAChL,UAAP,KAAsB,OAApF,CAAJ,EAAkG;AAChG,mBAAK3xB,iBAAL,GAAyB,IAAzB;AACD;AACF,WAND,MAMO;AACL28B,YAAAA,MAAM,GAAG,KAAK9nB,WAAL,CAAiBpU,IAAjB,CAAT;;AAEA,gBAAIk8B,MAAM,CAACj6B,IAAP,KAAgB,wBAAhB,KAA6C,CAACi6B,MAAM,CAACxH,UAAR,IAAsBwH,MAAM,CAACxH,UAAP,KAAsB,OAAzF,KAAqGwH,MAAM,CAACj6B,IAAP,KAAgB,sBAAhB,KAA2C,CAACi6B,MAAM,CAACxH,UAAR,IAAsBwH,MAAM,CAACxH,UAAP,KAAsB,OAAvF,CAArG,IAAwMwH,MAAM,CAACj6B,IAAP,KAAgB,0BAA5N,EAAwP;AACtP,mBAAK1C,iBAAL,GAAyB,IAAzB;AACD;AACF;;AAED,eAAK88B,uBAAL,CAA6Br8B,IAA7B;AACA,iBAAOk8B,MAAP;AACD;;AAEH;AACE;AACE,cAAI,KAAK09B,eAAL,EAAJ,EAA4B;AAC1B,gBAAIvkD,OAAJ,EAAa;AACX,mBAAK9H,KAAL,CAAW,KAAKtM,KAAL,CAAWvC,KAAtB,EAA6BkE,aAAa,CAACI,qCAA3C;AACD;;AAED,iBAAKkU,IAAL;AACA,mBAAO,KAAKkvC,sBAAL,CAA4BpmD,IAA5B,EAAkC,IAAlC,EAAwC,CAACqV,OAAzC,CAAP;AACD;AACF;AAlHL;;AAqHA,UAAMwkD,SAAS,GAAG,KAAK54D,KAAL,CAAWzK,KAA7B;AACA,UAAMkkC,IAAI,GAAG,KAAKjI,eAAL,EAAb;;AAEA,QAAIyzB,SAAS,KAAKnuD,OAAO,CAACL,IAAtB,IAA8BgjC,IAAI,CAACz4B,IAAL,KAAc,YAA5C,IAA4D,KAAKqd,GAAL,CAASvnB,OAAO,CAACsB,KAAjB,CAAhE,EAAyF;AACvF,aAAO,KAAKygE,qBAAL,CAA2B95D,IAA3B,EAAiC65D,SAAjC,EAA4Cn/B,IAA5C,EAAkDrlB,OAAlD,CAAP;AACD,KAFD,MAEO;AACL,aAAO,KAAKolB,wBAAL,CAA8Bz6B,IAA9B,EAAoC06B,IAApC,CAAP;AACD;AACF;;AAED2B,EAAAA,uBAAuB,CAACr8B,IAAD,EAAO;AAC5B,QAAI,CAAC,KAAKrI,OAAL,CAAam2D,2BAAd,IAA6C,CAAC,KAAKn3C,QAAvD,EAAiE;AAC/D,WAAKpJ,KAAL,CAAWvN,IAAI,CAACtB,KAAhB,EAAuB4N,6BAA6B,CAACE,mBAArD;AACD;AACF;;AAEDk/C,EAAAA,cAAc,CAAC1rD,IAAD,EAAO;AACnB,UAAMinD,UAAU,GAAG,KAAKhmD,KAAL,CAAWsc,cAAX,CAA0B,KAAKtc,KAAL,CAAWsc,cAAX,CAA0B3c,MAA1B,GAAmC,CAA7D,CAAnB;;AAEA,QAAIqmD,UAAU,CAACrmD,MAAf,EAAuB;AACrBZ,MAAAA,IAAI,CAACinD,UAAL,GAAkBA,UAAlB;AACA,WAAKt5B,0BAAL,CAAgC3tB,IAAhC,EAAsCinD,UAAU,CAAC,CAAD,CAAhD;AACA,WAAKhmD,KAAL,CAAWsc,cAAX,CAA0B,KAAKtc,KAAL,CAAWsc,cAAX,CAA0B3c,MAA1B,GAAmC,CAA7D,IAAkE,EAAlE;AACD;AACF;;AAEDypD,EAAAA,uBAAuB,GAAG;AACxB,WAAO,KAAKnrD,KAAL,CAAWnH,OAAO,CAACgF,MAAnB,CAAP;AACD;;AAEDk3D,EAAAA,eAAe,CAAC8F,WAAD,EAAc;AAC3B,UAAMC,wBAAwB,GAAG,KAAK/4D,KAAL,CAAWsc,cAAX,CAA0B,KAAKtc,KAAL,CAAWsc,cAAX,CAA0B3c,MAA1B,GAAmC,CAA7D,CAAjC;;AAEA,WAAO,KAAK1B,KAAL,CAAWnH,OAAO,CAACgC,EAAnB,CAAP,EAA+B;AAC7B,YAAMkgE,SAAS,GAAG,KAAK3K,cAAL,EAAlB;AACA0K,MAAAA,wBAAwB,CAAC94D,IAAzB,CAA8B+4D,SAA9B;AACD;;AAED,QAAI,KAAK/6D,KAAL,CAAWnH,OAAO,CAACkF,OAAnB,CAAJ,EAAiC;AAC/B,UAAI,CAAC88D,WAAL,EAAkB;AAChB,aAAKzwC,UAAL;AACD;;AAED,UAAI,KAAK7pB,SAAL,CAAe,YAAf,KAAgC,CAAC,KAAKG,eAAL,CAAqB,YAArB,EAAmC,wBAAnC,CAArC,EAAmG;AACjG,aAAK2N,KAAL,CAAW,KAAKtM,KAAL,CAAWvC,KAAtB,EAA6BkE,aAAa,CAACqB,oBAA3C;AACD;AACF,KARD,MAQO,IAAI,CAAC,KAAKomD,uBAAL,EAAL,EAAqC;AAC1C,YAAM,KAAK98C,KAAL,CAAW,KAAKtM,KAAL,CAAWvC,KAAtB,EAA6BkE,aAAa,CAACiI,0BAA3C,CAAN;AACD;AACF;;AAEDykD,EAAAA,cAAc,GAAG;AACf,SAAK7kC,eAAL,CAAqB,CAAC,mBAAD,EAAsB,YAAtB,CAArB;AACA,UAAMzqB,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACA,SAAKyE,IAAL;;AAEA,QAAI,KAAKzX,SAAL,CAAe,YAAf,CAAJ,EAAkC;AAChC,WAAKwB,KAAL,CAAWsc,cAAX,CAA0Brc,IAA1B,CAA+B,EAA/B;AACA,YAAMoS,QAAQ,GAAG,KAAKrS,KAAL,CAAWvC,KAA5B;AACA,YAAMuO,QAAQ,GAAG,KAAKhM,KAAL,CAAWgM,QAA5B;AACA,UAAIytB,IAAJ;;AAEA,UAAI,KAAKpb,GAAL,CAASvnB,OAAO,CAACkB,MAAjB,CAAJ,EAA8B;AAC5ByhC,QAAAA,IAAI,GAAG,KAAKjI,eAAL,EAAP;AACA,aAAKpI,MAAL,CAAYtyB,OAAO,CAACmB,MAApB;AACD,OAHD,MAGO;AACLwhC,QAAAA,IAAI,GAAG,KAAK3H,eAAL,CAAqB,KAArB,CAAP;;AAEA,eAAO,KAAKzT,GAAL,CAASvnB,OAAO,CAACwB,GAAjB,CAAP,EAA8B;AAC5B,gBAAMyG,IAAI,GAAG,KAAK6P,WAAL,CAAiByD,QAAjB,EAA2BrG,QAA3B,CAAb;AACAjN,UAAAA,IAAI,CAAC41C,MAAL,GAAclb,IAAd;AACA16B,UAAAA,IAAI,CAAC0rB,QAAL,GAAgB,KAAKqH,eAAL,CAAqB,IAArB,CAAhB;AACA/yB,UAAAA,IAAI,CAAC2S,QAAL,GAAgB,KAAhB;AACA+nB,UAAAA,IAAI,GAAG,KAAK9nB,UAAL,CAAgB5S,IAAhB,EAAsB,kBAAtB,CAAP;AACD;AACF;;AAEDA,MAAAA,IAAI,CAAC8P,UAAL,GAAkB,KAAKq6C,4BAAL,CAAkCzvB,IAAlC,CAAlB;AACA,WAAKz5B,KAAL,CAAWsc,cAAX,CAA0BjI,GAA1B;AACD,KAvBD,MAuBO;AACLtV,MAAAA,IAAI,CAAC8P,UAAL,GAAkB,KAAK6iD,mBAAL,EAAlB;AACD;;AAED,WAAO,KAAK//C,UAAL,CAAgB5S,IAAhB,EAAsB,WAAtB,CAAP;AACD;;AAEDmqD,EAAAA,4BAA4B,CAACzvB,IAAD,EAAO;AACjC,QAAI,KAAKpb,GAAL,CAASvnB,OAAO,CAACkB,MAAjB,CAAJ,EAA8B;AAC5B,YAAM+G,IAAI,GAAG,KAAK6U,eAAL,CAAqB6lB,IAArB,CAAb;AACA16B,MAAAA,IAAI,CAACgU,MAAL,GAAc0mB,IAAd;AACA16B,MAAAA,IAAI,CAACmC,SAAL,GAAiB,KAAKu/B,4BAAL,CAAkC3pC,OAAO,CAACmB,MAA1C,EAAkD,KAAlD,CAAjB;AACA,WAAKukC,gBAAL,CAAsBz9B,IAAI,CAACmC,SAA3B;AACA,aAAO,KAAKyQ,UAAL,CAAgB5S,IAAhB,EAAsB,gBAAtB,CAAP;AACD;;AAED,WAAO06B,IAAP;AACD;;AAEDq+B,EAAAA,2BAA2B,CAAC/4D,IAAD,EAAO7I,OAAP,EAAgB;AACzC,UAAM+iE,OAAO,GAAG/iE,OAAO,KAAK,OAA5B;AACA,SAAK+f,IAAL;;AAEA,QAAI,KAAKgT,gBAAL,EAAJ,EAA6B;AAC3BlqB,MAAAA,IAAI,CAAC/I,KAAL,GAAa,IAAb;AACD,KAFD,MAEO;AACL+I,MAAAA,IAAI,CAAC/I,KAAL,GAAa,KAAK87B,eAAL,EAAb;AACA,WAAK5I,SAAL;AACD;;AAED,SAAKohC,mBAAL,CAAyBvrD,IAAzB,EAA+B7I,OAA/B;AACA,WAAO,KAAKyb,UAAL,CAAgB5S,IAAhB,EAAsBk6D,OAAO,GAAG,gBAAH,GAAsB,mBAAnD,CAAP;AACD;;AAED3O,EAAAA,mBAAmB,CAACvrD,IAAD,EAAO7I,OAAP,EAAgB;AACjC,UAAM+iE,OAAO,GAAG/iE,OAAO,KAAK,OAA5B;AACA,QAAIwJ,CAAJ;;AAEA,SAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,KAAKM,KAAL,CAAWqc,MAAX,CAAkB1c,MAAlC,EAA0C,EAAED,CAA5C,EAA+C;AAC7C,YAAMw5D,GAAG,GAAG,KAAKl5D,KAAL,CAAWqc,MAAX,CAAkB3c,CAAlB,CAAZ;;AAEA,UAAIX,IAAI,CAAC/I,KAAL,IAAc,IAAd,IAAsBkjE,GAAG,CAACziE,IAAJ,KAAasI,IAAI,CAAC/I,KAAL,CAAWS,IAAlD,EAAwD;AACtD,YAAIyiE,GAAG,CAACznD,IAAJ,IAAY,IAAZ,KAAqBwnD,OAAO,IAAIC,GAAG,CAACznD,IAAJ,KAAa,MAA7C,CAAJ,EAA0D;AAC1D,YAAI1S,IAAI,CAAC/I,KAAL,IAAcijE,OAAlB,EAA2B;AAC5B;AACF;;AAED,QAAIv5D,CAAC,KAAK,KAAKM,KAAL,CAAWqc,MAAX,CAAkB1c,MAA5B,EAAoC;AAClC,WAAK2M,KAAL,CAAWvN,IAAI,CAACtB,KAAhB,EAAuBkE,aAAa,CAACuC,oBAArC,EAA2DhO,OAA3D;AACD;AACF;;AAED6hE,EAAAA,sBAAsB,CAACh5D,IAAD,EAAO;AAC3B,SAAKkX,IAAL;AACA,SAAKiT,SAAL;AACA,WAAO,KAAKvX,UAAL,CAAgB5S,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAEDo6D,EAAAA,qBAAqB,GAAG;AACtB,SAAK/vC,MAAL,CAAYtyB,OAAO,CAACkB,MAApB;AACA,UAAMklB,GAAG,GAAG,KAAKsU,eAAL,EAAZ;AACA,SAAKpI,MAAL,CAAYtyB,OAAO,CAACmB,MAApB;AACA,WAAOilB,GAAP;AACD;;AAED86C,EAAAA,gBAAgB,CAACj5D,IAAD,EAAO;AACrB,SAAKkX,IAAL;AACA,SAAKjW,KAAL,CAAWqc,MAAX,CAAkBpc,IAAlB,CAAuB62D,SAAvB;AACA/3D,IAAAA,IAAI,CAACqR,IAAL,GAAY,KAAKmmD,kCAAL,CAAwC,MAAM,KAAKl9B,cAAL,CAAoB,IAApB,CAA9C,CAAZ;AACA,SAAKr5B,KAAL,CAAWqc,MAAX,CAAkBhI,GAAlB;AACA,SAAK+U,MAAL,CAAYtyB,OAAO,CAAC2E,MAApB;AACAsD,IAAAA,IAAI,CAAC+V,IAAL,GAAY,KAAKqkD,qBAAL,EAAZ;AACA,SAAK96C,GAAL,CAASvnB,OAAO,CAACqB,IAAjB;AACA,WAAO,KAAKwZ,UAAL,CAAgB5S,IAAhB,EAAsB,kBAAtB,CAAP;AACD;;AAEDk5D,EAAAA,iBAAiB,CAACl5D,IAAD,EAAO;AACtB,SAAKkX,IAAL;AACA,SAAKjW,KAAL,CAAWqc,MAAX,CAAkBpc,IAAlB,CAAuB62D,SAAvB;AACA,QAAIsC,OAAO,GAAG,CAAC,CAAf;;AAEA,QAAI,KAAKhI,cAAL,MAAyB,KAAKxoC,aAAL,CAAmB,OAAnB,CAA7B,EAA0D;AACxDwwC,MAAAA,OAAO,GAAG,KAAKp5D,KAAL,CAAWiM,YAArB;AACD;;AAED,SAAKqO,KAAL,CAAWF,KAAX,CAAiBhE,WAAjB;AACA,SAAKgT,MAAL,CAAYtyB,OAAO,CAACkB,MAApB;;AAEA,QAAI,KAAKiG,KAAL,CAAWnH,OAAO,CAACqB,IAAnB,CAAJ,EAA8B;AAC5B,UAAIihE,OAAO,GAAG,CAAC,CAAf,EAAkB;AAChB,aAAK/wC,UAAL,CAAgB+wC,OAAhB;AACD;;AAED,aAAO,KAAKC,QAAL,CAAct6D,IAAd,EAAoB,IAApB,CAAP;AACD;;AAED,UAAMu6D,aAAa,GAAG,KAAKhxC,YAAL,CAAkB,KAAlB,CAAtB;AACA,UAAMiL,KAAK,GAAG+lC,aAAa,IAAI,KAAK1B,YAAL,EAA/B;;AAEA,QAAI,KAAK35D,KAAL,CAAWnH,OAAO,CAACyE,IAAnB,KAA4B,KAAK0C,KAAL,CAAWnH,OAAO,CAAC0E,MAAnB,CAA5B,IAA0D+3B,KAA9D,EAAqE;AACnE,YAAM5W,IAAI,GAAG,KAAKnL,SAAL,EAAb;AACA,YAAMC,IAAI,GAAG8hB,KAAK,GAAG,KAAH,GAAW,KAAKvzB,KAAL,CAAWzK,KAAxC;AACA,WAAK0gB,IAAL;AACA,WAAKsjD,QAAL,CAAc58C,IAAd,EAAoB,IAApB,EAA0BlL,IAA1B;AACA,WAAKE,UAAL,CAAgBgL,IAAhB,EAAsB,qBAAtB;;AAEA,UAAI,CAAC,KAAK1e,KAAL,CAAWnH,OAAO,CAACuF,GAAnB,KAA2B,KAAKisB,YAAL,CAAkB,IAAlB,CAA5B,KAAwD3L,IAAI,CAAC68C,YAAL,CAAkB75D,MAAlB,KAA6B,CAAzF,EAA4F;AAC1F,eAAO,KAAK85D,UAAL,CAAgB16D,IAAhB,EAAsB4d,IAAtB,EAA4By8C,OAA5B,CAAP;AACD;;AAED,UAAIA,OAAO,GAAG,CAAC,CAAf,EAAkB;AAChB,aAAK/wC,UAAL,CAAgB+wC,OAAhB;AACD;;AAED,aAAO,KAAKC,QAAL,CAAct6D,IAAd,EAAoB4d,IAApB,CAAP;AACD;;AAED,UAAM+8C,uBAAuB,GAAG,KAAKz7D,KAAL,CAAWnH,OAAO,CAACL,IAAnB,KAA4B,CAAC,KAAKuJ,KAAL,CAAWwc,WAAxE;AACA,UAAMlK,mBAAmB,GAAG,IAAIkZ,gBAAJ,EAA5B;AACA,UAAM7O,IAAI,GAAG,KAAK6U,eAAL,CAAqB,IAArB,EAA2Blf,mBAA3B,CAAb;AACA,UAAMqnD,OAAO,GAAG,KAAKrxC,YAAL,CAAkB,IAAlB,CAAhB;;AAEA,QAAIqxC,OAAJ,EAAa;AACX,UAAIL,aAAJ,EAAmB;AACjB,aAAKhtD,KAAL,CAAWqQ,IAAI,CAAClf,KAAhB,EAAuBkE,aAAa,CAACqC,QAArC;AACD,OAFD,MAEO,IAAIo1D,OAAO,KAAK,CAAC,CAAb,IAAkBM,uBAAlB,IAA6C/8C,IAAI,CAAC3b,IAAL,KAAc,YAA3D,IAA2E2b,IAAI,CAAClmB,IAAL,KAAc,OAA7F,EAAsG;AAC3G,aAAK6V,KAAL,CAAWqQ,IAAI,CAAClf,KAAhB,EAAuBkE,aAAa,CAACoC,UAArC;AACD;AACF;;AAED,QAAI41D,OAAO,IAAI,KAAK17D,KAAL,CAAWnH,OAAO,CAACuF,GAAnB,CAAf,EAAwC;AACtC,WAAKoW,YAAL,CAAkBkK,IAAlB,EAAwB,IAAxB;AACA,YAAMi9C,WAAW,GAAGD,OAAO,GAAG,kBAAH,GAAwB,kBAAnD;AACA,WAAK58B,SAAL,CAAepgB,IAAf,EAAqBi9C,WAArB;AACA,aAAO,KAAKH,UAAL,CAAgB16D,IAAhB,EAAsB4d,IAAtB,EAA4By8C,OAA5B,CAAP;AACD,KALD,MAKO;AACL,WAAKjvC,qBAAL,CAA2B7X,mBAA3B,EAAgD,IAAhD;AACD;;AAED,QAAI8mD,OAAO,GAAG,CAAC,CAAf,EAAkB;AAChB,WAAK/wC,UAAL,CAAgB+wC,OAAhB;AACD;;AAED,WAAO,KAAKC,QAAL,CAAct6D,IAAd,EAAoB4d,IAApB,CAAP;AACD;;AAEDwoC,EAAAA,sBAAsB,CAACpmD,IAAD,EAAOqQ,OAAP,EAAgByqD,mBAAhB,EAAqC;AACzD,SAAK5jD,IAAL;AACA,WAAO,KAAK28C,aAAL,CAAmB7zD,IAAnB,EAAyBk4D,cAAc,IAAI4C,mBAAmB,GAAG,CAAH,GAAO3C,sBAA9B,CAAvC,EAA8F9nD,OAA9F,CAAP;AACD;;AAED8oD,EAAAA,gBAAgB,CAACn5D,IAAD,EAAO;AACrB,SAAKkX,IAAL;AACAlX,IAAAA,IAAI,CAAC+V,IAAL,GAAY,KAAKqkD,qBAAL,EAAZ;AACAp6D,IAAAA,IAAI,CAACi7B,UAAL,GAAkB,KAAKX,cAAL,CAAoB,IAApB,CAAlB;AACAt6B,IAAAA,IAAI,CAACs7B,SAAL,GAAiB,KAAKhc,GAAL,CAASvnB,OAAO,CAACgE,KAAjB,IAA0B,KAAKu+B,cAAL,CAAoB,IAApB,CAA1B,GAAsD,IAAvE;AACA,WAAO,KAAK1nB,UAAL,CAAgB5S,IAAhB,EAAsB,aAAtB,CAAP;AACD;;AAEDo5D,EAAAA,oBAAoB,CAACp5D,IAAD,EAAO;AACzB,QAAI,CAAC,KAAKosB,SAAL,CAAerD,SAAhB,IAA6B,CAAC,KAAKpxB,OAAL,CAAak2D,0BAA/C,EAA2E;AACzE,WAAKtgD,KAAL,CAAW,KAAKtM,KAAL,CAAWvC,KAAtB,EAA6BkE,aAAa,CAACyC,aAA3C;AACD;;AAED,SAAK6R,IAAL;;AAEA,QAAI,KAAKgT,gBAAL,EAAJ,EAA6B;AAC3BlqB,MAAAA,IAAI,CAACs4B,QAAL,GAAgB,IAAhB;AACD,KAFD,MAEO;AACLt4B,MAAAA,IAAI,CAACs4B,QAAL,GAAgB,KAAK7F,eAAL,EAAhB;AACA,WAAKtI,SAAL;AACD;;AAED,WAAO,KAAKvX,UAAL,CAAgB5S,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAEDq5D,EAAAA,oBAAoB,CAACr5D,IAAD,EAAO;AACzB,SAAKkX,IAAL;AACAlX,IAAAA,IAAI,CAAC+6D,YAAL,GAAoB,KAAKX,qBAAL,EAApB;AACA,UAAMY,KAAK,GAAGh7D,IAAI,CAACg7D,KAAL,GAAa,EAA3B;AACA,SAAK3wC,MAAL,CAAYtyB,OAAO,CAACa,MAApB;AACA,SAAKqI,KAAL,CAAWqc,MAAX,CAAkBpc,IAAlB,CAAuB82D,WAAvB;AACA,SAAKz8C,KAAL,CAAWF,KAAX,CAAiBhE,WAAjB;AACA,QAAI4jD,GAAJ;;AAEA,SAAK,IAAIC,UAAT,EAAqB,CAAC,KAAKh8D,KAAL,CAAWnH,OAAO,CAACgB,MAAnB,CAAtB,GAAmD;AACjD,UAAI,KAAKmG,KAAL,CAAWnH,OAAO,CAAC0D,KAAnB,KAA6B,KAAKyD,KAAL,CAAWnH,OAAO,CAAC8D,QAAnB,CAAjC,EAA+D;AAC7D,cAAMs/D,MAAM,GAAG,KAAKj8D,KAAL,CAAWnH,OAAO,CAAC0D,KAAnB,CAAf;AACA,YAAIw/D,GAAJ,EAAS,KAAKroD,UAAL,CAAgBqoD,GAAhB,EAAqB,YAArB;AACTD,QAAAA,KAAK,CAAC95D,IAAN,CAAW+5D,GAAG,GAAG,KAAKxoD,SAAL,EAAjB;AACAwoD,QAAAA,GAAG,CAAChgC,UAAJ,GAAiB,EAAjB;AACA,aAAK/jB,IAAL;;AAEA,YAAIikD,MAAJ,EAAY;AACVF,UAAAA,GAAG,CAACllD,IAAJ,GAAW,KAAK0c,eAAL,EAAX;AACD,SAFD,MAEO;AACL,cAAIyoC,UAAJ,EAAgB;AACd,iBAAK3tD,KAAL,CAAW,KAAKtM,KAAL,CAAWiM,YAAtB,EAAoCtK,aAAa,CAAC+E,wBAAlD;AACD;;AAEDuzD,UAAAA,UAAU,GAAG,IAAb;AACAD,UAAAA,GAAG,CAACllD,IAAJ,GAAW,IAAX;AACD;;AAED,aAAKsU,MAAL,CAAYtyB,OAAO,CAACsB,KAApB;AACD,OAnBD,MAmBO;AACL,YAAI4hE,GAAJ,EAAS;AACPA,UAAAA,GAAG,CAAChgC,UAAJ,CAAe/5B,IAAf,CAAoB,KAAKo5B,cAAL,CAAoB,IAApB,CAApB;AACD,SAFD,MAEO;AACL,eAAKhR,UAAL;AACD;AACF;AACF;;AAED,SAAK/N,KAAL,CAAWD,IAAX;AACA,QAAI2/C,GAAJ,EAAS,KAAKroD,UAAL,CAAgBqoD,GAAhB,EAAqB,YAArB;AACT,SAAK/jD,IAAL;AACA,SAAKjW,KAAL,CAAWqc,MAAX,CAAkBhI,GAAlB;AACA,WAAO,KAAK1C,UAAL,CAAgB5S,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAEDs5D,EAAAA,mBAAmB,CAACt5D,IAAD,EAAO;AACxB,SAAKkX,IAAL;;AAEA,QAAI,KAAK8S,qBAAL,EAAJ,EAAkC;AAChC,WAAKzc,KAAL,CAAW,KAAKtM,KAAL,CAAWoM,UAAtB,EAAkCzK,aAAa,CAACgF,iBAAhD;AACD;;AAED5H,IAAAA,IAAI,CAACs4B,QAAL,GAAgB,KAAK7F,eAAL,EAAhB;AACA,SAAKtI,SAAL;AACA,WAAO,KAAKvX,UAAL,CAAgB5S,IAAhB,EAAsB,gBAAtB,CAAP;AACD;;AAED0qD,EAAAA,qBAAqB,GAAG;AACtB,UAAM5wB,KAAK,GAAG,KAAKkG,gBAAL,EAAd;AACA,UAAMo7B,MAAM,GAAGthC,KAAK,CAAC73B,IAAN,KAAe,YAA9B;AACA,SAAKsZ,KAAL,CAAWF,KAAX,CAAiB+/C,MAAM,GAAG3jD,kBAAH,GAAwB,CAA/C;AACA,SAAKumB,SAAL,CAAelE,KAAf,EAAsB,cAAtB,EAAsClhB,YAAtC;AACA,WAAOkhB,KAAP;AACD;;AAEDy/B,EAAAA,iBAAiB,CAACv5D,IAAD,EAAO;AACtB,SAAKkX,IAAL;AACAlX,IAAAA,IAAI,CAACq7D,KAAL,GAAa,KAAK7P,UAAL,EAAb;AACAxrD,IAAAA,IAAI,CAACs7D,OAAL,GAAe,IAAf;;AAEA,QAAI,KAAKp8D,KAAL,CAAWnH,OAAO,CAAC2D,MAAnB,CAAJ,EAAgC;AAC9B,YAAM6/D,MAAM,GAAG,KAAK9oD,SAAL,EAAf;AACA,WAAKyE,IAAL;;AAEA,UAAI,KAAKhY,KAAL,CAAWnH,OAAO,CAACkB,MAAnB,CAAJ,EAAgC;AAC9B,aAAKoxB,MAAL,CAAYtyB,OAAO,CAACkB,MAApB;AACAsiE,QAAAA,MAAM,CAACzhC,KAAP,GAAe,KAAK4wB,qBAAL,EAAf;AACA,aAAKrgC,MAAL,CAAYtyB,OAAO,CAACmB,MAApB;AACD,OAJD,MAIO;AACLqiE,QAAAA,MAAM,CAACzhC,KAAP,GAAe,IAAf;AACA,aAAKve,KAAL,CAAWF,KAAX,CAAiBhE,WAAjB;AACD;;AAEDkkD,MAAAA,MAAM,CAAClqD,IAAP,GAAc,KAAKmmD,kCAAL,CAAwC,MAAM,KAAKhM,UAAL,CAAgB,KAAhB,EAAuB,KAAvB,CAA9C,CAAd;AACA,WAAKjwC,KAAL,CAAWD,IAAX;AACAtb,MAAAA,IAAI,CAACs7D,OAAL,GAAe,KAAK1oD,UAAL,CAAgB2oD,MAAhB,EAAwB,aAAxB,CAAf;AACD;;AAEDv7D,IAAAA,IAAI,CAACw7D,SAAL,GAAiB,KAAKl8C,GAAL,CAASvnB,OAAO,CAACiE,QAAjB,IAA6B,KAAKwvD,UAAL,EAA7B,GAAiD,IAAlE;;AAEA,QAAI,CAACxrD,IAAI,CAACs7D,OAAN,IAAiB,CAACt7D,IAAI,CAACw7D,SAA3B,EAAsC;AACpC,WAAKjuD,KAAL,CAAWvN,IAAI,CAACtB,KAAhB,EAAuBkE,aAAa,CAACiF,gBAArC;AACD;;AAED,WAAO,KAAK+K,UAAL,CAAgB5S,IAAhB,EAAsB,cAAtB,CAAP;AACD;;AAEDsmD,EAAAA,iBAAiB,CAACtmD,IAAD,EAAO0S,IAAP,EAAa;AAC5B,SAAKwE,IAAL;AACA,SAAKsjD,QAAL,CAAcx6D,IAAd,EAAoB,KAApB,EAA2B0S,IAA3B;AACA,SAAKyX,SAAL;AACA,WAAO,KAAKvX,UAAL,CAAgB5S,IAAhB,EAAsB,qBAAtB,CAAP;AACD;;AAEDw5D,EAAAA,mBAAmB,CAACx5D,IAAD,EAAO;AACxB,SAAKkX,IAAL;AACAlX,IAAAA,IAAI,CAAC+V,IAAL,GAAY,KAAKqkD,qBAAL,EAAZ;AACA,SAAKn5D,KAAL,CAAWqc,MAAX,CAAkBpc,IAAlB,CAAuB62D,SAAvB;AACA/3D,IAAAA,IAAI,CAACqR,IAAL,GAAY,KAAKmmD,kCAAL,CAAwC,MAAM,KAAKl9B,cAAL,CAAoB,OAApB,CAA9C,CAAZ;AACA,SAAKr5B,KAAL,CAAWqc,MAAX,CAAkBhI,GAAlB;AACA,WAAO,KAAK1C,UAAL,CAAgB5S,IAAhB,EAAsB,gBAAtB,CAAP;AACD;;AAEDy5D,EAAAA,kBAAkB,CAACz5D,IAAD,EAAO;AACvB,QAAI,KAAKiB,KAAL,CAAWkV,MAAf,EAAuB;AACrB,WAAK5I,KAAL,CAAW,KAAKtM,KAAL,CAAWvC,KAAtB,EAA6BkE,aAAa,CAACqH,UAA3C;AACD;;AAED,SAAKiN,IAAL;AACAlX,IAAAA,IAAI,CAAC41C,MAAL,GAAc,KAAKwkB,qBAAL,EAAd;AACAp6D,IAAAA,IAAI,CAACqR,IAAL,GAAY,KAAKmmD,kCAAL,CAAwC,MAAM,KAAKl9B,cAAL,CAAoB,MAApB,CAA9C,CAAZ;AACA,WAAO,KAAK1nB,UAAL,CAAgB5S,IAAhB,EAAsB,eAAtB,CAAP;AACD;;AAED05D,EAAAA,mBAAmB,CAAC15D,IAAD,EAAO;AACxB,SAAKkX,IAAL;AACA,WAAO,KAAKtE,UAAL,CAAgB5S,IAAhB,EAAsB,gBAAtB,CAAP;AACD;;AAED85D,EAAAA,qBAAqB,CAAC95D,IAAD,EAAO65D,SAAP,EAAkBn/B,IAAlB,EAAwBrlB,OAAxB,EAAiC;AACpD,SAAK,MAAMpe,KAAX,IAAoB,KAAKgK,KAAL,CAAWqc,MAA/B,EAAuC;AACrC,UAAIrmB,KAAK,CAACS,IAAN,KAAemiE,SAAnB,EAA8B;AAC5B,aAAKtsD,KAAL,CAAWmtB,IAAI,CAACh8B,KAAhB,EAAuBkE,aAAa,CAACiE,kBAArC,EAAyDgzD,SAAzD;AACD;AACF;;AAED,UAAMnnD,IAAI,GAAG,KAAKzR,KAAL,CAAWgB,IAAX,CAAgBtL,MAAhB,GAAyB,MAAzB,GAAkC,KAAKuI,KAAL,CAAWnH,OAAO,CAACsE,OAAnB,IAA8B,QAA9B,GAAyC,IAAxF;;AAEA,SAAK,IAAIsE,CAAC,GAAG,KAAKM,KAAL,CAAWqc,MAAX,CAAkB1c,MAAlB,GAA2B,CAAxC,EAA2CD,CAAC,IAAI,CAAhD,EAAmDA,CAAC,EAApD,EAAwD;AACtD,YAAM1J,KAAK,GAAG,KAAKgK,KAAL,CAAWqc,MAAX,CAAkB3c,CAAlB,CAAd;;AAEA,UAAI1J,KAAK,CAACwkE,cAAN,KAAyBz7D,IAAI,CAACtB,KAAlC,EAAyC;AACvCzH,QAAAA,KAAK,CAACwkE,cAAN,GAAuB,KAAKx6D,KAAL,CAAWvC,KAAlC;AACAzH,QAAAA,KAAK,CAACyb,IAAN,GAAaA,IAAb;AACD,OAHD,MAGO;AACL;AACD;AACF;;AAED,SAAKzR,KAAL,CAAWqc,MAAX,CAAkBpc,IAAlB,CAAuB;AACrBxJ,MAAAA,IAAI,EAAEmiE,SADe;AAErBnnD,MAAAA,IAAI,EAAEA,IAFe;AAGrB+oD,MAAAA,cAAc,EAAE,KAAKx6D,KAAL,CAAWvC;AAHN,KAAvB;AAKAsB,IAAAA,IAAI,CAACqR,IAAL,GAAY,KAAKipB,cAAL,CAAoBjlB,OAAO,GAAGA,OAAO,CAACoL,OAAR,CAAgB,OAAhB,MAA6B,CAAC,CAA9B,GAAkCpL,OAAO,GAAG,OAA5C,GAAsDA,OAAzD,GAAmE,OAA9F,CAAZ;AACA,SAAKpU,KAAL,CAAWqc,MAAX,CAAkBhI,GAAlB;AACAtV,IAAAA,IAAI,CAAC/I,KAAL,GAAayjC,IAAb;AACA,WAAO,KAAK9nB,UAAL,CAAgB5S,IAAhB,EAAsB,kBAAtB,CAAP;AACD;;AAEDy6B,EAAAA,wBAAwB,CAACz6B,IAAD,EAAO06B,IAAP,EAAa;AACnC16B,IAAAA,IAAI,CAAC8P,UAAL,GAAkB4qB,IAAlB;AACA,SAAKvQ,SAAL;AACA,WAAO,KAAKvX,UAAL,CAAgB5S,IAAhB,EAAsB,qBAAtB,CAAP;AACD;;AAEDwrD,EAAAA,UAAU,CAACkQ,eAAe,GAAG,KAAnB,EAA0BC,qBAAqB,GAAG,IAAlD,EAAwDC,eAAxD,EAAyE;AACjF,UAAM57D,IAAI,GAAG,KAAKyS,SAAL,EAAb;;AAEA,QAAIipD,eAAJ,EAAqB;AACnB,WAAKz6D,KAAL,CAAWyc,YAAX,CAAwByC,KAAxB;AACD;;AAED,SAAKkK,MAAL,CAAYtyB,OAAO,CAACa,MAApB;;AAEA,QAAI+iE,qBAAJ,EAA2B;AACzB,WAAKpgD,KAAL,CAAWF,KAAX,CAAiBhE,WAAjB;AACD;;AAED,SAAKtG,cAAL,CAAoB/Q,IAApB,EAA0B07D,eAA1B,EAA2C,KAA3C,EAAkD3jE,OAAO,CAACgB,MAA1D,EAAkE6iE,eAAlE;;AAEA,QAAID,qBAAJ,EAA2B;AACzB,WAAKpgD,KAAL,CAAWD,IAAX;AACD;;AAED,WAAO,KAAK1I,UAAL,CAAgB5S,IAAhB,EAAsB,gBAAtB,CAAP;AACD;;AAED0Q,EAAAA,gBAAgB,CAACd,IAAD,EAAO;AACrB,WAAOA,IAAI,CAAC3N,IAAL,KAAc,qBAAd,IAAuC2N,IAAI,CAACE,UAAL,CAAgB7N,IAAhB,KAAyB,eAAhE,IAAmF,CAAC2N,IAAI,CAACE,UAAL,CAAgBC,KAAhB,CAAsBa,aAAjH;AACD;;AAEDG,EAAAA,cAAc,CAAC/Q,IAAD,EAAO07D,eAAP,EAAwBnhC,QAAxB,EAAkC57B,GAAlC,EAAuCi9D,eAAvC,EAAwD;AACpE,UAAMvqD,IAAI,GAAGrR,IAAI,CAACqR,IAAL,GAAY,EAAzB;AACA,UAAMH,UAAU,GAAGlR,IAAI,CAACkR,UAAL,GAAkB,EAArC;AACA,SAAK+zC,2BAAL,CAAiC5zC,IAAjC,EAAuCqqD,eAAe,GAAGxqD,UAAH,GAAgB/Q,SAAtE,EAAiFo6B,QAAjF,EAA2F57B,GAA3F,EAAgGi9D,eAAhG;AACD;;AAED3W,EAAAA,2BAA2B,CAAC5zC,IAAD,EAAOH,UAAP,EAAmBqpB,QAAnB,EAA6B57B,GAA7B,EAAkCi9D,eAAlC,EAAmD;AAC5E,UAAMjQ,SAAS,GAAG,KAAK1qD,KAAL,CAAWkV,MAA7B;AACA,QAAIygD,sBAAsB,GAAG,KAA7B;AACA,QAAIiF,kBAAkB,GAAG,KAAzB;;AAEA,WAAO,CAAC,KAAK38D,KAAL,CAAWP,GAAX,CAAR,EAAyB;AACvB,YAAMiR,IAAI,GAAG,KAAK0qB,cAAL,CAAoB,IAApB,EAA0BC,QAA1B,CAAb;;AAEA,UAAIrpB,UAAU,IAAI,CAAC2qD,kBAAnB,EAAuC;AACrC,YAAI,KAAKnrD,gBAAL,CAAsBd,IAAtB,CAAJ,EAAiC;AAC/B,gBAAMF,SAAS,GAAG,KAAKmB,eAAL,CAAqBjB,IAArB,CAAlB;AACAsB,UAAAA,UAAU,CAAChQ,IAAX,CAAgBwO,SAAhB;;AAEA,cAAI,CAACknD,sBAAD,IAA2BlnD,SAAS,CAAClZ,KAAV,CAAgBA,KAAhB,KAA0B,YAAzD,EAAuE;AACrEogE,YAAAA,sBAAsB,GAAG,IAAzB;AACA,iBAAK12C,SAAL,CAAe,IAAf;AACD;;AAED;AACD;;AAED27C,QAAAA,kBAAkB,GAAG,IAArB;AACA,aAAK56D,KAAL,CAAWyc,YAAX,CAAwByC,KAAxB;AACD;;AAED9O,MAAAA,IAAI,CAACnQ,IAAL,CAAU0O,IAAV;AACD;;AAED,QAAIgsD,eAAJ,EAAqB;AACnBA,MAAAA,eAAe,CAAC91C,IAAhB,CAAqB,IAArB,EAA2B8wC,sBAA3B;AACD;;AAED,QAAI,CAACjL,SAAL,EAAgB;AACd,WAAKzrC,SAAL,CAAe,KAAf;AACD;;AAED,SAAKhJ,IAAL;AACD;;AAEDojD,EAAAA,QAAQ,CAACt6D,IAAD,EAAO4d,IAAP,EAAa;AACnB5d,IAAAA,IAAI,CAAC4d,IAAL,GAAYA,IAAZ;AACA,SAAKuM,SAAL,CAAe,KAAf;AACAnqB,IAAAA,IAAI,CAAC+V,IAAL,GAAY,KAAK7W,KAAL,CAAWnH,OAAO,CAACqB,IAAnB,IAA2B,IAA3B,GAAkC,KAAKq5B,eAAL,EAA9C;AACA,SAAKtI,SAAL,CAAe,KAAf;AACAnqB,IAAAA,IAAI,CAACuyD,MAAL,GAAc,KAAKrzD,KAAL,CAAWnH,OAAO,CAACmB,MAAnB,IAA6B,IAA7B,GAAoC,KAAKu5B,eAAL,EAAlD;AACA,SAAKpI,MAAL,CAAYtyB,OAAO,CAACmB,MAApB;AACA8G,IAAAA,IAAI,CAACqR,IAAL,GAAY,KAAKmmD,kCAAL,CAAwC,MAAM,KAAKl9B,cAAL,CAAoB,KAApB,CAA9C,CAAZ;AACA,SAAK/e,KAAL,CAAWD,IAAX;AACA,SAAKra,KAAL,CAAWqc,MAAX,CAAkBhI,GAAlB;AACA,WAAO,KAAK1C,UAAL,CAAgB5S,IAAhB,EAAsB,cAAtB,CAAP;AACD;;AAED06D,EAAAA,UAAU,CAAC16D,IAAD,EAAO4d,IAAP,EAAay8C,OAAb,EAAsB;AAC9B,UAAMyB,OAAO,GAAG,KAAK58D,KAAL,CAAWnH,OAAO,CAACuF,GAAnB,CAAhB;AACA,SAAK4Z,IAAL;;AAEA,QAAI4kD,OAAJ,EAAa;AACX,UAAIzB,OAAO,GAAG,CAAC,CAAf,EAAkB,KAAK/wC,UAAL,CAAgB+wC,OAAhB;AACnB,KAFD,MAEO;AACLr6D,MAAAA,IAAI,CAAC+7D,KAAL,GAAa1B,OAAO,GAAG,CAAC,CAAxB;AACD;;AAED,QAAIz8C,IAAI,CAAC3b,IAAL,KAAc,qBAAd,IAAuC2b,IAAI,CAAC68C,YAAL,CAAkB,CAAlB,EAAqB78C,IAArB,IAA6B,IAApE,KAA6E,CAACk+C,OAAD,IAAY,KAAK76D,KAAL,CAAWkV,MAAvB,IAAiCyH,IAAI,CAAClL,IAAL,KAAc,KAA/C,IAAwDkL,IAAI,CAAC68C,YAAL,CAAkB,CAAlB,EAAqBxoD,EAArB,CAAwBhQ,IAAxB,KAAiC,YAAtK,CAAJ,EAAyL;AACvL,WAAKsL,KAAL,CAAWqQ,IAAI,CAAClf,KAAhB,EAAuBkE,aAAa,CAACmC,sBAArC,EAA6D+2D,OAAO,GAAG,QAAH,GAAc,QAAlF;AACD,KAFD,MAEO,IAAIl+C,IAAI,CAAC3b,IAAL,KAAc,mBAAlB,EAAuC;AAC5C,WAAKsL,KAAL,CAAWqQ,IAAI,CAAClf,KAAhB,EAAuBkE,aAAa,CAACuD,UAArC,EAAiD,UAAjD;AACD;;AAEDnG,IAAAA,IAAI,CAAC++B,IAAL,GAAYnhB,IAAZ;AACA5d,IAAAA,IAAI,CAACg2B,KAAL,GAAa8lC,OAAO,GAAG,KAAKrpC,eAAL,EAAH,GAA4B,KAAK+I,uBAAL,EAAhD;AACA,SAAKnR,MAAL,CAAYtyB,OAAO,CAACmB,MAApB;AACA8G,IAAAA,IAAI,CAACqR,IAAL,GAAY,KAAKmmD,kCAAL,CAAwC,MAAM,KAAKl9B,cAAL,CAAoB,KAApB,CAA9C,CAAZ;AACA,SAAK/e,KAAL,CAAWD,IAAX;AACA,SAAKra,KAAL,CAAWqc,MAAX,CAAkBhI,GAAlB;AACA,WAAO,KAAK1C,UAAL,CAAgB5S,IAAhB,EAAsB87D,OAAO,GAAG,gBAAH,GAAsB,gBAAnD,CAAP;AACD;;AAEDtB,EAAAA,QAAQ,CAACx6D,IAAD,EAAOg8D,KAAP,EAActpD,IAAd,EAAoB;AAC1B,UAAM+nD,YAAY,GAAGz6D,IAAI,CAACy6D,YAAL,GAAoB,EAAzC;AACA,UAAMwB,YAAY,GAAG,KAAKx8D,SAAL,CAAe,YAAf,CAArB;AACAO,IAAAA,IAAI,CAAC0S,IAAL,GAAYA,IAAZ;;AAEA,aAAS;AACP,YAAM4pB,IAAI,GAAG,KAAK7pB,SAAL,EAAb;AACA,WAAK0tB,UAAL,CAAgB7D,IAAhB,EAAsB5pB,IAAtB;;AAEA,UAAI,KAAK4M,GAAL,CAASvnB,OAAO,CAACmC,EAAjB,CAAJ,EAA0B;AACxBoiC,QAAAA,IAAI,CAAC1e,IAAL,GAAYo+C,KAAK,GAAG,KAAKvL,0BAAL,EAAH,GAAuC,KAAKj1B,uBAAL,EAAxD;AACD,OAFD,MAEO;AACL,YAAI9oB,IAAI,KAAK,OAAT,IAAoB,EAAE,KAAKxT,KAAL,CAAWnH,OAAO,CAACuF,GAAnB,KAA2B,KAAKisB,YAAL,CAAkB,IAAlB,CAA7B,CAAxB,EAA+E;AAC7E,cAAI,CAAC0yC,YAAL,EAAmB;AACjB,iBAAK1uD,KAAL,CAAW,KAAKtM,KAAL,CAAWoM,UAAtB,EAAkCzK,aAAa,CAACkB,6BAAhD,EAA+E,oBAA/E;AACD;AACF,SAJD,MAIO,IAAIw4B,IAAI,CAACrqB,EAAL,CAAQhQ,IAAR,KAAiB,YAAjB,IAAiC,EAAE+5D,KAAK,KAAK,KAAK98D,KAAL,CAAWnH,OAAO,CAACuF,GAAnB,KAA2B,KAAKisB,YAAL,CAAkB,IAAlB,CAAhC,CAAP,CAArC,EAAuG;AAC5G,eAAKhc,KAAL,CAAW,KAAKtM,KAAL,CAAWoM,UAAtB,EAAkCzK,aAAa,CAACkB,6BAAhD,EAA+E,0BAA/E;AACD;;AAEDw4B,QAAAA,IAAI,CAAC1e,IAAL,GAAY,IAAZ;AACD;;AAED68C,MAAAA,YAAY,CAACv5D,IAAb,CAAkB,KAAK0R,UAAL,CAAgB0pB,IAAhB,EAAsB,oBAAtB,CAAlB;AACA,UAAI,CAAC,KAAKhd,GAAL,CAASvnB,OAAO,CAACoB,KAAjB,CAAL,EAA8B;AAC/B;;AAED,WAAO6G,IAAP;AACD;;AAEDmgC,EAAAA,UAAU,CAAC7D,IAAD,EAAO5pB,IAAP,EAAa;AACrB4pB,IAAAA,IAAI,CAACrqB,EAAL,GAAU,KAAK+tB,gBAAL,EAAV;AACA,SAAKhC,SAAL,CAAe1B,IAAI,CAACrqB,EAApB,EAAwB,sBAAxB,EAAgDS,IAAI,KAAK,KAAT,GAAiBmG,QAAjB,GAA4BD,YAA5E,EAA0FzY,SAA1F,EAAqGuS,IAAI,KAAK,KAA9G;AACD;;AAEDmhD,EAAAA,aAAa,CAAC7zD,IAAD,EAAOk8D,SAAS,GAAGjE,aAAnB,EAAkC5nD,OAAO,GAAG,KAA5C,EAAmD;AAC9D,UAAM0sB,WAAW,GAAGm/B,SAAS,GAAGhE,cAAhC;AACA,UAAMiE,kBAAkB,GAAGD,SAAS,GAAG/D,sBAAvC;AACA,UAAMiE,SAAS,GAAG,CAAC,CAACr/B,WAAF,IAAiB,EAAEm/B,SAAS,GAAG9D,gBAAd,CAAnC;AACA,SAAKhoD,YAAL,CAAkBpQ,IAAlB,EAAwBqQ,OAAxB;;AAEA,QAAI,KAAKnR,KAAL,CAAWnH,OAAO,CAACsD,IAAnB,KAA4B8gE,kBAAhC,EAAoD;AAClD,WAAK5uD,KAAL,CAAW,KAAKtM,KAAL,CAAWvC,KAAtB,EAA6BkE,aAAa,CAACsC,iCAA3C;AACD;;AAEDlF,IAAAA,IAAI,CAAC02D,SAAL,GAAiB,KAAKp3C,GAAL,CAASvnB,OAAO,CAACsD,IAAjB,CAAjB;;AAEA,QAAI0hC,WAAJ,EAAiB;AACf/8B,MAAAA,IAAI,CAACiS,EAAL,GAAU,KAAKw5C,eAAL,CAAqB2Q,SAArB,CAAV;AACD;;AAED,UAAMtV,yBAAyB,GAAG,KAAK7lD,KAAL,CAAWyb,sBAA7C;AACA,SAAKzb,KAAL,CAAWyb,sBAAX,GAAoC,KAApC;AACA,SAAKnB,KAAL,CAAWF,KAAX,CAAiB9D,cAAjB;AACA,SAAK6U,SAAL,CAAe/Q,KAAf,CAAqB4N,aAAa,CAAC5Y,OAAD,EAAUrQ,IAAI,CAAC02D,SAAf,CAAlC;;AAEA,QAAI,CAAC35B,WAAL,EAAkB;AAChB/8B,MAAAA,IAAI,CAACiS,EAAL,GAAU,KAAKw5C,eAAL,EAAV;AACD;;AAED,SAAKxrB,mBAAL,CAAyBjgC,IAAzB,EAA+B,KAA/B;AACA,SAAKw3D,kCAAL,CAAwC,MAAM;AAC5C,WAAKn9B,0BAAL,CAAgCr6B,IAAhC,EAAsC+8B,WAAW,GAAG,qBAAH,GAA2B,oBAA5E;AACD,KAFD;AAGA,SAAK3Q,SAAL,CAAe9Q,IAAf;AACA,SAAKC,KAAL,CAAWD,IAAX;;AAEA,QAAIyhB,WAAW,IAAI,CAACo/B,kBAApB,EAAwC;AACtC,WAAK5U,2BAAL,CAAiCvnD,IAAjC;AACD;;AAED,SAAKiB,KAAL,CAAWyb,sBAAX,GAAoCoqC,yBAApC;AACA,WAAO9mD,IAAP;AACD;;AAEDyrD,EAAAA,eAAe,CAAC2Q,SAAD,EAAY;AACzB,WAAOA,SAAS,IAAI,KAAKl9D,KAAL,CAAWnH,OAAO,CAACL,IAAnB,CAAb,GAAwC,KAAKq7B,eAAL,EAAxC,GAAiE,IAAxE;AACD;;AAEDkN,EAAAA,mBAAmB,CAACjgC,IAAD,EAAOkgC,cAAP,EAAuB;AACxC,SAAK7V,MAAL,CAAYtyB,OAAO,CAACkB,MAApB;AACA,SAAKqzB,eAAL,CAAqBjR,KAArB,CAA2B4M,4BAA4B,EAAvD;AACAjoB,IAAAA,IAAI,CAACoC,MAAL,GAAc,KAAKi9C,gBAAL,CAAsBtnD,OAAO,CAACmB,MAA9B,EAAsC,EAAtC,EAA0C,KAA1C,EAAiDgnC,cAAjD,CAAd;AACA,SAAK5T,eAAL,CAAqBhR,IAArB;AACD;;AAEDisC,EAAAA,2BAA2B,CAACvnD,IAAD,EAAO;AAChC,QAAI,CAACA,IAAI,CAACiS,EAAV,EAAc;AACd,SAAKsJ,KAAL,CAAWC,WAAX,CAAuBxb,IAAI,CAACiS,EAAL,CAAQva,IAA/B,EAAqC,KAAKuJ,KAAL,CAAWkV,MAAX,IAAqBnW,IAAI,CAAC02D,SAA1B,IAAuC12D,IAAI,CAACihC,KAA5C,GAAoD,KAAK1lB,KAAL,CAAWN,mBAAX,GAAiCpC,QAAjC,GAA4CD,YAAhG,GAA+GE,aAApJ,EAAmK9Y,IAAI,CAACiS,EAAL,CAAQvT,KAA3K;AACD;;AAED2nD,EAAAA,UAAU,CAACrmD,IAAD,EAAO+8B,WAAP,EAAoBC,UAApB,EAAgC;AACxC,SAAK9lB,IAAL;AACA,SAAKw0C,cAAL,CAAoB1rD,IAApB;AACA,UAAM2rD,SAAS,GAAG,KAAK1qD,KAAL,CAAWkV,MAA7B;AACA,SAAKlV,KAAL,CAAWkV,MAAX,GAAoB,IAApB;AACA,SAAK2mB,YAAL,CAAkB98B,IAAlB,EAAwB+8B,WAAxB,EAAqCC,UAArC;AACA,SAAKsB,eAAL,CAAqBt+B,IAArB;AACAA,IAAAA,IAAI,CAACqR,IAAL,GAAY,KAAKu6C,cAAL,CAAoB,CAAC,CAAC5rD,IAAI,CAACuO,UAA3B,EAAuCo9C,SAAvC,CAAZ;AACA,WAAO,KAAK/4C,UAAL,CAAgB5S,IAAhB,EAAsB+8B,WAAW,GAAG,kBAAH,GAAwB,iBAAzD,CAAP;AACD;;AAEDmB,EAAAA,eAAe,GAAG;AAChB,WAAO,KAAKh/B,KAAL,CAAWnH,OAAO,CAACmC,EAAnB,KAA0B,KAAKgF,KAAL,CAAWnH,OAAO,CAACqB,IAAnB,CAA1B,IAAsD,KAAK8F,KAAL,CAAWnH,OAAO,CAACgB,MAAnB,CAA7D;AACD;;AAEDklC,EAAAA,aAAa,GAAG;AACd,WAAO,KAAK/+B,KAAL,CAAWnH,OAAO,CAACkB,MAAnB,CAAP;AACD;;AAEDklC,EAAAA,sBAAsB,CAAC1tB,MAAD,EAAS;AAC7B,WAAO,CAACA,MAAM,CAACkC,QAAR,IAAoB,CAAClC,MAAM,CAAC2mB,MAA5B,KAAuC3mB,MAAM,CAACoD,GAAP,CAAWnc,IAAX,KAAoB,aAApB,IAAqC+Y,MAAM,CAACoD,GAAP,CAAWrd,KAAX,KAAqB,aAAjG,CAAP;AACD;;AAEDo1D,EAAAA,cAAc,CAACvC,aAAD,EAAgBsC,SAAhB,EAA2B;AACvC,SAAKnlC,UAAL,CAAgBnL,KAAhB;AACA,UAAMpa,KAAK,GAAG;AACZo7D,MAAAA,cAAc,EAAE,KADJ;AAEZhT,MAAAA;AAFY,KAAd;AAIA,QAAIpC,UAAU,GAAG,EAAjB;AACA,UAAMz1C,SAAS,GAAG,KAAKiB,SAAL,EAAlB;AACAjB,IAAAA,SAAS,CAACH,IAAV,GAAiB,EAAjB;AACA,SAAKgZ,MAAL,CAAYtyB,OAAO,CAACa,MAApB;AACA,SAAK4+D,kCAAL,CAAwC,MAAM;AAC5C,aAAO,CAAC,KAAKt4D,KAAL,CAAWnH,OAAO,CAACgB,MAAnB,CAAR,EAAoC;AAClC,YAAI,KAAKumB,GAAL,CAASvnB,OAAO,CAACqB,IAAjB,CAAJ,EAA4B;AAC1B,cAAI6tD,UAAU,CAACrmD,MAAX,GAAoB,CAAxB,EAA2B;AACzB,kBAAM,KAAK2M,KAAL,CAAW,KAAKtM,KAAL,CAAWoM,UAAtB,EAAkCzK,aAAa,CAACsB,kBAAhD,CAAN;AACD;;AAED;AACD;;AAED,YAAI,KAAKhF,KAAL,CAAWnH,OAAO,CAACgC,EAAnB,CAAJ,EAA4B;AAC1BktD,UAAAA,UAAU,CAAC/lD,IAAX,CAAgB,KAAKouD,cAAL,EAAhB;AACA;AACD;;AAED,cAAMpyB,MAAM,GAAG,KAAKzqB,SAAL,EAAf;;AAEA,YAAIw0C,UAAU,CAACrmD,MAAf,EAAuB;AACrBs8B,UAAAA,MAAM,CAAC+pB,UAAP,GAAoBA,UAApB;AACA,eAAKt5B,0BAAL,CAAgCuP,MAAhC,EAAwC+pB,UAAU,CAAC,CAAD,CAAlD;AACAA,UAAAA,UAAU,GAAG,EAAb;AACD;;AAED,aAAKhqB,gBAAL,CAAsBzrB,SAAtB,EAAiC0rB,MAAjC,EAAyCj8B,KAAzC;;AAEA,YAAIi8B,MAAM,CAACxqB,IAAP,KAAgB,aAAhB,IAAiCwqB,MAAM,CAAC+pB,UAAxC,IAAsD/pB,MAAM,CAAC+pB,UAAP,CAAkBrmD,MAAlB,GAA2B,CAArF,EAAwF;AACtF,eAAK2M,KAAL,CAAW2vB,MAAM,CAACx+B,KAAlB,EAAyBkE,aAAa,CAACoB,oBAAvC;AACD;AACF;AACF,KA7BD;AA8BA,SAAK/C,KAAL,CAAWkV,MAAX,GAAoBw1C,SAApB;AACA,SAAKz0C,IAAL;;AAEA,QAAI+vC,UAAU,CAACrmD,MAAf,EAAuB;AACrB,YAAM,KAAK2M,KAAL,CAAW,KAAKtM,KAAL,CAAWvC,KAAtB,EAA6BkE,aAAa,CAACwH,iBAA3C,CAAN;AACD;;AAED,SAAKoc,UAAL,CAAgBlL,IAAhB;AACA,WAAO,KAAK1I,UAAL,CAAgBpB,SAAhB,EAA2B,WAA3B,CAAP;AACD;;AAED2rB,EAAAA,4BAA4B,CAAC3rB,SAAD,EAAY0rB,MAAZ,EAAoB;AAC9C,UAAMrpB,GAAG,GAAG,KAAKkf,eAAL,CAAqB,IAArB,CAAZ;;AAEA,QAAI,KAAKkL,aAAL,EAAJ,EAA0B;AACxB,YAAMxtB,MAAM,GAAGysB,MAAf;AACAzsB,MAAAA,MAAM,CAACiC,IAAP,GAAc,QAAd;AACAjC,MAAAA,MAAM,CAACkC,QAAP,GAAkB,KAAlB;AACAlC,MAAAA,MAAM,CAACoD,GAAP,GAAaA,GAAb;AACApD,MAAAA,MAAM,CAAC2mB,MAAP,GAAgB,KAAhB;AACA,WAAK7lB,eAAL,CAAqBC,SAArB,EAAgCf,MAAhC,EAAwC,KAAxC,EAA+C,KAA/C,EAAsD,KAAtD,EAA6D,KAA7D;AACA,aAAO,IAAP;AACD,KARD,MAQO,IAAI,KAAKytB,eAAL,EAAJ,EAA4B;AACjC,YAAMjrB,IAAI,GAAGiqB,MAAb;AACAjqB,MAAAA,IAAI,CAACN,QAAL,GAAgB,KAAhB;AACAM,MAAAA,IAAI,CAACY,GAAL,GAAWA,GAAX;AACAZ,MAAAA,IAAI,CAACmkB,MAAL,GAAc,KAAd;AACA5lB,MAAAA,SAAS,CAACH,IAAV,CAAenQ,IAAf,CAAoB,KAAK2R,kBAAL,CAAwBI,IAAxB,CAApB;AACA,aAAO,IAAP;AACD;;AAED,SAAK1Q,iCAAL,CAAuCsR,GAAvC;AACA,WAAO,KAAP;AACD;;AAEDopB,EAAAA,gBAAgB,CAACzrB,SAAD,EAAY0rB,MAAZ,EAAoBj8B,KAApB,EAA2B;AACzC,UAAMk2B,QAAQ,GAAG,KAAK5N,YAAL,CAAkB,QAAlB,CAAjB;;AAEA,QAAI4N,QAAJ,EAAc;AACZ,UAAI,KAAKgG,4BAAL,CAAkC3rB,SAAlC,EAA6C0rB,MAA7C,CAAJ,EAA0D;AACxD;AACD;;AAED,UAAI,KAAK5d,GAAL,CAASvnB,OAAO,CAACa,MAAjB,CAAJ,EAA8B;AAC5B,aAAKuwD,qBAAL,CAA2B33C,SAA3B,EAAsC0rB,MAAtC;AACA;AACD;AACF;;AAED,SAAKksB,4BAAL,CAAkC53C,SAAlC,EAA6C0rB,MAA7C,EAAqDj8B,KAArD,EAA4Dk2B,QAA5D;AACD;;AAEDiyB,EAAAA,4BAA4B,CAAC53C,SAAD,EAAY0rB,MAAZ,EAAoBj8B,KAApB,EAA2Bk2B,QAA3B,EAAqC;AAC/D,UAAMmlC,YAAY,GAAGp/B,MAArB;AACA,UAAMq/B,aAAa,GAAGr/B,MAAtB;AACA,UAAMs/B,UAAU,GAAGt/B,MAAnB;AACA,UAAMu/B,WAAW,GAAGv/B,MAApB;AACA,UAAMzsB,MAAM,GAAG6rD,YAAf;AACA,UAAMI,YAAY,GAAGJ,YAArB;AACAp/B,IAAAA,MAAM,CAAC9F,MAAP,GAAgBD,QAAhB;;AAEA,QAAI,KAAK7X,GAAL,CAASvnB,OAAO,CAACsD,IAAjB,CAAJ,EAA4B;AAC1BoV,MAAAA,MAAM,CAACiC,IAAP,GAAc,QAAd;AACA,YAAMR,aAAa,GAAG,KAAKhT,KAAL,CAAWnH,OAAO,CAACM,WAAnB,CAAtB;AACA,WAAKskE,qBAAL,CAA2BlsD,MAA3B;;AAEA,UAAIyB,aAAJ,EAAmB;AACjB,aAAKmsB,sBAAL,CAA4B7sB,SAA5B,EAAuC+qD,aAAvC,EAAsD,IAAtD,EAA4D,KAA5D;AACA;AACD;;AAED,UAAI,KAAKp+B,sBAAL,CAA4Bm+B,YAA5B,CAAJ,EAA+C;AAC7C,aAAK/uD,KAAL,CAAW+uD,YAAY,CAACzoD,GAAb,CAAiBnV,KAA5B,EAAmCkE,aAAa,CAACiB,sBAAjD;AACD;;AAED,WAAK0N,eAAL,CAAqBC,SAArB,EAAgC8qD,YAAhC,EAA8C,IAA9C,EAAoD,KAApD,EAA2D,KAA3D,EAAkE,KAAlE;AACA;AACD;;AAED,UAAM/yC,YAAY,GAAG,KAAKrqB,KAAL,CAAWnH,OAAO,CAACL,IAAnB,KAA4B,CAAC,KAAKuJ,KAAL,CAAWwc,WAA7D;AACA,UAAMo3C,SAAS,GAAG,KAAK31D,KAAL,CAAWnH,OAAO,CAACM,WAAnB,CAAlB;AACA,UAAMwb,GAAG,GAAG,KAAK8oD,qBAAL,CAA2Bz/B,MAA3B,CAAZ;AACA,UAAM0/B,uBAAuB,GAAG,KAAK37D,KAAL,CAAWvC,KAA3C;AACA,SAAK4qD,4BAAL,CAAkCoT,YAAlC;;AAEA,QAAI,KAAKz+B,aAAL,EAAJ,EAA0B;AACxBxtB,MAAAA,MAAM,CAACiC,IAAP,GAAc,QAAd;;AAEA,UAAImiD,SAAJ,EAAe;AACb,aAAKx2B,sBAAL,CAA4B7sB,SAA5B,EAAuC+qD,aAAvC,EAAsD,KAAtD,EAA6D,KAA7D;AACA;AACD;;AAED,YAAM7qD,aAAa,GAAG,KAAKysB,sBAAL,CAA4Bm+B,YAA5B,CAAtB;AACA,UAAI3qD,iBAAiB,GAAG,KAAxB;;AAEA,UAAID,aAAJ,EAAmB;AACjB4qD,QAAAA,YAAY,CAAC5pD,IAAb,GAAoB,aAApB;;AAEA,YAAIzR,KAAK,CAACo7D,cAAN,IAAwB,CAAC,KAAK58D,SAAL,CAAe,YAAf,CAA7B,EAA2D;AACzD,eAAK8N,KAAL,CAAWsG,GAAG,CAACnV,KAAf,EAAsBkE,aAAa,CAAC0B,oBAApC;AACD;;AAED,YAAIoN,aAAa,IAAI,KAAKjS,SAAL,CAAe,YAAf,CAAjB,IAAiDy9B,MAAM,CAACgqB,QAA5D,EAAsE;AACpE,eAAK35C,KAAL,CAAWsG,GAAG,CAACnV,KAAf,EAAsBkE,aAAa,CAACuF,qBAApC;AACD;;AAEDlH,QAAAA,KAAK,CAACo7D,cAAN,GAAuB,IAAvB;AACA1qD,QAAAA,iBAAiB,GAAG1Q,KAAK,CAACooD,aAA1B;AACD;;AAED,WAAK93C,eAAL,CAAqBC,SAArB,EAAgC8qD,YAAhC,EAA8C,KAA9C,EAAqD,KAArD,EAA4D5qD,aAA5D,EAA2EC,iBAA3E;AACD,KA3BD,MA2BO,IAAI,KAAKusB,eAAL,EAAJ,EAA4B;AACjC,UAAI22B,SAAJ,EAAe;AACb,aAAKgI,wBAAL,CAA8BrrD,SAA9B,EAAyCirD,WAAzC;AACD,OAFD,MAEO;AACL,aAAKK,iBAAL,CAAuBtrD,SAAvB,EAAkCgrD,UAAlC;AACD;AACF,KANM,MAMA,IAAIjzC,YAAY,IAAI1V,GAAG,CAACnc,IAAJ,KAAa,OAA7B,IAAwC,CAAC,KAAKwyB,gBAAL,EAA7C,EAAsE;AAC3E,WAAK3nB,iCAAL,CAAuCsR,GAAvC;AACA,YAAMpC,WAAW,GAAG,KAAK6N,GAAL,CAASvnB,OAAO,CAACsD,IAAjB,CAApB;;AAEA,UAAIqhE,YAAY,CAAC3oD,QAAjB,EAA2B;AACzB,aAAKuV,UAAL,CAAgBszC,uBAAhB;AACD;;AAEDnsD,MAAAA,MAAM,CAACiC,IAAP,GAAc,QAAd;AACA,YAAMmiD,SAAS,GAAG,KAAK31D,KAAL,CAAWnH,OAAO,CAACM,WAAnB,CAAlB;AACA,WAAKskE,qBAAL,CAA2BlsD,MAA3B;AACA,WAAK64C,4BAAL,CAAkCoT,YAAlC;;AAEA,UAAI7H,SAAJ,EAAe;AACb,aAAKx2B,sBAAL,CAA4B7sB,SAA5B,EAAuC+qD,aAAvC,EAAsD9qD,WAAtD,EAAmE,IAAnE;AACD,OAFD,MAEO;AACL,YAAI,KAAK0sB,sBAAL,CAA4Bm+B,YAA5B,CAAJ,EAA+C;AAC7C,eAAK/uD,KAAL,CAAW+uD,YAAY,CAACzoD,GAAb,CAAiBnV,KAA5B,EAAmCkE,aAAa,CAACgB,kBAAjD;AACD;;AAED,aAAK2N,eAAL,CAAqBC,SAArB,EAAgC8qD,YAAhC,EAA8C7qD,WAA9C,EAA2D,IAA3D,EAAiE,KAAjE,EAAwE,KAAxE;AACD;AACF,KAtBM,MAsBA,IAAI8X,YAAY,KAAK1V,GAAG,CAACnc,IAAJ,KAAa,KAAb,IAAsBmc,GAAG,CAACnc,IAAJ,KAAa,KAAxC,CAAZ,IAA8D,EAAE,KAAKwH,KAAL,CAAWnH,OAAO,CAACsD,IAAnB,KAA4B,KAAK6uB,gBAAL,EAA9B,CAAlE,EAA0H;AAC/H,WAAK3nB,iCAAL,CAAuCsR,GAAvC;AACApD,MAAAA,MAAM,CAACiC,IAAP,GAAcmB,GAAG,CAACnc,IAAlB;AACA,YAAMm9D,SAAS,GAAG,KAAK31D,KAAL,CAAWnH,OAAO,CAACM,WAAnB,CAAlB;AACA,WAAKskE,qBAAL,CAA2BL,YAA3B;;AAEA,UAAIzH,SAAJ,EAAe;AACb,aAAKx2B,sBAAL,CAA4B7sB,SAA5B,EAAuC+qD,aAAvC,EAAsD,KAAtD,EAA6D,KAA7D;AACD,OAFD,MAEO;AACL,YAAI,KAAKp+B,sBAAL,CAA4Bm+B,YAA5B,CAAJ,EAA+C;AAC7C,eAAK/uD,KAAL,CAAW+uD,YAAY,CAACzoD,GAAb,CAAiBnV,KAA5B,EAAmCkE,aAAa,CAACe,qBAAjD;AACD;;AAED,aAAK4N,eAAL,CAAqBC,SAArB,EAAgC8qD,YAAhC,EAA8C,KAA9C,EAAqD,KAArD,EAA4D,KAA5D,EAAmE,KAAnE;AACD;;AAED,WAAK79B,uBAAL,CAA6B69B,YAA7B;AACD,KAjBM,MAiBA,IAAI,KAAKpyC,gBAAL,EAAJ,EAA6B;AAClC,UAAI2qC,SAAJ,EAAe;AACb,aAAKgI,wBAAL,CAA8BrrD,SAA9B,EAAyCirD,WAAzC;AACD,OAFD,MAEO;AACL,aAAKK,iBAAL,CAAuBtrD,SAAvB,EAAkCgrD,UAAlC;AACD;AACF,KANM,MAMA;AACL,WAAKlzC,UAAL;AACD;AACF;;AAEDqzC,EAAAA,qBAAqB,CAACz/B,MAAD,EAAS;AAC5B,UAAM;AACJj7B,MAAAA,IADI;AAEJzL,MAAAA,KAFI;AAGJkI,MAAAA;AAHI,QAIF,KAAKuC,KAJT;;AAMA,QAAI,CAACgB,IAAI,KAAKlK,OAAO,CAACL,IAAjB,IAAyBuK,IAAI,KAAKlK,OAAO,CAACK,MAA3C,KAAsD8kC,MAAM,CAAC9F,MAA7D,IAAuE5gC,KAAK,KAAK,WAArF,EAAkG;AAChG,WAAK+W,KAAL,CAAW7O,KAAX,EAAkBkE,aAAa,CAAC8G,eAAhC;AACD;;AAED,QAAIzH,IAAI,KAAKlK,OAAO,CAACM,WAAjB,IAAgC7B,KAAK,KAAK,aAA9C,EAA6D;AAC3D,WAAK+W,KAAL,CAAW7O,KAAX,EAAkBkE,aAAa,CAACc,4BAAhC;AACD;;AAED,WAAO,KAAKg7B,iBAAL,CAAuBxB,MAAvB,EAA+B,IAA/B,CAAP;AACD;;AAEDisB,EAAAA,qBAAqB,CAAC33C,SAAD,EAAY0rB,MAAZ,EAAoB;AACvC,QAAI6/B,kBAAJ;;AAEA,SAAK17C,YAAL,CAAkB,kBAAlB,EAAsC6b,MAAM,CAACx+B,KAA7C;AACA,SAAK6c,KAAL,CAAWF,KAAX,CAAiBzD,WAAW,GAAGC,kBAAd,GAAmCH,WAApD;AACA,UAAMkU,SAAS,GAAG,KAAK3qB,KAAL,CAAWqc,MAA7B;AACA,SAAKrc,KAAL,CAAWqc,MAAX,GAAoB,EAApB;AACA,SAAK8O,SAAL,CAAe/Q,KAAf,CAAqBgN,KAArB;AACA,UAAMhX,IAAI,GAAG6rB,MAAM,CAAC7rB,IAAP,GAAc,EAA3B;AACA,SAAK4zC,2BAAL,CAAiC5zC,IAAjC,EAAuClR,SAAvC,EAAkD,KAAlD,EAAyDpI,OAAO,CAACgB,MAAjE;AACA,SAAKqzB,SAAL,CAAe9Q,IAAf;AACA,SAAKC,KAAL,CAAWD,IAAX;AACA,SAAKra,KAAL,CAAWqc,MAAX,GAAoBsO,SAApB;AACApa,IAAAA,SAAS,CAACH,IAAV,CAAenQ,IAAf,CAAoB,KAAK0R,UAAL,CAAgBsqB,MAAhB,EAAwB,aAAxB,CAApB;;AAEA,QAAI,CAAC6/B,kBAAkB,GAAG7/B,MAAM,CAAC+pB,UAA7B,KAA4C,IAA5C,IAAoD8V,kBAAkB,CAACn8D,MAA3E,EAAmF;AACjF,WAAK2M,KAAL,CAAW2vB,MAAM,CAACx+B,KAAlB,EAAyBkE,aAAa,CAACuB,oBAAvC;AACD;AACF;;AAED24D,EAAAA,iBAAiB,CAACtrD,SAAD,EAAYyB,IAAZ,EAAkB;AACjC,QAAI,CAACA,IAAI,CAACN,QAAN,KAAmBM,IAAI,CAACY,GAAL,CAASnc,IAAT,KAAkB,aAAlB,IAAmCub,IAAI,CAACY,GAAL,CAASrd,KAAT,KAAmB,aAAzE,CAAJ,EAA6F;AAC3F,WAAK+W,KAAL,CAAW0F,IAAI,CAACY,GAAL,CAASnV,KAApB,EAA2BkE,aAAa,CAACa,qBAAzC;AACD;;AAED+N,IAAAA,SAAS,CAACH,IAAV,CAAenQ,IAAf,CAAoB,KAAK2R,kBAAL,CAAwBI,IAAxB,CAApB;AACD;;AAED4pD,EAAAA,wBAAwB,CAACrrD,SAAD,EAAYyB,IAAZ,EAAkB;AACxC,UAAMjT,IAAI,GAAG,KAAK+S,yBAAL,CAA+BE,IAA/B,CAAb;AACAzB,IAAAA,SAAS,CAACH,IAAV,CAAenQ,IAAf,CAAoBlB,IAApB;AACA,SAAKwmB,UAAL,CAAgBF,kBAAhB,CAAmC,KAAKtU,gBAAL,CAAsBhS,IAAI,CAAC6T,GAA3B,CAAnC,EAAoEmG,mBAApE,EAAyFha,IAAI,CAAC6T,GAAL,CAASnV,KAAlG;AACD;;AAED6S,EAAAA,eAAe,CAACC,SAAD,EAAYf,MAAZ,EAAoBgB,WAApB,EAAiCpB,OAAjC,EAA0CqB,aAA1C,EAAyDC,iBAAzD,EAA4E;AACzFH,IAAAA,SAAS,CAACH,IAAV,CAAenQ,IAAf,CAAoB,KAAK0Q,WAAL,CAAiBnB,MAAjB,EAAyBgB,WAAzB,EAAsCpB,OAAtC,EAA+CqB,aAA/C,EAA8DC,iBAA9D,EAAiF,aAAjF,EAAgG,IAAhG,CAApB;AACD;;AAED0sB,EAAAA,sBAAsB,CAAC7sB,SAAD,EAAYf,MAAZ,EAAoBgB,WAApB,EAAiCpB,OAAjC,EAA0C;AAC9D,UAAMrQ,IAAI,GAAG,KAAK4R,WAAL,CAAiBnB,MAAjB,EAAyBgB,WAAzB,EAAsCpB,OAAtC,EAA+C,KAA/C,EAAsD,KAAtD,EAA6D,oBAA7D,EAAmF,IAAnF,CAAb;AACAmB,IAAAA,SAAS,CAACH,IAAV,CAAenQ,IAAf,CAAoBlB,IAApB;AACA,UAAM0S,IAAI,GAAG1S,IAAI,CAAC0S,IAAL,KAAc,KAAd,GAAsB1S,IAAI,CAACo3B,MAAL,GAAcxd,2BAAd,GAA4CE,6BAAlE,GAAkG9Z,IAAI,CAAC0S,IAAL,KAAc,KAAd,GAAsB1S,IAAI,CAACo3B,MAAL,GAAcvd,2BAAd,GAA4CE,6BAAlE,GAAkGC,mBAAjN;AACA,SAAKwM,UAAL,CAAgBF,kBAAhB,CAAmC,KAAKtU,gBAAL,CAAsBhS,IAAI,CAAC6T,GAA3B,CAAnC,EAAoEnB,IAApE,EAA0E1S,IAAI,CAAC6T,GAAL,CAASnV,KAAnF;AACD;;AAED4qD,EAAAA,4BAA4B,CAACC,YAAD,EAAe,CAAE;;AAE7Cx2C,EAAAA,yBAAyB,CAAC/S,IAAD,EAAO;AAC9B,SAAKg9D,gBAAL,CAAsBh9D,IAAtB;AACA,SAAKmqB,SAAL;AACA,WAAO,KAAKvX,UAAL,CAAgB5S,IAAhB,EAAsB,sBAAtB,CAAP;AACD;;AAED6S,EAAAA,kBAAkB,CAAC7S,IAAD,EAAO;AACvB,SAAKg9D,gBAAL,CAAsBh9D,IAAtB;AACA,SAAKmqB,SAAL;AACA,WAAO,KAAKvX,UAAL,CAAgB5S,IAAhB,EAAsB,eAAtB,CAAP;AACD;;AAEDg9D,EAAAA,gBAAgB,CAACh9D,IAAD,EAAO;AACrB,SAAKub,KAAL,CAAWF,KAAX,CAAiBzD,WAAW,GAAGF,WAA/B;AACA,SAAK4U,eAAL,CAAqBjR,KAArB,CAA2B+M,kBAAkB,EAA7C;AACA,SAAKgE,SAAL,CAAe/Q,KAAf,CAAqBgN,KAArB;AACAroB,IAAAA,IAAI,CAACxJ,KAAL,GAAa,KAAK8oB,GAAL,CAASvnB,OAAO,CAACmC,EAAjB,IAAuB,KAAKshC,uBAAL,EAAvB,GAAwD,IAArE;AACA,SAAKlP,eAAL,CAAqBhR,IAArB;AACA,SAAK8Q,SAAL,CAAe9Q,IAAf;AACA,SAAKC,KAAL,CAAWD,IAAX;AACD;;AAEDwhB,EAAAA,YAAY,CAAC98B,IAAD,EAAO+8B,WAAP,EAAoBC,UAApB,EAAgCvhB,WAAW,GAAG9C,UAA9C,EAA0D;AACpE,QAAI,KAAKzZ,KAAL,CAAWnH,OAAO,CAACL,IAAnB,CAAJ,EAA8B;AAC5BsI,MAAAA,IAAI,CAACiS,EAAL,GAAU,KAAK8gB,eAAL,EAAV;;AAEA,UAAIgK,WAAJ,EAAiB;AACf,aAAKiB,SAAL,CAAeh+B,IAAI,CAACiS,EAApB,EAAwB,YAAxB,EAAsCwJ,WAAtC;AACD;AACF,KAND,MAMO;AACL,UAAIuhB,UAAU,IAAI,CAACD,WAAnB,EAAgC;AAC9B/8B,QAAAA,IAAI,CAACiS,EAAL,GAAU,IAAV;AACD,OAFD,MAEO;AACL,aAAKqX,UAAL,CAAgB,IAAhB,EAAsB1mB,aAAa,CAACqE,gBAApC;AACD;AACF;AACF;;AAEDq3B,EAAAA,eAAe,CAACt+B,IAAD,EAAO;AACpBA,IAAAA,IAAI,CAACuO,UAAL,GAAkB,KAAK+Q,GAAL,CAASvnB,OAAO,CAACiF,QAAjB,IAA6B,KAAK21D,mBAAL,EAA7B,GAA0D,IAA5E;AACD;;AAEDv+C,EAAAA,WAAW,CAACpU,IAAD,EAAO;AAChB,UAAMi9D,UAAU,GAAG,KAAKnR,gCAAL,CAAsC9rD,IAAtC,CAAnB;AACA,UAAMk9D,iBAAiB,GAAG,CAACD,UAAD,IAAe,KAAK39C,GAAL,CAASvnB,OAAO,CAACoB,KAAjB,CAAzC;AACA,UAAMgkE,OAAO,GAAGD,iBAAiB,IAAI,KAAKvgC,aAAL,CAAmB38B,IAAnB,CAArC;AACA,UAAM68B,YAAY,GAAGsgC,OAAO,IAAI,KAAKvgC,kCAAL,CAAwC58B,IAAxC,CAAhC;AACA,UAAMo9D,mBAAmB,GAAGF,iBAAiB,KAAK,CAACrgC,YAAD,IAAiB,KAAKvd,GAAL,CAASvnB,OAAO,CAACoB,KAAjB,CAAtB,CAA7C;AACA,UAAMkkE,cAAc,GAAGJ,UAAU,IAAIE,OAArC;;AAEA,QAAIA,OAAO,IAAI,CAACtgC,YAAhB,EAA8B;AAC5B,UAAIogC,UAAJ,EAAgB,KAAK3zC,UAAL;AAChB,WAAKoT,eAAL,CAAqB18B,IAArB,EAA2B,IAA3B;AACA,aAAO,KAAK4S,UAAL,CAAgB5S,IAAhB,EAAsB,sBAAtB,CAAP;AACD;;AAED,UAAMs9D,aAAa,GAAG,KAAKC,+BAAL,CAAqCv9D,IAArC,CAAtB;;AAEA,QAAIi9D,UAAU,IAAIC,iBAAd,IAAmC,CAACC,OAApC,IAA+C,CAACG,aAAhD,IAAiEzgC,YAAY,IAAIugC,mBAAhB,IAAuC,CAACE,aAA7G,EAA4H;AAC1H,YAAM,KAAKh0C,UAAL,CAAgB,IAAhB,EAAsBvxB,OAAO,CAACa,MAA9B,CAAN;AACD;;AAED,QAAI4kE,cAAJ;;AAEA,QAAIH,cAAc,IAAIC,aAAtB,EAAqC;AACnCE,MAAAA,cAAc,GAAG,KAAjB;AACA,WAAK9gC,eAAL,CAAqB18B,IAArB,EAA2Bq9D,cAA3B;AACD,KAHD,MAGO;AACLG,MAAAA,cAAc,GAAG,KAAKC,2BAAL,CAAiCz9D,IAAjC,CAAjB;AACD;;AAED,QAAIq9D,cAAc,IAAIC,aAAlB,IAAmCE,cAAvC,EAAuD;AACrD,WAAKzR,WAAL,CAAiB/rD,IAAjB,EAAuB,IAAvB,EAA6B,KAA7B,EAAoC,CAAC,CAACA,IAAI,CAAClC,MAA3C;AACA,aAAO,KAAK8U,UAAL,CAAgB5S,IAAhB,EAAsB,wBAAtB,CAAP;AACD;;AAED,QAAI,KAAKsf,GAAL,CAASvnB,OAAO,CAAC8D,QAAjB,CAAJ,EAAgC;AAC9BmE,MAAAA,IAAI,CAACgxB,WAAL,GAAmB,KAAK6J,4BAAL,EAAnB;AACA,WAAKkxB,WAAL,CAAiB/rD,IAAjB,EAAuB,IAAvB,EAA6B,IAA7B;AACA,aAAO,KAAK4S,UAAL,CAAgB5S,IAAhB,EAAsB,0BAAtB,CAAP;AACD;;AAED,UAAM,KAAKspB,UAAL,CAAgB,IAAhB,EAAsBvxB,OAAO,CAACa,MAA9B,CAAN;AACD;;AAED+jC,EAAAA,aAAa,CAAC38B,IAAD,EAAO;AAClB,WAAO,KAAKsf,GAAL,CAASvnB,OAAO,CAACsD,IAAjB,CAAP;AACD;;AAEDywD,EAAAA,gCAAgC,CAAC9rD,IAAD,EAAO;AACrC,QAAI,KAAK46B,wBAAL,EAAJ,EAAqC;AACnC,WAAKvZ,YAAL,CAAkB,mBAAlB;AACA,YAAM6d,SAAS,GAAG,KAAKzsB,SAAL,EAAlB;AACAysB,MAAAA,SAAS,CAAC7qB,QAAV,GAAqB,KAAK0e,eAAL,CAAqB,IAArB,CAArB;AACA/yB,MAAAA,IAAI,CAACqC,UAAL,GAAkB,CAAC,KAAKuQ,UAAL,CAAgBssB,SAAhB,EAA2B,wBAA3B,CAAD,CAAlB;AACA,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD;;AAEDtC,EAAAA,kCAAkC,CAAC58B,IAAD,EAAO;AACvC,QAAI,KAAKupB,YAAL,CAAkB,IAAlB,CAAJ,EAA6B;AAC3B,UAAI,CAACvpB,IAAI,CAACqC,UAAV,EAAsBrC,IAAI,CAACqC,UAAL,GAAkB,EAAlB;AACtB,YAAM68B,SAAS,GAAG,KAAKrvB,WAAL,CAAiB,KAAK5O,KAAL,CAAWiM,YAA5B,EAA0C,KAAKjM,KAAL,CAAWkM,eAArD,CAAlB;AACA,WAAK+J,IAAL;AACAgoB,MAAAA,SAAS,CAAC7qB,QAAV,GAAqB,KAAKorB,qBAAL,EAArB;AACAz/B,MAAAA,IAAI,CAACqC,UAAL,CAAgBnB,IAAhB,CAAqB,KAAK0R,UAAL,CAAgBssB,SAAhB,EAA2B,0BAA3B,CAArB;AACA,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD;;AAEDq+B,EAAAA,+BAA+B,CAACv9D,IAAD,EAAO;AACpC,QAAI,KAAKd,KAAL,CAAWnH,OAAO,CAACa,MAAnB,CAAJ,EAAgC;AAC9B,UAAI,CAACoH,IAAI,CAACqC,UAAV,EAAsBrC,IAAI,CAACqC,UAAL,GAAkB,EAAlB;AACtBrC,MAAAA,IAAI,CAACqC,UAAL,CAAgBnB,IAAhB,CAAqB,GAAG,KAAKu7B,qBAAL,EAAxB;AACAz8B,MAAAA,IAAI,CAAClC,MAAL,GAAc,IAAd;AACAkC,MAAAA,IAAI,CAACgxB,WAAL,GAAmB,IAAnB;AACA,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD;;AAEDysC,EAAAA,2BAA2B,CAACz9D,IAAD,EAAO;AAChC,QAAI,KAAK26B,4BAAL,EAAJ,EAAyC;AACvC36B,MAAAA,IAAI,CAACqC,UAAL,GAAkB,EAAlB;AACArC,MAAAA,IAAI,CAAClC,MAAL,GAAc,IAAd;AACAkC,MAAAA,IAAI,CAACgxB,WAAL,GAAmB,KAAKuL,sBAAL,CAA4Bv8B,IAA5B,CAAnB;AACA,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD;;AAED45D,EAAAA,eAAe,GAAG;AAChB,QAAI,CAAC,KAAKrwC,YAAL,CAAkB,OAAlB,CAAL,EAAiC,OAAO,KAAP;AACjC,UAAMrS,IAAI,GAAG,KAAK0I,cAAL,EAAb;AACA,WAAO,CAACjiB,SAAS,CAACoY,IAAV,CAAe,KAAKhX,KAAL,CAAWoR,KAAX,CAAiB,KAAKlP,KAAL,CAAW+L,GAA5B,EAAiCkK,IAAjC,CAAf,CAAD,IAA2D,KAAKsS,oBAAL,CAA0BtS,IAA1B,EAAgC,UAAhC,CAAlE;AACD;;AAED2jB,EAAAA,4BAA4B,GAAG;AAC7B,UAAMH,IAAI,GAAG,KAAKjoB,SAAL,EAAb;AACA,UAAMpC,OAAO,GAAG,KAAKupD,eAAL,EAAhB;;AAEA,QAAI,KAAK16D,KAAL,CAAWnH,OAAO,CAACmE,SAAnB,KAAiCmU,OAArC,EAA8C;AAC5C,WAAK6G,IAAL;;AAEA,UAAI7G,OAAJ,EAAa;AACX,aAAK6G,IAAL;AACD;;AAED,aAAO,KAAK28C,aAAL,CAAmBn5B,IAAnB,EAAyBw9B,cAAc,GAAGE,gBAA1C,EAA4D/nD,OAA5D,CAAP;AACD,KARD,MAQO,IAAI,KAAKnR,KAAL,CAAWnH,OAAO,CAACgF,MAAnB,CAAJ,EAAgC;AACrC,aAAO,KAAKspD,UAAL,CAAgB3rB,IAAhB,EAAsB,IAAtB,EAA4B,IAA5B,CAAP;AACD,KAFM,MAEA,IAAI,KAAKx7B,KAAL,CAAWnH,OAAO,CAACgC,EAAnB,CAAJ,EAA4B;AACjC,UAAI,KAAK0F,SAAL,CAAe,YAAf,KAAgC,KAAKG,eAAL,CAAqB,YAArB,EAAmC,wBAAnC,CAApC,EAAkG;AAChG,aAAK2N,KAAL,CAAW,KAAKtM,KAAL,CAAWvC,KAAtB,EAA6BkE,aAAa,CAACmB,qBAA3C;AACD;;AAED,WAAKkwD,eAAL,CAAqB,KAArB;AACA,aAAO,KAAK5N,UAAL,CAAgB3rB,IAAhB,EAAsB,IAAtB,EAA4B,IAA5B,CAAP;AACD,KAPM,MAOA,IAAI,KAAKx7B,KAAL,CAAWnH,OAAO,CAAC0E,MAAnB,KAA8B,KAAKyC,KAAL,CAAWnH,OAAO,CAACyE,IAAnB,CAA9B,IAA0D,KAAKg4B,KAAL,EAA9D,EAA4E;AACjF,YAAM,KAAKjnB,KAAL,CAAW,KAAKtM,KAAL,CAAWvC,KAAtB,EAA6BkE,aAAa,CAAC4I,wBAA3C,CAAN;AACD,KAFM,MAEA;AACL,YAAMs6C,GAAG,GAAG,KAAKtqB,uBAAL,EAAZ;AACA,WAAKrR,SAAL;AACA,aAAO27B,GAAP;AACD;AACF;;AAEDvpB,EAAAA,sBAAsB,CAACv8B,IAAD,EAAO;AAC3B,WAAO,KAAKs6B,cAAL,CAAoB,IAApB,CAAP;AACD;;AAEDM,EAAAA,wBAAwB,GAAG;AACzB,QAAI,KAAK17B,KAAL,CAAWnH,OAAO,CAACL,IAAnB,CAAJ,EAA8B;AAC5B,YAAMlB,KAAK,GAAG,KAAKyK,KAAL,CAAWzK,KAAzB;;AAEA,UAAIA,KAAK,KAAK,OAAV,IAAqB,CAAC,KAAKyK,KAAL,CAAWwc,WAAjC,IAAgDjnB,KAAK,KAAK,KAA9D,EAAqE;AACnE,eAAO,KAAP;AACD;;AAED,UAAI,CAACA,KAAK,KAAK,MAAV,IAAoBA,KAAK,KAAK,WAA/B,KAA+C,CAAC,KAAKyK,KAAL,CAAWwc,WAA/D,EAA4E;AAC1E,cAAMigD,CAAC,GAAG,KAAKj+C,SAAL,EAAV;;AAEA,YAAIi+C,CAAC,CAACz7D,IAAF,KAAWlK,OAAO,CAACL,IAAnB,IAA2BgmE,CAAC,CAAClnE,KAAF,KAAY,MAAvC,IAAiDknE,CAAC,CAACz7D,IAAF,KAAWlK,OAAO,CAACa,MAAxE,EAAgF;AAC9E,eAAK6xB,eAAL,CAAqB,CAAC,MAAD,EAAS,YAAT,CAArB;AACA,iBAAO,KAAP;AACD;AACF;AACF,KAfD,MAeO,IAAI,CAAC,KAAKvrB,KAAL,CAAWnH,OAAO,CAAC8D,QAAnB,CAAL,EAAmC;AACxC,aAAO,KAAP;AACD;;AAED,UAAMqb,IAAI,GAAG,KAAK0I,cAAL,EAAb;AACA,UAAM+9C,OAAO,GAAG,KAAKn0C,oBAAL,CAA0BtS,IAA1B,EAAgC,MAAhC,CAAhB;;AAEA,QAAI,KAAKnY,KAAL,CAAWiD,UAAX,CAAsBkV,IAAtB,MAAgC,EAAhC,IAAsC,KAAKhY,KAAL,CAAWnH,OAAO,CAACL,IAAnB,KAA4BimE,OAAtE,EAA+E;AAC7E,aAAO,IAAP;AACD;;AAED,QAAI,KAAKz+D,KAAL,CAAWnH,OAAO,CAAC8D,QAAnB,KAAgC8hE,OAApC,EAA6C;AAC3C,YAAMC,aAAa,GAAG,KAAK7+D,KAAL,CAAWiD,UAAX,CAAsB,KAAK6d,mBAAL,CAAyB3I,IAAI,GAAG,CAAhC,CAAtB,CAAtB;AACA,aAAO0mD,aAAa,KAAK,EAAlB,IAAwBA,aAAa,KAAK,EAAjD;AACD;;AAED,WAAO,KAAP;AACD;;AAEDlhC,EAAAA,eAAe,CAAC18B,IAAD,EAAOqqB,MAAP,EAAe;AAC5B,QAAI,KAAKR,aAAL,CAAmB,MAAnB,CAAJ,EAAgC;AAC9B7pB,MAAAA,IAAI,CAAClC,MAAL,GAAc,KAAKsuD,iBAAL,EAAd;AACA,WAAKL,WAAL,CAAiB/rD,IAAjB;AACA,YAAM69D,UAAU,GAAG,KAAKC,0BAAL,EAAnB;;AAEA,UAAID,UAAJ,EAAgB;AACd79D,QAAAA,IAAI,CAAC69D,UAAL,GAAkBA,UAAlB;AACD;AACF,KARD,MAQO;AACL,UAAIxzC,MAAJ,EAAY;AACV,aAAKf,UAAL;AACD,OAFD,MAEO;AACLtpB,QAAAA,IAAI,CAAClC,MAAL,GAAc,IAAd;AACD;AACF;;AAED,SAAKqsB,SAAL;AACD;;AAEDwQ,EAAAA,4BAA4B,GAAG;AAC7B,QAAI,KAAKz7B,KAAL,CAAWnH,OAAO,CAACgC,EAAnB,CAAJ,EAA4B;AAC1B,WAAK0wB,eAAL,CAAqB,CAAC,YAAD,EAAe,mBAAf,CAArB;;AAEA,UAAI,KAAKhrB,SAAL,CAAe,YAAf,CAAJ,EAAkC;AAChC,YAAI,KAAKG,eAAL,CAAqB,YAArB,EAAmC,wBAAnC,CAAJ,EAAkE;AAChE,eAAK0pB,UAAL,CAAgB,KAAKroB,KAAL,CAAWvC,KAA3B,EAAkCkE,aAAa,CAACmB,qBAAhD;AACD,SAFD,MAEO;AACL,iBAAO,IAAP;AACD;AACF;AACF;;AAED,WAAO,KAAK9C,KAAL,CAAWgB,IAAX,CAAgB9K,OAAhB,KAA4B,KAA5B,IAAqC,KAAK8J,KAAL,CAAWgB,IAAX,CAAgB9K,OAAhB,KAA4B,OAAjE,IAA4E,KAAK8J,KAAL,CAAWgB,IAAX,CAAgB9K,OAAhB,KAA4B,UAAxG,IAAsH,KAAK8J,KAAL,CAAWgB,IAAX,CAAgB9K,OAAhB,KAA4B,OAAlJ,IAA6J,KAAKq9B,KAAL,EAA7J,IAA6K,KAAKolC,eAAL,EAApL;AACD;;AAED7N,EAAAA,WAAW,CAAC/rD,IAAD,EAAO+9D,UAAP,EAAmBC,SAAnB,EAA8BC,MAA9B,EAAsC;AAC/C,QAAIF,UAAJ,EAAgB;AACd,UAAIC,SAAJ,EAAe;AACb,aAAKzV,qBAAL,CAA2BvoD,IAA3B,EAAiC,SAAjC;;AAEA,YAAI,KAAKP,SAAL,CAAe,mBAAf,CAAJ,EAAyC;AACvC,cAAIy+D,kBAAJ;;AAEA,gBAAMltC,WAAW,GAAGhxB,IAAI,CAACgxB,WAAzB;;AAEA,cAAIA,WAAW,CAAC/uB,IAAZ,KAAqB,YAArB,IAAqC+uB,WAAW,CAACt5B,IAAZ,KAAqB,MAA1D,IAAoEs5B,WAAW,CAACryB,GAAZ,GAAkBqyB,WAAW,CAACtyB,KAA9B,KAAwC,CAA5G,IAAiH,EAAE,CAACw/D,kBAAkB,GAAGltC,WAAW,CAACjhB,KAAlC,KAA4C,IAA5C,IAAoDmuD,kBAAkB,CAACttD,aAAzE,CAArH,EAA8M;AAC5M,iBAAKrD,KAAL,CAAWyjB,WAAW,CAACtyB,KAAvB,EAA8BkE,aAAa,CAACkC,6BAA5C;AACD;AACF;AACF,OAZD,MAYO,IAAI9E,IAAI,CAACqC,UAAL,IAAmBrC,IAAI,CAACqC,UAAL,CAAgBzB,MAAvC,EAA+C;AACpD,aAAK,MAAMs+B,SAAX,IAAwBl/B,IAAI,CAACqC,UAA7B,EAAyC;AACvC,gBAAM;AACJgS,YAAAA;AADI,cAEF6qB,SAFJ;AAGA,gBAAMi/B,YAAY,GAAG9pD,QAAQ,CAACpS,IAAT,KAAkB,YAAlB,GAAiCoS,QAAQ,CAAC3c,IAA1C,GAAiD2c,QAAQ,CAAC7d,KAA/E;AACA,eAAK+xD,qBAAL,CAA2BrpB,SAA3B,EAAsCi/B,YAAtC;;AAEA,cAAI,CAACF,MAAD,IAAW/+B,SAAS,CAACE,KAAzB,EAAgC;AAC9B,kBAAM;AACJA,cAAAA;AADI,gBAEFF,SAFJ;;AAIA,gBAAIE,KAAK,CAACn9B,IAAN,KAAe,YAAnB,EAAiC;AAC/B,mBAAKsL,KAAL,CAAW2xB,SAAS,CAACxgC,KAArB,EAA4BkE,aAAa,CAACiC,qBAA1C,EAAiEu6B,KAAK,CAAC5oC,KAAvE,EAA8E2nE,YAA9E;AACD,aAFD,MAEO;AACL,mBAAKp+B,iBAAL,CAAuBX,KAAK,CAAC1nC,IAA7B,EAAmC0nC,KAAK,CAAC1gC,KAAzC,EAAgD,IAAhD,EAAsD,KAAtD;AACA,mBAAK6c,KAAL,CAAWS,gBAAX,CAA4BojB,KAA5B;AACD;AACF;AACF;AACF,OArBM,MAqBA,IAAIp/B,IAAI,CAACgxB,WAAT,EAAsB;AAC3B,YAAIhxB,IAAI,CAACgxB,WAAL,CAAiB/uB,IAAjB,KAA0B,qBAA1B,IAAmDjC,IAAI,CAACgxB,WAAL,CAAiB/uB,IAAjB,KAA0B,kBAAjF,EAAqG;AACnG,gBAAMgQ,EAAE,GAAGjS,IAAI,CAACgxB,WAAL,CAAiB/e,EAA5B;AACA,cAAI,CAACA,EAAL,EAAS,MAAM,IAAIigB,KAAJ,CAAU,mBAAV,CAAN;AACT,eAAKq2B,qBAAL,CAA2BvoD,IAA3B,EAAiCiS,EAAE,CAACva,IAApC;AACD,SAJD,MAIO,IAAIsI,IAAI,CAACgxB,WAAL,CAAiB/uB,IAAjB,KAA0B,qBAA9B,EAAqD;AAC1D,eAAK,MAAM+uB,WAAX,IAA0BhxB,IAAI,CAACgxB,WAAL,CAAiBypC,YAA3C,EAAyD;AACvD,iBAAKnqD,gBAAL,CAAsB0gB,WAAW,CAAC/e,EAAlC;AACD;AACF;AACF;AACF;;AAED,UAAM+nD,wBAAwB,GAAG,KAAK/4D,KAAL,CAAWsc,cAAX,CAA0B,KAAKtc,KAAL,CAAWsc,cAAX,CAA0B3c,MAA1B,GAAmC,CAA7D,CAAjC;;AAEA,QAAIo5D,wBAAwB,CAACp5D,MAA7B,EAAqC;AACnC,YAAM,KAAK2M,KAAL,CAAWvN,IAAI,CAACtB,KAAhB,EAAuBkE,aAAa,CAAC2I,0BAArC,CAAN;AACD;AACF;;AAED+E,EAAAA,gBAAgB,CAACtQ,IAAD,EAAO;AACrB,QAAIA,IAAI,CAACiC,IAAL,KAAc,YAAlB,EAAgC;AAC9B,WAAKsmD,qBAAL,CAA2BvoD,IAA3B,EAAiCA,IAAI,CAACtI,IAAtC;AACD,KAFD,MAEO,IAAIsI,IAAI,CAACiC,IAAL,KAAc,eAAlB,EAAmC;AACxC,WAAK,MAAMgR,IAAX,IAAmBjT,IAAI,CAACkC,UAAxB,EAAoC;AAClC,aAAKoO,gBAAL,CAAsB2C,IAAtB;AACD;AACF,KAJM,MAIA,IAAIjT,IAAI,CAACiC,IAAL,KAAc,cAAlB,EAAkC;AACvC,WAAK,MAAM4tD,IAAX,IAAmB7vD,IAAI,CAACQ,QAAxB,EAAkC;AAChC,YAAIqvD,IAAJ,EAAU;AACR,eAAKv/C,gBAAL,CAAsBu/C,IAAtB;AACD;AACF;AACF,KANM,MAMA,IAAI7vD,IAAI,CAACiC,IAAL,KAAc,gBAAlB,EAAoC;AACzC,WAAKqO,gBAAL,CAAsBtQ,IAAI,CAACxJ,KAA3B;AACD,KAFM,MAEA,IAAIwJ,IAAI,CAACiC,IAAL,KAAc,aAAlB,EAAiC;AACtC,WAAKqO,gBAAL,CAAsBtQ,IAAI,CAACs4B,QAA3B;AACD,KAFM,MAEA,IAAIt4B,IAAI,CAACiC,IAAL,KAAc,mBAAlB,EAAuC;AAC5C,WAAKqO,gBAAL,CAAsBtQ,IAAI,CAAC++B,IAA3B;AACD;AACF;;AAEDwpB,EAAAA,qBAAqB,CAACvoD,IAAD,EAAOtI,IAAP,EAAa;AAChC,QAAI,KAAKo0B,mBAAL,CAAyBnsB,GAAzB,CAA6BjI,IAA7B,CAAJ,EAAwC;AACtC,WAAK6V,KAAL,CAAWvN,IAAI,CAACtB,KAAhB,EAAuBhH,IAAI,KAAK,SAAT,GAAqBkL,aAAa,CAAC2B,sBAAnC,GAA4D3B,aAAa,CAAC4B,eAAjG,EAAkH9M,IAAlH;AACD;;AAED,SAAKo0B,mBAAL,CAAyBnQ,GAAzB,CAA6BjkB,IAA7B;AACD;;AAED+kC,EAAAA,qBAAqB,GAAG;AACtB,UAAM2hC,KAAK,GAAG,EAAd;AACA,QAAIplC,KAAK,GAAG,IAAZ;AACA,SAAK3O,MAAL,CAAYtyB,OAAO,CAACa,MAApB;;AAEA,WAAO,CAAC,KAAK0mB,GAAL,CAASvnB,OAAO,CAACgB,MAAjB,CAAR,EAAkC;AAChC,UAAIigC,KAAJ,EAAW;AACTA,QAAAA,KAAK,GAAG,KAAR;AACD,OAFD,MAEO;AACL,aAAK3O,MAAL,CAAYtyB,OAAO,CAACoB,KAApB;AACA,YAAI,KAAKmmB,GAAL,CAASvnB,OAAO,CAACgB,MAAjB,CAAJ,EAA8B;AAC/B;;AAED,YAAMiH,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACA,YAAM4rD,QAAQ,GAAG,KAAKn/D,KAAL,CAAWnH,OAAO,CAACK,MAAnB,CAAjB;AACA,YAAMgnC,KAAK,GAAG,KAAKK,qBAAL,EAAd;AACAz/B,MAAAA,IAAI,CAACo/B,KAAL,GAAaA,KAAb;;AAEA,UAAI,KAAKvV,aAAL,CAAmB,IAAnB,CAAJ,EAA8B;AAC5B7pB,QAAAA,IAAI,CAACqU,QAAL,GAAgB,KAAKorB,qBAAL,EAAhB;AACD,OAFD,MAEO,IAAI4+B,QAAJ,EAAc;AACnBr+D,QAAAA,IAAI,CAACqU,QAAL,GAAgBkZ,kBAAkB,CAAC6R,KAAD,CAAlC;AACD,OAFM,MAEA;AACLp/B,QAAAA,IAAI,CAACqU,QAAL,GAAgB8Y,eAAe,CAACiS,KAAD,CAA/B;AACD;;AAEDg/B,MAAAA,KAAK,CAACl9D,IAAN,CAAW,KAAK0R,UAAL,CAAgB5S,IAAhB,EAAsB,iBAAtB,CAAX;AACD;;AAED,WAAOo+D,KAAP;AACD;;AAED3+B,EAAAA,qBAAqB,GAAG;AACtB,QAAI,KAAKvgC,KAAL,CAAWnH,OAAO,CAACK,MAAnB,CAAJ,EAAgC;AAC9B,YAAM8jC,MAAM,GAAG,KAAK7sB,kBAAL,CAAwB,KAAKpO,KAAL,CAAWzK,KAAnC,CAAf;AACA,YAAM8nE,SAAS,GAAGpiC,MAAM,CAAC1lC,KAAP,CAAa0I,KAAb,CAAmBm5D,aAAnB,CAAlB;;AAEA,UAAIiG,SAAJ,EAAe;AACb,aAAK/wD,KAAL,CAAW2uB,MAAM,CAACx9B,KAAlB,EAAyBkE,aAAa,CAAC6E,gCAAvC,EAAyE62D,SAAS,CAAC,CAAD,CAAT,CAAat8D,UAAb,CAAwB,CAAxB,EAA2Bu8D,QAA3B,CAAoC,EAApC,CAAzE;AACD;;AAED,aAAOriC,MAAP;AACD;;AAED,WAAO,KAAKnJ,eAAL,CAAqB,IAArB,CAAP;AACD;;AAEDsB,EAAAA,WAAW,CAACr0B,IAAD,EAAO;AAChBA,IAAAA,IAAI,CAACqC,UAAL,GAAkB,EAAlB;;AAEA,QAAI,CAAC,KAAKnD,KAAL,CAAWnH,OAAO,CAACK,MAAnB,CAAL,EAAiC;AAC/B,YAAM6kE,UAAU,GAAG,KAAK59B,gCAAL,CAAsCr/B,IAAtC,CAAnB;AACA,YAAMw+D,SAAS,GAAG,CAACvB,UAAD,IAAe,KAAK39C,GAAL,CAASvnB,OAAO,CAACoB,KAAjB,CAAjC;AACA,YAAMgkE,OAAO,GAAGqB,SAAS,IAAI,KAAKtS,6BAAL,CAAmClsD,IAAnC,CAA7B;AACA,UAAIw+D,SAAS,IAAI,CAACrB,OAAlB,EAA2B,KAAKhR,0BAAL,CAAgCnsD,IAAhC;AAC3B,WAAK8pB,gBAAL,CAAsB,MAAtB;AACD;;AAED9pB,IAAAA,IAAI,CAAClC,MAAL,GAAc,KAAKsuD,iBAAL,EAAd;AACA,UAAMyR,UAAU,GAAG,KAAKC,0BAAL,EAAnB;;AAEA,QAAID,UAAJ,EAAgB;AACd79D,MAAAA,IAAI,CAAC69D,UAAL,GAAkBA,UAAlB;AACD,KAFD,MAEO;AACL,YAAM3pD,UAAU,GAAG,KAAKuqD,0BAAL,EAAnB;;AAEA,UAAIvqD,UAAJ,EAAgB;AACdlU,QAAAA,IAAI,CAACkU,UAAL,GAAkBA,UAAlB;AACD;AACF;;AAED,SAAKiW,SAAL;AACA,WAAO,KAAKvX,UAAL,CAAgB5S,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAEDosD,EAAAA,iBAAiB,GAAG;AAClB,QAAI,CAAC,KAAKltD,KAAL,CAAWnH,OAAO,CAACK,MAAnB,CAAL,EAAiC,KAAKkxB,UAAL;AACjC,WAAO,KAAK6K,aAAL,EAAP;AACD;;AAED6K,EAAAA,wBAAwB,CAACh/B,IAAD,EAAO;AAC7B,WAAO,KAAKd,KAAL,CAAWnH,OAAO,CAACL,IAAnB,CAAP;AACD;;AAEDunC,EAAAA,yBAAyB,CAACj/B,IAAD,EAAOk/B,SAAP,EAAkBj9B,IAAlB,EAAwBk9B,kBAAxB,EAA4C;AACnED,IAAAA,SAAS,CAACE,KAAV,GAAkB,KAAKrM,eAAL,EAAlB;AACA,SAAKiL,SAAL,CAAekB,SAAS,CAACE,KAAzB,EAAgCD,kBAAhC,EAAoDvmB,YAApD;AACA5Y,IAAAA,IAAI,CAACqC,UAAL,CAAgBnB,IAAhB,CAAqB,KAAK0R,UAAL,CAAgBssB,SAAhB,EAA2Bj9B,IAA3B,CAArB;AACD;;AAEDy8D,EAAAA,kBAAkB,GAAG;AACnB,UAAMC,KAAK,GAAG,EAAd;AACA,UAAMC,SAAS,GAAG,IAAItoD,GAAJ,EAAlB;;AAEA,OAAG;AACD,UAAI,KAAKpX,KAAL,CAAWnH,OAAO,CAACgB,MAAnB,CAAJ,EAAgC;AAC9B;AACD;;AAED,YAAMiH,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACA,YAAM8jD,OAAO,GAAG,KAAKt1D,KAAL,CAAWzK,KAA3B;;AAEA,UAAIooE,SAAS,CAACj/D,GAAV,CAAc42D,OAAd,CAAJ,EAA4B;AAC1B,aAAKhpD,KAAL,CAAW,KAAKtM,KAAL,CAAWvC,KAAtB,EAA6BkE,aAAa,CAAC4E,iCAA3C,EAA8E+uD,OAA9E;AACD;;AAEDqI,MAAAA,SAAS,CAACjjD,GAAV,CAAc46C,OAAd;;AAEA,UAAI,KAAKr3D,KAAL,CAAWnH,OAAO,CAACK,MAAnB,CAAJ,EAAgC;AAC9B4H,QAAAA,IAAI,CAAC6T,GAAL,GAAW,KAAKxE,kBAAL,CAAwBknD,OAAxB,CAAX;AACD,OAFD,MAEO;AACLv2D,QAAAA,IAAI,CAAC6T,GAAL,GAAW,KAAKkf,eAAL,CAAqB,IAArB,CAAX;AACD;;AAED,WAAK1I,MAAL,CAAYtyB,OAAO,CAACsB,KAApB;;AAEA,UAAI,CAAC,KAAK6F,KAAL,CAAWnH,OAAO,CAACK,MAAnB,CAAL,EAAiC;AAC/B,cAAM,KAAKkxB,UAAL,CAAgB,KAAKroB,KAAL,CAAWvC,KAA3B,EAAkCkE,aAAa,CAAC2E,2BAAhD,CAAN;AACD;;AAEDvH,MAAAA,IAAI,CAACxJ,KAAL,GAAa,KAAK6Y,kBAAL,CAAwB,KAAKpO,KAAL,CAAWzK,KAAnC,CAAb;AACA,WAAKoc,UAAL,CAAgB5S,IAAhB,EAAsB,iBAAtB;AACA2+D,MAAAA,KAAK,CAACz9D,IAAN,CAAWlB,IAAX;AACD,KA7BD,QA6BS,KAAKsf,GAAL,CAASvnB,OAAO,CAACoB,KAAjB,CA7BT;;AA+BA,WAAOwlE,KAAP;AACD;;AAEDF,EAAAA,0BAA0B,GAAG;AAC3B,QAAI,KAAKv/D,KAAL,CAAWnH,OAAO,CAAC4E,KAAnB,KAA6B,CAAC,KAAKqtB,qBAAL,EAAlC,EAAgE;AAC9D,WAAK3I,YAAL,CAAkB,kBAAlB;AACA,WAAKnK,IAAL;AACD,KAHD,MAGO;AACL,UAAI,KAAKzX,SAAL,CAAe,kBAAf,CAAJ,EAAwC,OAAO,EAAP;AACxC,aAAO,IAAP;AACD;;AAED,UAAMk/D,KAAK,GAAG,EAAd;AACA,UAAMzqD,UAAU,GAAG,IAAIoC,GAAJ,EAAnB;;AAEA,OAAG;AACD,YAAMtW,IAAI,GAAG,KAAKyS,SAAL,EAAb;AACAzS,MAAAA,IAAI,CAAC6T,GAAL,GAAW,KAAKkf,eAAL,CAAqB,IAArB,CAAX;;AAEA,UAAI/yB,IAAI,CAAC6T,GAAL,CAASnc,IAAT,KAAkB,MAAtB,EAA8B;AAC5B,aAAK6V,KAAL,CAAWvN,IAAI,CAAC6T,GAAL,CAASnV,KAApB,EAA2BkE,aAAa,CAAC0E,gCAAzC,EAA2EtH,IAAI,CAAC6T,GAAL,CAASnc,IAApF;AACD;;AAED,UAAIwc,UAAU,CAACvU,GAAX,CAAeK,IAAI,CAAC6T,GAAL,CAASnc,IAAxB,CAAJ,EAAmC;AACjC,aAAK6V,KAAL,CAAWvN,IAAI,CAAC6T,GAAL,CAASnV,KAApB,EAA2BkE,aAAa,CAAC4E,iCAAzC,EAA4ExH,IAAI,CAAC6T,GAAL,CAASnc,IAArF;AACD;;AAEDwc,MAAAA,UAAU,CAACyH,GAAX,CAAe3b,IAAI,CAAC6T,GAAL,CAASnc,IAAxB;AACA,WAAK2yB,MAAL,CAAYtyB,OAAO,CAACsB,KAApB;;AAEA,UAAI,CAAC,KAAK6F,KAAL,CAAWnH,OAAO,CAACK,MAAnB,CAAL,EAAiC;AAC/B,cAAM,KAAKkxB,UAAL,CAAgB,KAAKroB,KAAL,CAAWvC,KAA3B,EAAkCkE,aAAa,CAAC2E,2BAAhD,CAAN;AACD;;AAEDvH,MAAAA,IAAI,CAACxJ,KAAL,GAAa,KAAK6Y,kBAAL,CAAwB,KAAKpO,KAAL,CAAWzK,KAAnC,CAAb;AACA,WAAKoc,UAAL,CAAgB5S,IAAhB,EAAsB,iBAAtB;AACA2+D,MAAAA,KAAK,CAACz9D,IAAN,CAAWlB,IAAX;AACD,KAtBD,QAsBS,KAAKsf,GAAL,CAASvnB,OAAO,CAACoB,KAAjB,CAtBT;;AAwBA,WAAOwlE,KAAP;AACD;;AAEDb,EAAAA,0BAA0B,GAAG;AAC3B,QAAI,KAAKv0C,YAAL,CAAkB,QAAlB,KAA+B,CAAC,KAAKS,qBAAL,EAApC,EAAkE;AAChE,WAAK3I,YAAL,CAAkB,kBAAlB;AACA,WAAKnK,IAAL;AACD,KAHD,MAGO;AACL,UAAI,KAAKzX,SAAL,CAAe,kBAAf,CAAJ,EAAwC,OAAO,EAAP;AACxC,aAAO,IAAP;AACD;;AAED,SAAK6f,GAAL,CAASvnB,OAAO,CAACa,MAAjB;AACA,UAAM+lE,KAAK,GAAG,KAAKD,kBAAL,EAAd;AACA,SAAKp/C,GAAL,CAASvnB,OAAO,CAACgB,MAAjB;AACA,WAAO4lE,KAAP;AACD;;AAEDt/B,EAAAA,gCAAgC,CAACr/B,IAAD,EAAO;AACrC,QAAI,KAAKg/B,wBAAL,CAA8Bh/B,IAA9B,CAAJ,EAAyC;AACvC,WAAKi/B,yBAAL,CAA+Bj/B,IAA/B,EAAqC,KAAKyS,SAAL,EAArC,EAAuD,wBAAvD,EAAiF,0BAAjF;AACA,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD;;AAEDy5C,EAAAA,6BAA6B,CAAClsD,IAAD,EAAO;AAClC,QAAI,KAAKd,KAAL,CAAWnH,OAAO,CAACsD,IAAnB,CAAJ,EAA8B;AAC5B,YAAM6jC,SAAS,GAAG,KAAKzsB,SAAL,EAAlB;AACA,WAAKyE,IAAL;AACA,WAAK4S,gBAAL,CAAsB,IAAtB;AACA,WAAKmV,yBAAL,CAA+Bj/B,IAA/B,EAAqCk/B,SAArC,EAAgD,0BAAhD,EAA4E,4BAA5E;AACA,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD;;AAEDitB,EAAAA,0BAA0B,CAACnsD,IAAD,EAAO;AAC/B,QAAIg5B,KAAK,GAAG,IAAZ;AACA,SAAK3O,MAAL,CAAYtyB,OAAO,CAACa,MAApB;;AAEA,WAAO,CAAC,KAAK0mB,GAAL,CAASvnB,OAAO,CAACgB,MAAjB,CAAR,EAAkC;AAChC,UAAIigC,KAAJ,EAAW;AACTA,QAAAA,KAAK,GAAG,KAAR;AACD,OAFD,MAEO;AACL,YAAI,KAAK1Z,GAAL,CAASvnB,OAAO,CAACsB,KAAjB,CAAJ,EAA6B;AAC3B,gBAAM,KAAKkU,KAAL,CAAW,KAAKtM,KAAL,CAAWvC,KAAtB,EAA6BkE,aAAa,CAACyB,sBAA3C,CAAN;AACD;;AAED,aAAKgmB,MAAL,CAAYtyB,OAAO,CAACoB,KAApB;AACA,YAAI,KAAKmmB,GAAL,CAASvnB,OAAO,CAACgB,MAAjB,CAAJ,EAA8B;AAC/B;;AAED,WAAKumC,oBAAL,CAA0Bt/B,IAA1B;AACD;AACF;;AAEDs/B,EAAAA,oBAAoB,CAACt/B,IAAD,EAAO;AACzB,UAAMk/B,SAAS,GAAG,KAAKzsB,SAAL,EAAlB;AACA,UAAMosD,gBAAgB,GAAG,KAAK3/D,KAAL,CAAWnH,OAAO,CAACK,MAAnB,CAAzB;AACA8mC,IAAAA,SAAS,CAACU,QAAV,GAAqB,KAAKH,qBAAL,EAArB;;AAEA,QAAI,KAAK5V,aAAL,CAAmB,IAAnB,CAAJ,EAA8B;AAC5BqV,MAAAA,SAAS,CAACE,KAAV,GAAkB,KAAKrM,eAAL,EAAlB;AACD,KAFD,MAEO;AACL,YAAM;AACJ6M,QAAAA;AADI,UAEFV,SAFJ;;AAIA,UAAI2/B,gBAAJ,EAAsB;AACpB,cAAM,KAAKtxD,KAAL,CAAW2xB,SAAS,CAACxgC,KAArB,EAA4BkE,aAAa,CAAC0C,qBAA1C,EAAiEs6B,QAAQ,CAACppC,KAA1E,CAAN;AACD;;AAED,WAAKupC,iBAAL,CAAuBH,QAAQ,CAACloC,IAAhC,EAAsCwnC,SAAS,CAACxgC,KAAhD,EAAuD,IAAvD,EAA6D,IAA7D;AACAwgC,MAAAA,SAAS,CAACE,KAAV,GAAkBjS,eAAe,CAACyS,QAAD,CAAjC;AACD;;AAED,SAAK5B,SAAL,CAAekB,SAAS,CAACE,KAAzB,EAAgC,kBAAhC,EAAoDxmB,YAApD;AACA5Y,IAAAA,IAAI,CAACqC,UAAL,CAAgBnB,IAAhB,CAAqB,KAAK0R,UAAL,CAAgBssB,SAAhB,EAA2B,iBAA3B,CAArB;AACD;;AAEDd,EAAAA,WAAW,CAACtE,KAAD,EAAQ;AACjB,WAAOA,KAAK,CAAC73B,IAAN,KAAe,YAAf,IAA+B63B,KAAK,CAACpiC,IAAN,KAAe,MAArD;AACD;;AAtrD4C;;AA0rD/C,MAAMonE,MAAN,SAAqBpG,eAArB,CAAqC;AACnC1hE,EAAAA,WAAW,CAACW,OAAD,EAAUoH,KAAV,EAAiB;AAC1BpH,IAAAA,OAAO,GAAGu2D,UAAU,CAACv2D,OAAD,CAApB;AACA,UAAMA,OAAN,EAAeoH,KAAf;AACA,SAAKpH,OAAL,GAAeA,OAAf;AACA,SAAKg0B,gBAAL;AACA,SAAKjsB,OAAL,GAAeq/D,UAAU,CAAC,KAAKpnE,OAAL,CAAa+H,OAAd,CAAzB;AACA,SAAKd,QAAL,GAAgBjH,OAAO,CAACg2D,cAAxB;AACD;;AAED1hC,EAAAA,eAAe,GAAG;AAChB,WAAO5R,YAAP;AACD;;AAED4hB,EAAAA,KAAK,GAAG;AACN,SAAK1P,kBAAL;AACA,UAAM4V,IAAI,GAAG,KAAK1vB,SAAL,EAAb;AACA,UAAM2vB,OAAO,GAAG,KAAK3vB,SAAL,EAAhB;AACA,SAAK4M,SAAL;AACA8iB,IAAAA,IAAI,CAACr0B,MAAL,GAAc,IAAd;AACA,SAAKo0B,aAAL,CAAmBC,IAAnB,EAAyBC,OAAzB;AACAD,IAAAA,IAAI,CAACr0B,MAAL,GAAc,KAAK7M,KAAL,CAAW6M,MAAzB;AACA,WAAOq0B,IAAP;AACD;;AAvBkC;;AA2BrC,SAAS48B,UAAT,CAAoBr/D,OAApB,EAA6B;AAC3B,QAAMs/D,SAAS,GAAG,IAAIxnE,GAAJ,EAAlB;;AAEA,OAAK,MAAMqI,MAAX,IAAqBH,OAArB,EAA8B;AAC5B,UAAM,CAAChI,IAAD,EAAOC,OAAP,IAAkBymB,KAAK,CAACC,OAAN,CAAcxe,MAAd,IAAwBA,MAAxB,GAAiC,CAACA,MAAD,EAAS,EAAT,CAAzD;AACA,QAAI,CAACm/D,SAAS,CAACr/D,GAAV,CAAcjI,IAAd,CAAL,EAA0BsnE,SAAS,CAACnnE,GAAV,CAAcH,IAAd,EAAoBC,OAAO,IAAI,EAA/B;AAC3B;;AAED,SAAOqnE,SAAP;AACD;;AAED,SAAS/iC,KAAT,CAAel9B,KAAf,EAAsBpH,OAAtB,EAA+B;AAC7B,MAAIsnE,QAAJ;;AAEA,MAAI,CAAC,CAACA,QAAQ,GAAGtnE,OAAZ,KAAwB,IAAxB,GAA+B,KAAK,CAApC,GAAwCsnE,QAAQ,CAACnhD,UAAlD,MAAkE,aAAtE,EAAqF;AACnFnmB,IAAAA,OAAO,GAAGtB,MAAM,CAAC8D,MAAP,CAAc,EAAd,EAAkBxC,OAAlB,CAAV;;AAEA,QAAI;AACFA,MAAAA,OAAO,CAACmmB,UAAR,GAAqB,QAArB;AACA,YAAM6O,MAAM,GAAGuyC,SAAS,CAACvnE,OAAD,EAAUoH,KAAV,CAAxB;AACA,YAAMogE,GAAG,GAAGxyC,MAAM,CAACsP,KAAP,EAAZ;;AAEA,UAAItP,MAAM,CAACptB,iBAAX,EAA8B;AAC5B,eAAO4/D,GAAP;AACD;;AAED,UAAIxyC,MAAM,CAACntB,2BAAX,EAAwC;AACtC,YAAI;AACF7H,UAAAA,OAAO,CAACmmB,UAAR,GAAqB,QAArB;AACA,iBAAOohD,SAAS,CAACvnE,OAAD,EAAUoH,KAAV,CAAT,CAA0Bk9B,KAA1B,EAAP;AACD,SAHD,CAGE,OAAOhtB,OAAP,EAAgB,CAAE;AACrB,OALD,MAKO;AACLkwD,QAAAA,GAAG,CAAC/8B,OAAJ,CAAYtkB,UAAZ,GAAyB,QAAzB;AACD;;AAED,aAAOqhD,GAAP;AACD,KAnBD,CAmBE,OAAOC,WAAP,EAAoB;AACpB,UAAI;AACFznE,QAAAA,OAAO,CAACmmB,UAAR,GAAqB,QAArB;AACA,eAAOohD,SAAS,CAACvnE,OAAD,EAAUoH,KAAV,CAAT,CAA0Bk9B,KAA1B,EAAP;AACD,OAHD,CAGE,OAAOojC,QAAP,EAAiB,CAAE;;AAErB,YAAMD,WAAN;AACD;AACF,GA9BD,MA8BO;AACL,WAAOF,SAAS,CAACvnE,OAAD,EAAUoH,KAAV,CAAT,CAA0Bk9B,KAA1B,EAAP;AACD;AACF;;AACD,SAASxJ,eAAT,CAAyB1zB,KAAzB,EAAgCpH,OAAhC,EAAyC;AACvC,QAAMg1B,MAAM,GAAGuyC,SAAS,CAACvnE,OAAD,EAAUoH,KAAV,CAAxB;;AAEA,MAAI4tB,MAAM,CAACh1B,OAAP,CAAekmB,UAAnB,EAA+B;AAC7B8O,IAAAA,MAAM,CAAC1rB,KAAP,CAAakV,MAAb,GAAsB,IAAtB;AACD;;AAED,SAAOwW,MAAM,CAACo+B,aAAP,EAAP;AACD;;AAED,SAASmU,SAAT,CAAmBvnE,OAAnB,EAA4BoH,KAA5B,EAAmC;AACjC,MAAI4pD,GAAG,GAAGmW,MAAV;;AAEA,MAAInnE,OAAO,IAAI,IAAX,IAAmBA,OAAO,CAAC+H,OAA/B,EAAwC;AACtCotD,IAAAA,eAAe,CAACn1D,OAAO,CAAC+H,OAAT,CAAf;AACAipD,IAAAA,GAAG,GAAG2W,cAAc,CAAC3nE,OAAO,CAAC+H,OAAT,CAApB;AACD;;AAED,SAAO,IAAIipD,GAAJ,CAAQhxD,OAAR,EAAiBoH,KAAjB,CAAP;AACD;;AAED,MAAMwgE,gBAAgB,GAAG,EAAzB;;AAEA,SAASD,cAAT,CAAwBE,kBAAxB,EAA4C;AAC1C,QAAMC,UAAU,GAAGhS,gBAAgB,CAACzB,MAAjB,CAAwBt0D,IAAI,IAAI+H,SAAS,CAAC+/D,kBAAD,EAAqB9nE,IAArB,CAAzC,CAAnB;AACA,QAAMmc,GAAG,GAAG4rD,UAAU,CAAC70C,IAAX,CAAgB,GAAhB,CAAZ;AACA,MAAI+9B,GAAG,GAAG4W,gBAAgB,CAAC1rD,GAAD,CAA1B;;AAEA,MAAI,CAAC80C,GAAL,EAAU;AACRA,IAAAA,GAAG,GAAGmW,MAAN;;AAEA,SAAK,MAAMj/D,MAAX,IAAqB4/D,UAArB,EAAiC;AAC/B9W,MAAAA,GAAG,GAAG6E,YAAY,CAAC3tD,MAAD,CAAZ,CAAqB8oD,GAArB,CAAN;AACD;;AAED4W,IAAAA,gBAAgB,CAAC1rD,GAAD,CAAhB,GAAwB80C,GAAxB;AACD;;AAED,SAAOA,GAAP;AACD;;AAEDpyD,OAAO,CAAC0lC,KAAR,GAAgBA,KAAhB;AACA1lC,OAAO,CAACk8B,eAAR,GAA0BA,eAA1B;AACAl8B,OAAO,CAACmpE,QAAR,GAAmB3nE,OAAnB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\nclass TokenType {\n  constructor(label, conf = {}) {\n    this.label = void 0;\n    this.keyword = void 0;\n    this.beforeExpr = void 0;\n    this.startsExpr = void 0;\n    this.rightAssociative = void 0;\n    this.isLoop = void 0;\n    this.isAssign = void 0;\n    this.prefix = void 0;\n    this.postfix = void 0;\n    this.binop = void 0;\n    this.updateContext = void 0;\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    this.updateContext = null;\n  }\n\n}\nconst keywords$1 = new Map();\n\nfunction createKeyword(name, options = {}) {\n  options.keyword = name;\n  const token = new TokenType(name, options);\n  keywords$1.set(name, token);\n  return token;\n}\n\nfunction createBinop(name, binop) {\n  return new TokenType(name, {\n    beforeExpr,\n    binop\n  });\n}\n\nconst types$1 = {\n  num: new TokenType(\"num\", {\n    startsExpr\n  }),\n  bigint: new TokenType(\"bigint\", {\n    startsExpr\n  }),\n  decimal: new TokenType(\"decimal\", {\n    startsExpr\n  }),\n  regexp: new TokenType(\"regexp\", {\n    startsExpr\n  }),\n  string: new TokenType(\"string\", {\n    startsExpr\n  }),\n  name: new TokenType(\"name\", {\n    startsExpr\n  }),\n  privateName: new TokenType(\"#name\", {\n    startsExpr\n  }),\n  eof: new TokenType(\"eof\"),\n  bracketL: new TokenType(\"[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketHashL: new TokenType(\"#[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketBarL: new TokenType(\"[|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketR: new TokenType(\"]\"),\n  bracketBarR: new TokenType(\"|]\"),\n  braceL: new TokenType(\"{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceBarL: new TokenType(\"{|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceHashL: new TokenType(\"#{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceR: new TokenType(\"}\", {\n    beforeExpr\n  }),\n  braceBarR: new TokenType(\"|}\"),\n  parenL: new TokenType(\"(\", {\n    beforeExpr,\n    startsExpr\n  }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", {\n    beforeExpr\n  }),\n  semi: new TokenType(\";\", {\n    beforeExpr\n  }),\n  colon: new TokenType(\":\", {\n    beforeExpr\n  }),\n  doubleColon: new TokenType(\"::\", {\n    beforeExpr\n  }),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", {\n    beforeExpr\n  }),\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", {\n    beforeExpr\n  }),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", {\n    beforeExpr\n  }),\n  backQuote: new TokenType(\"`\", {\n    startsExpr\n  }),\n  dollarBraceL: new TokenType(\"${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  at: new TokenType(\"@\"),\n  hash: new TokenType(\"#\", {\n    startsExpr\n  }),\n  interpreterDirective: new TokenType(\"#!...\"),\n  eq: new TokenType(\"=\", {\n    beforeExpr,\n    isAssign\n  }),\n  assign: new TokenType(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  slashAssign: new TokenType(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  moduloAssign: new TokenType(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  incDec: new TokenType(\"++/--\", {\n    prefix,\n    postfix,\n    startsExpr\n  }),\n  bang: new TokenType(\"!\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  tilde: new TokenType(\"~\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", {\n    beforeExpr,\n    binop: 9,\n    prefix,\n    startsExpr\n  }),\n  modulo: new TokenType(\"%\", {\n    binop: 10,\n    startsExpr\n  }),\n  star: new TokenType(\"*\", {\n    binop: 10\n  }),\n  slash: createBinop(\"/\", 10),\n  exponent: new TokenType(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true\n  }),\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", {\n    beforeExpr\n  }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", {\n    beforeExpr\n  }),\n  _do: createKeyword(\"do\", {\n    isLoop,\n    beforeExpr\n  }),\n  _else: createKeyword(\"else\", {\n    beforeExpr\n  }),\n  _finally: createKeyword(\"finally\"),\n  _for: createKeyword(\"for\", {\n    isLoop\n  }),\n  _function: createKeyword(\"function\", {\n    startsExpr\n  }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", {\n    beforeExpr\n  }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _while: createKeyword(\"while\", {\n    isLoop\n  }),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", {\n    beforeExpr,\n    startsExpr\n  }),\n  _this: createKeyword(\"this\", {\n    startsExpr\n  }),\n  _super: createKeyword(\"super\", {\n    startsExpr\n  }),\n  _class: createKeyword(\"class\", {\n    startsExpr\n  }),\n  _extends: createKeyword(\"extends\", {\n    beforeExpr\n  }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", {\n    startsExpr\n  }),\n  _null: createKeyword(\"null\", {\n    startsExpr\n  }),\n  _true: createKeyword(\"true\", {\n    startsExpr\n  }),\n  _false: createKeyword(\"false\", {\n    startsExpr\n  }),\n  _in: createKeyword(\"in\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _instanceof: createKeyword(\"instanceof\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _typeof: createKeyword(\"typeof\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _void: createKeyword(\"void\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _delete: createKeyword(\"delete\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  })\n};\n\nconst lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nconst lineBreakG = new RegExp(lineBreak.source, \"g\");\nfunction isNewLine(code) {\n  switch (code) {\n    case 10:\n    case 13:\n    case 8232:\n    case 8233:\n      return true;\n\n    default:\n      return false;\n  }\n}\nconst skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\nconst skipWhiteSpaceInLine = /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/y;\nconst skipWhiteSpaceToLineBreak = new RegExp(\"(?=(\" + skipWhiteSpaceInLine.source + \"))\\\\1\" + /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source, \"y\");\nfunction isWhitespace(code) {\n  switch (code) {\n    case 0x0009:\n    case 0x000b:\n    case 0x000c:\n    case 32:\n    case 160:\n    case 5760:\n    case 0x2000:\n    case 0x2001:\n    case 0x2002:\n    case 0x2003:\n    case 0x2004:\n    case 0x2005:\n    case 0x2006:\n    case 0x2007:\n    case 0x2008:\n    case 0x2009:\n    case 0x200a:\n    case 0x202f:\n    case 0x205f:\n    case 0x3000:\n    case 0xfeff:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nclass Position {\n  constructor(line, col) {\n    this.line = void 0;\n    this.column = void 0;\n    this.line = line;\n    this.column = col;\n  }\n\n}\nclass SourceLocation {\n  constructor(start, end) {\n    this.start = void 0;\n    this.end = void 0;\n    this.filename = void 0;\n    this.identifierName = void 0;\n    this.start = start;\n    this.end = end;\n  }\n\n}\nfunction getLineInfo(input, offset) {\n  let line = 1;\n  let lineStart = 0;\n  let match;\n  lineBreakG.lastIndex = 0;\n\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n\nclass BaseParser {\n  constructor() {\n    this.sawUnambiguousESM = false;\n    this.ambiguousScriptDifferentAst = false;\n  }\n\n  hasPlugin(name) {\n    return this.plugins.has(name);\n  }\n\n  getPluginOption(plugin, name) {\n    if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];\n  }\n\n}\n\nfunction setTrailingComments(node, comments) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\nfunction setInnerComments(node, comments) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else if (comments !== undefined) {\n    node.innerComments.unshift(...comments);\n  }\n}\n\nfunction adjustInnerComments(node, elements, commentWS) {\n  let lastElement = null;\n  let i = elements.length;\n\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\nclass CommentsParser extends BaseParser {\n  addComment(comment) {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.comments.push(comment);\n  }\n\n  processComment(node) {\n    const {\n      commentStack\n    } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const {\n      start: nodeStart\n    } = node;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n\n      if (commentEnd > nodeStart) {\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n\n        break;\n      }\n    }\n  }\n\n  finalizeComment(commentWS) {\n    const {\n      comments\n    } = commentWS;\n\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n\n      if (commentWS.trailingNode !== null) {\n        commentWS.trailingNode.leadingComments = comments;\n      }\n    } else {\n      const {\n        containingNode: node,\n        start: commentStart\n      } = commentWS;\n\n      if (this.input.charCodeAt(commentStart - 1) === 44) {\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n\n          default:\n            {\n              setInnerComments(node, comments);\n            }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  finalizeRemainingComments() {\n    const {\n      commentStack\n    } = this.state;\n\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n\n    this.state.commentStack = [];\n  }\n\n  resetPreviousNodeTrailingComments(node) {\n    const {\n      commentStack\n    } = this.state;\n    const {\n      length\n    } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n}\n\nconst ErrorCodes = Object.freeze({\n  SyntaxError: \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n});\n\nconst ErrorMessages = makeErrorTemplates({\n  AccessorIsGenerator: \"A %0ter cannot be a generator.\",\n  ArgumentsInClass: \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext: \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier: \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock: \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter: \"'await' is not allowed in async function parameters.\",\n  AwaitNotInAsyncContext: \"'await' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n  BadGetterArity: \"A 'get' accesor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accesor must have exactly one formal parameter.\",\n  BadSetterRestParameter: \"A 'set' accesor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField: \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: \"'%0' require an initialization value.\",\n  DecoratorBeforeExport: \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n  DecoratorConstructor: \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass: \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport: \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: \"`%0` has already been exported. Exported identifiers must be unique.\",\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: \"A string literal cannot be used as an exported binding without `from`.\\n- Did you mean `export { '%0' as '%1' } from 'some-module'`?\",\n  ExportDefaultFromAsIdentifier: \"'from' is not allowed as an identifier after 'export default'.\",\n  ForInOfLoopInitializer: \"'%0' loop variable declaration may not have an initializer.\",\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext: \"Generators can only be declared at the top level or inside a block.\",\n  IllegalBreakContinue: \"Unsyntactic %0.\",\n  IllegalLanguageModeDirective: \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportBindingIsString: 'A string literal cannot be used as an imported binding.\\n- Did you mean `import { \"%0\" as foo }`?',\n  ImportCallArgumentTrailingComma: \"Trailing comma is disallowed inside import(...) arguments.\",\n  ImportCallArity: \"`import()` requires exactly %0.\",\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: \"Expected number in radix %0.\",\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: \"Escape sequence in keyword %0.\",\n  InvalidIdentifier: \"Invalid identifier %0.\",\n  InvalidLhs: \"Invalid left-hand side in %0.\",\n  InvalidLhsBinding: \"Binding invalid left-hand side in %0.\",\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent: \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: \"Unexpected character '%0'.\",\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: \"Private name #%0 is not defined.\",\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty: \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: \"Label '%0' is already declared.\",\n  LetInLexicalBinding: \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment: \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical: \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType: \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue: \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: 'Duplicate key \"%0\" is not allowed in module attributes.',\n  ModuleExportNameHasLoneSurrogate: \"An export name cannot include a lone surrogate, found '\\\\u%0'.\",\n  ModuleExportUndefined: \"Export '%0' is not defined.\",\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence: \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar: \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew: \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate: \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor: \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PipeBodyIsTighter: \"Unexpected %0 after pipeline body; any %0 expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  PipeTopicRequiresHackPipes: 'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PipeTopicUnbound: \"Topic reference is unbound; it must be inside a pipe body.\",\n  PipeTopicUnconfiguredToken: 'Invalid topic token %0. In order to use %0 as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"%0\" }.',\n  PipeTopicUnused: \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  PipelineBodyNoArrow: 'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  PipelineBodySequenceExpression: \"Pipeline body may not be a comma-separated sequence expression.\",\n  PipelineHeadSequenceExpression: \"Pipeline head should not be a comma-separated sequence expression.\",\n  PipelineTopicUnused: \"Pipeline is in topic style but does not use topic reference.\",\n  PrimaryTopicNotAllowed: \"Topic reference was used in a lexical context without topic binding.\",\n  PrimaryTopicRequiresSmartPipeline: 'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PrivateInExpectedIn: \"Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`).\",\n  PrivateNameRedeclaration: \"Duplicate private name #%0.\",\n  RecordExpressionBarIncorrectEndSyntaxType: \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType: \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType: \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction: \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  StrictDelete: \"Deleting local variable in strict mode.\",\n  StrictEvalArguments: \"Assigning to '%0' in strict mode.\",\n  StrictEvalArgumentsBinding: \"Binding '%0' in strict mode.\",\n  StrictFunction: \"In strict mode code, functions can only be declared at top level or inside a block.\",\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n  StrictWith: \"'with' in strict mode.\",\n  SuperNotAllowed: \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType: \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType: \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType: \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody: 'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport: \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: \"Unexpected keyword '%0'.\",\n  UnexpectedLeadingDecorator: \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration: \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget: \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator: \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\\n or a property of member expression (i.e. this.#p).\",\n  UnexpectedReservedWord: \"Unexpected reserved word '%0'.\",\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: \"Unexpected token '%0'.\",\n  UnexpectedTokenUnaryExponentiation: \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport: \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport: \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport: \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1.\",\n  UnsupportedParameterDecorator: \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator: \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper: \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  VarRedeclaration: \"Identifier '%0' has already been declared.\",\n  YieldBindingIdentifier: \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  ZeroDigitNumericSeparator: \"Numeric separator can not be used after leading 0.\"\n}, ErrorCodes.SyntaxError);\nconst SourceTypeModuleErrorMessages = makeErrorTemplates({\n  ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n  ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`\n}, ErrorCodes.SourceTypeModuleError);\n\nfunction makeErrorTemplates(messages, code) {\n  const templates = {};\n  Object.keys(messages).forEach(reasonCode => {\n    templates[reasonCode] = Object.freeze({\n      code,\n      reasonCode,\n      template: messages[reasonCode]\n    });\n  });\n  return Object.freeze(templates);\n}\nclass ParserError extends CommentsParser {\n  getLocationForPosition(pos) {\n    let loc;\n    if (pos === this.state.start) loc = this.state.startLoc;else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;else if (pos === this.state.end) loc = this.state.endLoc;else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;else loc = getLineInfo(this.input, pos);\n    return loc;\n  }\n\n  raise(pos, {\n    code,\n    reasonCode,\n    template\n  }, ...params) {\n    return this.raiseWithData(pos, {\n      code,\n      reasonCode\n    }, template, ...params);\n  }\n\n  raiseOverwrite(pos, {\n    code,\n    template\n  }, ...params) {\n    const loc = this.getLocationForPosition(pos);\n    const message = template.replace(/%(\\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;\n\n    if (this.options.errorRecovery) {\n      const errors = this.state.errors;\n\n      for (let i = errors.length - 1; i >= 0; i--) {\n        const error = errors[i];\n\n        if (error.pos === pos) {\n          return Object.assign(error, {\n            message\n          });\n        } else if (error.pos < pos) {\n          break;\n        }\n      }\n    }\n\n    return this._raise({\n      code,\n      loc,\n      pos\n    }, message);\n  }\n\n  raiseWithData(pos, data, errorTemplate, ...params) {\n    const loc = this.getLocationForPosition(pos);\n    const message = errorTemplate.replace(/%(\\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;\n    return this._raise(Object.assign({\n      loc,\n      pos\n    }, data), message);\n  }\n\n  _raise(errorContext, message) {\n    const err = new SyntaxError(message);\n    Object.assign(err, errorContext);\n\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n\n}\n\nvar estree = (superClass => class extends superClass {\n  parseRegExpLiteral({\n    pattern,\n    flags\n  }) {\n    let regex = null;\n\n    try {\n      regex = new RegExp(pattern, flags);\n    } catch (e) {}\n\n    const node = this.estreeParseLiteral(regex);\n    node.regex = {\n      pattern,\n      flags\n    };\n    return node;\n  }\n\n  parseBigIntLiteral(value) {\n    let bigInt;\n\n    try {\n      bigInt = BigInt(value);\n    } catch (_unused) {\n      bigInt = null;\n    }\n\n    const node = this.estreeParseLiteral(bigInt);\n    node.bigint = String(node.value || value);\n    return node;\n  }\n\n  parseDecimalLiteral(value) {\n    const decimal = null;\n    const node = this.estreeParseLiteral(decimal);\n    node.decimal = String(node.value || value);\n    return node;\n  }\n\n  estreeParseLiteral(value) {\n    return this.parseLiteral(value, \"Literal\");\n  }\n\n  parseStringLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  parseNumericLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  parseNullLiteral() {\n    return this.estreeParseLiteral(null);\n  }\n\n  parseBooleanLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  directiveToStmt(directive) {\n    const directiveLiteral = directive.value;\n    const stmt = this.startNodeAt(directive.start, directive.loc.start);\n    const expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);\n    expression.value = directiveLiteral.extra.expressionValue;\n    expression.raw = directiveLiteral.extra.raw;\n    stmt.expression = this.finishNodeAt(expression, \"Literal\", directiveLiteral.end, directiveLiteral.loc.end);\n    stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n    return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.end, directive.loc.end);\n  }\n\n  initFunction(node, isAsync) {\n    super.initFunction(node, isAsync);\n    node.expression = false;\n  }\n\n  checkDeclaration(node) {\n    if (node != null && this.isObjectProperty(node)) {\n      this.checkDeclaration(node.value);\n    } else {\n      super.checkDeclaration(node);\n    }\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.value.params;\n  }\n\n  isValidDirective(stmt) {\n    var _stmt$expression$extr;\n\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && !((_stmt$expression$extr = stmt.expression.extra) != null && _stmt$expression$extr.parenthesized);\n  }\n\n  stmtToDirective(stmt) {\n    const value = stmt.expression.value;\n    const directive = super.stmtToDirective(stmt);\n    this.addExtra(directive.value, \"expressionValue\", value);\n    return directive;\n  }\n\n  parseBlockBody(node, ...args) {\n    super.parseBlockBody(node, ...args);\n    const directiveStatements = node.directives.map(d => this.directiveToStmt(d));\n    node.body = directiveStatements.concat(node.body);\n    delete node.directives;\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true);\n\n    if (method.typeParameters) {\n      method.value.typeParameters = method.typeParameters;\n      delete method.typeParameters;\n    }\n\n    classBody.body.push(method);\n  }\n\n  parseMaybePrivateName(...args) {\n    const node = super.parseMaybePrivateName(...args);\n\n    if (node.type === \"PrivateName\" && this.getPluginOption(\"estree\", \"classFeatures\")) {\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    return node;\n  }\n\n  convertPrivateNameToPrivateIdentifier(node) {\n    const name = super.getPrivateNameSV(node);\n    node = node;\n    delete node.id;\n    node.name = name;\n    node.type = \"PrivateIdentifier\";\n    return node;\n  }\n\n  isPrivateName(node) {\n    if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n      return super.isPrivateName(node);\n    }\n\n    return node.type === \"PrivateIdentifier\";\n  }\n\n  getPrivateNameSV(node) {\n    if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n      return super.getPrivateNameSV(node);\n    }\n\n    return node.name;\n  }\n\n  parseLiteral(value, type) {\n    const node = super.parseLiteral(value, type);\n    node.raw = node.extra.raw;\n    delete node.extra;\n    return node;\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    super.parseFunctionBody(node, allowExpression, isMethod);\n    node.expression = node.body.type !== \"BlockStatement\";\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    let funcNode = this.startNode();\n    funcNode.kind = node.kind;\n    funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n    funcNode.type = \"FunctionExpression\";\n    delete funcNode.kind;\n    node.value = funcNode;\n\n    if (type === \"ClassPrivateMethod\") {\n      node.computed = false;\n    }\n\n    type = \"MethodDefinition\";\n    return this.finishNode(node, type);\n  }\n\n  parseClassProperty(...args) {\n    const propertyNode = super.parseClassProperty(...args);\n\n    if (this.getPluginOption(\"estree\", \"classFeatures\")) {\n      propertyNode.type = \"PropertyDefinition\";\n    }\n\n    return propertyNode;\n  }\n\n  parseClassPrivateProperty(...args) {\n    const propertyNode = super.parseClassPrivateProperty(...args);\n\n    if (this.getPluginOption(\"estree\", \"classFeatures\")) {\n      propertyNode.type = \"PropertyDefinition\";\n      propertyNode.computed = false;\n    }\n\n    return propertyNode;\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);\n\n    if (node) {\n      node.type = \"Property\";\n      if (node.kind === \"method\") node.kind = \"init\";\n      node.shorthand = false;\n    }\n\n    return node;\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    const node = super.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n\n    if (node) {\n      node.kind = \"init\";\n      node.type = \"Property\";\n    }\n\n    return node;\n  }\n\n  isAssignable(node, isBinding) {\n    if (node != null && this.isObjectProperty(node)) {\n      return this.isAssignable(node.value, isBinding);\n    }\n\n    return super.isAssignable(node, isBinding);\n  }\n\n  toAssignable(node, isLHS = false) {\n    if (node != null && this.isObjectProperty(node)) {\n      this.toAssignable(node.value, isLHS);\n      return node;\n    }\n\n    return super.toAssignable(node, isLHS);\n  }\n\n  toAssignableObjectExpressionProp(prop, ...args) {\n    if (prop.kind === \"get\" || prop.kind === \"set\") {\n      this.raise(prop.key.start, ErrorMessages.PatternHasAccessor);\n    } else if (prop.method) {\n      this.raise(prop.key.start, ErrorMessages.PatternHasMethod);\n    } else {\n      super.toAssignableObjectExpressionProp(prop, ...args);\n    }\n  }\n\n  finishCallExpression(node, optional) {\n    super.finishCallExpression(node, optional);\n\n    if (node.callee.type === \"Import\") {\n      node.type = \"ImportExpression\";\n      node.source = node.arguments[0];\n\n      if (this.hasPlugin(\"importAssertions\")) {\n        var _node$arguments$;\n\n        node.attributes = (_node$arguments$ = node.arguments[1]) != null ? _node$arguments$ : null;\n      }\n\n      delete node.arguments;\n      delete node.callee;\n    }\n\n    return node;\n  }\n\n  toReferencedArguments(node) {\n    if (node.type === \"ImportExpression\") {\n      return;\n    }\n\n    super.toReferencedArguments(node);\n  }\n\n  parseExport(node) {\n    super.parseExport(node);\n\n    switch (node.type) {\n      case \"ExportAllDeclaration\":\n        node.exported = null;\n        break;\n\n      case \"ExportNamedDeclaration\":\n        if (node.specifiers.length === 1 && node.specifiers[0].type === \"ExportNamespaceSpecifier\") {\n          node.type = \"ExportAllDeclaration\";\n          node.exported = node.specifiers[0].exported;\n          delete node.specifiers;\n        }\n\n        break;\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    const node = super.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n    if (state.optionalChainMember) {\n      if (node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\") {\n        node.type = node.type.substring(8);\n      }\n\n      if (state.stop) {\n        const chain = this.startNodeAtNode(node);\n        chain.expression = node;\n        return this.finishNode(chain, \"ChainExpression\");\n      }\n    } else if (node.type === \"MemberExpression\" || node.type === \"CallExpression\") {\n      node.optional = false;\n    }\n\n    return node;\n  }\n\n  hasPropertyAsPrivateName(node) {\n    if (node.type === \"ChainExpression\") {\n      node = node.expression;\n    }\n\n    return super.hasPropertyAsPrivateName(node);\n  }\n\n  isOptionalChain(node) {\n    return node.type === \"ChainExpression\";\n  }\n\n  isObjectProperty(node) {\n    return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n  }\n\n  isObjectMethod(node) {\n    return node.method || node.kind === \"get\" || node.kind === \"set\";\n  }\n\n});\n\nclass TokContext {\n  constructor(token, preserveSpace) {\n    this.token = void 0;\n    this.preserveSpace = void 0;\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n}\nconst types = {\n  brace: new TokContext(\"{\"),\n  template: new TokContext(\"`\", true)\n};\n\ntypes$1.braceR.updateContext = context => {\n  context.pop();\n};\n\ntypes$1.braceL.updateContext = types$1.braceHashL.updateContext = types$1.dollarBraceL.updateContext = context => {\n  context.push(types.brace);\n};\n\ntypes$1.backQuote.updateContext = context => {\n  if (context[context.length - 1] === types.template) {\n    context.pop();\n  } else {\n    context.push(types.template);\n  }\n};\n\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08c7\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\u9ffc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7bf\\ua7c2-\\ua7ca\\ua7f5-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf\\u1ac0\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\nconst nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nconst nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nconst astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 107, 20, 28, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8952, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42717, 35, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];\nconst astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\n\nfunction isInAstralSet(code, set) {\n  let pos = 0x10000;\n\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n\n  return false;\n}\n\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\nconst reservedWords = {\n  keyword: [\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\"],\n  strict: [\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"],\n  strictBind: [\"eval\", \"arguments\"]\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\nfunction isReservedWord(word, inModule) {\n  return inModule && word === \"await\" || word === \"enum\";\n}\nfunction isStrictReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\nfunction isStrictBindOnlyReservedWord(word) {\n  return reservedWordsStrictBindSet.has(word);\n}\nfunction isStrictBindReservedWord(word, inModule) {\n  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\n}\nfunction isKeyword(word) {\n  return keywords.has(word);\n}\n\nfunction isIteratorStart(current, next) {\n  return current === 64 && next === 64;\n}\nconst reservedWordLikeSet = new Set([\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\", \"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\", \"eval\", \"arguments\", \"enum\", \"await\"]);\nfunction canBeReservedWord(word) {\n  return reservedWordLikeSet.has(word);\n}\n\nconst SCOPE_OTHER = 0b000000000,\n      SCOPE_PROGRAM = 0b000000001,\n      SCOPE_FUNCTION = 0b000000010,\n      SCOPE_ARROW = 0b000000100,\n      SCOPE_SIMPLE_CATCH = 0b000001000,\n      SCOPE_SUPER = 0b000010000,\n      SCOPE_DIRECT_SUPER = 0b000100000,\n      SCOPE_CLASS = 0b001000000,\n      SCOPE_STATIC_BLOCK = 0b010000000,\n      SCOPE_TS_MODULE = 0b100000000,\n      SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\nconst BIND_KIND_VALUE = 0b000000000001,\n      BIND_KIND_TYPE = 0b000000000010,\n      BIND_SCOPE_VAR = 0b000000000100,\n      BIND_SCOPE_LEXICAL = 0b000000001000,\n      BIND_SCOPE_FUNCTION = 0b000000010000,\n      BIND_FLAGS_NONE = 0b000001000000,\n      BIND_FLAGS_CLASS = 0b000010000000,\n      BIND_FLAGS_TS_ENUM = 0b000100000000,\n      BIND_FLAGS_TS_CONST_ENUM = 0b001000000000,\n      BIND_FLAGS_TS_EXPORT_ONLY = 0b010000000000,\n      BIND_FLAGS_FLOW_DECLARE_FN = 0b100000000000;\nconst BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS,\n      BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0,\n      BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0,\n      BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0,\n      BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS,\n      BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0,\n      BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM,\n      BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n      BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\nconst CLASS_ELEMENT_FLAG_STATIC = 0b100,\n      CLASS_ELEMENT_KIND_GETTER = 0b010,\n      CLASS_ELEMENT_KIND_SETTER = 0b001,\n      CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\nconst CLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n      CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n      CLASS_ELEMENT_OTHER = 0;\n\nclass Scope {\n  constructor(flags) {\n    this.var = new Set();\n    this.lexical = new Set();\n    this.functions = new Set();\n    this.flags = flags;\n  }\n\n}\nclass ScopeHandler {\n  constructor(raise, inModule) {\n    this.scopeStack = [];\n    this.undefinedExports = new Map();\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n\n      if (flags & SCOPE_STATIC_BLOCK) {\n        return true;\n      }\n\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n        return false;\n      }\n    }\n  }\n\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags) {\n    return new Scope(flags);\n  }\n\n  enter(flags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  treatFunctionsAsVarInScope(scope) {\n    return !!(scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_PROGRAM);\n  }\n\n  declareName(name, bindingType, pos) {\n    let scope = this.currentScope();\n\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope, name) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(scope, name, bindingType, pos) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(pos, ErrorMessages.VarRedeclaration, name);\n    }\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return scope.lexical.has(name) || scope.functions.has(name) || scope.var.has(name);\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return scope.lexical.has(name) || !this.treatFunctionsAsVarInScope(scope) && scope.var.has(name);\n    }\n\n    return scope.lexical.has(name) && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical.values().next().value === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name);\n  }\n\n  checkLocalExport(id) {\n    const {\n      name\n    } = id;\n    const topLevelScope = this.scopeStack[0];\n\n    if (!topLevelScope.lexical.has(name) && !topLevelScope.var.has(name) && !topLevelScope.functions.has(name)) {\n      this.undefinedExports.set(name, id.start);\n    }\n  }\n\n  currentScope() {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScopeFlags() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n\n  currentThisScopeFlags() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n\n}\n\nclass FlowScope extends Scope {\n  constructor(...args) {\n    super(...args);\n    this.declareFunctions = new Set();\n  }\n\n}\n\nclass FlowScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new FlowScope(flags);\n  }\n\n  declareName(name, bindingType, pos) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (super.isRedeclaredInScope(...arguments)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return !scope.declareFunctions.has(name) && (scope.lexical.has(name) || scope.functions.has(name));\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nclass State {\n  constructor() {\n    this.strict = void 0;\n    this.curLine = void 0;\n    this.startLoc = void 0;\n    this.endLoc = void 0;\n    this.errors = [];\n    this.potentialArrowAt = -1;\n    this.noArrowAt = [];\n    this.noArrowParamsConversionAt = [];\n    this.maybeInArrowParameters = false;\n    this.inType = false;\n    this.noAnonFunctionType = false;\n    this.inPropertyName = false;\n    this.hasFlowComment = false;\n    this.isAmbientContext = false;\n    this.inAbstractClass = false;\n    this.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n    this.soloAwait = false;\n    this.inFSharpPipelineDirectBody = false;\n    this.labels = [];\n    this.decoratorStack = [[]];\n    this.comments = [];\n    this.commentStack = [];\n    this.pos = 0;\n    this.lineStart = 0;\n    this.type = types$1.eof;\n    this.value = null;\n    this.start = 0;\n    this.end = 0;\n    this.lastTokEndLoc = null;\n    this.lastTokStartLoc = null;\n    this.lastTokStart = 0;\n    this.lastTokEnd = 0;\n    this.context = [types.brace];\n    this.exprAllowed = true;\n    this.containsEsc = false;\n    this.strictErrors = new Map();\n    this.tokensLength = 0;\n  }\n\n  init(options) {\n    this.strict = options.strictMode === false ? false : options.strictMode === true ? true : options.sourceType === \"module\";\n    this.curLine = options.startLine;\n    this.startLoc = this.endLoc = this.curPosition();\n  }\n\n  curPosition() {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  }\n\n  clone(skipArrays) {\n    const state = new State();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      state[key] = val;\n    }\n\n    return state;\n  }\n\n}\n\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\nconst VALID_REGEX_FLAGS = new Set([103, 109, 115, 105, 121, 117, 100]);\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [46, 66, 69, 79, 95, 98, 101, 111],\n  hex: [46, 88, 95, 120]\n};\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [48, 49];\nallowedNumericSeparatorSiblings.oct = [...allowedNumericSeparatorSiblings.bin, 50, 51, 52, 53, 54, 55];\nallowedNumericSeparatorSiblings.dec = [...allowedNumericSeparatorSiblings.oct, 56, 57];\nallowedNumericSeparatorSiblings.hex = [...allowedNumericSeparatorSiblings.dec, 65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102];\nclass Token {\n  constructor(state) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n}\nclass Tokenizer extends ParserError {\n  constructor(options, input) {\n    super();\n    this.isLookahead = void 0;\n    this.tokens = [];\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token) {\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  next() {\n    this.checkKeywordEscapes();\n\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type) {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  match(type) {\n    return this.state.type === type;\n  }\n\n  createLookaheadState(state) {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      lastTokEnd: state.end,\n      context: [this.curContext()],\n      inType: state.inType\n    };\n  }\n\n  lookahead() {\n    const old = this.state;\n    this.state = this.createLookaheadState(old);\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart() {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos) {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode() {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos) {\n    let cp = this.input.charCodeAt(pos);\n\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n\n    return cp;\n  }\n\n  setStrict(strict) {\n    this.state.strict = strict;\n\n    if (strict) {\n      this.state.strictErrors.forEach((message, pos) => this.raise(pos, message));\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext() {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  nextToken() {\n    const curContext = this.curContext();\n    if (!curContext.preserveSpace) this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n\n    if (this.state.pos >= this.length) {\n      this.finishToken(types$1.eof);\n      return;\n    }\n\n    if (curContext === types.template) {\n      this.readTmplToken();\n    } else {\n      this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n    }\n  }\n\n  skipBlockComment() {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", start + 2);\n    if (end === -1) throw this.raise(start, ErrorMessages.UnterminatedComment);\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start + 2;\n\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    if (this.isLookahead) return;\n    const comment = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + 2,\n      loc: new SourceLocation(startLoc, this.state.curPosition())\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip) {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt(this.state.pos += startSkip);\n\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    if (this.isLookahead) return;\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n    const comment = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition())\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipSpace() {\n    const spaceStart = this.state.pos;\n    const comments = [];\n\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 32:\n        case 160:\n        case 9:\n          ++this.state.pos;\n          break;\n\n        case 13:\n          if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n            ++this.state.pos;\n          }\n\n        case 10:\n        case 8232:\n        case 8233:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case 47:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case 42:\n              {\n                const comment = this.skipBlockComment();\n\n                if (comment !== undefined) {\n                  this.addComment(comment);\n                  if (this.options.attachComment) comments.push(comment);\n                }\n\n                break;\n              }\n\n            case 47:\n              {\n                const comment = this.skipLineComment(2);\n\n                if (comment !== undefined) {\n                  this.addComment(comment);\n                  if (this.options.attachComment) comments.push(comment);\n                }\n\n                break;\n              }\n\n            default:\n              break loop;\n          }\n\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (ch === 45 && !this.inModule) {\n            const pos = this.state.pos;\n\n            if (this.input.charCodeAt(pos + 1) === 45 && this.input.charCodeAt(pos + 2) === 62 && (spaceStart === 0 || this.state.lineStart > spaceStart)) {\n              const comment = this.skipLineComment(3);\n\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (ch === 60 && !this.inModule) {\n            const pos = this.state.pos;\n\n            if (this.input.charCodeAt(pos + 1) === 33 && this.input.charCodeAt(pos + 2) === 45 && this.input.charCodeAt(pos + 3) === 45) {\n              const comment = this.skipLineComment(4);\n\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null\n      };\n      this.state.commentStack.push(CommentWhitespace);\n    }\n  }\n\n  finishToken(type, val) {\n    this.state.end = this.state.pos;\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.state.endLoc = this.state.curPosition();\n      this.updateContext(prevType);\n    }\n  }\n\n  readToken_numberSign() {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n\n    if (next >= 48 && next <= 57) {\n      throw this.raise(this.state.pos, ErrorMessages.UnexpectedDigitAfterHash);\n    }\n\n    if (next === 123 || next === 91 && this.hasPlugin(\"recordAndTuple\")) {\n      this.expectPlugin(\"recordAndTuple\");\n\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(this.state.pos, next === 123 ? ErrorMessages.RecordExpressionHashIncorrectStartSyntaxType : ErrorMessages.TupleExpressionHashIncorrectStartSyntaxType);\n      }\n\n      this.state.pos += 2;\n\n      if (next === 123) {\n        this.finishToken(types$1.braceHashL);\n      } else {\n        this.finishToken(types$1.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(types$1.privateName, this.readWord1(next));\n    } else if (next === 92) {\n      ++this.state.pos;\n      this.finishToken(types$1.privateName, this.readWord1());\n    } else {\n      this.finishOp(types$1.hash, 1);\n    }\n  }\n\n  readToken_dot() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next >= 48 && next <= 57) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {\n      this.state.pos += 3;\n      this.finishToken(types$1.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types$1.dot);\n    }\n  }\n\n  readToken_slash() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types$1.slashAssign, 2);\n    } else {\n      this.finishOp(types$1.slash, 1);\n    }\n  }\n\n  readToken_interpreter() {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== 33) return false;\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n    this.finishToken(types$1.interpreterDirective, value);\n    return true;\n  }\n\n  readToken_mult_modulo(code) {\n    let type = code === 42 ? types$1.star : types$1.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 42 && next === 42) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = types$1.exponent;\n    }\n\n    if (next === 61 && !this.state.inType) {\n      width++;\n      type = code === 37 ? types$1.moduloAssign : types$1.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === 61) {\n        this.finishOp(types$1.assign, 3);\n      } else {\n        this.finishOp(code === 124 ? types$1.logicalOR : types$1.logicalAND, 2);\n      }\n\n      return;\n    }\n\n    if (code === 124) {\n      if (next === 62) {\n        this.finishOp(types$1.pipeline, 2);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 125) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.state.pos += 2;\n        this.finishToken(types$1.braceBarR);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 93) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.state.pos += 2;\n        this.finishToken(types$1.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === 61) {\n      this.finishOp(types$1.assign, 2);\n      return;\n    }\n\n    this.finishOp(code === 124 ? types$1.bitwiseOR : types$1.bitwiseAND, 1);\n  }\n\n  readToken_caret() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types$1.assign, 2);\n    } else {\n      this.finishOp(types$1.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_plus_min(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(types$1.incDec, 2);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(types$1.assign, 2);\n    } else {\n      this.finishOp(types$1.plusMin, 1);\n    }\n  }\n\n  readToken_lt_gt(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    let size = 1;\n\n    if (next === code) {\n      size = code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;\n\n      if (this.input.charCodeAt(this.state.pos + size) === 61) {\n        this.finishOp(types$1.assign, size + 1);\n        return;\n      }\n\n      this.finishOp(types$1.bitShift, size);\n      return;\n    }\n\n    if (next === 61) {\n      size = 2;\n    }\n\n    this.finishOp(types$1.relational, size);\n  }\n\n  readToken_eq_excl(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types$1.equality, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n      return;\n    }\n\n    if (code === 61 && next === 62) {\n      this.state.pos += 2;\n      this.finishToken(types$1.arrow);\n      return;\n    }\n\n    this.finishOp(code === 61 ? types$1.eq : types$1.bang, 1);\n  }\n\n  readToken_question() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n\n    if (next === 63) {\n      if (next2 === 61) {\n        this.finishOp(types$1.assign, 3);\n      } else {\n        this.finishOp(types$1.nullishCoalescing, 2);\n      }\n    } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\n      this.state.pos += 2;\n      this.finishToken(types$1.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types$1.question);\n    }\n  }\n\n  getTokenFromCode(code) {\n    switch (code) {\n      case 46:\n        this.readToken_dot();\n        return;\n\n      case 40:\n        ++this.state.pos;\n        this.finishToken(types$1.parenL);\n        return;\n\n      case 41:\n        ++this.state.pos;\n        this.finishToken(types$1.parenR);\n        return;\n\n      case 59:\n        ++this.state.pos;\n        this.finishToken(types$1.semi);\n        return;\n\n      case 44:\n        ++this.state.pos;\n        this.finishToken(types$1.comma);\n        return;\n\n      case 91:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.state.pos += 2;\n          this.finishToken(types$1.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(types$1.bracketL);\n        }\n\n        return;\n\n      case 93:\n        ++this.state.pos;\n        this.finishToken(types$1.bracketR);\n        return;\n\n      case 123:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.state.pos += 2;\n          this.finishToken(types$1.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(types$1.braceL);\n        }\n\n        return;\n\n      case 125:\n        ++this.state.pos;\n        this.finishToken(types$1.braceR);\n        return;\n\n      case 58:\n        if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n          this.finishOp(types$1.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(types$1.colon);\n        }\n\n        return;\n\n      case 63:\n        this.readToken_question();\n        return;\n\n      case 96:\n        ++this.state.pos;\n        this.finishToken(types$1.backQuote);\n        return;\n\n      case 48:\n        {\n          const next = this.input.charCodeAt(this.state.pos + 1);\n\n          if (next === 120 || next === 88) {\n            this.readRadixNumber(16);\n            return;\n          }\n\n          if (next === 111 || next === 79) {\n            this.readRadixNumber(8);\n            return;\n          }\n\n          if (next === 98 || next === 66) {\n            this.readRadixNumber(2);\n            return;\n          }\n        }\n\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n        this.readNumber(false);\n        return;\n\n      case 34:\n      case 39:\n        this.readString(code);\n        return;\n\n      case 47:\n        this.readToken_slash();\n        return;\n\n      case 37:\n      case 42:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case 124:\n      case 38:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case 94:\n        this.readToken_caret();\n        return;\n\n      case 43:\n      case 45:\n        this.readToken_plus_min(code);\n        return;\n\n      case 60:\n      case 62:\n        this.readToken_lt_gt(code);\n        return;\n\n      case 61:\n      case 33:\n        this.readToken_eq_excl(code);\n        return;\n\n      case 126:\n        this.finishOp(types$1.tilde, 1);\n        return;\n\n      case 64:\n        ++this.state.pos;\n        this.finishToken(types$1.at);\n        return;\n\n      case 35:\n        this.readToken_numberSign();\n        return;\n\n      case 92:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n\n    }\n\n    throw this.raise(this.state.pos, ErrorMessages.InvalidOrUnexpectedToken, String.fromCodePoint(code));\n  }\n\n  finishOp(type, size) {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp() {\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let {\n      pos\n    } = this.state;\n\n    for (;; ++pos) {\n      if (pos >= this.length) {\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n      }\n\n      const ch = this.input.charCodeAt(pos);\n\n      if (isNewLine(ch)) {\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n      }\n\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === 91) {\n          inClass = true;\n        } else if (ch === 93 && inClass) {\n          inClass = false;\n        } else if (ch === 47 && !inClass) {\n          break;\n        }\n\n        escaped = ch === 92;\n      }\n    }\n\n    const content = this.input.slice(start, pos);\n    ++pos;\n    let mods = \"\";\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      const char = String.fromCharCode(cp);\n\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (mods.includes(char)) {\n          this.raise(pos + 1, ErrorMessages.DuplicateRegExpFlags);\n        }\n      } else if (isIdentifierChar(cp) || cp === 92) {\n        this.raise(pos + 1, ErrorMessages.MalformedRegExpFlags);\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n\n    this.state.pos = pos;\n    this.finishToken(types$1.regexp, {\n      pattern: content,\n      flags: mods\n    });\n  }\n\n  readInt(radix, len, forceLen, allowNumSeparator = true) {\n    const start = this.state.pos;\n    const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings = radix === 16 ? allowedNumericSeparatorSiblings.hex : radix === 10 ? allowedNumericSeparatorSiblings.dec : radix === 8 ? allowedNumericSeparatorSiblings.oct : allowedNumericSeparatorSiblings.bin;\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === 95) {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (allowedSiblings.indexOf(next) === -1) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n        } else if (forbiddenSiblings.indexOf(prev) > -1 || forbiddenSiblings.indexOf(next) > -1 || Number.isNaN(next)) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n        }\n\n        if (!allowNumSeparator) {\n          this.raise(this.state.pos, ErrorMessages.NumericSeparatorInEscapeSequence);\n        }\n\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= 97) {\n        val = code - 97 + 10;\n      } else if (code >= 65) {\n        val = code - 65 + 10;\n      } else if (_isDigit(code)) {\n        val = code - 48;\n      } else {\n        val = Infinity;\n      }\n\n      if (val >= radix) {\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(this.state.start + i + 2, ErrorMessages.InvalidDigit, radix);\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n\n    if (this.state.pos === start || len != null && this.state.pos - start !== len || invalid) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix) {\n    const start = this.state.pos;\n    let isBigInt = false;\n    this.state.pos += 2;\n    const val = this.readInt(radix);\n\n    if (val == null) {\n      this.raise(this.state.start + 2, ErrorMessages.InvalidDigit, radix);\n    }\n\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 110) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === 109) {\n      throw this.raise(start, ErrorMessages.InvalidDecimal);\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(types$1.bigint, str);\n      return;\n    }\n\n    this.finishToken(types$1.num, val);\n  }\n\n  readNumber(startsWithDot) {\n    const start = this.state.pos;\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(start, ErrorMessages.InvalidNumber);\n    }\n\n    const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(start, ErrorMessages.StrictOctalLiteral);\n\n      if (!this.state.strict) {\n        const underscorePos = integer.indexOf(\"_\");\n\n        if (underscorePos > 0) {\n          this.raise(underscorePos + start, ErrorMessages.ZeroDigitNumericSeparator);\n        }\n      }\n\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 46 && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if ((next === 69 || next === 101) && !isOctal) {\n      next = this.input.charCodeAt(++this.state.pos);\n\n      if (next === 43 || next === 45) {\n        ++this.state.pos;\n      }\n\n      if (this.readInt(10) === null) {\n        this.raise(start, ErrorMessages.InvalidOrMissingExponent);\n      }\n\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === 110) {\n      if (isFloat || hasLeadingZero) {\n        this.raise(start, ErrorMessages.InvalidBigIntLiteral);\n      }\n\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === 109) {\n      this.expectPlugin(\"decimal\", this.state.pos);\n\n      if (hasExponent || hasLeadingZero) {\n        this.raise(start, ErrorMessages.InvalidDecimal);\n      }\n\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n    }\n\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(types$1.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(types$1.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(types$1.num, val);\n  }\n\n  readCodePoint(throwOnInvalid) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === 123) {\n      const codePos = ++this.state.pos;\n      code = this.readHexChar(this.input.indexOf(\"}\", this.state.pos) - this.state.pos, true, throwOnInvalid);\n      ++this.state.pos;\n\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(codePos, ErrorMessages.InvalidCodePoint);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n\n    return code;\n  }\n\n  readString(quote) {\n    let out = \"\",\n        chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (ch === 8232 || ch === 8233) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(types$1.string, out);\n  }\n\n  readTmplToken() {\n    let out = \"\",\n        chunkStart = this.state.pos,\n        containsInvalid = false;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedTemplate);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {\n        if (this.state.pos === this.state.start && this.match(types$1.template)) {\n          if (ch === 36) {\n            this.state.pos += 2;\n            this.finishToken(types$1.dollarBraceL);\n            return;\n          } else {\n            ++this.state.pos;\n            this.finishToken(types$1.backQuote);\n            return;\n          }\n        }\n\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(types$1.template, containsInvalid ? null : out);\n        return;\n      }\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n\n        switch (ch) {\n          case 13:\n            if (this.input.charCodeAt(this.state.pos) === 10) {\n              ++this.state.pos;\n            }\n\n          case 10:\n            out += \"\\n\";\n            break;\n\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  recordStrictModeErrors(pos, message) {\n    if (this.state.strict && !this.state.strictErrors.has(pos)) {\n      this.raise(pos, message);\n    } else {\n      this.state.strictErrors.set(pos, message);\n    }\n  }\n\n  readEscapedChar(inTemplate) {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n\n    switch (ch) {\n      case 110:\n        return \"\\n\";\n\n      case 114:\n        return \"\\r\";\n\n      case 120:\n        {\n          const code = this.readHexChar(2, false, throwOnInvalid);\n          return code === null ? null : String.fromCharCode(code);\n        }\n\n      case 117:\n        {\n          const code = this.readCodePoint(throwOnInvalid);\n          return code === null ? null : String.fromCodePoint(code);\n        }\n\n      case 116:\n        return \"\\t\";\n\n      case 98:\n        return \"\\b\";\n\n      case 118:\n        return \"\\u000b\";\n\n      case 102:\n        return \"\\f\";\n\n      case 13:\n        if (this.input.charCodeAt(this.state.pos) === 10) {\n          ++this.state.pos;\n        }\n\n      case 10:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n\n      case 8232:\n      case 8233:\n        return \"\";\n\n      case 56:\n      case 57:\n        if (inTemplate) {\n          return null;\n        } else {\n          this.recordStrictModeErrors(this.state.pos - 1, ErrorMessages.StrictNumericEscape);\n        }\n\n      default:\n        if (ch >= 48 && ch <= 55) {\n          const codePos = this.state.pos - 1;\n          const match = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/);\n          let octalStr = match[0];\n          let octal = parseInt(octalStr, 8);\n\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n\n          if (octalStr !== \"0\" || next === 56 || next === 57) {\n            if (inTemplate) {\n              return null;\n            } else {\n              this.recordStrictModeErrors(codePos, ErrorMessages.StrictNumericEscape);\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  readHexChar(len, forceLen, throwOnInvalid) {\n    const codePos = this.state.pos;\n    const n = this.readInt(16, len, forceLen, false);\n\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, ErrorMessages.InvalidEscapeSequence);\n      } else {\n        this.state.pos = codePos - 1;\n      }\n    }\n\n    return n;\n  }\n\n  readWord1(firstCode) {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === 92) {\n        this.state.containsEsc = true;\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.pos;\n        const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== 117) {\n          this.raise(this.state.pos, ErrorMessages.MissingUnicodeEscape);\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(escStart, ErrorMessages.EscapedCharNotAnIdentifier);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  readWord(firstCode) {\n    const word = this.readWord1(firstCode);\n    const type = keywords$1.get(word) || types$1.name;\n    this.finishToken(type, word);\n  }\n\n  checkKeywordEscapes() {\n    const kw = this.state.type.keyword;\n\n    if (kw && this.state.containsEsc) {\n      this.raise(this.state.start, ErrorMessages.InvalidEscapedReservedWord, kw);\n    }\n  }\n\n  updateContext(prevType) {\n    var _this$state$type$upda, _this$state$type;\n\n    (_this$state$type$upda = (_this$state$type = this.state.type).updateContext) == null ? void 0 : _this$state$type$upda.call(_this$state$type, this.state.context);\n  }\n\n}\n\nclass ClassScope {\n  constructor() {\n    this.privateNames = new Set();\n    this.loneAccessors = new Map();\n    this.undefinedPrivateNames = new Map();\n  }\n\n}\nclass ClassScopeHandler {\n  constructor(raise) {\n    this.stack = [];\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n  }\n\n  current() {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n    const current = this.current();\n\n    for (const [name, pos] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, pos);\n        }\n      } else {\n        this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n      }\n    }\n  }\n\n  declarePrivateName(name, elementType, pos) {\n    const classScope = this.current();\n    let redefined = classScope.privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && classScope.loneAccessors.get(name);\n\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n        if (!redefined) classScope.loneAccessors.delete(name);\n      } else if (!redefined) {\n        classScope.loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.raise(pos, ErrorMessages.PrivateNameRedeclaration, name);\n    }\n\n    classScope.privateNames.add(name);\n    classScope.undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name, pos) {\n    let classScope;\n\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, pos);\n    } else {\n      this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n    }\n  }\n\n}\n\nconst kExpression = 0,\n      kMaybeArrowParameterDeclaration = 1,\n      kMaybeAsyncArrowParameterDeclaration = 2,\n      kParameterDeclaration = 3;\n\nclass ExpressionScope {\n  constructor(type = kExpression) {\n    this.type = void 0;\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration() {\n    return this.type === kMaybeAsyncArrowParameterDeclaration || this.type === kMaybeArrowParameterDeclaration;\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n\n}\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  constructor(type) {\n    super(type);\n    this.errors = new Map();\n  }\n\n  recordDeclarationError(pos, template) {\n    this.errors.set(pos, template);\n  }\n\n  clearDeclarationError(pos) {\n    this.errors.delete(pos);\n  }\n\n  iterateErrors(iterator) {\n    this.errors.forEach(iterator);\n  }\n\n}\n\nclass ExpressionScopeHandler {\n  constructor(raise) {\n    this.stack = [new ExpressionScope()];\n    this.raise = raise;\n  }\n\n  enter(scope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  recordParameterInitializerError(pos, template) {\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(pos, template);\n      } else {\n        return;\n      }\n\n      scope = stack[--i];\n    }\n\n    this.raise(pos, template);\n  }\n\n  recordParenthesizedIdentifierError(pos, template) {\n    const {\n      stack\n    } = this;\n    const scope = stack[stack.length - 1];\n\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.raise(pos, template);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(pos, template);\n    } else {\n      return;\n    }\n  }\n\n  recordAsyncArrowParametersError(pos, template) {\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        scope.recordDeclarationError(pos, template);\n      }\n\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern() {\n    const {\n      stack\n    } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors((template, pos) => {\n      this.raise(pos, template);\n      let i = stack.length - 2;\n      let scope = stack[i];\n\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(pos);\n        scope = stack[--i];\n      }\n    });\n  }\n\n}\nfunction newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\nfunction newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\nfunction newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\nfunction newExpressionScope() {\n  return new ExpressionScope();\n}\n\nconst PARAM = 0b0000,\n      PARAM_YIELD = 0b0001,\n      PARAM_AWAIT = 0b0010,\n      PARAM_RETURN = 0b0100,\n      PARAM_IN = 0b1000;\nclass ProductionParameterHandler {\n  constructor() {\n    this.stacks = [];\n  }\n\n  enter(flags) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags() {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait() {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield() {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn() {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn() {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n\n}\nfunction functionFlags(isAsync, isGenerator) {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n\nclass UtilParser extends Tokenizer {\n  addExtra(node, key, val) {\n    if (!node) return;\n    const extra = node.extra = node.extra || {};\n    extra[key] = val;\n  }\n\n  isRelational(op) {\n    return this.match(types$1.relational) && this.state.value === op;\n  }\n\n  expectRelational(op) {\n    if (this.isRelational(op)) {\n      this.next();\n    } else {\n      this.unexpected(null, types$1.relational);\n    }\n  }\n\n  isContextual(name) {\n    return this.match(types$1.name) && this.state.value === name && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart, name) {\n    const nameEnd = nameStart + name.length;\n\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(isIdentifierChar(nextCh) || (nextCh & 0xfc00) === 0xd800);\n    }\n\n    return false;\n  }\n\n  isLookaheadContextual(name) {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  eatContextual(name) {\n    return this.isContextual(name) && this.eat(types$1.name);\n  }\n\n  expectContextual(name, template) {\n    if (!this.eatContextual(name)) this.unexpected(null, template);\n  }\n\n  canInsertSemicolon() {\n    return this.match(types$1.eof) || this.match(types$1.braceR) || this.hasPrecedingLineBreak();\n  }\n\n  hasPrecedingLineBreak() {\n    return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));\n  }\n\n  hasFollowingLineBreak() {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n\n  isLineTerminator() {\n    return this.eat(types$1.semi) || this.canInsertSemicolon();\n  }\n\n  semicolon(allowAsi = true) {\n    if (allowAsi ? this.isLineTerminator() : this.eat(types$1.semi)) return;\n    this.raise(this.state.lastTokEnd, ErrorMessages.MissingSemicolon);\n  }\n\n  expect(type, pos) {\n    this.eat(type) || this.unexpected(pos, type);\n  }\n\n  assertNoSpace(message = \"Unexpected space.\") {\n    if (this.state.start > this.state.lastTokEnd) {\n      this.raise(this.state.lastTokEnd, {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedSpace\",\n        template: message\n      });\n    }\n  }\n\n  unexpected(pos, messageOrType = {\n    code: ErrorCodes.SyntaxError,\n    reasonCode: \"UnexpectedToken\",\n    template: \"Unexpected token\"\n  }) {\n    if (messageOrType instanceof TokenType) {\n      messageOrType = {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedToken\",\n        template: `Unexpected token, expected \"${messageOrType.label}\"`\n      };\n    }\n\n    throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n  }\n\n  expectPlugin(name, pos) {\n    if (!this.hasPlugin(name)) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: [name]\n      }, `This experimental syntax requires enabling the parser plugin: '${name}'`);\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(names, pos) {\n    if (!names.some(n => this.hasPlugin(n))) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: names\n      }, `This experimental syntax requires enabling one of the following parser plugin(s): '${names.join(\", \")}'`);\n    }\n  }\n\n  tryParse(fn, oldState = this.state.clone()) {\n    const abortSignal = {\n      node: null\n    };\n\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n\n      if (error instanceof SyntaxError) {\n        return {\n          node: null,\n          error,\n          thrown: true,\n          aborted: false,\n          failState\n        };\n      }\n\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(refExpressionErrors, andThrow) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssign,\n      doubleProto,\n      optionalParameters\n    } = refExpressionErrors;\n\n    if (!andThrow) {\n      return shorthandAssign >= 0 || doubleProto >= 0 || optionalParameters >= 0;\n    }\n\n    if (shorthandAssign >= 0) {\n      this.unexpected(shorthandAssign);\n    }\n\n    if (doubleProto >= 0) {\n      this.raise(doubleProto, ErrorMessages.DuplicateProto);\n    }\n\n    if (optionalParameters >= 0) {\n      this.unexpected(optionalParameters);\n    }\n  }\n\n  isLiteralPropertyName() {\n    return this.match(types$1.name) || !!this.state.type.keyword || this.match(types$1.string) || this.match(types$1.num) || this.match(types$1.bigint) || this.match(types$1.decimal);\n  }\n\n  isPrivateName(node) {\n    return node.type === \"PrivateName\";\n  }\n\n  getPrivateNameSV(node) {\n    return node.id.name;\n  }\n\n  hasPropertyAsPrivateName(node) {\n    return (node.type === \"MemberExpression\" || node.type === \"OptionalMemberExpression\") && this.isPrivateName(node.property);\n  }\n\n  isOptionalChain(node) {\n    return node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\";\n  }\n\n  isObjectProperty(node) {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node) {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(inModule = this.options.sourceType === \"module\") {\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this.raise.bind(this));\n    return () => {\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n\n    if (this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n}\nclass ExpressionErrors {\n  constructor() {\n    this.shorthandAssign = -1;\n    this.doubleProto = -1;\n    this.optionalParameters = -1;\n  }\n\n}\n\nclass Node {\n  constructor(parser, pos, loc) {\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser != null && parser.options.ranges) this.range = [pos, 0];\n    if (parser != null && parser.filename) this.loc.filename = parser.filename;\n  }\n\n}\n\nconst NodePrototype = Node.prototype;\n{\n  NodePrototype.__clone = function () {\n    const newNode = new Node();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n\n      if (key !== \"leadingComments\" && key !== \"trailingComments\" && key !== \"innerComments\") {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node) {\n  return cloneIdentifier(node);\n}\n\nfunction cloneIdentifier(node) {\n  const {\n    type,\n    start,\n    end,\n    loc,\n    range,\n    extra,\n    name\n  } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n\n  return cloned;\n}\nfunction cloneStringLiteral(node) {\n  const {\n    type,\n    start,\n    end,\n    loc,\n    range,\n    extra\n  } = node;\n\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n\n  const cloned = Object.create(NodePrototype);\n  cloned.type = \"StringLiteral\";\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.value = node.value;\n  return cloned;\n}\nclass NodeUtils extends UtilParser {\n  startNode() {\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt(pos, loc) {\n    return new Node(this, pos, loc);\n  }\n\n  startNodeAtNode(type) {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  finishNode(node, type) {\n    return this.finishNodeAt(node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);\n  }\n\n  finishNodeAt(node, type, pos, loc) {\n\n    node.type = type;\n    node.end = pos;\n    node.loc.end = loc;\n    if (this.options.ranges) node.range[1] = pos;\n    if (this.options.attachComment) this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node, start, startLoc) {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(node, end = this.state.lastTokEnd, endLoc = this.state.lastTokEndLoc) {\n    node.end = end;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = end;\n  }\n\n  resetStartLocationFromNode(node, locationNode) {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n\n}\n\nconst reservedTypes = new Set([\"_\", \"any\", \"bool\", \"boolean\", \"empty\", \"extends\", \"false\", \"interface\", \"mixed\", \"null\", \"number\", \"static\", \"string\", \"true\", \"typeof\", \"void\"]);\nconst FlowErrors = makeErrorTemplates({\n  AmbiguousConditionalArrow: \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind: \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  AssignReservedType: \"Cannot overwrite reserved type %0.\",\n  DeclareClassElement: \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer: \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports: \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n  EnumDuplicateMemberName: \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n  EnumInconsistentMemberValues: \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n  EnumInvalidExplicitType: \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidExplicitTypeUnknownSupplied: \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidMemberInitializerPrimaryType: \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n  EnumInvalidMemberInitializerSymbolType: \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n  EnumInvalidMemberInitializerUnknownType: \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n  EnumInvalidMemberName: \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n  EnumNumberMemberNotInitialized: \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n  EnumStringMemberInconsistentlyInitailized: \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportTypeShorthandOnlyInPureImport: \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact: \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject: \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule: \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault: \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule: \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  OptionalBindingPattern: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired: \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor: \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst: \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern: \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject: \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: \"Unexpected reserved type %0.\",\n  UnexpectedReservedUnderscore: \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks: \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType: \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand: 'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter: \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction: \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: \"`declare export %0` is not supported. Use `%1` instead.\",\n  UnsupportedStatementInDeclareModule: \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\"\n}, ErrorCodes.SyntaxError);\n\nfunction isEsModuleType(bodyElement) {\n  return bodyElement.type === \"DeclareExportAllDeclaration\" || bodyElement.type === \"DeclareExportDeclaration\" && (!bodyElement.declaration || bodyElement.declaration.type !== \"TypeAlias\" && bodyElement.declaration.type !== \"InterfaceDeclaration\");\n}\n\nfunction hasTypeImportKind(node) {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(state) {\n  return (state.type === types$1.name || !!state.type.keyword) && state.value !== \"from\";\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\"\n};\n\nfunction partition(list, test) {\n  const list1 = [];\n  const list2 = [];\n\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\nvar flow = (superClass => class extends superClass {\n  constructor(...args) {\n    super(...args);\n    this.flowPragma = undefined;\n  }\n\n  getScopeHandler() {\n    return FlowScopeHandler;\n  }\n\n  shouldParseTypes() {\n    return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n  }\n\n  shouldParseEnums() {\n    return !!this.getPluginOption(\"flow\", \"enums\");\n  }\n\n  finishToken(type, val) {\n    if (type !== types$1.string && type !== types$1.semi && type !== types$1.interpreterDirective) {\n      if (this.flowPragma === undefined) {\n        this.flowPragma = null;\n      }\n    }\n\n    return super.finishToken(type, val);\n  }\n\n  addComment(comment) {\n    if (this.flowPragma === undefined) {\n      const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n\n      if (!matches) ; else if (matches[1] === \"flow\") {\n        this.flowPragma = \"flow\";\n      } else if (matches[1] === \"noflow\") {\n        this.flowPragma = \"noflow\";\n      } else {\n        throw new Error(\"Unexpected flow pragma\");\n      }\n    }\n\n    return super.addComment(comment);\n  }\n\n  flowParseTypeInitialiser(tok) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(tok || types$1.colon);\n    const type = this.flowParseType();\n    this.state.inType = oldInType;\n    return type;\n  }\n\n  flowParsePredicate() {\n    const node = this.startNode();\n    const moduloPos = this.state.start;\n    this.next();\n    this.expectContextual(\"checks\");\n\n    if (this.state.lastTokStart > moduloPos + 1) {\n      this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);\n    }\n\n    if (this.eat(types$1.parenL)) {\n      node.value = this.parseExpression();\n      this.expect(types$1.parenR);\n      return this.finishNode(node, \"DeclaredPredicate\");\n    } else {\n      return this.finishNode(node, \"InferredPredicate\");\n    }\n  }\n\n  flowParseTypeAndPredicateInitialiser() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(types$1.colon);\n    let type = null;\n    let predicate = null;\n\n    if (this.match(types$1.modulo)) {\n      this.state.inType = oldInType;\n      predicate = this.flowParsePredicate();\n    } else {\n      type = this.flowParseType();\n      this.state.inType = oldInType;\n\n      if (this.match(types$1.modulo)) {\n        predicate = this.flowParsePredicate();\n      }\n    }\n\n    return [type, predicate];\n  }\n\n  flowParseDeclareClass(node) {\n    this.next();\n    this.flowParseInterfaceish(node, true);\n    return this.finishNode(node, \"DeclareClass\");\n  }\n\n  flowParseDeclareFunction(node) {\n    this.next();\n    const id = node.id = this.parseIdentifier();\n    const typeNode = this.startNode();\n    const typeContainer = this.startNode();\n\n    if (this.isRelational(\"<\")) {\n      typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      typeNode.typeParameters = null;\n    }\n\n    this.expect(types$1.parenL);\n    const tmp = this.flowParseFunctionTypeParams();\n    typeNode.params = tmp.params;\n    typeNode.rest = tmp.rest;\n    typeNode.this = tmp._this;\n    this.expect(types$1.parenR);\n    [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n    typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n    id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n    this.resetEndLocation(id);\n    this.semicolon();\n    this.scope.declareName(node.id.name, BIND_FLOW_DECLARE_FN, node.id.start);\n    return this.finishNode(node, \"DeclareFunction\");\n  }\n\n  flowParseDeclare(node, insideModule) {\n    if (this.match(types$1._class)) {\n      return this.flowParseDeclareClass(node);\n    } else if (this.match(types$1._function)) {\n      return this.flowParseDeclareFunction(node);\n    } else if (this.match(types$1._var)) {\n      return this.flowParseDeclareVariable(node);\n    } else if (this.eatContextual(\"module\")) {\n      if (this.match(types$1.dot)) {\n        return this.flowParseDeclareModuleExports(node);\n      } else {\n        if (insideModule) {\n          this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);\n        }\n\n        return this.flowParseDeclareModule(node);\n      }\n    } else if (this.isContextual(\"type\")) {\n      return this.flowParseDeclareTypeAlias(node);\n    } else if (this.isContextual(\"opaque\")) {\n      return this.flowParseDeclareOpaqueType(node);\n    } else if (this.isContextual(\"interface\")) {\n      return this.flowParseDeclareInterface(node);\n    } else if (this.match(types$1._export)) {\n      return this.flowParseDeclareExportDeclaration(node, insideModule);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  flowParseDeclareVariable(node) {\n    this.next();\n    node.id = this.flowParseTypeAnnotatableIdentifier(true);\n    this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\n    this.semicolon();\n    return this.finishNode(node, \"DeclareVariable\");\n  }\n\n  flowParseDeclareModule(node) {\n    this.scope.enter(SCOPE_OTHER);\n\n    if (this.match(types$1.string)) {\n      node.id = this.parseExprAtom();\n    } else {\n      node.id = this.parseIdentifier();\n    }\n\n    const bodyNode = node.body = this.startNode();\n    const body = bodyNode.body = [];\n    this.expect(types$1.braceL);\n\n    while (!this.match(types$1.braceR)) {\n      let bodyNode = this.startNode();\n\n      if (this.match(types$1._import)) {\n        this.next();\n\n        if (!this.isContextual(\"type\") && !this.match(types$1._typeof)) {\n          this.raise(this.state.lastTokStart, FlowErrors.InvalidNonTypeImportInDeclareModule);\n        }\n\n        this.parseImport(bodyNode);\n      } else {\n        this.expectContextual(\"declare\", FlowErrors.UnsupportedStatementInDeclareModule);\n        bodyNode = this.flowParseDeclare(bodyNode, true);\n      }\n\n      body.push(bodyNode);\n    }\n\n    this.scope.exit();\n    this.expect(types$1.braceR);\n    this.finishNode(bodyNode, \"BlockStatement\");\n    let kind = null;\n    let hasModuleExport = false;\n    body.forEach(bodyElement => {\n      if (isEsModuleType(bodyElement)) {\n        if (kind === \"CommonJS\") {\n          this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n        }\n\n        kind = \"ES\";\n      } else if (bodyElement.type === \"DeclareModuleExports\") {\n        if (hasModuleExport) {\n          this.raise(bodyElement.start, FlowErrors.DuplicateDeclareModuleExports);\n        }\n\n        if (kind === \"ES\") {\n          this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n        }\n\n        kind = \"CommonJS\";\n        hasModuleExport = true;\n      }\n    });\n    node.kind = kind || \"CommonJS\";\n    return this.finishNode(node, \"DeclareModule\");\n  }\n\n  flowParseDeclareExportDeclaration(node, insideModule) {\n    this.expect(types$1._export);\n\n    if (this.eat(types$1._default)) {\n      if (this.match(types$1._function) || this.match(types$1._class)) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n      } else {\n        node.declaration = this.flowParseType();\n        this.semicolon();\n      }\n\n      node.default = true;\n      return this.finishNode(node, \"DeclareExportDeclaration\");\n    } else {\n      if (this.match(types$1._const) || this.isLet() || (this.isContextual(\"type\") || this.isContextual(\"interface\")) && !insideModule) {\n        const label = this.state.value;\n        const suggestion = exportSuggestions[label];\n        throw this.raise(this.state.start, FlowErrors.UnsupportedDeclareExportKind, label, suggestion);\n      }\n\n      if (this.match(types$1._var) || this.match(types$1._function) || this.match(types$1._class) || this.isContextual(\"opaque\")) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n        node.default = false;\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else if (this.match(types$1.star) || this.match(types$1.braceL) || this.isContextual(\"interface\") || this.isContextual(\"type\") || this.isContextual(\"opaque\")) {\n        node = this.parseExport(node);\n\n        if (node.type === \"ExportNamedDeclaration\") {\n          node.type = \"ExportDeclaration\";\n          node.default = false;\n          delete node.exportKind;\n        }\n\n        node.type = \"Declare\" + node.type;\n        return node;\n      }\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParseDeclareModuleExports(node) {\n    this.next();\n    this.expectContextual(\"exports\");\n    node.typeAnnotation = this.flowParseTypeAnnotation();\n    this.semicolon();\n    return this.finishNode(node, \"DeclareModuleExports\");\n  }\n\n  flowParseDeclareTypeAlias(node) {\n    this.next();\n    this.flowParseTypeAlias(node);\n    node.type = \"DeclareTypeAlias\";\n    return node;\n  }\n\n  flowParseDeclareOpaqueType(node) {\n    this.next();\n    this.flowParseOpaqueType(node, true);\n    node.type = \"DeclareOpaqueType\";\n    return node;\n  }\n\n  flowParseDeclareInterface(node) {\n    this.next();\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"DeclareInterface\");\n  }\n\n  flowParseInterfaceish(node, isClass = false) {\n    node.id = this.flowParseRestrictedIdentifier(!isClass, true);\n    this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.extends = [];\n    node.implements = [];\n    node.mixins = [];\n\n    if (this.eat(types$1._extends)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (!isClass && this.eat(types$1.comma));\n    }\n\n    if (this.isContextual(\"mixins\")) {\n      this.next();\n\n      do {\n        node.mixins.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types$1.comma));\n    }\n\n    if (this.isContextual(\"implements\")) {\n      this.next();\n\n      do {\n        node.implements.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types$1.comma));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: isClass,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: isClass,\n      allowInexact: false\n    });\n  }\n\n  flowParseInterfaceExtends() {\n    const node = this.startNode();\n    node.id = this.flowParseQualifiedTypeIdentifier();\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    } else {\n      node.typeParameters = null;\n    }\n\n    return this.finishNode(node, \"InterfaceExtends\");\n  }\n\n  flowParseInterface(node) {\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"InterfaceDeclaration\");\n  }\n\n  checkNotUnderscore(word) {\n    if (word === \"_\") {\n      this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);\n    }\n  }\n\n  checkReservedType(word, startLoc, declaration) {\n    if (!reservedTypes.has(word)) return;\n    this.raise(startLoc, declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, word);\n  }\n\n  flowParseRestrictedIdentifier(liberal, declaration) {\n    this.checkReservedType(this.state.value, this.state.start, declaration);\n    return this.parseIdentifier(liberal);\n  }\n\n  flowParseTypeAlias(node) {\n    node.id = this.flowParseRestrictedIdentifier(false, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.right = this.flowParseTypeInitialiser(types$1.eq);\n    this.semicolon();\n    return this.finishNode(node, \"TypeAlias\");\n  }\n\n  flowParseOpaqueType(node, declare) {\n    this.expectContextual(\"type\");\n    node.id = this.flowParseRestrictedIdentifier(true, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.supertype = null;\n\n    if (this.match(types$1.colon)) {\n      node.supertype = this.flowParseTypeInitialiser(types$1.colon);\n    }\n\n    node.impltype = null;\n\n    if (!declare) {\n      node.impltype = this.flowParseTypeInitialiser(types$1.eq);\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"OpaqueType\");\n  }\n\n  flowParseTypeParameter(requireDefault = false) {\n    const nodeStart = this.state.start;\n    const node = this.startNode();\n    const variance = this.flowParseVariance();\n    const ident = this.flowParseTypeAnnotatableIdentifier();\n    node.name = ident.name;\n    node.variance = variance;\n    node.bound = ident.typeAnnotation;\n\n    if (this.match(types$1.eq)) {\n      this.eat(types$1.eq);\n      node.default = this.flowParseType();\n    } else {\n      if (requireDefault) {\n        this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);\n      }\n    }\n\n    return this.finishNode(node, \"TypeParameter\");\n  }\n\n  flowParseTypeParameterDeclaration() {\n    const oldInType = this.state.inType;\n    const node = this.startNode();\n    node.params = [];\n    this.state.inType = true;\n\n    if (this.isRelational(\"<\") || this.match(types$1.jsxTagStart)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    let defaultRequired = false;\n\n    do {\n      const typeParameter = this.flowParseTypeParameter(defaultRequired);\n      node.params.push(typeParameter);\n\n      if (typeParameter.default) {\n        defaultRequired = true;\n      }\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types$1.comma);\n      }\n    } while (!this.isRelational(\">\"));\n\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterDeclaration\");\n  }\n\n  flowParseTypeParameterInstantiation() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expectRelational(\"<\");\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n    this.state.noAnonFunctionType = false;\n\n    while (!this.isRelational(\">\")) {\n      node.params.push(this.flowParseType());\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseTypeParameterInstantiationCallOrNew() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expectRelational(\"<\");\n\n    while (!this.isRelational(\">\")) {\n      node.params.push(this.flowParseTypeOrImplicitInstantiation());\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseInterfaceType() {\n    const node = this.startNode();\n    this.expectContextual(\"interface\");\n    node.extends = [];\n\n    if (this.eat(types$1._extends)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types$1.comma));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: false,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: false,\n      allowInexact: false\n    });\n    return this.finishNode(node, \"InterfaceTypeAnnotation\");\n  }\n\n  flowParseObjectPropertyKey() {\n    return this.match(types$1.num) || this.match(types$1.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n  }\n\n  flowParseObjectTypeIndexer(node, isStatic, variance) {\n    node.static = isStatic;\n\n    if (this.lookahead().type === types$1.colon) {\n      node.id = this.flowParseObjectPropertyKey();\n      node.key = this.flowParseTypeInitialiser();\n    } else {\n      node.id = null;\n      node.key = this.flowParseType();\n    }\n\n    this.expect(types$1.bracketR);\n    node.value = this.flowParseTypeInitialiser();\n    node.variance = variance;\n    return this.finishNode(node, \"ObjectTypeIndexer\");\n  }\n\n  flowParseObjectTypeInternalSlot(node, isStatic) {\n    node.static = isStatic;\n    node.id = this.flowParseObjectPropertyKey();\n    this.expect(types$1.bracketR);\n    this.expect(types$1.bracketR);\n\n    if (this.isRelational(\"<\") || this.match(types$1.parenL)) {\n      node.method = true;\n      node.optional = false;\n      node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n    } else {\n      node.method = false;\n\n      if (this.eat(types$1.question)) {\n        node.optional = true;\n      }\n\n      node.value = this.flowParseTypeInitialiser();\n    }\n\n    return this.finishNode(node, \"ObjectTypeInternalSlot\");\n  }\n\n  flowParseObjectTypeMethodish(node) {\n    node.params = [];\n    node.rest = null;\n    node.typeParameters = null;\n    node.this = null;\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    this.expect(types$1.parenL);\n\n    if (this.match(types$1._this)) {\n      node.this = this.flowParseFunctionTypeParam(true);\n      node.this.name = null;\n\n      if (!this.match(types$1.parenR)) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    while (!this.match(types$1.parenR) && !this.match(types$1.ellipsis)) {\n      node.params.push(this.flowParseFunctionTypeParam(false));\n\n      if (!this.match(types$1.parenR)) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    if (this.eat(types$1.ellipsis)) {\n      node.rest = this.flowParseFunctionTypeParam(false);\n    }\n\n    this.expect(types$1.parenR);\n    node.returnType = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"FunctionTypeAnnotation\");\n  }\n\n  flowParseObjectTypeCallProperty(node, isStatic) {\n    const valueNode = this.startNode();\n    node.static = isStatic;\n    node.value = this.flowParseObjectTypeMethodish(valueNode);\n    return this.finishNode(node, \"ObjectTypeCallProperty\");\n  }\n\n  flowParseObjectType({\n    allowStatic,\n    allowExact,\n    allowSpread,\n    allowProto,\n    allowInexact\n  }) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const nodeStart = this.startNode();\n    nodeStart.callProperties = [];\n    nodeStart.properties = [];\n    nodeStart.indexers = [];\n    nodeStart.internalSlots = [];\n    let endDelim;\n    let exact;\n    let inexact = false;\n\n    if (allowExact && this.match(types$1.braceBarL)) {\n      this.expect(types$1.braceBarL);\n      endDelim = types$1.braceBarR;\n      exact = true;\n    } else {\n      this.expect(types$1.braceL);\n      endDelim = types$1.braceR;\n      exact = false;\n    }\n\n    nodeStart.exact = exact;\n\n    while (!this.match(endDelim)) {\n      let isStatic = false;\n      let protoStart = null;\n      let inexactStart = null;\n      const node = this.startNode();\n\n      if (allowProto && this.isContextual(\"proto\")) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== types$1.colon && lookahead.type !== types$1.question) {\n          this.next();\n          protoStart = this.state.start;\n          allowStatic = false;\n        }\n      }\n\n      if (allowStatic && this.isContextual(\"static\")) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== types$1.colon && lookahead.type !== types$1.question) {\n          this.next();\n          isStatic = true;\n        }\n      }\n\n      const variance = this.flowParseVariance();\n\n      if (this.eat(types$1.bracketL)) {\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (this.eat(types$1.bracketL)) {\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));\n        } else {\n          nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n        }\n      } else if (this.match(types$1.parenL) || this.isRelational(\"<\")) {\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.unexpected(variance.start);\n        }\n\n        nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n      } else {\n        let kind = \"init\";\n\n        if (this.isContextual(\"get\") || this.isContextual(\"set\")) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type === types$1.name || lookahead.type === types$1.string || lookahead.type === types$1.num) {\n            kind = this.state.value;\n            this.next();\n          }\n        }\n\n        const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);\n\n        if (propOrInexact === null) {\n          inexact = true;\n          inexactStart = this.state.lastTokStart;\n        } else {\n          nodeStart.properties.push(propOrInexact);\n        }\n      }\n\n      this.flowObjectTypeSemicolon();\n\n      if (inexactStart && !this.match(types$1.braceR) && !this.match(types$1.braceBarR)) {\n        this.raise(inexactStart, FlowErrors.UnexpectedExplicitInexactInObject);\n      }\n    }\n\n    this.expect(endDelim);\n\n    if (allowSpread) {\n      nodeStart.inexact = inexact;\n    }\n\n    const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n    this.state.inType = oldInType;\n    return out;\n  }\n\n  flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact) {\n    if (this.eat(types$1.ellipsis)) {\n      const isInexactToken = this.match(types$1.comma) || this.match(types$1.semi) || this.match(types$1.braceR) || this.match(types$1.braceBarR);\n\n      if (isInexactToken) {\n        if (!allowSpread) {\n          this.raise(this.state.lastTokStart, FlowErrors.InexactInsideNonObject);\n        } else if (!allowInexact) {\n          this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);\n        }\n\n        if (variance) {\n          this.raise(variance.start, FlowErrors.InexactVariance);\n        }\n\n        return null;\n      }\n\n      if (!allowSpread) {\n        this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);\n      }\n\n      if (protoStart != null) {\n        this.unexpected(protoStart);\n      }\n\n      if (variance) {\n        this.raise(variance.start, FlowErrors.SpreadVariance);\n      }\n\n      node.argument = this.flowParseType();\n      return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n    } else {\n      node.key = this.flowParseObjectPropertyKey();\n      node.static = isStatic;\n      node.proto = protoStart != null;\n      node.kind = kind;\n      let optional = false;\n\n      if (this.isRelational(\"<\") || this.match(types$1.parenL)) {\n        node.method = true;\n\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.unexpected(variance.start);\n        }\n\n        node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n\n        if (kind === \"get\" || kind === \"set\") {\n          this.flowCheckGetterSetterParams(node);\n        }\n\n        if (!allowSpread && node.key.name === \"constructor\" && node.value.this) {\n          this.raise(node.value.this.start, FlowErrors.ThisParamBannedInConstructor);\n        }\n      } else {\n        if (kind !== \"init\") this.unexpected();\n        node.method = false;\n\n        if (this.eat(types$1.question)) {\n          optional = true;\n        }\n\n        node.value = this.flowParseTypeInitialiser();\n        node.variance = variance;\n      }\n\n      node.optional = optional;\n      return this.finishNode(node, \"ObjectTypeProperty\");\n    }\n  }\n\n  flowCheckGetterSetterParams(property) {\n    const paramCount = property.kind === \"get\" ? 0 : 1;\n    const start = property.start;\n    const length = property.value.params.length + (property.value.rest ? 1 : 0);\n\n    if (property.value.this) {\n      this.raise(property.value.this.start, property.kind === \"get\" ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam);\n    }\n\n    if (length !== paramCount) {\n      if (property.kind === \"get\") {\n        this.raise(start, ErrorMessages.BadGetterArity);\n      } else {\n        this.raise(start, ErrorMessages.BadSetterArity);\n      }\n    }\n\n    if (property.kind === \"set\" && property.value.rest) {\n      this.raise(start, ErrorMessages.BadSetterRestParameter);\n    }\n  }\n\n  flowObjectTypeSemicolon() {\n    if (!this.eat(types$1.semi) && !this.eat(types$1.comma) && !this.match(types$1.braceR) && !this.match(types$1.braceBarR)) {\n      this.unexpected();\n    }\n  }\n\n  flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n    let node = id || this.flowParseRestrictedIdentifier(true);\n\n    while (this.eat(types$1.dot)) {\n      const node2 = this.startNodeAt(startPos, startLoc);\n      node2.qualification = node;\n      node2.id = this.flowParseRestrictedIdentifier(true);\n      node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n    }\n\n    return node;\n  }\n\n  flowParseGenericType(startPos, startLoc, id) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.typeParameters = null;\n    node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    return this.finishNode(node, \"GenericTypeAnnotation\");\n  }\n\n  flowParseTypeofType() {\n    const node = this.startNode();\n    this.expect(types$1._typeof);\n    node.argument = this.flowParsePrimaryType();\n    return this.finishNode(node, \"TypeofTypeAnnotation\");\n  }\n\n  flowParseTupleType() {\n    const node = this.startNode();\n    node.types = [];\n    this.expect(types$1.bracketL);\n\n    while (this.state.pos < this.length && !this.match(types$1.bracketR)) {\n      node.types.push(this.flowParseType());\n      if (this.match(types$1.bracketR)) break;\n      this.expect(types$1.comma);\n    }\n\n    this.expect(types$1.bracketR);\n    return this.finishNode(node, \"TupleTypeAnnotation\");\n  }\n\n  flowParseFunctionTypeParam(first) {\n    let name = null;\n    let optional = false;\n    let typeAnnotation = null;\n    const node = this.startNode();\n    const lh = this.lookahead();\n    const isThis = this.state.type === types$1._this;\n\n    if (lh.type === types$1.colon || lh.type === types$1.question) {\n      if (isThis && !first) {\n        this.raise(node.start, FlowErrors.ThisParamMustBeFirst);\n      }\n\n      name = this.parseIdentifier(isThis);\n\n      if (this.eat(types$1.question)) {\n        optional = true;\n\n        if (isThis) {\n          this.raise(node.start, FlowErrors.ThisParamMayNotBeOptional);\n        }\n      }\n\n      typeAnnotation = this.flowParseTypeInitialiser();\n    } else {\n      typeAnnotation = this.flowParseType();\n    }\n\n    node.name = name;\n    node.optional = optional;\n    node.typeAnnotation = typeAnnotation;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  reinterpretTypeAsFunctionTypeParam(type) {\n    const node = this.startNodeAt(type.start, type.loc.start);\n    node.name = null;\n    node.optional = false;\n    node.typeAnnotation = type;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  flowParseFunctionTypeParams(params = []) {\n    let rest = null;\n    let _this = null;\n\n    if (this.match(types$1._this)) {\n      _this = this.flowParseFunctionTypeParam(true);\n      _this.name = null;\n\n      if (!this.match(types$1.parenR)) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    while (!this.match(types$1.parenR) && !this.match(types$1.ellipsis)) {\n      params.push(this.flowParseFunctionTypeParam(false));\n\n      if (!this.match(types$1.parenR)) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    if (this.eat(types$1.ellipsis)) {\n      rest = this.flowParseFunctionTypeParam(false);\n    }\n\n    return {\n      params,\n      rest,\n      _this\n    };\n  }\n\n  flowIdentToTypeAnnotation(startPos, startLoc, node, id) {\n    switch (id.name) {\n      case \"any\":\n        return this.finishNode(node, \"AnyTypeAnnotation\");\n\n      case \"bool\":\n      case \"boolean\":\n        return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n      case \"mixed\":\n        return this.finishNode(node, \"MixedTypeAnnotation\");\n\n      case \"empty\":\n        return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n      case \"number\":\n        return this.finishNode(node, \"NumberTypeAnnotation\");\n\n      case \"string\":\n        return this.finishNode(node, \"StringTypeAnnotation\");\n\n      case \"symbol\":\n        return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n      default:\n        this.checkNotUnderscore(id.name);\n        return this.flowParseGenericType(startPos, startLoc, id);\n    }\n  }\n\n  flowParsePrimaryType() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const node = this.startNode();\n    let tmp;\n    let type;\n    let isGroupedType = false;\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n    switch (this.state.type) {\n      case types$1.name:\n        if (this.isContextual(\"interface\")) {\n          return this.flowParseInterfaceType();\n        }\n\n        return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());\n\n      case types$1.braceL:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: false,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: true\n        });\n\n      case types$1.braceBarL:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: true,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: false\n        });\n\n      case types$1.bracketL:\n        this.state.noAnonFunctionType = false;\n        type = this.flowParseTupleType();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        return type;\n\n      case types$1.relational:\n        if (this.state.value === \"<\") {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(types$1.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(types$1.parenR);\n          this.expect(types$1.arrow);\n          node.returnType = this.flowParseType();\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n\n        break;\n\n      case types$1.parenL:\n        this.next();\n\n        if (!this.match(types$1.parenR) && !this.match(types$1.ellipsis)) {\n          if (this.match(types$1.name) || this.match(types$1._this)) {\n            const token = this.lookahead().type;\n            isGroupedType = token !== types$1.question && token !== types$1.colon;\n          } else {\n            isGroupedType = true;\n          }\n        }\n\n        if (isGroupedType) {\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.state.noAnonFunctionType || !(this.match(types$1.comma) || this.match(types$1.parenR) && this.lookahead().type === types$1.arrow)) {\n            this.expect(types$1.parenR);\n            return type;\n          } else {\n            this.eat(types$1.comma);\n          }\n        }\n\n        if (type) {\n          tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n        } else {\n          tmp = this.flowParseFunctionTypeParams();\n        }\n\n        node.params = tmp.params;\n        node.rest = tmp.rest;\n        node.this = tmp._this;\n        this.expect(types$1.parenR);\n        this.expect(types$1.arrow);\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n      case types$1.string:\n        return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n\n      case types$1._true:\n      case types$1._false:\n        node.value = this.match(types$1._true);\n        this.next();\n        return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n      case types$1.plusMin:\n        if (this.state.value === \"-\") {\n          this.next();\n\n          if (this.match(types$1.num)) {\n            return this.parseLiteralAtNode(-this.state.value, \"NumberLiteralTypeAnnotation\", node);\n          }\n\n          if (this.match(types$1.bigint)) {\n            return this.parseLiteralAtNode(-this.state.value, \"BigIntLiteralTypeAnnotation\", node);\n          }\n\n          throw this.raise(this.state.start, FlowErrors.UnexpectedSubtractionOperand);\n        }\n\n        throw this.unexpected();\n\n      case types$1.num:\n        return this.parseLiteral(this.state.value, \"NumberLiteralTypeAnnotation\");\n\n      case types$1.bigint:\n        return this.parseLiteral(this.state.value, \"BigIntLiteralTypeAnnotation\");\n\n      case types$1._void:\n        this.next();\n        return this.finishNode(node, \"VoidTypeAnnotation\");\n\n      case types$1._null:\n        this.next();\n        return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n      case types$1._this:\n        this.next();\n        return this.finishNode(node, \"ThisTypeAnnotation\");\n\n      case types$1.star:\n        this.next();\n        return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n      default:\n        if (this.state.type.keyword === \"typeof\") {\n          return this.flowParseTypeofType();\n        } else if (this.state.type.keyword) {\n          const label = this.state.type.label;\n          this.next();\n          return super.createIdentifier(node, label);\n        }\n\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParsePostfixType() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let type = this.flowParsePrimaryType();\n    let seenOptionalIndexedAccess = false;\n\n    while ((this.match(types$1.bracketL) || this.match(types$1.questionDot)) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const optional = this.eat(types$1.questionDot);\n      seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n      this.expect(types$1.bracketL);\n\n      if (!optional && this.match(types$1.bracketR)) {\n        node.elementType = type;\n        this.next();\n        type = this.finishNode(node, \"ArrayTypeAnnotation\");\n      } else {\n        node.objectType = type;\n        node.indexType = this.flowParseType();\n        this.expect(types$1.bracketR);\n\n        if (seenOptionalIndexedAccess) {\n          node.optional = optional;\n          type = this.finishNode(node, \"OptionalIndexedAccessType\");\n        } else {\n          type = this.finishNode(node, \"IndexedAccessType\");\n        }\n      }\n    }\n\n    return type;\n  }\n\n  flowParsePrefixType() {\n    const node = this.startNode();\n\n    if (this.eat(types$1.question)) {\n      node.typeAnnotation = this.flowParsePrefixType();\n      return this.finishNode(node, \"NullableTypeAnnotation\");\n    } else {\n      return this.flowParsePostfixType();\n    }\n  }\n\n  flowParseAnonFunctionWithoutParens() {\n    const param = this.flowParsePrefixType();\n\n    if (!this.state.noAnonFunctionType && this.eat(types$1.arrow)) {\n      const node = this.startNodeAt(param.start, param.loc.start);\n      node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n      node.rest = null;\n      node.this = null;\n      node.returnType = this.flowParseType();\n      node.typeParameters = null;\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    return param;\n  }\n\n  flowParseIntersectionType() {\n    const node = this.startNode();\n    this.eat(types$1.bitwiseAND);\n    const type = this.flowParseAnonFunctionWithoutParens();\n    node.types = [type];\n\n    while (this.eat(types$1.bitwiseAND)) {\n      node.types.push(this.flowParseAnonFunctionWithoutParens());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n  }\n\n  flowParseUnionType() {\n    const node = this.startNode();\n    this.eat(types$1.bitwiseOR);\n    const type = this.flowParseIntersectionType();\n    node.types = [type];\n\n    while (this.eat(types$1.bitwiseOR)) {\n      node.types.push(this.flowParseIntersectionType());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n  }\n\n  flowParseType() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const type = this.flowParseUnionType();\n    this.state.inType = oldInType;\n    return type;\n  }\n\n  flowParseTypeOrImplicitInstantiation() {\n    if (this.state.type === types$1.name && this.state.value === \"_\") {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.parseIdentifier();\n      return this.flowParseGenericType(startPos, startLoc, node);\n    } else {\n      return this.flowParseType();\n    }\n  }\n\n  flowParseTypeAnnotation() {\n    const node = this.startNode();\n    node.typeAnnotation = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"TypeAnnotation\");\n  }\n\n  flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {\n    const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\n\n    if (this.match(types$1.colon)) {\n      ident.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(ident);\n    }\n\n    return ident;\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  flowParseVariance() {\n    let variance = null;\n\n    if (this.match(types$1.plusMin)) {\n      variance = this.startNode();\n\n      if (this.state.value === \"+\") {\n        variance.kind = \"plus\";\n      } else {\n        variance.kind = \"minus\";\n      }\n\n      this.next();\n      this.finishNode(variance, \"Variance\");\n    }\n\n    return variance;\n  }\n\n  parseFunctionBody(node, allowExpressionBody, isMethod = false) {\n    if (allowExpressionBody) {\n      return this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));\n    }\n\n    return super.parseFunctionBody(node, false, isMethod);\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(types$1.colon)) {\n      const typeNode = this.startNode();\n      [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n      node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.state.strict && this.match(types$1.name) && this.state.value === \"interface\") {\n      const lookahead = this.lookahead();\n\n      if (lookahead.type === types$1.name || isKeyword(lookahead.value)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseInterface(node);\n      }\n    } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n\n    const stmt = super.parseStatement(context, topLevel);\n\n    if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n      this.flowPragma = null;\n    }\n\n    return stmt;\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type === \"Identifier\") {\n      if (expr.name === \"declare\") {\n        if (this.match(types$1._class) || this.match(types$1.name) || this.match(types$1._function) || this.match(types$1._var) || this.match(types$1._export)) {\n          return this.flowParseDeclare(node);\n        }\n      } else if (this.match(types$1.name)) {\n        if (expr.name === \"interface\") {\n          return this.flowParseInterface(node);\n        } else if (expr.name === \"type\") {\n          return this.flowParseTypeAlias(node);\n        } else if (expr.name === \"opaque\") {\n          return this.flowParseOpaqueType(node, false);\n        }\n      }\n    }\n\n    return super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    return this.isContextual(\"type\") || this.isContextual(\"interface\") || this.isContextual(\"opaque\") || this.shouldParseEnums() && this.isContextual(\"enum\") || super.shouldParseExportDeclaration();\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types$1.name) && (this.state.value === \"type\" || this.state.value === \"interface\" || this.state.value === \"opaque\" || this.shouldParseEnums() && this.state.value === \"enum\")) {\n      return false;\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseExportDefaultExpression() {\n    if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n    if (!this.match(types$1.question)) return expr;\n\n    if (this.state.maybeInArrowParameters) {\n      const nextCh = this.lookaheadCharCode();\n\n      if (nextCh === 44 || nextCh === 61 || nextCh === 58 || nextCh === 41) {\n        this.setOptionalParametersError(refExpressionErrors);\n        return expr;\n      }\n    }\n\n    this.expect(types$1.question);\n    const state = this.state.clone();\n    const originalNoArrowAt = this.state.noArrowAt;\n    const node = this.startNodeAt(startPos, startLoc);\n    let {\n      consequent,\n      failed\n    } = this.tryParseConditionalConsequent();\n    let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n    if (failed || invalid.length > 0) {\n      const noArrowAt = [...originalNoArrowAt];\n\n      if (invalid.length > 0) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt;\n\n        for (let i = 0; i < invalid.length; i++) {\n          noArrowAt.push(invalid[i].start);\n        }\n\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n        [valid, invalid] = this.getArrowLikeExpressions(consequent);\n      }\n\n      if (failed && valid.length > 1) {\n        this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);\n      }\n\n      if (failed && valid.length === 1) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt.concat(valid[0].start);\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n      }\n    }\n\n    this.getArrowLikeExpressions(consequent, true);\n    this.state.noArrowAt = originalNoArrowAt;\n    this.expect(types$1.colon);\n    node.test = expr;\n    node.consequent = consequent;\n    node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(undefined, undefined));\n    return this.finishNode(node, \"ConditionalExpression\");\n  }\n\n  tryParseConditionalConsequent() {\n    this.state.noArrowParamsConversionAt.push(this.state.start);\n    const consequent = this.parseMaybeAssignAllowIn();\n    const failed = !this.match(types$1.colon);\n    this.state.noArrowParamsConversionAt.pop();\n    return {\n      consequent,\n      failed\n    };\n  }\n\n  getArrowLikeExpressions(node, disallowInvalid) {\n    const stack = [node];\n    const arrows = [];\n\n    while (stack.length !== 0) {\n      const node = stack.pop();\n\n      if (node.type === \"ArrowFunctionExpression\") {\n        if (node.typeParameters || !node.returnType) {\n          this.finishArrowValidation(node);\n        } else {\n          arrows.push(node);\n        }\n\n        stack.push(node.body);\n      } else if (node.type === \"ConditionalExpression\") {\n        stack.push(node.consequent);\n        stack.push(node.alternate);\n      }\n    }\n\n    if (disallowInvalid) {\n      arrows.forEach(node => this.finishArrowValidation(node));\n      return [arrows, []];\n    }\n\n    return partition(arrows, node => node.params.every(param => this.isAssignable(param, true)));\n  }\n\n  finishArrowValidation(node) {\n    var _node$extra;\n\n    this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingComma, false);\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    super.checkParams(node, false, true);\n    this.scope.exit();\n  }\n\n  forwardNoArrowParamsConversionAt(node, parse) {\n    let result;\n\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n      result = parse();\n      this.state.noArrowParamsConversionAt.pop();\n    } else {\n      result = parse();\n    }\n\n    return result;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(types$1.question)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(types$1.colon)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (node.type === \"ImportDeclaration\" && (node.importKind === \"type\" || node.importKind === \"typeof\") || node.type === \"ExportNamedDeclaration\" && node.exportKind === \"type\" || node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\") {\n      return;\n    }\n\n    super.assertModuleNodeAllowed(node);\n  }\n\n  parseExport(node) {\n    const decl = super.parseExport(node);\n\n    if (decl.type === \"ExportNamedDeclaration\" || decl.type === \"ExportAllDeclaration\") {\n      decl.exportKind = decl.exportKind || \"value\";\n    }\n\n    return decl;\n  }\n\n  parseExportDeclaration(node) {\n    if (this.isContextual(\"type\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n\n      if (this.match(types$1.braceL)) {\n        node.specifiers = this.parseExportSpecifiers();\n        this.parseExportFrom(node);\n        return null;\n      } else {\n        return this.flowParseTypeAlias(declarationNode);\n      }\n    } else if (this.isContextual(\"opaque\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseOpaqueType(declarationNode, false);\n    } else if (this.isContextual(\"interface\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseInterface(declarationNode);\n    } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      node.exportKind = \"value\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(declarationNode);\n    } else {\n      return super.parseExportDeclaration(node);\n    }\n  }\n\n  eatExportStar(node) {\n    if (super.eatExportStar(...arguments)) return true;\n\n    if (this.isContextual(\"type\") && this.lookahead().type === types$1.star) {\n      node.exportKind = \"type\";\n      this.next();\n      this.next();\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    const pos = this.state.start;\n    const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n\n    if (hasNamespace && node.exportKind === \"type\") {\n      this.unexpected(pos);\n    }\n\n    return hasNamespace;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    super.parseClassId(node, isStatement, optionalId);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n  }\n\n  parseClassMember(classBody, member, state) {\n    const pos = this.state.start;\n\n    if (this.isContextual(\"declare\")) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      member.declare = true;\n    }\n\n    super.parseClassMember(classBody, member, state);\n\n    if (member.declare) {\n      if (member.type !== \"ClassProperty\" && member.type !== \"ClassPrivateProperty\" && member.type !== \"PropertyDefinition\") {\n        this.raise(pos, FlowErrors.DeclareClassElement);\n      } else if (member.value) {\n        this.raise(member.value.start, FlowErrors.DeclareClassFieldInitializer);\n      }\n    }\n  }\n\n  isIterator(word) {\n    return word === \"iterator\" || word === \"asyncIterator\";\n  }\n\n  readIterator() {\n    const word = super.readWord1();\n    const fullWord = \"@@\" + word;\n\n    if (!this.isIterator(word) || !this.state.inType) {\n      this.raise(this.state.pos, ErrorMessages.InvalidIdentifier, fullWord);\n    }\n\n    this.finishToken(types$1.name, fullWord);\n  }\n\n  getTokenFromCode(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 123 && next === 124) {\n      return this.finishOp(types$1.braceBarL, 2);\n    } else if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(types$1.relational, 1);\n    } else if (this.state.inType && code === 63) {\n      if (next === 46) {\n        return this.finishOp(types$1.questionDot, 2);\n      }\n\n      return this.finishOp(types$1.question, 1);\n    } else if (isIteratorStart(code, next)) {\n      this.state.pos += 2;\n      return this.readIterator();\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  isAssignable(node, isBinding) {\n    if (node.type === \"TypeCastExpression\") {\n      return this.isAssignable(node.expression, isBinding);\n    } else {\n      return super.isAssignable(node, isBinding);\n    }\n  }\n\n  toAssignable(node, isLHS = false) {\n    if (node.type === \"TypeCastExpression\") {\n      return super.toAssignable(this.typeCastToParameter(node), isLHS);\n    } else {\n      return super.toAssignable(node, isLHS);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaPos, isLHS) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n\n      if ((expr == null ? void 0 : expr.type) === \"TypeCastExpression\") {\n        exprList[i] = this.typeCastToParameter(expr);\n      }\n    }\n\n    return super.toAssignableList(exprList, trailingCommaPos, isLHS);\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    for (let i = 0; i < exprList.length; i++) {\n      var _expr$extra;\n\n      const expr = exprList[i];\n\n      if (expr && expr.type === \"TypeCastExpression\" && !((_expr$extra = expr.extra) != null && _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {\n        this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);\n      }\n    }\n\n    return exprList;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);\n\n    if (canBePattern && !this.state.maybeInArrowParameters) {\n      this.toReferencedList(node.elements);\n    }\n\n    return node;\n  }\n\n  checkLVal(expr, ...args) {\n    if (expr.type !== \"TypeCastExpression\") {\n      return super.checkLVal(expr, ...args);\n    }\n  }\n\n  parseClassProperty(node) {\n    if (this.match(types$1.colon)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (this.match(types$1.colon)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassPrivateProperty(node);\n  }\n\n  isClassMethod() {\n    return this.isRelational(\"<\") || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(types$1.colon) || super.isClassProperty();\n  }\n\n  isNonstaticConstructor(method) {\n    return !this.match(types$1.colon) && super.isNonstaticConstructor(method);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    if (method.variance) {\n      this.unexpected(method.variance.start);\n    }\n\n    delete method.variance;\n\n    if (this.isRelational(\"<\")) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n\n    if (method.params && isConstructor) {\n      const params = method.params;\n\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\n      }\n    } else if (method.type === \"MethodDefinition\" && isConstructor && method.value.params) {\n      const params = method.value.params;\n\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\n      }\n    }\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    if (method.variance) {\n      this.unexpected(method.variance.start);\n    }\n\n    delete method.variance;\n\n    if (this.isRelational(\"<\")) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.isRelational(\"<\")) {\n      node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    if (this.isContextual(\"implements\")) {\n      this.next();\n      const implemented = node.implements = [];\n\n      do {\n        const node = this.startNode();\n        node.id = this.flowParseRestrictedIdentifier(true);\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterInstantiation();\n        } else {\n          node.typeParameters = null;\n        }\n\n        implemented.push(this.finishNode(node, \"ClassImplements\"));\n      } while (this.eat(types$1.comma));\n    }\n  }\n\n  checkGetterSetterParams(method) {\n    super.checkGetterSetterParams(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length > 0) {\n      const param = params[0];\n\n      if (this.isThisParam(param) && method.kind === \"get\") {\n        this.raise(param.start, FlowErrors.GetterMayNotHaveThisParam);\n      } else if (this.isThisParam(param)) {\n        this.raise(param.start, FlowErrors.SetterMayNotHaveThisParam);\n      }\n    }\n  }\n\n  parsePropertyName(node, isPrivateNameAllowed) {\n    const variance = this.flowParseVariance();\n    const key = super.parsePropertyName(node, isPrivateNameAllowed);\n    node.variance = variance;\n    return key;\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    if (prop.variance) {\n      this.unexpected(prop.variance.start);\n    }\n\n    delete prop.variance;\n    let typeParameters;\n\n    if (this.isRelational(\"<\") && !isAccessor) {\n      typeParameters = this.flowParseTypeParameterDeclaration();\n      if (!this.match(types$1.parenL)) this.unexpected();\n    }\n\n    super.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n\n    if (typeParameters) {\n      (prop.value || prop).typeParameters = typeParameters;\n    }\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(types$1.question)) {\n      if (param.type !== \"Identifier\") {\n        this.raise(param.start, FlowErrors.OptionalBindingPattern);\n      }\n\n      if (this.isThisParam(param)) {\n        this.raise(param.start, FlowErrors.ThisParamMayNotBeOptional);\n      }\n\n      param.optional = true;\n    }\n\n    if (this.match(types$1.colon)) {\n      param.typeAnnotation = this.flowParseTypeAnnotation();\n    } else if (this.isThisParam(param)) {\n      this.raise(param.start, FlowErrors.ThisParamAnnotationRequired);\n    }\n\n    if (this.match(types$1.eq) && this.isThisParam(param)) {\n      this.raise(param.start, FlowErrors.ThisParamNoDefault);\n    }\n\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);\n    }\n\n    return node;\n  }\n\n  shouldParseDefaultImport(node) {\n    if (!hasTypeImportKind(node)) {\n      return super.shouldParseDefaultImport(node);\n    }\n\n    return isMaybeDefaultImport(this.state);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    node.importKind = \"value\";\n    let kind = null;\n\n    if (this.match(types$1._typeof)) {\n      kind = \"typeof\";\n    } else if (this.isContextual(\"type\")) {\n      kind = \"type\";\n    }\n\n    if (kind) {\n      const lh = this.lookahead();\n\n      if (kind === \"type\" && lh.type === types$1.star) {\n        this.unexpected(lh.start);\n      }\n\n      if (isMaybeDefaultImport(lh) || lh.type === types$1.braceL || lh.type === types$1.star) {\n        this.next();\n        node.importKind = kind;\n      }\n    }\n\n    return super.maybeParseDefaultImportSpecifier(node);\n  }\n\n  parseImportSpecifier(node) {\n    const specifier = this.startNode();\n    const firstIdentIsString = this.match(types$1.string);\n    const firstIdent = this.parseModuleExportName();\n    let specifierTypeKind = null;\n\n    if (firstIdent.type === \"Identifier\") {\n      if (firstIdent.name === \"type\") {\n        specifierTypeKind = \"type\";\n      } else if (firstIdent.name === \"typeof\") {\n        specifierTypeKind = \"typeof\";\n      }\n    }\n\n    let isBinding = false;\n\n    if (this.isContextual(\"as\") && !this.isLookaheadContextual(\"as\")) {\n      const as_ident = this.parseIdentifier(true);\n\n      if (specifierTypeKind !== null && !this.match(types$1.name) && !this.state.type.keyword) {\n        specifier.imported = as_ident;\n        specifier.importKind = specifierTypeKind;\n        specifier.local = cloneIdentifier(as_ident);\n      } else {\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = this.parseIdentifier();\n      }\n    } else {\n      if (specifierTypeKind !== null && (this.match(types$1.name) || this.state.type.keyword)) {\n        specifier.imported = this.parseIdentifier(true);\n        specifier.importKind = specifierTypeKind;\n      } else {\n        if (firstIdentIsString) {\n          throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, firstIdent.value);\n        }\n\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n      }\n\n      if (this.eatContextual(\"as\")) {\n        specifier.local = this.parseIdentifier();\n      } else {\n        isBinding = true;\n        specifier.local = cloneIdentifier(specifier.imported);\n      }\n    }\n\n    const nodeIsTypeImport = hasTypeImportKind(node);\n    const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n    if (nodeIsTypeImport && specifierIsTypeImport) {\n      this.raise(specifier.start, FlowErrors.ImportTypeShorthandOnlyInPureImport);\n    }\n\n    if (nodeIsTypeImport || specifierIsTypeImport) {\n      this.checkReservedType(specifier.local.name, specifier.local.start, true);\n    }\n\n    if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {\n      this.checkReservedWord(specifier.local.name, specifier.start, true, true);\n    }\n\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types$1._this:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const kind = node.kind;\n\n    if (kind !== \"get\" && kind !== \"set\" && this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (this.match(types$1.colon)) {\n      decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(types$1.colon)) {\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = true;\n      node.returnType = this.flowParseTypeAnnotation();\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types$1.colon) || super.shouldParseAsyncArrow();\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n    var _jsx;\n\n    let state = null;\n    let jsx;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(types$1.jsxTagStart) || this.isRelational(\"<\"))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n      const curContext = context[context.length - 1];\n\n      if (curContext === types.j_oTag) {\n        context.length -= 2;\n      } else if (curContext === types.j_expr) {\n        context.length -= 1;\n      }\n    }\n\n    if ((_jsx = jsx) != null && _jsx.error || this.isRelational(\"<\")) {\n      var _jsx2, _jsx3;\n\n      state = state || this.state.clone();\n      let typeParameters;\n      const arrow = this.tryParse(abort => {\n        var _arrowExpression$extr;\n\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        const arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, () => {\n          const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n          this.resetStartLocationFromNode(result, typeParameters);\n          return result;\n        });\n        if ((_arrowExpression$extr = arrowExpression.extra) != null && _arrowExpression$extr.parenthesized) abort();\n        const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n        if (expr.type !== \"ArrowFunctionExpression\") abort();\n        expr.typeParameters = typeParameters;\n        this.resetStartLocationFromNode(expr, typeParameters);\n        return arrowExpression;\n      }, state);\n      let arrowExpression = null;\n\n      if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === \"ArrowFunctionExpression\") {\n        if (!arrow.error && !arrow.aborted) {\n          if (arrow.node.async) {\n            this.raise(typeParameters.start, FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction);\n          }\n\n          return arrow.node;\n        }\n\n        arrowExpression = arrow.node;\n      }\n\n      if ((_jsx2 = jsx) != null && _jsx2.node) {\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrowExpression) {\n        this.state = arrow.failState;\n        return arrowExpression;\n      }\n\n      if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      throw this.raise(typeParameters.start, FlowErrors.UnexpectedTokenAfterTypeParameter);\n    }\n\n    return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n  }\n\n  parseArrow(node) {\n    if (this.match(types$1.colon)) {\n      const result = this.tryParse(() => {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        const typeNode = this.startNode();\n        [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        if (this.canInsertSemicolon()) this.unexpected();\n        if (!this.match(types$1.arrow)) this.unexpected();\n        return typeNode;\n      });\n      if (result.thrown) return null;\n      if (result.error) this.state = result.failState;\n      node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, \"TypeAnnotation\") : null;\n    }\n\n    return super.parseArrow(node);\n  }\n\n  shouldParseArrow(params) {\n    return this.match(types$1.colon) || super.shouldParseArrow(params);\n  }\n\n  setArrowFunctionParameters(node, params) {\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      node.params = params;\n    } else {\n      super.setArrowFunctionParameters(node, params);\n    }\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction) {\n    if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      return;\n    }\n\n    for (let i = 0; i < node.params.length; i++) {\n      if (this.isThisParam(node.params[i]) && i > 0) {\n        this.raise(node.params[i].start, FlowErrors.ThisParamMustBeFirst);\n      }\n    }\n\n    return super.checkParams(...arguments);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    if (base.type === \"Identifier\" && base.name === \"async\" && this.state.noArrowAt.indexOf(startPos) !== -1) {\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n      base = this.finishNode(node, \"CallExpression\");\n    } else if (base.type === \"Identifier\" && base.name === \"async\" && this.isRelational(\"<\")) {\n      const state = this.state.clone();\n      const arrow = this.tryParse(abort => this.parseAsyncArrowWithTypeParameters(startPos, startLoc) || abort(), state);\n      if (!arrow.error && !arrow.aborted) return arrow.node;\n      const result = this.tryParse(() => super.parseSubscripts(base, startPos, startLoc, noCalls), state);\n      if (result.node && !result.error) return result.node;\n\n      if (arrow.node) {\n        this.state = arrow.failState;\n        return arrow.node;\n      }\n\n      if (result.node) {\n        this.state = result.failState;\n        return result.node;\n      }\n\n      throw arrow.error || result.error;\n    }\n\n    return super.parseSubscripts(base, startPos, startLoc, noCalls);\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, subscriptState) {\n    if (this.match(types$1.questionDot) && this.isLookaheadToken_lt()) {\n      subscriptState.optionalChainMember = true;\n\n      if (noCalls) {\n        subscriptState.stop = true;\n        return base;\n      }\n\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.typeArguments = this.flowParseTypeParameterInstantiation();\n      this.expect(types$1.parenL);\n      node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n      node.optional = true;\n      return this.finishCallExpression(node, true);\n    } else if (!noCalls && this.shouldParseTypes() && this.isRelational(\"<\")) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      const result = this.tryParse(() => {\n        node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n        this.expect(types$1.parenL);\n        node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n        if (subscriptState.optionalChainMember) node.optional = false;\n        return this.finishCallExpression(node, subscriptState.optionalChainMember);\n      });\n\n      if (result.node) {\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, subscriptState);\n  }\n\n  parseNewArguments(node) {\n    let targs = null;\n\n    if (this.shouldParseTypes() && this.isRelational(\"<\")) {\n      targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;\n    }\n\n    node.typeArguments = targs;\n    super.parseNewArguments(node);\n  }\n\n  parseAsyncArrowWithTypeParameters(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.parseFunctionParams(node);\n    if (!this.parseArrow(node)) return;\n    return this.parseArrowExpression(node, undefined, true);\n  }\n\n  readToken_mult_modulo(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 42 && next === 47 && this.state.hasFlowComment) {\n      this.state.hasFlowComment = false;\n      this.state.pos += 2;\n      this.nextToken();\n      return;\n    }\n\n    super.readToken_mult_modulo(code);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 124 && next === 125) {\n      this.finishOp(types$1.braceBarR, 2);\n      return;\n    }\n\n    super.readToken_pipe_amp(code);\n  }\n\n  parseTopLevel(file, program) {\n    const fileNode = super.parseTopLevel(file, program);\n\n    if (this.state.hasFlowComment) {\n      this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);\n    }\n\n    return fileNode;\n  }\n\n  skipBlockComment() {\n    if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n      if (this.state.hasFlowComment) {\n        this.unexpected(null, FlowErrors.NestedFlowComment);\n      }\n\n      this.hasFlowCommentCompletion();\n      this.state.pos += this.skipFlowComment();\n      this.state.hasFlowComment = true;\n      return;\n    }\n\n    if (this.state.hasFlowComment) {\n      const end = this.input.indexOf(\"*-/\", this.state.pos += 2);\n\n      if (end === -1) {\n        throw this.raise(this.state.pos - 2, ErrorMessages.UnterminatedComment);\n      }\n\n      this.state.pos = end + 3;\n      return;\n    }\n\n    return super.skipBlockComment();\n  }\n\n  skipFlowComment() {\n    const {\n      pos\n    } = this.state;\n    let shiftToFirstNonWhiteSpace = 2;\n\n    while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {\n      shiftToFirstNonWhiteSpace++;\n    }\n\n    const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n    const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n    if (ch2 === 58 && ch3 === 58) {\n      return shiftToFirstNonWhiteSpace + 2;\n    }\n\n    if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === \"flow-include\") {\n      return shiftToFirstNonWhiteSpace + 12;\n    }\n\n    if (ch2 === 58 && ch3 !== 58) {\n      return shiftToFirstNonWhiteSpace;\n    }\n\n    return false;\n  }\n\n  hasFlowCommentCompletion() {\n    const end = this.input.indexOf(\"*/\", this.state.pos);\n\n    if (end === -1) {\n      throw this.raise(this.state.pos, ErrorMessages.UnterminatedComment);\n    }\n  }\n\n  flowEnumErrorBooleanMemberNotInitialized(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumBooleanMemberNotInitialized, memberName, enumName);\n  }\n\n  flowEnumErrorInvalidMemberName(pos, {\n    enumName,\n    memberName\n  }) {\n    const suggestion = memberName[0].toUpperCase() + memberName.slice(1);\n    this.raise(pos, FlowErrors.EnumInvalidMemberName, memberName, suggestion, enumName);\n  }\n\n  flowEnumErrorDuplicateMemberName(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);\n  }\n\n  flowEnumErrorInconsistentMemberValues(pos, {\n    enumName\n  }) {\n    this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);\n  }\n\n  flowEnumErrorInvalidExplicitType(pos, {\n    enumName,\n    suppliedType\n  }) {\n    return this.raise(pos, suppliedType === null ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied : FlowErrors.EnumInvalidExplicitType, enumName, suppliedType);\n  }\n\n  flowEnumErrorInvalidMemberInitializer(pos, {\n    enumName,\n    explicitType,\n    memberName\n  }) {\n    let message = null;\n\n    switch (explicitType) {\n      case \"boolean\":\n      case \"number\":\n      case \"string\":\n        message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;\n        break;\n\n      case \"symbol\":\n        message = FlowErrors.EnumInvalidMemberInitializerSymbolType;\n        break;\n\n      default:\n        message = FlowErrors.EnumInvalidMemberInitializerUnknownType;\n    }\n\n    return this.raise(pos, message, enumName, memberName, explicitType);\n  }\n\n  flowEnumErrorNumberMemberNotInitialized(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumNumberMemberNotInitialized, enumName, memberName);\n  }\n\n  flowEnumErrorStringMemberInconsistentlyInitailized(pos, {\n    enumName\n  }) {\n    this.raise(pos, FlowErrors.EnumStringMemberInconsistentlyInitailized, enumName);\n  }\n\n  flowEnumMemberInit() {\n    const startPos = this.state.start;\n\n    const endOfInit = () => this.match(types$1.comma) || this.match(types$1.braceR);\n\n    switch (this.state.type) {\n      case types$1.num:\n        {\n          const literal = this.parseNumericLiteral(this.state.value);\n\n          if (endOfInit()) {\n            return {\n              type: \"number\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      case types$1.string:\n        {\n          const literal = this.parseStringLiteral(this.state.value);\n\n          if (endOfInit()) {\n            return {\n              type: \"string\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      case types$1._true:\n      case types$1._false:\n        {\n          const literal = this.parseBooleanLiteral(this.match(types$1._true));\n\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      default:\n        return {\n          type: \"invalid\",\n          pos: startPos\n        };\n    }\n  }\n\n  flowEnumMemberRaw() {\n    const pos = this.state.start;\n    const id = this.parseIdentifier(true);\n    const init = this.eat(types$1.eq) ? this.flowEnumMemberInit() : {\n      type: \"none\",\n      pos\n    };\n    return {\n      id,\n      init\n    };\n  }\n\n  flowEnumCheckExplicitTypeMismatch(pos, context, expectedType) {\n    const {\n      explicitType\n    } = context;\n\n    if (explicitType === null) {\n      return;\n    }\n\n    if (explicitType !== expectedType) {\n      this.flowEnumErrorInvalidMemberInitializer(pos, context);\n    }\n  }\n\n  flowEnumMembers({\n    enumName,\n    explicitType\n  }) {\n    const seenNames = new Set();\n    const members = {\n      booleanMembers: [],\n      numberMembers: [],\n      stringMembers: [],\n      defaultedMembers: []\n    };\n    let hasUnknownMembers = false;\n\n    while (!this.match(types$1.braceR)) {\n      if (this.eat(types$1.ellipsis)) {\n        hasUnknownMembers = true;\n        break;\n      }\n\n      const memberNode = this.startNode();\n      const {\n        id,\n        init\n      } = this.flowEnumMemberRaw();\n      const memberName = id.name;\n\n      if (memberName === \"\") {\n        continue;\n      }\n\n      if (/^[a-z]/.test(memberName)) {\n        this.flowEnumErrorInvalidMemberName(id.start, {\n          enumName,\n          memberName\n        });\n      }\n\n      if (seenNames.has(memberName)) {\n        this.flowEnumErrorDuplicateMemberName(id.start, {\n          enumName,\n          memberName\n        });\n      }\n\n      seenNames.add(memberName);\n      const context = {\n        enumName,\n        explicitType,\n        memberName\n      };\n      memberNode.id = id;\n\n      switch (init.type) {\n        case \"boolean\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"boolean\");\n            memberNode.init = init.value;\n            members.booleanMembers.push(this.finishNode(memberNode, \"EnumBooleanMember\"));\n            break;\n          }\n\n        case \"number\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(this.finishNode(memberNode, \"EnumNumberMember\"));\n            break;\n          }\n\n        case \"string\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(this.finishNode(memberNode, \"EnumStringMember\"));\n            break;\n          }\n\n        case \"invalid\":\n          {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\n          }\n\n        case \"none\":\n          {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(init.pos, context);\n                break;\n\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\n                break;\n\n              default:\n                members.defaultedMembers.push(this.finishNode(memberNode, \"EnumDefaultedMember\"));\n            }\n          }\n      }\n\n      if (!this.match(types$1.braceR)) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    return {\n      members,\n      hasUnknownMembers\n    };\n  }\n\n  flowEnumStringMembers(initializedMembers, defaultedMembers, {\n    enumName\n  }) {\n    if (initializedMembers.length === 0) {\n      return defaultedMembers;\n    } else if (defaultedMembers.length === 0) {\n      return initializedMembers;\n    } else if (defaultedMembers.length > initializedMembers.length) {\n      for (const member of initializedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n          enumName\n        });\n      }\n\n      return defaultedMembers;\n    } else {\n      for (const member of defaultedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n          enumName\n        });\n      }\n\n      return initializedMembers;\n    }\n  }\n\n  flowEnumParseExplicitType({\n    enumName\n  }) {\n    if (this.eatContextual(\"of\")) {\n      if (!this.match(types$1.name)) {\n        throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n          enumName,\n          suppliedType: null\n        });\n      }\n\n      const {\n        value\n      } = this.state;\n      this.next();\n\n      if (value !== \"boolean\" && value !== \"number\" && value !== \"string\" && value !== \"symbol\") {\n        this.flowEnumErrorInvalidExplicitType(this.state.start, {\n          enumName,\n          suppliedType: value\n        });\n      }\n\n      return value;\n    }\n\n    return null;\n  }\n\n  flowEnumBody(node, {\n    enumName,\n    nameLoc\n  }) {\n    const explicitType = this.flowEnumParseExplicitType({\n      enumName\n    });\n    this.expect(types$1.braceL);\n    const {\n      members,\n      hasUnknownMembers\n    } = this.flowEnumMembers({\n      enumName,\n      explicitType\n    });\n    node.hasUnknownMembers = hasUnknownMembers;\n\n    switch (explicitType) {\n      case \"boolean\":\n        node.explicitType = true;\n        node.members = members.booleanMembers;\n        this.expect(types$1.braceR);\n        return this.finishNode(node, \"EnumBooleanBody\");\n\n      case \"number\":\n        node.explicitType = true;\n        node.members = members.numberMembers;\n        this.expect(types$1.braceR);\n        return this.finishNode(node, \"EnumNumberBody\");\n\n      case \"string\":\n        node.explicitType = true;\n        node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n          enumName\n        });\n        this.expect(types$1.braceR);\n        return this.finishNode(node, \"EnumStringBody\");\n\n      case \"symbol\":\n        node.members = members.defaultedMembers;\n        this.expect(types$1.braceR);\n        return this.finishNode(node, \"EnumSymbolBody\");\n\n      default:\n        {\n          const empty = () => {\n            node.members = [];\n            this.expect(types$1.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n\n          node.explicitType = false;\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n              enumName\n            });\n            this.expect(types$1.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.booleanMembers;\n            this.expect(types$1.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.numberMembers;\n            this.expect(types$1.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.flowEnumErrorInconsistentMemberValues(nameLoc, {\n              enumName\n            });\n            return empty();\n          }\n        }\n    }\n  }\n\n  flowParseEnumDeclaration(node) {\n    const id = this.parseIdentifier();\n    node.id = id;\n    node.body = this.flowEnumBody(this.startNode(), {\n      enumName: id.name,\n      nameLoc: id.start\n    });\n    return this.finishNode(node, \"EnumDeclaration\");\n  }\n\n  isLookaheadToken_lt() {\n    const next = this.nextTokenStart();\n\n    if (this.input.charCodeAt(next) === 60) {\n      const afterNext = this.input.charCodeAt(next + 1);\n      return afterNext !== 60 && afterNext !== 61;\n    }\n\n    return false;\n  }\n\n  maybeUnwrapTypeCastExpression(node) {\n    return node.type === \"TypeCastExpression\" ? node.expression : node;\n  }\n\n});\n\nconst entities = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\"\n};\n\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\nconst JsxErrors = makeErrorTemplates({\n  AttributeIsEmpty: \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: \"Expected corresponding JSX closing tag for <%0>.\",\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression: \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  UnsupportedJsxValue: \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements: \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\"\n}, ErrorCodes.SyntaxError);\ntypes.j_oTag = new TokContext(\"<tag\");\ntypes.j_cTag = new TokContext(\"</tag\");\ntypes.j_expr = new TokContext(\"<tag>...</tag>\", true);\ntypes$1.jsxName = new TokenType(\"jsxName\");\ntypes$1.jsxText = new TokenType(\"jsxText\", {\n  beforeExpr: true\n});\ntypes$1.jsxTagStart = new TokenType(\"jsxTagStart\", {\n  startsExpr: true\n});\ntypes$1.jsxTagEnd = new TokenType(\"jsxTagEnd\");\n\ntypes$1.jsxTagStart.updateContext = context => {\n  context.push(types.j_expr, types.j_oTag);\n};\n\nfunction isFragment(object) {\n  return object ? object.type === \"JSXOpeningFragment\" || object.type === \"JSXClosingFragment\" : false;\n}\n\nfunction getQualifiedJSXName(object) {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n  }\n\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nvar jsx = (superClass => class extends superClass {\n  jsxReadToken() {\n    let out = \"\";\n    let chunkStart = this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 60:\n        case 123:\n          if (this.state.pos === this.state.start) {\n            if (ch === 60 && this.state.exprAllowed) {\n              ++this.state.pos;\n              return this.finishToken(types$1.jsxTagStart);\n            }\n\n            return super.getTokenFromCode(ch);\n          }\n\n          out += this.input.slice(chunkStart, this.state.pos);\n          return this.finishToken(types$1.jsxText, out);\n\n        case 38:\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n          break;\n\n        case 62:\n        case 125:\n\n        default:\n          if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadNewLine(true);\n            chunkStart = this.state.pos;\n          } else {\n            ++this.state.pos;\n          }\n\n      }\n    }\n  }\n\n  jsxReadNewLine(normalizeCRLF) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let out;\n    ++this.state.pos;\n\n    if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n      ++this.state.pos;\n      out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n    } else {\n      out = String.fromCharCode(ch);\n    }\n\n    ++this.state.curLine;\n    this.state.lineStart = this.state.pos;\n    return out;\n  }\n\n  jsxReadString(quote) {\n    let out = \"\";\n    let chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 38) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadEntity();\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadNewLine(false);\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    return this.finishToken(types$1.string, out);\n  }\n\n  jsxReadEntity() {\n    let str = \"\";\n    let count = 0;\n    let entity;\n    let ch = this.input[this.state.pos];\n    const startPos = ++this.state.pos;\n\n    while (this.state.pos < this.length && count++ < 10) {\n      ch = this.input[this.state.pos++];\n\n      if (ch === \";\") {\n        if (str[0] === \"#\") {\n          if (str[1] === \"x\") {\n            str = str.substr(2);\n\n            if (HEX_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 16));\n            }\n          } else {\n            str = str.substr(1);\n\n            if (DECIMAL_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 10));\n            }\n          }\n        } else {\n          entity = entities[str];\n        }\n\n        break;\n      }\n\n      str += ch;\n    }\n\n    if (!entity) {\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    return entity;\n  }\n\n  jsxReadWord() {\n    let ch;\n    const start = this.state.pos;\n\n    do {\n      ch = this.input.charCodeAt(++this.state.pos);\n    } while (isIdentifierChar(ch) || ch === 45);\n\n    return this.finishToken(types$1.jsxName, this.input.slice(start, this.state.pos));\n  }\n\n  jsxParseIdentifier() {\n    const node = this.startNode();\n\n    if (this.match(types$1.jsxName)) {\n      node.name = this.state.value;\n    } else if (this.state.type.keyword) {\n      node.name = this.state.type.keyword;\n    } else {\n      this.unexpected();\n    }\n\n    this.next();\n    return this.finishNode(node, \"JSXIdentifier\");\n  }\n\n  jsxParseNamespacedName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const name = this.jsxParseIdentifier();\n    if (!this.eat(types$1.colon)) return name;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.namespace = name;\n    node.name = this.jsxParseIdentifier();\n    return this.finishNode(node, \"JSXNamespacedName\");\n  }\n\n  jsxParseElementName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let node = this.jsxParseNamespacedName();\n\n    if (node.type === \"JSXNamespacedName\") {\n      return node;\n    }\n\n    while (this.eat(types$1.dot)) {\n      const newNode = this.startNodeAt(startPos, startLoc);\n      newNode.object = node;\n      newNode.property = this.jsxParseIdentifier();\n      node = this.finishNode(newNode, \"JSXMemberExpression\");\n    }\n\n    return node;\n  }\n\n  jsxParseAttributeValue() {\n    let node;\n\n    switch (this.state.type) {\n      case types$1.braceL:\n        node = this.startNode();\n        this.next();\n        node = this.jsxParseExpressionContainer(node);\n\n        if (node.expression.type === \"JSXEmptyExpression\") {\n          this.raise(node.start, JsxErrors.AttributeIsEmpty);\n        }\n\n        return node;\n\n      case types$1.jsxTagStart:\n      case types$1.string:\n        return this.parseExprAtom();\n\n      default:\n        throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);\n    }\n  }\n\n  jsxParseEmptyExpression() {\n    const node = this.startNodeAt(this.state.lastTokEnd, this.state.lastTokEndLoc);\n    return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.start, this.state.startLoc);\n  }\n\n  jsxParseSpreadChild(node) {\n    this.next();\n    node.expression = this.parseExpression();\n    this.expect(types$1.braceR);\n    return this.finishNode(node, \"JSXSpreadChild\");\n  }\n\n  jsxParseExpressionContainer(node) {\n    if (this.match(types$1.braceR)) {\n      node.expression = this.jsxParseEmptyExpression();\n    } else {\n      const expression = this.parseExpression();\n      node.expression = expression;\n    }\n\n    this.expect(types$1.braceR);\n    return this.finishNode(node, \"JSXExpressionContainer\");\n  }\n\n  jsxParseAttribute() {\n    const node = this.startNode();\n\n    if (this.eat(types$1.braceL)) {\n      this.expect(types$1.ellipsis);\n      node.argument = this.parseMaybeAssignAllowIn();\n      this.expect(types$1.braceR);\n      return this.finishNode(node, \"JSXSpreadAttribute\");\n    }\n\n    node.name = this.jsxParseNamespacedName();\n    node.value = this.eat(types$1.eq) ? this.jsxParseAttributeValue() : null;\n    return this.finishNode(node, \"JSXAttribute\");\n  }\n\n  jsxParseOpeningElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(types$1.jsxTagEnd)) {\n      this.expect(types$1.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    return this.jsxParseOpeningElementAfterName(node);\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    const attributes = [];\n\n    while (!this.match(types$1.slash) && !this.match(types$1.jsxTagEnd)) {\n      attributes.push(this.jsxParseAttribute());\n    }\n\n    node.attributes = attributes;\n    node.selfClosing = this.eat(types$1.slash);\n    this.expect(types$1.jsxTagEnd);\n    return this.finishNode(node, \"JSXOpeningElement\");\n  }\n\n  jsxParseClosingElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(types$1.jsxTagEnd)) {\n      this.expect(types$1.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    this.expect(types$1.jsxTagEnd);\n    return this.finishNode(node, \"JSXClosingElement\");\n  }\n\n  jsxParseElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const children = [];\n    const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n    let closingElement = null;\n\n    if (!openingElement.selfClosing) {\n      contents: for (;;) {\n        switch (this.state.type) {\n          case types$1.jsxTagStart:\n            startPos = this.state.start;\n            startLoc = this.state.startLoc;\n            this.next();\n\n            if (this.eat(types$1.slash)) {\n              closingElement = this.jsxParseClosingElementAt(startPos, startLoc);\n              break contents;\n            }\n\n            children.push(this.jsxParseElementAt(startPos, startLoc));\n            break;\n\n          case types$1.jsxText:\n            children.push(this.parseExprAtom());\n            break;\n\n          case types$1.braceL:\n            {\n              const node = this.startNode();\n              this.next();\n\n              if (this.match(types$1.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node));\n              }\n\n              break;\n            }\n\n          default:\n            throw this.unexpected();\n        }\n      }\n\n      if (isFragment(openingElement) && !isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagFragment);\n      } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n      } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n          this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n        }\n      }\n    }\n\n    if (isFragment(openingElement)) {\n      node.openingFragment = openingElement;\n      node.closingFragment = closingElement;\n    } else {\n      node.openingElement = openingElement;\n      node.closingElement = closingElement;\n    }\n\n    node.children = children;\n\n    if (this.isRelational(\"<\")) {\n      throw this.raise(this.state.start, JsxErrors.UnwrappedAdjacentJSXElements);\n    }\n\n    return isFragment(openingElement) ? this.finishNode(node, \"JSXFragment\") : this.finishNode(node, \"JSXElement\");\n  }\n\n  jsxParseElement() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.next();\n    return this.jsxParseElementAt(startPos, startLoc);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    if (this.match(types$1.jsxText)) {\n      return this.parseLiteral(this.state.value, \"JSXText\");\n    } else if (this.match(types$1.jsxTagStart)) {\n      return this.jsxParseElement();\n    } else if (this.isRelational(\"<\") && this.input.charCodeAt(this.state.pos) !== 33) {\n      this.finishToken(types$1.jsxTagStart);\n      return this.jsxParseElement();\n    } else {\n      return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n\n  createLookaheadState(state) {\n    const lookaheadState = super.createLookaheadState(state);\n    lookaheadState.inPropertyName = state.inPropertyName;\n    return lookaheadState;\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inPropertyName) return super.getTokenFromCode(code);\n    const context = this.curContext();\n\n    if (context === types.j_expr) {\n      return this.jsxReadToken();\n    }\n\n    if (context === types.j_oTag || context === types.j_cTag) {\n      if (isIdentifierStart(code)) {\n        return this.jsxReadWord();\n      }\n\n      if (code === 62) {\n        ++this.state.pos;\n        return this.finishToken(types$1.jsxTagEnd);\n      }\n\n      if ((code === 34 || code === 39) && context === types.j_oTag) {\n        return this.jsxReadString(code);\n      }\n    }\n\n    if (code === 60 && this.state.exprAllowed && this.input.charCodeAt(this.state.pos + 1) !== 33) {\n      ++this.state.pos;\n      return this.finishToken(types$1.jsxTagStart);\n    }\n\n    return super.getTokenFromCode(code);\n  }\n\n  updateContext(prevType) {\n    super.updateContext(prevType);\n    const {\n      context,\n      type\n    } = this.state;\n\n    if (type === types$1.slash && prevType === types$1.jsxTagStart) {\n      context.splice(-2, 2, types.j_cTag);\n      this.state.exprAllowed = false;\n    } else if (type === types$1.jsxTagEnd) {\n      const out = context.pop();\n\n      if (out === types.j_oTag && prevType === types$1.slash || out === types.j_cTag) {\n        context.pop();\n        this.state.exprAllowed = context[context.length - 1] === types.j_expr;\n      } else {\n        this.state.exprAllowed = true;\n      }\n    } else if (type.keyword && (prevType === types$1.dot || prevType === types$1.questionDot)) {\n      this.state.exprAllowed = false;\n    } else {\n      this.state.exprAllowed = type.beforeExpr;\n    }\n  }\n\n});\n\nclass TypeScriptScope extends Scope {\n  constructor(...args) {\n    super(...args);\n    this.types = new Set();\n    this.enums = new Set();\n    this.constEnums = new Set();\n    this.classes = new Set();\n    this.exportOnlyBindings = new Set();\n  }\n\n}\n\nclass TypeScriptScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name, bindingType, pos) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        this.maybeExportDefined(scope, name);\n      }\n\n      scope.types.add(name);\n    }\n\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n\n      return true;\n    }\n\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        return false;\n      }\n    }\n\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id) {\n    const topLevelScope = this.scopeStack[0];\n    const {\n      name\n    } = id;\n\n    if (!topLevelScope.types.has(name) && !topLevelScope.exportOnlyBindings.has(name)) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nfunction nonNull(x) {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n\n  return x;\n}\n\nfunction assert(x) {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\nconst TSErrors = makeErrorTemplates({\n  AbstractMethodHasImplementation: \"Method '%0' cannot have an implementation because it is marked abstract.\",\n  AbstractPropertyHasInitializer: \"Property '%0' cannot have an initializer because it is marked abstract.\",\n  AccesorCannotDeclareThisParameter: \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstructorHasTypeParameters: \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: \"'declare' is not allowed in %0ters.\",\n  DeclareClassFieldHasInitializer: \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation: \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier: \"Accessibility modifier already seen.\",\n  DuplicateModifier: \"Duplicate modifier: '%0'.\",\n  EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare: \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  IncompatibleModifiers: \"'%0' modifier cannot be used with '%1' modifier.\",\n  IndexSignatureHasAbstract: \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: \"Index signatures cannot have an accessibility modifier ('%0').\",\n  IndexSignatureHasDeclare: \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride: \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic: \"Index signatures cannot have the 'static' modifier.\",\n  InvalidModifierOnTypeMember: \"'%0' modifier cannot appear on a type member.\",\n  InvalidModifiersOrder: \"'%0' modifier must precede '%1' modifier.\",\n  InvalidTupleMemberLabel: \"Tuple members must be labeled with a simple identifier.\",\n  MissingInterfaceName: \"'interface' declarations must be followed by an identifier.\",\n  MixedLabeledAndUnlabeledElements: \"Tuple members must all have names or all not have names.\",\n  NonAbstractClassHasAbstractMethod: \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer: \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired: \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass: \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract: \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: \"Private elements cannot have an accessibility modifier ('%0').\",\n  ReadonlyForMethodSignature: \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  SetAccesorCannotHaveOptionalParameter: \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccesorCannotHaveRestParameter: \"A 'set' accessor cannot have rest parameter.\",\n  SetAccesorCannotHaveReturnType: \"A 'set' accessor cannot have a return type annotation.\",\n  StaticBlockCannotHaveModifier: \"Static class blocks cannot have any modifier.\",\n  TypeAnnotationAfterAssign: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed: \"A type-only import can specify a default import or named bindings, but not both.\",\n  UnexpectedParameterModifier: \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly: \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument: \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind: \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0.\"\n}, ErrorCodes.SyntaxError);\n\nfunction keywordTypeFromName(value) {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n\n    case \"never\":\n      return \"TSNeverKeyword\";\n\n    case \"number\":\n      return \"TSNumberKeyword\";\n\n    case \"object\":\n      return \"TSObjectKeyword\";\n\n    case \"string\":\n      return \"TSStringKeyword\";\n\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier) {\n  return modifier === \"private\" || modifier === \"public\" || modifier === \"protected\";\n}\n\nvar typescript = (superClass => class extends superClass {\n  getScopeHandler() {\n    return TypeScriptScopeHandler;\n  }\n\n  tsIsIdentifier() {\n    return this.match(types$1.name);\n  }\n\n  tsTokenCanFollowModifier() {\n    return (this.match(types$1.bracketL) || this.match(types$1.braceL) || this.match(types$1.star) || this.match(types$1.ellipsis) || this.match(types$1.privateName) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();\n  }\n\n  tsNextTokenCanFollowModifier() {\n    this.next();\n    return this.tsTokenCanFollowModifier();\n  }\n\n  tsParseModifier(allowedModifiers) {\n    if (!this.match(types$1.name)) {\n      return undefined;\n    }\n\n    const modifier = this.state.value;\n\n    if (allowedModifiers.indexOf(modifier) !== -1 && this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n      return modifier;\n    }\n\n    return undefined;\n  }\n\n  tsParseModifiers(modified, allowedModifiers, disallowedModifiers, errorTemplate) {\n    const enforceOrder = (pos, modifier, before, after) => {\n      if (modifier === before && modified[after]) {\n        this.raise(pos, TSErrors.InvalidModifiersOrder, before, after);\n      }\n    };\n\n    const incompatible = (pos, modifier, mod1, mod2) => {\n      if (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) {\n        this.raise(pos, TSErrors.IncompatibleModifiers, mod1, mod2);\n      }\n    };\n\n    for (;;) {\n      const startPos = this.state.start;\n      const modifier = this.tsParseModifier(allowedModifiers.concat(disallowedModifiers != null ? disallowedModifiers : []));\n      if (!modifier) break;\n\n      if (tsIsAccessModifier(modifier)) {\n        if (modified.accessibility) {\n          this.raise(startPos, TSErrors.DuplicateAccessibilityModifier);\n        } else {\n          enforceOrder(startPos, modifier, modifier, \"override\");\n          enforceOrder(startPos, modifier, modifier, \"static\");\n          enforceOrder(startPos, modifier, modifier, \"readonly\");\n          modified.accessibility = modifier;\n        }\n      } else {\n        if (Object.hasOwnProperty.call(modified, modifier)) {\n          this.raise(startPos, TSErrors.DuplicateModifier, modifier);\n        } else {\n          enforceOrder(startPos, modifier, \"static\", \"readonly\");\n          enforceOrder(startPos, modifier, \"static\", \"override\");\n          enforceOrder(startPos, modifier, \"override\", \"readonly\");\n          enforceOrder(startPos, modifier, \"abstract\", \"override\");\n          incompatible(startPos, modifier, \"declare\", \"override\");\n          incompatible(startPos, modifier, \"static\", \"abstract\");\n        }\n\n        modified[modifier] = true;\n      }\n\n      if (disallowedModifiers != null && disallowedModifiers.includes(modifier)) {\n        this.raise(startPos, errorTemplate, modifier);\n      }\n    }\n  }\n\n  tsIsListTerminator(kind) {\n    switch (kind) {\n      case \"EnumMembers\":\n      case \"TypeMembers\":\n        return this.match(types$1.braceR);\n\n      case \"HeritageClauseElement\":\n        return this.match(types$1.braceL);\n\n      case \"TupleElementTypes\":\n        return this.match(types$1.bracketR);\n\n      case \"TypeParametersOrArguments\":\n        return this.isRelational(\">\");\n    }\n\n    throw new Error(\"Unreachable\");\n  }\n\n  tsParseList(kind, parseElement) {\n    const result = [];\n\n    while (!this.tsIsListTerminator(kind)) {\n      result.push(parseElement());\n    }\n\n    return result;\n  }\n\n  tsParseDelimitedList(kind, parseElement) {\n    return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true));\n  }\n\n  tsParseDelimitedListWorker(kind, parseElement, expectSuccess) {\n    const result = [];\n\n    for (;;) {\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      const element = parseElement();\n\n      if (element == null) {\n        return undefined;\n      }\n\n      result.push(element);\n\n      if (this.eat(types$1.comma)) {\n        continue;\n      }\n\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      if (expectSuccess) {\n        this.expect(types$1.comma);\n      }\n\n      return undefined;\n    }\n\n    return result;\n  }\n\n  tsParseBracketedList(kind, parseElement, bracket, skipFirstToken) {\n    if (!skipFirstToken) {\n      if (bracket) {\n        this.expect(types$1.bracketL);\n      } else {\n        this.expectRelational(\"<\");\n      }\n    }\n\n    const result = this.tsParseDelimitedList(kind, parseElement);\n\n    if (bracket) {\n      this.expect(types$1.bracketR);\n    } else {\n      this.expectRelational(\">\");\n    }\n\n    return result;\n  }\n\n  tsParseImportType() {\n    const node = this.startNode();\n    this.expect(types$1._import);\n    this.expect(types$1.parenL);\n\n    if (!this.match(types$1.string)) {\n      this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);\n    }\n\n    node.argument = this.parseExprAtom();\n    this.expect(types$1.parenR);\n\n    if (this.eat(types$1.dot)) {\n      node.qualifier = this.tsParseEntityName(true);\n    }\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSImportType\");\n  }\n\n  tsParseEntityName(allowReservedWords) {\n    let entity = this.parseIdentifier();\n\n    while (this.eat(types$1.dot)) {\n      const node = this.startNodeAtNode(entity);\n      node.left = entity;\n      node.right = this.parseIdentifier(allowReservedWords);\n      entity = this.finishNode(node, \"TSQualifiedName\");\n    }\n\n    return entity;\n  }\n\n  tsParseTypeReference() {\n    const node = this.startNode();\n    node.typeName = this.tsParseEntityName(false);\n\n    if (!this.hasPrecedingLineBreak() && this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSTypeReference\");\n  }\n\n  tsParseThisTypePredicate(lhs) {\n    this.next();\n    const node = this.startNodeAtNode(lhs);\n    node.parameterName = lhs;\n    node.typeAnnotation = this.tsParseTypeAnnotation(false);\n    node.asserts = false;\n    return this.finishNode(node, \"TSTypePredicate\");\n  }\n\n  tsParseThisTypeNode() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"TSThisType\");\n  }\n\n  tsParseTypeQuery() {\n    const node = this.startNode();\n    this.expect(types$1._typeof);\n\n    if (this.match(types$1._import)) {\n      node.exprName = this.tsParseImportType();\n    } else {\n      node.exprName = this.tsParseEntityName(true);\n    }\n\n    return this.finishNode(node, \"TSTypeQuery\");\n  }\n\n  tsParseTypeParameter() {\n    const node = this.startNode();\n    node.name = this.tsParseTypeParameterName();\n    node.constraint = this.tsEatThenParseType(types$1._extends);\n    node.default = this.tsEatThenParseType(types$1.eq);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsTryParseTypeParameters() {\n    if (this.isRelational(\"<\")) {\n      return this.tsParseTypeParameters();\n    }\n  }\n\n  tsParseTypeParameters() {\n    const node = this.startNode();\n\n    if (this.isRelational(\"<\") || this.match(types$1.jsxTagStart)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    node.params = this.tsParseBracketedList(\"TypeParametersOrArguments\", this.tsParseTypeParameter.bind(this), false, true);\n\n    if (node.params.length === 0) {\n      this.raise(node.start, TSErrors.EmptyTypeParameters);\n    }\n\n    return this.finishNode(node, \"TSTypeParameterDeclaration\");\n  }\n\n  tsTryNextParseConstantContext() {\n    if (this.lookahead().type === types$1._const) {\n      this.next();\n      return this.tsParseTypeReference();\n    }\n\n    return null;\n  }\n\n  tsFillSignature(returnToken, signature) {\n    const returnTokenRequired = returnToken === types$1.arrow;\n    signature.typeParameters = this.tsTryParseTypeParameters();\n    this.expect(types$1.parenL);\n    signature.parameters = this.tsParseBindingListForSignature();\n\n    if (returnTokenRequired) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    } else if (this.match(returnToken)) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    }\n  }\n\n  tsParseBindingListForSignature() {\n    return this.parseBindingList(types$1.parenR, 41).map(pattern => {\n      if (pattern.type !== \"Identifier\" && pattern.type !== \"RestElement\" && pattern.type !== \"ObjectPattern\" && pattern.type !== \"ArrayPattern\") {\n        this.raise(pattern.start, TSErrors.UnsupportedSignatureParameterKind, pattern.type);\n      }\n\n      return pattern;\n    });\n  }\n\n  tsParseTypeMemberSemicolon() {\n    if (!this.eat(types$1.comma) && !this.isLineTerminator()) {\n      this.expect(types$1.semi);\n    }\n  }\n\n  tsParseSignatureMember(kind, node) {\n    this.tsFillSignature(types$1.colon, node);\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, kind);\n  }\n\n  tsIsUnambiguouslyIndexSignature() {\n    this.next();\n    return this.eat(types$1.name) && this.match(types$1.colon);\n  }\n\n  tsTryParseIndexSignature(node) {\n    if (!(this.match(types$1.bracketL) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {\n      return undefined;\n    }\n\n    this.expect(types$1.bracketL);\n    const id = this.parseIdentifier();\n    id.typeAnnotation = this.tsParseTypeAnnotation();\n    this.resetEndLocation(id);\n    this.expect(types$1.bracketR);\n    node.parameters = [id];\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, \"TSIndexSignature\");\n  }\n\n  tsParsePropertyOrMethodSignature(node, readonly) {\n    if (this.eat(types$1.question)) node.optional = true;\n    const nodeAny = node;\n\n    if (this.match(types$1.parenL) || this.isRelational(\"<\")) {\n      if (readonly) {\n        this.raise(node.start, TSErrors.ReadonlyForMethodSignature);\n      }\n\n      const method = nodeAny;\n\n      if (method.kind && this.isRelational(\"<\")) {\n        this.raise(this.state.pos, TSErrors.AccesorCannotHaveTypeParameters);\n      }\n\n      this.tsFillSignature(types$1.colon, method);\n      this.tsParseTypeMemberSemicolon();\n\n      if (method.kind === \"get\") {\n        if (method.parameters.length > 0) {\n          this.raise(this.state.pos, ErrorMessages.BadGetterArity);\n\n          if (this.isThisParam(method.parameters[0])) {\n            this.raise(this.state.pos, TSErrors.AccesorCannotDeclareThisParameter);\n          }\n        }\n      } else if (method.kind === \"set\") {\n        if (method.parameters.length !== 1) {\n          this.raise(this.state.pos, ErrorMessages.BadSetterArity);\n        } else {\n          const firstParameter = method.parameters[0];\n\n          if (this.isThisParam(firstParameter)) {\n            this.raise(this.state.pos, TSErrors.AccesorCannotDeclareThisParameter);\n          }\n\n          if (firstParameter.type === \"Identifier\" && firstParameter.optional) {\n            this.raise(this.state.pos, TSErrors.SetAccesorCannotHaveOptionalParameter);\n          }\n\n          if (firstParameter.type === \"RestElement\") {\n            this.raise(this.state.pos, TSErrors.SetAccesorCannotHaveRestParameter);\n          }\n        }\n\n        if (method.typeAnnotation) {\n          this.raise(method.typeAnnotation.start, TSErrors.SetAccesorCannotHaveReturnType);\n        }\n      } else {\n        method.kind = \"method\";\n      }\n\n      return this.finishNode(method, \"TSMethodSignature\");\n    } else {\n      const property = nodeAny;\n      if (readonly) property.readonly = true;\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) property.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(property, \"TSPropertySignature\");\n    }\n  }\n\n  tsParseTypeMember() {\n    const node = this.startNode();\n\n    if (this.match(types$1.parenL) || this.isRelational(\"<\")) {\n      return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n    }\n\n    if (this.match(types$1._new)) {\n      const id = this.startNode();\n      this.next();\n\n      if (this.match(types$1.parenL) || this.isRelational(\"<\")) {\n        return this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\", node);\n      } else {\n        node.key = this.createIdentifier(id, \"new\");\n        return this.tsParsePropertyOrMethodSignature(node, false);\n      }\n    }\n\n    this.tsParseModifiers(node, [\"readonly\"], [\"declare\", \"abstract\", \"private\", \"protected\", \"public\", \"static\", \"override\"], TSErrors.InvalidModifierOnTypeMember);\n    const idx = this.tsTryParseIndexSignature(node);\n\n    if (idx) {\n      return idx;\n    }\n\n    this.parsePropertyName(node, false);\n\n    if (!node.computed && node.key.type === \"Identifier\" && (node.key.name === \"get\" || node.key.name === \"set\") && this.tsTokenCanFollowModifier()) {\n      node.kind = node.key.name;\n      this.parsePropertyName(node, false);\n    }\n\n    return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n  }\n\n  tsParseTypeLiteral() {\n    const node = this.startNode();\n    node.members = this.tsParseObjectTypeMembers();\n    return this.finishNode(node, \"TSTypeLiteral\");\n  }\n\n  tsParseObjectTypeMembers() {\n    this.expect(types$1.braceL);\n    const members = this.tsParseList(\"TypeMembers\", this.tsParseTypeMember.bind(this));\n    this.expect(types$1.braceR);\n    return members;\n  }\n\n  tsIsStartOfMappedType() {\n    this.next();\n\n    if (this.eat(types$1.plusMin)) {\n      return this.isContextual(\"readonly\");\n    }\n\n    if (this.isContextual(\"readonly\")) {\n      this.next();\n    }\n\n    if (!this.match(types$1.bracketL)) {\n      return false;\n    }\n\n    this.next();\n\n    if (!this.tsIsIdentifier()) {\n      return false;\n    }\n\n    this.next();\n    return this.match(types$1._in);\n  }\n\n  tsParseMappedTypeParameter() {\n    const node = this.startNode();\n    node.name = this.tsParseTypeParameterName();\n    node.constraint = this.tsExpectThenParseType(types$1._in);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsParseMappedType() {\n    const node = this.startNode();\n    this.expect(types$1.braceL);\n\n    if (this.match(types$1.plusMin)) {\n      node.readonly = this.state.value;\n      this.next();\n      this.expectContextual(\"readonly\");\n    } else if (this.eatContextual(\"readonly\")) {\n      node.readonly = true;\n    }\n\n    this.expect(types$1.bracketL);\n    node.typeParameter = this.tsParseMappedTypeParameter();\n    node.nameType = this.eatContextual(\"as\") ? this.tsParseType() : null;\n    this.expect(types$1.bracketR);\n\n    if (this.match(types$1.plusMin)) {\n      node.optional = this.state.value;\n      this.next();\n      this.expect(types$1.question);\n    } else if (this.eat(types$1.question)) {\n      node.optional = true;\n    }\n\n    node.typeAnnotation = this.tsTryParseType();\n    this.semicolon();\n    this.expect(types$1.braceR);\n    return this.finishNode(node, \"TSMappedType\");\n  }\n\n  tsParseTupleType() {\n    const node = this.startNode();\n    node.elementTypes = this.tsParseBracketedList(\"TupleElementTypes\", this.tsParseTupleElementType.bind(this), true, false);\n    let seenOptionalElement = false;\n    let labeledElements = null;\n    node.elementTypes.forEach(elementNode => {\n      var _labeledElements;\n\n      let {\n        type\n      } = elementNode;\n\n      if (seenOptionalElement && type !== \"TSRestType\" && type !== \"TSOptionalType\" && !(type === \"TSNamedTupleMember\" && elementNode.optional)) {\n        this.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);\n      }\n\n      seenOptionalElement = seenOptionalElement || type === \"TSNamedTupleMember\" && elementNode.optional || type === \"TSOptionalType\";\n\n      if (type === \"TSRestType\") {\n        elementNode = elementNode.typeAnnotation;\n        type = elementNode.type;\n      }\n\n      const isLabeled = type === \"TSNamedTupleMember\";\n      labeledElements = (_labeledElements = labeledElements) != null ? _labeledElements : isLabeled;\n\n      if (labeledElements !== isLabeled) {\n        this.raise(elementNode.start, TSErrors.MixedLabeledAndUnlabeledElements);\n      }\n    });\n    return this.finishNode(node, \"TSTupleType\");\n  }\n\n  tsParseTupleElementType() {\n    const {\n      start: startPos,\n      startLoc\n    } = this.state;\n    const rest = this.eat(types$1.ellipsis);\n    let type = this.tsParseType();\n    const optional = this.eat(types$1.question);\n    const labeled = this.eat(types$1.colon);\n\n    if (labeled) {\n      const labeledNode = this.startNodeAtNode(type);\n      labeledNode.optional = optional;\n\n      if (type.type === \"TSTypeReference\" && !type.typeParameters && type.typeName.type === \"Identifier\") {\n        labeledNode.label = type.typeName;\n      } else {\n        this.raise(type.start, TSErrors.InvalidTupleMemberLabel);\n        labeledNode.label = type;\n      }\n\n      labeledNode.elementType = this.tsParseType();\n      type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n    } else if (optional) {\n      const optionalTypeNode = this.startNodeAtNode(type);\n      optionalTypeNode.typeAnnotation = type;\n      type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n    }\n\n    if (rest) {\n      const restNode = this.startNodeAt(startPos, startLoc);\n      restNode.typeAnnotation = type;\n      type = this.finishNode(restNode, \"TSRestType\");\n    }\n\n    return type;\n  }\n\n  tsParseParenthesizedType() {\n    const node = this.startNode();\n    this.expect(types$1.parenL);\n    node.typeAnnotation = this.tsParseType();\n    this.expect(types$1.parenR);\n    return this.finishNode(node, \"TSParenthesizedType\");\n  }\n\n  tsParseFunctionOrConstructorType(type, abstract) {\n    const node = this.startNode();\n\n    if (type === \"TSConstructorType\") {\n      node.abstract = !!abstract;\n      if (abstract) this.next();\n      this.next();\n    }\n\n    this.tsFillSignature(types$1.arrow, node);\n    return this.finishNode(node, type);\n  }\n\n  tsParseLiteralTypeNode() {\n    const node = this.startNode();\n\n    node.literal = (() => {\n      switch (this.state.type) {\n        case types$1.num:\n        case types$1.bigint:\n        case types$1.string:\n        case types$1._true:\n        case types$1._false:\n          return this.parseExprAtom();\n\n        default:\n          throw this.unexpected();\n      }\n    })();\n\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  tsParseTemplateLiteralType() {\n    const node = this.startNode();\n    node.literal = this.parseTemplate(false);\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  parseTemplateSubstitution() {\n    if (this.state.inType) return this.tsParseType();\n    return super.parseTemplateSubstitution();\n  }\n\n  tsParseThisTypeOrThisTypePredicate() {\n    const thisKeyword = this.tsParseThisTypeNode();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      return this.tsParseThisTypePredicate(thisKeyword);\n    } else {\n      return thisKeyword;\n    }\n  }\n\n  tsParseNonArrayType() {\n    switch (this.state.type) {\n      case types$1.name:\n      case types$1._void:\n      case types$1._null:\n        {\n          const type = this.match(types$1._void) ? \"TSVoidKeyword\" : this.match(types$1._null) ? \"TSNullKeyword\" : keywordTypeFromName(this.state.value);\n\n          if (type !== undefined && this.lookaheadCharCode() !== 46) {\n            const node = this.startNode();\n            this.next();\n            return this.finishNode(node, type);\n          }\n\n          return this.tsParseTypeReference();\n        }\n\n      case types$1.string:\n      case types$1.num:\n      case types$1.bigint:\n      case types$1._true:\n      case types$1._false:\n        return this.tsParseLiteralTypeNode();\n\n      case types$1.plusMin:\n        if (this.state.value === \"-\") {\n          const node = this.startNode();\n          const nextToken = this.lookahead();\n\n          if (nextToken.type !== types$1.num && nextToken.type !== types$1.bigint) {\n            throw this.unexpected();\n          }\n\n          node.literal = this.parseMaybeUnary();\n          return this.finishNode(node, \"TSLiteralType\");\n        }\n\n        break;\n\n      case types$1._this:\n        return this.tsParseThisTypeOrThisTypePredicate();\n\n      case types$1._typeof:\n        return this.tsParseTypeQuery();\n\n      case types$1._import:\n        return this.tsParseImportType();\n\n      case types$1.braceL:\n        return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\n\n      case types$1.bracketL:\n        return this.tsParseTupleType();\n\n      case types$1.parenL:\n        return this.tsParseParenthesizedType();\n\n      case types$1.backQuote:\n        return this.tsParseTemplateLiteralType();\n    }\n\n    throw this.unexpected();\n  }\n\n  tsParseArrayTypeOrHigher() {\n    let type = this.tsParseNonArrayType();\n\n    while (!this.hasPrecedingLineBreak() && this.eat(types$1.bracketL)) {\n      if (this.match(types$1.bracketR)) {\n        const node = this.startNodeAtNode(type);\n        node.elementType = type;\n        this.expect(types$1.bracketR);\n        type = this.finishNode(node, \"TSArrayType\");\n      } else {\n        const node = this.startNodeAtNode(type);\n        node.objectType = type;\n        node.indexType = this.tsParseType();\n        this.expect(types$1.bracketR);\n        type = this.finishNode(node, \"TSIndexedAccessType\");\n      }\n    }\n\n    return type;\n  }\n\n  tsParseTypeOperator(operator) {\n    const node = this.startNode();\n    this.expectContextual(operator);\n    node.operator = operator;\n    node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n    if (operator === \"readonly\") {\n      this.tsCheckTypeAnnotationForReadOnly(node);\n    }\n\n    return this.finishNode(node, \"TSTypeOperator\");\n  }\n\n  tsCheckTypeAnnotationForReadOnly(node) {\n    switch (node.typeAnnotation.type) {\n      case \"TSTupleType\":\n      case \"TSArrayType\":\n        return;\n\n      default:\n        this.raise(node.start, TSErrors.UnexpectedReadonly);\n    }\n  }\n\n  tsParseInferType() {\n    const node = this.startNode();\n    this.expectContextual(\"infer\");\n    const typeParameter = this.startNode();\n    typeParameter.name = this.tsParseTypeParameterName();\n    node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n    return this.finishNode(node, \"TSInferType\");\n  }\n\n  tsParseTypeOperatorOrHigher() {\n    const operator = [\"keyof\", \"unique\", \"readonly\"].find(kw => this.isContextual(kw));\n    return operator ? this.tsParseTypeOperator(operator) : this.isContextual(\"infer\") ? this.tsParseInferType() : this.tsParseArrayTypeOrHigher();\n  }\n\n  tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {\n    const node = this.startNode();\n    const hasLeadingOperator = this.eat(operator);\n    const types = [];\n\n    do {\n      types.push(parseConstituentType());\n    } while (this.eat(operator));\n\n    if (types.length === 1 && !hasLeadingOperator) {\n      return types[0];\n    }\n\n    node.types = types;\n    return this.finishNode(node, kind);\n  }\n\n  tsParseIntersectionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\", this.tsParseTypeOperatorOrHigher.bind(this), types$1.bitwiseAND);\n  }\n\n  tsParseUnionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSUnionType\", this.tsParseIntersectionTypeOrHigher.bind(this), types$1.bitwiseOR);\n  }\n\n  tsIsStartOfFunctionType() {\n    if (this.isRelational(\"<\")) {\n      return true;\n    }\n\n    return this.match(types$1.parenL) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\n  }\n\n  tsSkipParameterStart() {\n    if (this.match(types$1.name) || this.match(types$1._this)) {\n      this.next();\n      return true;\n    }\n\n    if (this.match(types$1.braceL)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(types$1.braceL)) {\n          ++braceStackCounter;\n        } else if (this.match(types$1.braceR)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    if (this.match(types$1.bracketL)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(types$1.bracketL)) {\n          ++braceStackCounter;\n        } else if (this.match(types$1.bracketR)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  tsIsUnambiguouslyStartOfFunctionType() {\n    this.next();\n\n    if (this.match(types$1.parenR) || this.match(types$1.ellipsis)) {\n      return true;\n    }\n\n    if (this.tsSkipParameterStart()) {\n      if (this.match(types$1.colon) || this.match(types$1.comma) || this.match(types$1.question) || this.match(types$1.eq)) {\n        return true;\n      }\n\n      if (this.match(types$1.parenR)) {\n        this.next();\n\n        if (this.match(types$1.arrow)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  tsParseTypeOrTypePredicateAnnotation(returnToken) {\n    return this.tsInType(() => {\n      const t = this.startNode();\n      this.expect(returnToken);\n      const node = this.startNode();\n      const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));\n\n      if (asserts && this.match(types$1._this)) {\n        let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n\n        if (thisTypePredicate.type === \"TSThisType\") {\n          node.parameterName = thisTypePredicate;\n          node.asserts = true;\n          node.typeAnnotation = null;\n          thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n        } else {\n          this.resetStartLocationFromNode(thisTypePredicate, node);\n          thisTypePredicate.asserts = true;\n        }\n\n        t.typeAnnotation = thisTypePredicate;\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n      if (!typePredicateVariable) {\n        if (!asserts) {\n          return this.tsParseTypeAnnotation(false, t);\n        }\n\n        node.parameterName = this.parseIdentifier();\n        node.asserts = asserts;\n        node.typeAnnotation = null;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const type = this.tsParseTypeAnnotation(false);\n      node.parameterName = typePredicateVariable;\n      node.typeAnnotation = type;\n      node.asserts = asserts;\n      t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    });\n  }\n\n  tsTryParseTypeOrTypePredicateAnnotation() {\n    return this.match(types$1.colon) ? this.tsParseTypeOrTypePredicateAnnotation(types$1.colon) : undefined;\n  }\n\n  tsTryParseTypeAnnotation() {\n    return this.match(types$1.colon) ? this.tsParseTypeAnnotation() : undefined;\n  }\n\n  tsTryParseType() {\n    return this.tsEatThenParseType(types$1.colon);\n  }\n\n  tsParseTypePredicatePrefix() {\n    const id = this.parseIdentifier();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      this.next();\n      return id;\n    }\n  }\n\n  tsParseTypePredicateAsserts() {\n    if (!this.match(types$1.name) || this.state.value !== \"asserts\" || this.hasPrecedingLineBreak()) {\n      return false;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    this.next();\n\n    if (!this.match(types$1.name) && !this.match(types$1._this)) {\n      return false;\n    }\n\n    if (containsEsc) {\n      this.raise(this.state.lastTokStart, ErrorMessages.InvalidEscapedReservedWord, \"asserts\");\n    }\n\n    return true;\n  }\n\n  tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {\n    this.tsInType(() => {\n      if (eatColon) this.expect(types$1.colon);\n      t.typeAnnotation = this.tsParseType();\n    });\n    return this.finishNode(t, \"TSTypeAnnotation\");\n  }\n\n  tsParseType() {\n    assert(this.state.inType);\n    const type = this.tsParseNonConditionalType();\n\n    if (this.hasPrecedingLineBreak() || !this.eat(types$1._extends)) {\n      return type;\n    }\n\n    const node = this.startNodeAtNode(type);\n    node.checkType = type;\n    node.extendsType = this.tsParseNonConditionalType();\n    this.expect(types$1.question);\n    node.trueType = this.tsParseType();\n    this.expect(types$1.colon);\n    node.falseType = this.tsParseType();\n    return this.finishNode(node, \"TSConditionalType\");\n  }\n\n  isAbstractConstructorSignature() {\n    return this.isContextual(\"abstract\") && this.lookahead().type === types$1._new;\n  }\n\n  tsParseNonConditionalType() {\n    if (this.tsIsStartOfFunctionType()) {\n      return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n    }\n\n    if (this.match(types$1._new)) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n    } else if (this.isAbstractConstructorSignature()) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\", true);\n    }\n\n    return this.tsParseUnionTypeOrHigher();\n  }\n\n  tsParseTypeAssertion() {\n    const node = this.startNode();\n\n    const _const = this.tsTryNextParseConstantContext();\n\n    node.typeAnnotation = _const || this.tsNextThenParseType();\n    this.expectRelational(\">\");\n    node.expression = this.parseMaybeUnary();\n    return this.finishNode(node, \"TSTypeAssertion\");\n  }\n\n  tsParseHeritageClause(descriptor) {\n    const originalStart = this.state.start;\n    const delimitedList = this.tsParseDelimitedList(\"HeritageClauseElement\", this.tsParseExpressionWithTypeArguments.bind(this));\n\n    if (!delimitedList.length) {\n      this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);\n    }\n\n    return delimitedList;\n  }\n\n  tsParseExpressionWithTypeArguments() {\n    const node = this.startNode();\n    node.expression = this.tsParseEntityName(false);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n  }\n\n  tsParseInterfaceDeclaration(node) {\n    if (this.match(types$1.name)) {\n      node.id = this.parseIdentifier();\n      this.checkLVal(node.id, \"typescript interface declaration\", BIND_TS_INTERFACE);\n    } else {\n      node.id = null;\n      this.raise(this.state.start, TSErrors.MissingInterfaceName);\n    }\n\n    node.typeParameters = this.tsTryParseTypeParameters();\n\n    if (this.eat(types$1._extends)) {\n      node.extends = this.tsParseHeritageClause(\"extends\");\n    }\n\n    const body = this.startNode();\n    body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n    node.body = this.finishNode(body, \"TSInterfaceBody\");\n    return this.finishNode(node, \"TSInterfaceDeclaration\");\n  }\n\n  tsParseTypeAliasDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript type alias\", BIND_TS_TYPE);\n    node.typeParameters = this.tsTryParseTypeParameters();\n    node.typeAnnotation = this.tsInType(() => {\n      this.expect(types$1.eq);\n\n      if (this.isContextual(\"intrinsic\") && this.lookahead().type !== types$1.dot) {\n        const node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"TSIntrinsicKeyword\");\n      }\n\n      return this.tsParseType();\n    });\n    this.semicolon();\n    return this.finishNode(node, \"TSTypeAliasDeclaration\");\n  }\n\n  tsInNoContext(cb) {\n    const oldContext = this.state.context;\n    this.state.context = [oldContext[0]];\n\n    try {\n      return cb();\n    } finally {\n      this.state.context = oldContext;\n    }\n  }\n\n  tsInType(cb) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.inType = oldInType;\n    }\n  }\n\n  tsEatThenParseType(token) {\n    return !this.match(token) ? undefined : this.tsNextThenParseType();\n  }\n\n  tsExpectThenParseType(token) {\n    return this.tsDoThenParseType(() => this.expect(token));\n  }\n\n  tsNextThenParseType() {\n    return this.tsDoThenParseType(() => this.next());\n  }\n\n  tsDoThenParseType(cb) {\n    return this.tsInType(() => {\n      cb();\n      return this.tsParseType();\n    });\n  }\n\n  tsParseEnumMember() {\n    const node = this.startNode();\n    node.id = this.match(types$1.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n\n    if (this.eat(types$1.eq)) {\n      node.initializer = this.parseMaybeAssignAllowIn();\n    }\n\n    return this.finishNode(node, \"TSEnumMember\");\n  }\n\n  tsParseEnumDeclaration(node, isConst) {\n    if (isConst) node.const = true;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript enum declaration\", isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM);\n    this.expect(types$1.braceL);\n    node.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this));\n    this.expect(types$1.braceR);\n    return this.finishNode(node, \"TSEnumDeclaration\");\n  }\n\n  tsParseModuleBlock() {\n    const node = this.startNode();\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(types$1.braceL);\n    this.parseBlockOrModuleBlockBody(node.body = [], undefined, true, types$1.braceR);\n    this.scope.exit();\n    return this.finishNode(node, \"TSModuleBlock\");\n  }\n\n  tsParseModuleOrNamespaceDeclaration(node, nested = false) {\n    node.id = this.parseIdentifier();\n\n    if (!nested) {\n      this.checkLVal(node.id, \"module or namespace declaration\", BIND_TS_NAMESPACE);\n    }\n\n    if (this.eat(types$1.dot)) {\n      const inner = this.startNode();\n      this.tsParseModuleOrNamespaceDeclaration(inner, true);\n      node.body = inner;\n    } else {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseAmbientExternalModuleDeclaration(node) {\n    if (this.isContextual(\"global\")) {\n      node.global = true;\n      node.id = this.parseIdentifier();\n    } else if (this.match(types$1.string)) {\n      node.id = this.parseExprAtom();\n    } else {\n      this.unexpected();\n    }\n\n    if (this.match(types$1.braceL)) {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    } else {\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseImportEqualsDeclaration(node, isExport) {\n    node.isExport = isExport || false;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"import equals declaration\", BIND_LEXICAL);\n    this.expect(types$1.eq);\n    const moduleReference = this.tsParseModuleReference();\n\n    if (node.importKind === \"type\" && moduleReference.type !== \"TSExternalModuleReference\") {\n      this.raise(moduleReference.start, TSErrors.ImportAliasHasImportType);\n    }\n\n    node.moduleReference = moduleReference;\n    this.semicolon();\n    return this.finishNode(node, \"TSImportEqualsDeclaration\");\n  }\n\n  tsIsExternalModuleReference() {\n    return this.isContextual(\"require\") && this.lookaheadCharCode() === 40;\n  }\n\n  tsParseModuleReference() {\n    return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);\n  }\n\n  tsParseExternalModuleReference() {\n    const node = this.startNode();\n    this.expectContextual(\"require\");\n    this.expect(types$1.parenL);\n\n    if (!this.match(types$1.string)) {\n      throw this.unexpected();\n    }\n\n    node.expression = this.parseExprAtom();\n    this.expect(types$1.parenR);\n    return this.finishNode(node, \"TSExternalModuleReference\");\n  }\n\n  tsLookAhead(f) {\n    const state = this.state.clone();\n    const res = f();\n    this.state = state;\n    return res;\n  }\n\n  tsTryParseAndCatch(f) {\n    const result = this.tryParse(abort => f() || abort());\n    if (result.aborted || !result.node) return undefined;\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  tsTryParse(f) {\n    const state = this.state.clone();\n    const result = f();\n\n    if (result !== undefined && result !== false) {\n      return result;\n    } else {\n      this.state = state;\n      return undefined;\n    }\n  }\n\n  tsTryParseDeclare(nany) {\n    if (this.isLineTerminator()) {\n      return;\n    }\n\n    let starttype = this.state.type;\n    let kind;\n\n    if (this.isContextual(\"let\")) {\n      starttype = types$1._var;\n      kind = \"let\";\n    }\n\n    return this.tsInAmbientContext(() => {\n      switch (starttype) {\n        case types$1._function:\n          nany.declare = true;\n          return this.parseFunctionStatement(nany, false, true);\n\n        case types$1._class:\n          nany.declare = true;\n          return this.parseClass(nany, true, false);\n\n        case types$1._const:\n          if (this.match(types$1._const) && this.isLookaheadContextual(\"enum\")) {\n            this.expect(types$1._const);\n            this.expectContextual(\"enum\");\n            return this.tsParseEnumDeclaration(nany, true);\n          }\n\n        case types$1._var:\n          kind = kind || this.state.value;\n          return this.parseVarStatement(nany, kind);\n\n        case types$1.name:\n          {\n            const value = this.state.value;\n\n            if (value === \"global\") {\n              return this.tsParseAmbientExternalModuleDeclaration(nany);\n            } else {\n              return this.tsParseDeclaration(nany, value, true);\n            }\n          }\n      }\n    });\n  }\n\n  tsTryParseExportDeclaration() {\n    return this.tsParseDeclaration(this.startNode(), this.state.value, true);\n  }\n\n  tsParseExpressionStatement(node, expr) {\n    switch (expr.name) {\n      case \"declare\":\n        {\n          const declaration = this.tsTryParseDeclare(node);\n\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n\n          break;\n        }\n\n      case \"global\":\n        if (this.match(types$1.braceL)) {\n          this.scope.enter(SCOPE_TS_MODULE);\n          this.prodParam.enter(PARAM);\n          const mod = node;\n          mod.global = true;\n          mod.id = expr;\n          mod.body = this.tsParseModuleBlock();\n          this.scope.exit();\n          this.prodParam.exit();\n          return this.finishNode(mod, \"TSModuleDeclaration\");\n        }\n\n        break;\n\n      default:\n        return this.tsParseDeclaration(node, expr.name, false);\n    }\n  }\n\n  tsParseDeclaration(node, value, next) {\n    switch (value) {\n      case \"abstract\":\n        if (this.tsCheckLineTerminator(next) && (this.match(types$1._class) || this.match(types$1.name))) {\n          return this.tsParseAbstractDeclaration(node);\n        }\n\n        break;\n\n      case \"enum\":\n        if (next || this.match(types$1.name)) {\n          if (next) this.next();\n          return this.tsParseEnumDeclaration(node, false);\n        }\n\n        break;\n\n      case \"interface\":\n        if (this.tsCheckLineTerminator(next) && this.match(types$1.name)) {\n          return this.tsParseInterfaceDeclaration(node);\n        }\n\n        break;\n\n      case \"module\":\n        if (this.tsCheckLineTerminator(next)) {\n          if (this.match(types$1.string)) {\n            return this.tsParseAmbientExternalModuleDeclaration(node);\n          } else if (this.match(types$1.name)) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n        }\n\n        break;\n\n      case \"namespace\":\n        if (this.tsCheckLineTerminator(next) && this.match(types$1.name)) {\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n\n        break;\n\n      case \"type\":\n        if (this.tsCheckLineTerminator(next) && this.match(types$1.name)) {\n          return this.tsParseTypeAliasDeclaration(node);\n        }\n\n        break;\n    }\n  }\n\n  tsCheckLineTerminator(next) {\n    if (next) {\n      if (this.hasFollowingLineBreak()) return false;\n      this.next();\n      return true;\n    }\n\n    return !this.isLineTerminator();\n  }\n\n  tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {\n    if (!this.isRelational(\"<\")) {\n      return undefined;\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = true;\n    const res = this.tsTryParseAndCatch(() => {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.typeParameters = this.tsParseTypeParameters();\n      super.parseFunctionParams(node);\n      node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n      this.expect(types$1.arrow);\n      return node;\n    });\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    if (!res) {\n      return undefined;\n    }\n\n    return this.parseArrowExpression(res, null, true);\n  }\n\n  tsParseTypeArguments() {\n    const node = this.startNode();\n    node.params = this.tsInType(() => this.tsInNoContext(() => {\n      this.expectRelational(\"<\");\n      return this.tsParseDelimitedList(\"TypeParametersOrArguments\", this.tsParseType.bind(this));\n    }));\n\n    if (node.params.length === 0) {\n      this.raise(node.start, TSErrors.EmptyTypeArguments);\n    }\n\n    this.expectRelational(\">\");\n    return this.finishNode(node, \"TSTypeParameterInstantiation\");\n  }\n\n  tsIsDeclarationStart() {\n    if (this.match(types$1.name)) {\n      switch (this.state.value) {\n        case \"abstract\":\n        case \"declare\":\n        case \"enum\":\n        case \"interface\":\n        case \"module\":\n        case \"namespace\":\n        case \"type\":\n          return true;\n      }\n    }\n\n    return false;\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.tsIsDeclarationStart()) return false;\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let accessibility;\n    let readonly = false;\n    let override = false;\n\n    if (allowModifiers !== undefined) {\n      const modified = {};\n      this.tsParseModifiers(modified, [\"public\", \"private\", \"protected\", \"override\", \"readonly\"]);\n      accessibility = modified.accessibility;\n      override = modified.override;\n      readonly = modified.readonly;\n\n      if (allowModifiers === false && (accessibility || readonly || override)) {\n        this.raise(startPos, TSErrors.UnexpectedParameterModifier);\n      }\n    }\n\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (accessibility || readonly || override) {\n      const pp = this.startNodeAt(startPos, startLoc);\n\n      if (decorators.length) {\n        pp.decorators = decorators;\n      }\n\n      if (accessibility) pp.accessibility = accessibility;\n      if (readonly) pp.readonly = readonly;\n      if (override) pp.override = override;\n\n      if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n        this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);\n      }\n\n      pp.parameter = elt;\n      return this.finishNode(pp, \"TSParameterProperty\");\n    }\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(types$1.colon)) {\n      node.returnType = this.tsParseTypeOrTypePredicateAnnotation(types$1.colon);\n    }\n\n    const bodilessType = type === \"FunctionDeclaration\" ? \"TSDeclareFunction\" : type === \"ClassMethod\" ? \"TSDeclareMethod\" : undefined;\n\n    if (bodilessType && !this.match(types$1.braceL) && this.isLineTerminator()) {\n      this.finishNode(node, bodilessType);\n      return;\n    }\n\n    if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n      this.raise(node.start, TSErrors.DeclareFunctionHasImplementation);\n\n      if (node.declare) {\n        super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        return;\n      }\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.body && node.id) {\n      this.checkLVal(node.id, \"function name\", BIND_TS_AMBIENT);\n    } else {\n      super.registerFunctionStatementId(...arguments);\n    }\n  }\n\n  tsCheckForInvalidTypeCasts(items) {\n    items.forEach(node => {\n      if ((node == null ? void 0 : node.type) === \"TSTypeCastExpression\") {\n        this.raise(node.typeAnnotation.start, TSErrors.UnexpectedTypeAnnotation);\n      }\n    });\n  }\n\n  toReferencedList(exprList, isInParens) {\n    this.tsCheckForInvalidTypeCasts(exprList);\n    return exprList;\n  }\n\n  parseArrayLike(...args) {\n    const node = super.parseArrayLike(...args);\n\n    if (node.type === \"ArrayExpression\") {\n      this.tsCheckForInvalidTypeCasts(node.elements);\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!this.hasPrecedingLineBreak() && this.match(types$1.bang)) {\n      this.state.exprAllowed = false;\n      this.next();\n      const nonNullExpression = this.startNodeAt(startPos, startLoc);\n      nonNullExpression.expression = base;\n      return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n    }\n\n    let isOptionalCall = false;\n\n    if (this.match(types$1.questionDot) && this.lookaheadCharCode() === 60) {\n      if (noCalls) {\n        state.stop = true;\n        return base;\n      }\n\n      state.optionalChainMember = isOptionalCall = true;\n      this.next();\n    }\n\n    if (this.isRelational(\"<\")) {\n      let missingParenErrorPos;\n      const result = this.tsTryParseAndCatch(() => {\n        if (!noCalls && this.atPossibleAsyncArrow(base)) {\n          const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);\n\n          if (asyncArrowFn) {\n            return asyncArrowFn;\n          }\n        }\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        const typeArguments = this.tsParseTypeArguments();\n\n        if (typeArguments) {\n          if (isOptionalCall && !this.match(types$1.parenL)) {\n            missingParenErrorPos = this.state.pos;\n            this.unexpected();\n          }\n\n          if (!noCalls && this.eat(types$1.parenL)) {\n            node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n            node.typeParameters = typeArguments;\n\n            if (state.optionalChainMember) {\n              node.optional = isOptionalCall;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          } else if (this.match(types$1.backQuote)) {\n            const result = this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n            result.typeParameters = typeArguments;\n            return result;\n          }\n        }\n\n        this.unexpected();\n      });\n\n      if (missingParenErrorPos) {\n        this.unexpected(missingParenErrorPos, types$1.parenL);\n      }\n\n      if (result) return result;\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n  }\n\n  parseNewArguments(node) {\n    if (this.isRelational(\"<\")) {\n      const typeParameters = this.tsTryParseAndCatch(() => {\n        const args = this.tsParseTypeArguments();\n        if (!this.match(types$1.parenL)) this.unexpected();\n        return args;\n      });\n\n      if (typeParameters) {\n        node.typeParameters = typeParameters;\n      }\n    }\n\n    super.parseNewArguments(node);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    if (nonNull(types$1._in.binop) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual(\"as\")) {\n      const node = this.startNodeAt(leftStartPos, leftStartLoc);\n      node.expression = left;\n\n      const _const = this.tsTryNextParseConstantContext();\n\n      if (_const) {\n        node.typeAnnotation = _const;\n      } else {\n        node.typeAnnotation = this.tsNextThenParseType();\n      }\n\n      this.finishNode(node, \"TSAsExpression\");\n      this.reScan_lt_gt();\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {}\n\n  checkDuplicateExports() {}\n\n  parseImport(node) {\n    node.importKind = \"value\";\n\n    if (this.match(types$1.name) || this.match(types$1.star) || this.match(types$1.braceL)) {\n      let ahead = this.lookahead();\n\n      if (this.isContextual(\"type\") && ahead.type !== types$1.comma && !(ahead.type === types$1.name && ahead.value === \"from\") && ahead.type !== types$1.eq) {\n        node.importKind = \"type\";\n        this.next();\n        ahead = this.lookahead();\n      }\n\n      if (this.match(types$1.name) && ahead.type === types$1.eq) {\n        return this.tsParseImportEqualsDeclaration(node);\n      }\n    }\n\n    const importNode = super.parseImport(node);\n\n    if (importNode.importKind === \"type\" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === \"ImportDefaultSpecifier\") {\n      this.raise(importNode.start, TSErrors.TypeImportCannotSpecifyDefaultAndNamed);\n    }\n\n    return importNode;\n  }\n\n  parseExport(node) {\n    if (this.match(types$1._import)) {\n      this.next();\n\n      if (this.isContextual(\"type\") && this.lookaheadCharCode() !== 61) {\n        node.importKind = \"type\";\n        this.next();\n      } else {\n        node.importKind = \"value\";\n      }\n\n      return this.tsParseImportEqualsDeclaration(node, true);\n    } else if (this.eat(types$1.eq)) {\n      const assign = node;\n      assign.expression = this.parseExpression();\n      this.semicolon();\n      return this.finishNode(assign, \"TSExportAssignment\");\n    } else if (this.eatContextual(\"as\")) {\n      const decl = node;\n      this.expectContextual(\"namespace\");\n      decl.id = this.parseIdentifier();\n      this.semicolon();\n      return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n    } else {\n      if (this.isContextual(\"type\") && this.lookahead().type === types$1.braceL) {\n        this.next();\n        node.exportKind = \"type\";\n      } else {\n        node.exportKind = \"value\";\n      }\n\n      return super.parseExport(node);\n    }\n  }\n\n  isAbstractClass() {\n    return this.isContextual(\"abstract\") && this.lookahead().type === types$1._class;\n  }\n\n  parseExportDefaultExpression() {\n    if (this.isAbstractClass()) {\n      const cls = this.startNode();\n      this.next();\n      cls.abstract = true;\n      this.parseClass(cls, true, true);\n      return cls;\n    }\n\n    if (this.state.value === \"interface\") {\n      const interfaceNode = this.startNode();\n      this.next();\n      const result = this.tsParseInterfaceDeclaration(interfaceNode);\n      if (result) return result;\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseStatementContent(context, topLevel) {\n    if (this.state.type === types$1._const) {\n      const ahead = this.lookahead();\n\n      if (ahead.type === types$1.name && ahead.value === \"enum\") {\n        const node = this.startNode();\n        this.expect(types$1._const);\n        this.expectContextual(\"enum\");\n        return this.tsParseEnumDeclaration(node, true);\n      }\n    }\n\n    return super.parseStatementContent(context, topLevel);\n  }\n\n  parseAccessModifier() {\n    return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n  }\n\n  tsHasSomeModifiers(member, modifiers) {\n    return modifiers.some(modifier => {\n      if (tsIsAccessModifier(modifier)) {\n        return member.accessibility === modifier;\n      }\n\n      return !!member[modifier];\n    });\n  }\n\n  parseClassMember(classBody, member, state) {\n    const invalidModifersForStaticBlocks = [\"declare\", \"private\", \"public\", \"protected\", \"override\", \"abstract\", \"readonly\"];\n    this.tsParseModifiers(member, invalidModifersForStaticBlocks.concat([\"static\"]));\n\n    const callParseClassMemberWithIsStatic = () => {\n      const isStatic = !!member.static;\n\n      if (isStatic && this.eat(types$1.braceL)) {\n        if (this.tsHasSomeModifiers(member, invalidModifersForStaticBlocks)) {\n          this.raise(this.state.pos, TSErrors.StaticBlockCannotHaveModifier);\n        }\n\n        this.parseClassStaticBlock(classBody, member);\n      } else {\n        this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n      }\n    };\n\n    if (member.declare) {\n      this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n    } else {\n      callParseClassMemberWithIsStatic();\n    }\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const idx = this.tsTryParseIndexSignature(member);\n\n    if (idx) {\n      classBody.body.push(idx);\n\n      if (member.abstract) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAbstract);\n      }\n\n      if (member.accessibility) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAccessibility, member.accessibility);\n      }\n\n      if (member.declare) {\n        this.raise(member.start, TSErrors.IndexSignatureHasDeclare);\n      }\n\n      if (member.override) {\n        this.raise(member.start, TSErrors.IndexSignatureHasOverride);\n      }\n\n      return;\n    }\n\n    if (!this.state.inAbstractClass && member.abstract) {\n      this.raise(member.start, TSErrors.NonAbstractClassHasAbstractMethod);\n    }\n\n    if (member.override) {\n      if (!state.hadSuperClass) {\n        this.raise(member.start, TSErrors.OverrideNotInSubClass);\n      }\n    }\n\n    super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {\n    const optional = this.eat(types$1.question);\n    if (optional) methodOrProp.optional = true;\n\n    if (methodOrProp.readonly && this.match(types$1.parenL)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);\n    }\n\n    if (methodOrProp.declare && this.match(types$1.parenL)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);\n    }\n  }\n\n  parseExpressionStatement(node, expr) {\n    const decl = expr.type === \"Identifier\" ? this.tsParseExpressionStatement(node, expr) : undefined;\n    return decl || super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.tsIsDeclarationStart()) return true;\n    return super.shouldParseExportDeclaration();\n  }\n\n  parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n    if (!this.state.maybeInArrowParameters || !this.match(types$1.question)) {\n      return super.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n    }\n\n    const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));\n\n    if (!result.node) {\n      if (result.error) {\n        super.setOptionalParametersError(refExpressionErrors, result.error);\n      }\n\n      return expr;\n    }\n\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(types$1.question)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(types$1.colon)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  parseExportDeclaration(node) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isDeclare = this.eatContextual(\"declare\");\n\n    if (isDeclare && (this.isContextual(\"declare\") || !this.shouldParseExportDeclaration())) {\n      throw this.raise(this.state.start, TSErrors.ExpectedAmbientAfterExportDeclare);\n    }\n\n    let declaration;\n\n    if (this.match(types$1.name)) {\n      declaration = this.tsTryParseExportDeclaration();\n    }\n\n    if (!declaration) {\n      declaration = super.parseExportDeclaration(node);\n    }\n\n    if (declaration && (declaration.type === \"TSInterfaceDeclaration\" || declaration.type === \"TSTypeAliasDeclaration\" || isDeclare)) {\n      node.exportKind = \"type\";\n    }\n\n    if (declaration && isDeclare) {\n      this.resetStartLocation(declaration, startPos, startLoc);\n      declaration.declare = true;\n    }\n\n    return declaration;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    if ((!isStatement || optionalId) && this.isContextual(\"implements\")) {\n      return;\n    }\n\n    super.parseClassId(node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n  }\n\n  parseClassPropertyAnnotation(node) {\n    if (!node.optional && this.eat(types$1.bang)) {\n      node.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n  }\n\n  parseClassProperty(node) {\n    this.parseClassPropertyAnnotation(node);\n\n    if (this.state.isAmbientContext && this.match(types$1.eq)) {\n      this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);\n    }\n\n    if (node.abstract && this.match(types$1.eq)) {\n      const {\n        key\n      } = node;\n      this.raise(this.state.start, TSErrors.AbstractPropertyHasInitializer, key.type === \"Identifier\" && !node.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`);\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (node.abstract) {\n      this.raise(node.start, TSErrors.PrivateElementHasAbstract);\n    }\n\n    if (node.accessibility) {\n      this.raise(node.start, TSErrors.PrivateElementHasAccessibility, node.accessibility);\n    }\n\n    this.parseClassPropertyAnnotation(node);\n    return super.parseClassPrivateProperty(node);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    const typeParameters = this.tsTryParseTypeParameters();\n\n    if (typeParameters && isConstructor) {\n      this.raise(typeParameters.start, TSErrors.ConstructorHasTypeParameters);\n    }\n\n    if (method.declare && (method.kind === \"get\" || method.kind === \"set\")) {\n      this.raise(method.start, TSErrors.DeclareAccessor, method.kind);\n    }\n\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.isRelational(\"<\")) {\n      node.superTypeParameters = this.tsParseTypeArguments();\n    }\n\n    if (this.eatContextual(\"implements\")) {\n      node.implements = this.tsParseHeritageClause(\"implements\");\n    }\n  }\n\n  parseObjPropValue(prop, ...args) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) prop.typeParameters = typeParameters;\n    super.parseObjPropValue(prop, ...args);\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (decl.id.type === \"Identifier\" && this.eat(types$1.bang)) {\n      decl.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      decl.id.typeAnnotation = type;\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(types$1.colon)) {\n      node.returnType = this.tsParseTypeAnnotation();\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  parseMaybeAssign(...args) {\n    var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2, _jsx4, _typeCast3;\n\n    let state;\n    let jsx;\n    let typeCast;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(types$1.jsxTagStart) || this.isRelational(\"<\"))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n\n      if (context[context.length - 1] === types.j_oTag) {\n        context.length -= 2;\n      } else if (context[context.length - 1] === types.j_expr) {\n        context.length -= 1;\n      }\n    }\n\n    if (!((_jsx = jsx) != null && _jsx.error) && !this.isRelational(\"<\")) {\n      return super.parseMaybeAssign(...args);\n    }\n\n    let typeParameters;\n    state = state || this.state.clone();\n    const arrow = this.tryParse(abort => {\n      var _expr$extra, _typeParameters;\n\n      typeParameters = this.tsParseTypeParameters();\n      const expr = super.parseMaybeAssign(...args);\n\n      if (expr.type !== \"ArrowFunctionExpression\" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {\n        abort();\n      }\n\n      if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {\n        this.resetStartLocationFromNode(expr, typeParameters);\n      }\n\n      expr.typeParameters = typeParameters;\n      return expr;\n    }, state);\n    if (!arrow.error && !arrow.aborted) return arrow.node;\n\n    if (!jsx) {\n      assert(!this.hasPlugin(\"jsx\"));\n      typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!typeCast.error) return typeCast.node;\n    }\n\n    if ((_jsx2 = jsx) != null && _jsx2.node) {\n      this.state = jsx.failState;\n      return jsx.node;\n    }\n\n    if (arrow.node) {\n      this.state = arrow.failState;\n      return arrow.node;\n    }\n\n    if ((_typeCast = typeCast) != null && _typeCast.node) {\n      this.state = typeCast.failState;\n      return typeCast.node;\n    }\n\n    if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n    if (arrow.thrown) throw arrow.error;\n    if ((_typeCast2 = typeCast) != null && _typeCast2.thrown) throw typeCast.error;\n    throw ((_jsx4 = jsx) == null ? void 0 : _jsx4.error) || arrow.error || ((_typeCast3 = typeCast) == null ? void 0 : _typeCast3.error);\n  }\n\n  parseMaybeUnary(refExpressionErrors) {\n    if (!this.hasPlugin(\"jsx\") && this.isRelational(\"<\")) {\n      return this.tsParseTypeAssertion();\n    } else {\n      return super.parseMaybeUnary(refExpressionErrors);\n    }\n  }\n\n  parseArrow(node) {\n    if (this.match(types$1.colon)) {\n      const result = this.tryParse(abort => {\n        const returnType = this.tsParseTypeOrTypePredicateAnnotation(types$1.colon);\n        if (this.canInsertSemicolon() || !this.match(types$1.arrow)) abort();\n        return returnType;\n      });\n      if (result.aborted) return;\n\n      if (!result.thrown) {\n        if (result.error) this.state = result.failState;\n        node.returnType = result.node;\n      }\n    }\n\n    return super.parseArrow(node);\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(types$1.question)) {\n      if (param.type !== \"Identifier\" && !this.state.isAmbientContext && !this.state.inType) {\n        this.raise(param.start, TSErrors.PatternIsOptional);\n      }\n\n      param.optional = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) param.typeAnnotation = type;\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return this.isAssignable(node.expression, isBinding);\n\n      case \"TSParameterProperty\":\n        return true;\n\n      default:\n        return super.isAssignable(node, isBinding);\n    }\n  }\n\n  toAssignable(node, isLHS = false) {\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return super.toAssignable(this.typeCastToParameter(node), isLHS);\n\n      case \"TSParameterProperty\":\n        return super.toAssignable(node, isLHS);\n\n      case \"ParenthesizedExpression\":\n        return this.toAssignableParenthesizedExpression(node, isLHS);\n\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        node.expression = this.toAssignable(node.expression, isLHS);\n        return node;\n\n      default:\n        return super.toAssignable(node, isLHS);\n    }\n  }\n\n  toAssignableParenthesizedExpression(node, isLHS) {\n    switch (node.expression.type) {\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n      case \"ParenthesizedExpression\":\n        node.expression = this.toAssignable(node.expression, isLHS);\n        return node;\n\n      default:\n        return super.toAssignable(node, isLHS);\n    }\n  }\n\n  checkLVal(expr, contextDescription, ...args) {\n    var _expr$extra2;\n\n    switch (expr.type) {\n      case \"TSTypeCastExpression\":\n        return;\n\n      case \"TSParameterProperty\":\n        this.checkLVal(expr.parameter, \"parameter property\", ...args);\n        return;\n\n      case \"TSAsExpression\":\n      case \"TSTypeAssertion\":\n        if (!args[0] && contextDescription !== \"parenthesized expression\" && !((_expr$extra2 = expr.extra) != null && _expr$extra2.parenthesized)) {\n          this.raise(expr.start, ErrorMessages.InvalidLhs, contextDescription);\n          break;\n        }\n\n        this.checkLVal(expr.expression, \"parenthesized expression\", ...args);\n        return;\n\n      case \"TSNonNullExpression\":\n        this.checkLVal(expr.expression, contextDescription, ...args);\n        return;\n\n      default:\n        super.checkLVal(expr, contextDescription, ...args);\n        return;\n    }\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types$1._this:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsParseTypeArguments();\n\n      if (this.match(types$1.parenL)) {\n        const call = super.parseMaybeDecoratorArguments(expr);\n        call.typeParameters = typeArguments;\n        return call;\n      }\n\n      this.unexpected(this.state.start, types$1.parenL);\n    }\n\n    return super.parseMaybeDecoratorArguments(expr);\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.state.isAmbientContext && this.match(types$1.comma) && this.lookaheadCharCode() === close) {\n      this.next();\n    } else {\n      super.checkCommaAfterRest(close);\n    }\n  }\n\n  isClassMethod() {\n    return this.isRelational(\"<\") || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(types$1.bang) || this.match(types$1.colon) || super.isClassProperty();\n  }\n\n  parseMaybeDefault(...args) {\n    const node = super.parseMaybeDefault(...args);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, TSErrors.TypeAnnotationAfterAssign);\n    }\n\n    return node;\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(types$1.relational, 1);\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  reScan_lt_gt() {\n    if (this.match(types$1.relational)) {\n      const code = this.input.charCodeAt(this.state.start);\n\n      if (code === 60 || code === 62) {\n        this.state.pos -= 1;\n        this.readToken_lt_gt(code);\n      }\n    }\n  }\n\n  toAssignableList(exprList) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n      if (!expr) continue;\n\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          exprList[i] = this.typeCastToParameter(expr);\n          break;\n\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n          if (!this.state.maybeInArrowParameters) {\n            exprList[i] = this.typeCastToParameter(expr);\n          } else {\n            this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);\n          }\n\n          break;\n      }\n    }\n\n    return super.toAssignableList(...arguments);\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  shouldParseArrow(params) {\n    if (this.match(types$1.colon)) {\n      return params.every(expr => this.isAssignable(expr, true));\n    }\n\n    return super.shouldParseArrow(params);\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types$1.colon) || super.shouldParseAsyncArrow();\n  }\n\n  canHaveLeadingDecorator() {\n    return super.canHaveLeadingDecorator() || this.isAbstractClass();\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArguments());\n      if (typeArguments) node.typeParameters = typeArguments;\n    }\n\n    return super.jsxParseOpeningElementAfterName(node);\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    const baseCount = super.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const firstParam = params[0];\n    const hasContextParam = firstParam && this.isThisParam(firstParam);\n    return hasContextParam ? baseCount + 1 : baseCount;\n  }\n\n  parseCatchClauseParam() {\n    const param = super.parseCatchClauseParam();\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      param.typeAnnotation = type;\n      this.resetEndLocation(param);\n    }\n\n    return param;\n  }\n\n  tsInAmbientContext(cb) {\n    const oldIsAmbientContext = this.state.isAmbientContext;\n    this.state.isAmbientContext = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.isAmbientContext = oldIsAmbientContext;\n    }\n  }\n\n  parseClass(node, ...args) {\n    const oldInAbstractClass = this.state.inAbstractClass;\n    this.state.inAbstractClass = !!node.abstract;\n\n    try {\n      return super.parseClass(node, ...args);\n    } finally {\n      this.state.inAbstractClass = oldInAbstractClass;\n    }\n  }\n\n  tsParseAbstractDeclaration(node) {\n    if (this.match(types$1._class)) {\n      node.abstract = true;\n      return this.parseClass(node, true, false);\n    } else if (this.isContextual(\"interface\")) {\n      if (!this.hasFollowingLineBreak()) {\n        node.abstract = true;\n        this.raise(node.start, TSErrors.NonClassMethodPropertyHasAbstractModifer);\n        this.next();\n        return this.tsParseInterfaceDeclaration(node);\n      }\n    } else {\n      this.unexpected(null, types$1._class);\n    }\n  }\n\n  parseMethod(...args) {\n    const method = super.parseMethod(...args);\n\n    if (method.abstract) {\n      const hasBody = this.hasPlugin(\"estree\") ? !!method.value.body : !!method.body;\n\n      if (hasBody) {\n        const {\n          key\n        } = method;\n        this.raise(method.start, TSErrors.AbstractMethodHasImplementation, key.type === \"Identifier\" && !method.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`);\n      }\n    }\n\n    return method;\n  }\n\n  tsParseTypeParameterName() {\n    const typeName = this.parseIdentifier();\n    return typeName.name;\n  }\n\n  shouldParseAsAmbientContext() {\n    return !!this.getPluginOption(\"typescript\", \"dts\");\n  }\n\n  parse() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n\n    return super.parse();\n  }\n\n  getExpression() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n\n    return super.getExpression();\n  }\n\n});\n\ntypes$1.placeholder = new TokenType(\"%%\", {\n  startsExpr: true\n});\nconst PlaceHolderErrors = makeErrorTemplates({\n  ClassNameIsRequired: \"A class name is required.\"\n}, ErrorCodes.SyntaxError);\nvar placeholders = (superClass => class extends superClass {\n  parsePlaceholder(expectedNode) {\n    if (this.match(types$1.placeholder)) {\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      node.name = super.parseIdentifier(true);\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      this.expect(types$1.placeholder);\n      return this.finishPlaceholder(node, expectedNode);\n    }\n  }\n\n  finishPlaceholder(node, expectedNode) {\n    const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n    node.expectedNode = expectedNode;\n    return isFinished ? node : this.finishNode(node, \"Placeholder\");\n  }\n\n  getTokenFromCode(code) {\n    if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {\n      return this.finishOp(types$1.placeholder, 2);\n    }\n\n    return super.getTokenFromCode(...arguments);\n  }\n\n  parseExprAtom() {\n    return this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments);\n  }\n\n  parseIdentifier() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(...arguments);\n  }\n\n  checkReservedWord(word) {\n    if (word !== undefined) super.checkReservedWord(...arguments);\n  }\n\n  parseBindingAtom() {\n    return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments);\n  }\n\n  checkLVal(expr) {\n    if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n  }\n\n  toAssignable(node) {\n    if (node && node.type === \"Placeholder\" && node.expectedNode === \"Expression\") {\n      node.expectedNode = \"Pattern\";\n      return node;\n    }\n\n    return super.toAssignable(...arguments);\n  }\n\n  isLet(context) {\n    if (super.isLet(context)) {\n      return true;\n    }\n\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n\n    if (context) return false;\n    const nextToken = this.lookahead();\n\n    if (nextToken.type === types$1.placeholder) {\n      return true;\n    }\n\n    return false;\n  }\n\n  verifyBreakContinue(node) {\n    if (node.label && node.label.type === \"Placeholder\") return;\n    super.verifyBreakContinue(...arguments);\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type !== \"Placeholder\" || expr.extra && expr.extra.parenthesized) {\n      return super.parseExpressionStatement(...arguments);\n    }\n\n    if (this.match(types$1.colon)) {\n      const stmt = node;\n      stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n      this.next();\n      stmt.body = this.parseStatement(\"label\");\n      return this.finishNode(stmt, \"LabeledStatement\");\n    }\n\n    this.semicolon();\n    node.name = expr.name;\n    return this.finishPlaceholder(node, \"Statement\");\n  }\n\n  parseBlock() {\n    return this.parsePlaceholder(\"BlockStatement\") || super.parseBlock(...arguments);\n  }\n\n  parseFunctionId() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(...arguments);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n\n    if (placeholder) {\n      if (this.match(types$1._extends) || this.match(types$1.placeholder) || this.match(types$1.braceL)) {\n        node.id = placeholder;\n      } else if (optionalId || !isStatement) {\n        node.id = null;\n        node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n        return this.finishNode(node, type);\n      } else {\n        this.unexpected(null, PlaceHolderErrors.ClassNameIsRequired);\n      }\n    } else {\n      this.parseClassId(node, isStatement, optionalId);\n    }\n\n    this.parseClassSuper(node);\n    node.body = this.parsePlaceholder(\"ClassBody\") || this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, type);\n  }\n\n  parseExport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseExport(...arguments);\n\n    if (!this.isContextual(\"from\") && !this.match(types$1.comma)) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    this.expectPlugin(\"exportDefaultFrom\");\n    const specifier = this.startNode();\n    specifier.exported = placeholder;\n    node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n    return super.parseExport(node);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types$1._default)) {\n      const next = this.nextTokenStart();\n\n      if (this.isUnparsedContextual(next, \"from\")) {\n        if (this.input.startsWith(types$1.placeholder.label, this.nextTokenStartSince(next + 4))) {\n          return true;\n        }\n      }\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (node.specifiers && node.specifiers.length > 0) {\n      return true;\n    }\n\n    return super.maybeParseExportDefaultSpecifier(...arguments);\n  }\n\n  checkExport(node) {\n    const {\n      specifiers\n    } = node;\n\n    if (specifiers != null && specifiers.length) {\n      node.specifiers = specifiers.filter(node => node.exported.type === \"Placeholder\");\n    }\n\n    super.checkExport(node);\n    node.specifiers = specifiers;\n  }\n\n  parseImport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseImport(...arguments);\n    node.specifiers = [];\n\n    if (!this.isContextual(\"from\") && !this.match(types$1.comma)) {\n      node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    const specifier = this.startNodeAtNode(placeholder);\n    specifier.local = placeholder;\n    this.finishNode(specifier, \"ImportDefaultSpecifier\");\n    node.specifiers.push(specifier);\n\n    if (this.eat(types$1.comma)) {\n      const hasStarImport = this.maybeParseStarImportSpecifier(node);\n      if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n    }\n\n    this.expectContextual(\"from\");\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    return this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource(...arguments);\n  }\n\n});\n\nvar v8intrinsic = (superClass => class extends superClass {\n  parseV8Intrinsic() {\n    if (this.match(types$1.modulo)) {\n      const v8IntrinsicStart = this.state.start;\n      const node = this.startNode();\n      this.eat(types$1.modulo);\n\n      if (this.match(types$1.name)) {\n        const name = this.parseIdentifierName(this.state.start);\n        const identifier = this.createIdentifier(node, name);\n        identifier.type = \"V8IntrinsicIdentifier\";\n\n        if (this.match(types$1.parenL)) {\n          return identifier;\n        }\n      }\n\n      this.unexpected(v8IntrinsicStart);\n    }\n  }\n\n  parseExprAtom() {\n    return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n  }\n\n});\n\nfunction hasPlugin(plugins, name) {\n  return plugins.some(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n}\nfunction getPluginOption(plugins, name, option) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\nfunction validatePlugins(plugins) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");\n    }\n\n    const decoratorsBeforeExport = getPluginOption(plugins, \"decorators\", \"decoratorsBeforeExport\");\n\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" + \" whose value must be a boolean. If you are migrating from\" + \" Babylon/Babel 6 or want to use the old decorators proposal, you\" + \" should use the 'decorators-legacy' plugin instead of 'decorators'.\");\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(`\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`);\n    }\n\n    const tupleSyntaxIsHash = hasPlugin(plugins, \"recordAndTuple\") && getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\") === \"hash\";\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\"Cannot combine placeholders plugin and Hack-style pipes.\");\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\"Cannot combine v8intrinsic plugin and Hack-style pipes.\");\n      }\n\n      const topicToken = getPluginOption(plugins, \"pipelineOperator\", \"topicToken\");\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n        throw new Error(`\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`);\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error('Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.');\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error('Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.');\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\"Cannot combine importAssertions and moduleAttributes plugins.\");\n      }\n\n      const moduleAttributesVerionPluginOption = getPluginOption(plugins, \"moduleAttributes\", \"version\");\n\n      if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n        throw new Error(\"The 'moduleAttributes' plugin requires a 'version' option,\" + \" representing the last proposal update. Currently, the\" + \" only supported value is 'may-2020'.\");\n      }\n    }\n  }\n\n  if (hasPlugin(plugins, \"recordAndTuple\") && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"))) {\n    throw new Error(\"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" + RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"));\n  }\n\n  if (hasPlugin(plugins, \"asyncDoExpressions\") && !hasPlugin(plugins, \"doExpressions\")) {\n    const error = new Error(\"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\");\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n}\nconst mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders\n};\nconst mixinPluginNames = Object.keys(mixinPlugins);\n\nconst defaultOptions = {\n  sourceType: \"script\",\n  sourceFilename: undefined,\n  startLine: 1,\n  allowAwaitOutsideFunction: false,\n  allowReturnOutsideFunction: false,\n  allowImportExportEverywhere: false,\n  allowSuperOutsideMethod: false,\n  allowUndeclaredExports: false,\n  plugins: [],\n  strictMode: null,\n  ranges: false,\n  tokens: false,\n  createParenthesizedExpressions: false,\n  errorRecovery: false,\n  attachComment: true\n};\nfunction getOptions(opts) {\n  const options = {};\n\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n\n  return options;\n}\n\nconst unwrapParenthesizedExpression = node => {\n  return node.type === \"ParenthesizedExpression\" ? unwrapParenthesizedExpression(node.expression) : node;\n};\n\nclass LValParser extends NodeUtils {\n  toAssignable(node, isLHS = false) {\n    var _node$extra, _node$extra3;\n\n    let parenthesized = undefined;\n\n    if (node.type === \"ParenthesizedExpression\" || (_node$extra = node.extra) != null && _node$extra.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n\n      if (isLHS) {\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordParenthesizedIdentifierError(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n        }\n      } else {\n        this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n\n        for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {\n          var _node$extra2;\n\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (isLast && prop.type === \"RestElement\" && (_node$extra2 = node.extra) != null && _node$extra2.trailingComma) {\n            this.raiseRestNotLast(node.extra.trailingComma);\n          }\n        }\n\n        break;\n\n      case \"ObjectProperty\":\n        this.toAssignable(node.value, isLHS);\n        break;\n\n      case \"SpreadElement\":\n        {\n          this.checkToRestConversion(node);\n          node.type = \"RestElement\";\n          const arg = node.argument;\n          this.toAssignable(arg, isLHS);\n          break;\n        }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingComma, isLHS);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(node.left.end, ErrorMessages.MissingEqInAssignment);\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.toAssignable(parenthesized, isLHS);\n        break;\n    }\n\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(prop, isLast, isLHS) {\n    if (prop.type === \"ObjectMethod\") {\n      const error = prop.kind === \"get\" || prop.kind === \"set\" ? ErrorMessages.PatternHasAccessor : ErrorMessages.PatternHasMethod;\n      this.raise(prop.key.start, error);\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raiseRestNotLast(prop.start);\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaPos, isLHS) {\n    let end = exprList.length;\n\n    if (end) {\n      const last = exprList[end - 1];\n\n      if ((last == null ? void 0 : last.type) === \"RestElement\") {\n        --end;\n      } else if ((last == null ? void 0 : last.type) === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        let arg = last.argument;\n        this.toAssignable(arg, isLHS);\n        arg = unwrapParenthesizedExpression(arg);\n\n        if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\" && arg.type !== \"ObjectPattern\") {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaPos) {\n          this.raiseTrailingCommaAfterRest(trailingCommaPos);\n        }\n\n        --end;\n      }\n    }\n\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n\n      if (elt) {\n        this.toAssignable(elt, isLHS);\n\n        if (elt.type === \"RestElement\") {\n          this.raiseRestNotLast(elt.start);\n        }\n      }\n    }\n\n    return exprList;\n  }\n\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\":\n        {\n          const last = node.properties.length - 1;\n          return node.properties.every((prop, i) => {\n            return prop.type !== \"ObjectMethod\" && (i === last || prop.type !== \"SpreadElement\") && this.isAssignable(prop);\n          });\n        }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(element => element === null || this.isAssignable(element));\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    return exprList;\n  }\n\n  toReferencedListDeep(exprList, isParenthesizedExpr) {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if ((expr == null ? void 0 : expr.type) === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  parseSpread(refExpressionErrors, refNeedsArrowPos) {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined, refNeedsArrowPos);\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  parseRestBinding() {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types$1.bracketL:\n        {\n          const node = this.startNode();\n          this.next();\n          node.elements = this.parseBindingList(types$1.bracketR, 93, true);\n          return this.finishNode(node, \"ArrayPattern\");\n        }\n\n      case types$1.braceL:\n        return this.parseObjectLike(types$1.braceR, true);\n    }\n\n    return this.parseIdentifier();\n  }\n\n  parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma);\n      }\n\n      if (allowEmpty && this.match(types$1.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(types$1.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        this.checkCommaAfterRest(closeCharCode);\n        this.expect(close);\n        break;\n      } else {\n        const decorators = [];\n\n        if (this.match(types$1.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, ErrorMessages.UnsupportedParameterDecorator);\n        }\n\n        while (this.match(types$1.at)) {\n          decorators.push(this.parseDecorator());\n        }\n\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n\n    return elts;\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseAssignableListItemTypes(param) {\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    var _startLoc, _startPos, _left;\n\n    startLoc = (_startLoc = startLoc) != null ? _startLoc : this.state.startLoc;\n    startPos = (_startPos = startPos) != null ? _startPos : this.state.start;\n    left = (_left = left) != null ? _left : this.parseBindingAtom();\n    if (!this.eat(types$1.eq)) return left;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  checkLVal(expr, contextDescription, bindingType = BIND_NONE, checkClashes, disallowLetBinding, strictModeChanged = false) {\n    switch (expr.type) {\n      case \"Identifier\":\n        {\n          const {\n            name\n          } = expr;\n\n          if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(name, this.inModule) : isStrictBindOnlyReservedWord(name))) {\n            this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.StrictEvalArguments : ErrorMessages.StrictEvalArgumentsBinding, name);\n          }\n\n          if (checkClashes) {\n            if (checkClashes.has(name)) {\n              this.raise(expr.start, ErrorMessages.ParamDupe);\n            } else {\n              checkClashes.add(name);\n            }\n          }\n\n          if (disallowLetBinding && name === \"let\") {\n            this.raise(expr.start, ErrorMessages.LetInLexicalBinding);\n          }\n\n          if (!(bindingType & BIND_NONE)) {\n            this.scope.declareName(name, bindingType, expr.start);\n          }\n\n          break;\n        }\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(expr.start, ErrorMessages.InvalidPropertyBindingPattern);\n        }\n\n        break;\n\n      case \"ObjectPattern\":\n        for (let prop of expr.properties) {\n          if (this.isObjectProperty(prop)) prop = prop.value;else if (this.isObjectMethod(prop)) continue;\n          this.checkLVal(prop, \"object destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\n        }\n\n        break;\n\n      case \"ArrayPattern\":\n        for (const elem of expr.elements) {\n          if (elem) {\n            this.checkLVal(elem, \"array destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\n          }\n        }\n\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(expr.left, \"assignment pattern\", bindingType, checkClashes);\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(expr.argument, \"rest element\", bindingType, checkClashes);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(expr.expression, \"parenthesized expression\", bindingType, checkClashes);\n        break;\n\n      default:\n        {\n          this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.InvalidLhs : ErrorMessages.InvalidLhsBinding, contextDescription);\n        }\n    }\n  }\n\n  checkToRestConversion(node) {\n    if (node.argument.type !== \"Identifier\" && node.argument.type !== \"MemberExpression\") {\n      this.raise(node.argument.start, ErrorMessages.InvalidRestAssignmentPattern);\n    }\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.match(types$1.comma)) {\n      if (this.lookaheadCharCode() === close) {\n        this.raiseTrailingCommaAfterRest(this.state.start);\n      } else {\n        this.raiseRestNotLast(this.state.start);\n      }\n    }\n  }\n\n  raiseRestNotLast(pos) {\n    throw this.raise(pos, ErrorMessages.ElementAfterRest);\n  }\n\n  raiseTrailingCommaAfterRest(pos) {\n    this.raise(pos, ErrorMessages.RestTrailingComma);\n  }\n\n}\n\nclass ExpressionParser extends LValParser {\n  checkProto(prop, isRecord, protoRef, refExpressionErrors) {\n    if (prop.type === \"SpreadElement\" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) {\n      return;\n    }\n\n    const key = prop.key;\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(key.start, ErrorMessages.RecordNoProto);\n        return;\n      }\n\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          if (refExpressionErrors.doubleProto === -1) {\n            refExpressionErrors.doubleProto = key.start;\n          }\n        } else {\n          this.raise(key.start, ErrorMessages.DuplicateProto);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr, potentialArrowAt) {\n    return expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt;\n  }\n\n  getExpression() {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n\n    if (!this.match(types$1.eof)) {\n      this.unexpected();\n    }\n\n    this.finalizeRemainingComments();\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n\n    return expr;\n  }\n\n  parseExpression(disallowIn, refExpressionErrors) {\n    if (disallowIn) {\n      return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n    }\n\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  parseExpressionBase(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n\n    if (this.match(types$1.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n\n      while (this.eat(types$1.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n\n    return expr;\n  }\n\n  parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse) {\n    return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));\n  }\n\n  parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse) {\n    return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));\n  }\n\n  setOptionalParametersError(refExpressionErrors, resultError) {\n    var _resultError$pos;\n\n    refExpressionErrors.optionalParameters = (_resultError$pos = resultError == null ? void 0 : resultError.pos) != null ? _resultError$pos : this.state.start;\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    if (this.isContextual(\"yield\")) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n\n    if (this.match(types$1.parenL) || this.match(types$1.name)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n\n    if (this.state.type.isAssign) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n      const leftIsHackPipeExpression = left.type === \"BinaryExpression\" && left.operator === \"|>\" && this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"hack\";\n\n      if (leftIsHackPipeExpression) {\n        throw this.raise(this.state.start, ErrorMessages.PipeBodyIsTighter, operator);\n      }\n\n      if (this.match(types$1.eq)) {\n        node.left = this.toAssignable(left, true);\n        refExpressionErrors.doubleProto = -1;\n      } else {\n        node.left = left;\n      }\n\n      if (refExpressionErrors.shorthandAssign >= node.left.start) {\n        refExpressionErrors.shorthandAssign = -1;\n      }\n\n      this.checkLVal(left, \"assignment expression\");\n      this.next();\n      node.right = this.parseMaybeAssign();\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  parseMaybeConditional(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n    if (this.eat(types$1.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(types$1.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprOps(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnary(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    let prec = this.state.type.binop;\n\n    if (prec != null && (this.prodParam.hasIn || !this.match(types$1._in))) {\n      if (prec > minPrec) {\n        const op = this.state.type;\n\n        if (op === types$1.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n\n          this.checkPipelineAtInfixOperator(left, leftStartPos);\n        }\n\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n        const logical = op === types$1.logicalOR || op === types$1.logicalAND;\n        const coalesce = op === types$1.nullishCoalescing;\n\n        if (coalesce) {\n          prec = types$1.logicalAND.binop;\n        }\n\n        this.next();\n\n        if (op === types$1.pipeline && this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"minimal\") {\n          if (this.match(types$1.name) && this.state.value === \"await\" && this.prodParam.hasAwait) {\n            throw this.raise(this.state.start, ErrorMessages.UnexpectedAwaitAfterPipelineBody);\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(node, logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\");\n        const nextOp = this.state.type;\n\n        if (coalesce && (nextOp === types$1.logicalOR || nextOp === types$1.logicalAND) || logical && nextOp === types$1.nullishCoalescing) {\n          throw this.raise(this.state.start, ErrorMessages.MixingCoalesceWithLogical);\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n\n    return left;\n  }\n\n  parseExprOpRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    switch (op) {\n      case types$1.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              const bodyExpr = this.parseHackPipeBody(op, prec);\n              this.checkHackPipeBodyEarlyErrors(startPos);\n              return bodyExpr;\n            });\n\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              const childExpr = this.parseHackPipeBody(op, prec);\n              return this.parseSmartPipelineBodyInStyle(childExpr, startPos, startLoc);\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  parseExprOpBaseRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, op.rightAssociative ? prec - 1 : prec);\n  }\n\n  parseHackPipeBody(op, prec) {\n    const bodyIsInGeneratorContext = this.prodParam.hasYield;\n    const bodyIsYieldExpression = bodyIsInGeneratorContext && this.isContextual(\"yield\");\n\n    if (bodyIsYieldExpression) {\n      throw this.raise(this.state.start, ErrorMessages.PipeBodyIsTighter, this.state.value);\n    } else {\n      return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  checkExponentialAfterUnary(node) {\n    if (this.match(types$1.exponent)) {\n      this.raise(node.argument.start, ErrorMessages.UnexpectedTokenUnaryExponentiation);\n    }\n  }\n\n  parseMaybeUnary(refExpressionErrors, sawUnary) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(\"await\");\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startPos, startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n\n    const update = this.match(types$1.incDec);\n    const node = this.startNode();\n\n    if (this.state.type.prefix) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(types$1._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n\n      const isDelete = this.match(types$1._delete);\n      this.next();\n      node.argument = this.parseMaybeUnary(null, true);\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(node.start, ErrorMessages.StrictDelete);\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(node.start, ErrorMessages.DeletePrivateField);\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) this.checkExponentialAfterUnary(node);\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(node, update, refExpressionErrors);\n\n    if (isAwait) {\n      const startsExpr = this.hasPlugin(\"v8intrinsic\") ? this.state.type.startsExpr : this.state.type.startsExpr && !this.match(types$1.modulo);\n\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(startPos, ErrorMessages.AwaitNotInAsyncContext);\n        return this.parseAwait(startPos, startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  parseUpdate(node, update, refExpressionErrors) {\n    if (update) {\n      this.checkLVal(node.argument, \"prefix operation\");\n      return this.finishNode(node, \"UpdateExpression\");\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n\n    while (this.state.type.postfix && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprSubscripts(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false\n    };\n\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n\n    return base;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!noCalls && this.eat(types$1.doubleColon)) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (this.match(types$1.backQuote)) {\n      return this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (this.match(types$1.questionDot)) {\n      if (noCalls && this.lookaheadCharCode() === 40) {\n        state.stop = true;\n        return base;\n      }\n\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(types$1.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional);\n    } else if (optional || this.match(types$1.bracketL) || this.eat(types$1.dot)) {\n      return this.parseMember(base, startPos, startLoc, state, optional);\n    } else {\n      state.stop = true;\n      return base;\n    }\n  }\n\n  parseMember(base, startPos, startLoc, state, optional) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const computed = this.eat(types$1.bracketL);\n    node.object = base;\n    node.computed = computed;\n    const privateName = !computed && this.match(types$1.privateName) && this.state.value;\n    const property = computed ? this.parseExpression() : privateName ? this.parsePrivateName() : this.parseIdentifier(true);\n\n    if (privateName !== false) {\n      if (node.object.type === \"Super\") {\n        this.raise(startPos, ErrorMessages.SuperPrivateField);\n      }\n\n      this.classScope.usePrivateName(privateName, property.start);\n    }\n\n    node.property = property;\n\n    if (computed) {\n      this.expect(types$1.bracketR);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  parseBind(base, startPos, startLoc, noCalls, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startPos, startLoc, noCalls);\n  }\n\n  parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional) {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors = null;\n    this.state.maybeInArrowParameters = true;\n    this.next();\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n\n    if (state.maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(types$1.parenR);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(types$1.parenR, base.type === \"Import\", base.type !== \"Super\", node, refExpressionErrors);\n    }\n\n    this.finishCallExpression(node, state.optionalChainMember);\n\n    if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      state.stop = true;\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      node = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);\n    } else {\n      if (state.maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n\n      this.toReferencedArguments(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  toReferencedArguments(node, isParenthesizedExpr) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  parseTaggedTemplateExpression(base, startPos, startLoc, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n\n    if (state.optionalChainMember) {\n      this.raise(startPos, ErrorMessages.OptionalChainingNoTemplate);\n    }\n\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base) {\n    return base.type === \"Identifier\" && base.name === \"async\" && this.state.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;\n  }\n\n  finishCallExpression(node, optional) {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(node.start, ErrorMessages.ImportCallArity, this.hasPlugin(\"importAssertions\") || this.hasPlugin(\"moduleAttributes\") ? \"one or two arguments\" : \"one argument\");\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(arg.start, ErrorMessages.ImportCallSpreadArgument);\n          }\n        }\n      }\n    }\n\n    return this.finishNode(node, optional ? \"OptionalCallExpression\" : \"CallExpression\");\n  }\n\n  parseCallExpressionArguments(close, dynamicImport, allowPlaceholder, nodeForExtra, refExpressionErrors) {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma);\n\n        if (this.match(close)) {\n          if (dynamicImport && !this.hasPlugin(\"importAssertions\") && !this.hasPlugin(\"moduleAttributes\")) {\n            this.raise(this.state.lastTokStart, ErrorMessages.ImportCallArgumentTrailingComma);\n          }\n\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(false, refExpressionErrors, allowPlaceholder));\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return elts;\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types$1.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    var _call$extra;\n\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(types$1.arrow);\n    this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingComma);\n    setInnerComments(node, call.innerComments);\n    setInnerComments(node, call.callee.trailingComments);\n    return node;\n  }\n\n  parseNoCallExpr() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    let node;\n\n    switch (this.state.type) {\n      case types$1._super:\n        return this.parseSuper();\n\n      case types$1._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(types$1.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(types$1.parenL)) {\n          this.raise(this.state.lastTokStart, ErrorMessages.UnsupportedImport);\n        }\n\n        return this.finishNode(node, \"Import\");\n\n      case types$1._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case types$1.name:\n        {\n          if (this.isContextual(\"module\") && this.lookaheadCharCode() === 123 && !this.hasFollowingLineBreak()) {\n            return this.parseModuleExpression();\n          }\n\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (!containsEsc && id.name === \"async\" && !this.canInsertSemicolon()) {\n            if (this.match(types$1._function)) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseFunction(this.startNodeAtNode(id), undefined, true);\n            } else if (this.match(types$1.name)) {\n              if (this.lookaheadCharCode() === 61) {\n                return this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(id));\n              } else {\n                return id;\n              }\n            } else if (this.match(types$1._do)) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (canBeArrow && this.match(types$1.arrow) && !this.canInsertSemicolon()) {\n            this.next();\n            return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);\n          }\n\n          return id;\n        }\n\n      case types$1._do:\n        {\n          return this.parseDo(this.startNode(), false);\n        }\n\n      case types$1.slash:\n      case types$1.slashAssign:\n        {\n          this.readRegexp();\n          return this.parseRegExpLiteral(this.state.value);\n        }\n\n      case types$1.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case types$1.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case types$1.decimal:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case types$1.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case types$1._null:\n        return this.parseNullLiteral();\n\n      case types$1._true:\n        return this.parseBooleanLiteral(true);\n\n      case types$1._false:\n        return this.parseBooleanLiteral(false);\n\n      case types$1.parenL:\n        {\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          return this.parseParenAndDistinguishExpression(canBeArrow);\n        }\n\n      case types$1.bracketBarL:\n      case types$1.bracketHashL:\n        {\n          return this.parseArrayLike(this.state.type === types$1.bracketBarL ? types$1.bracketBarR : types$1.bracketR, false, true, refExpressionErrors);\n        }\n\n      case types$1.bracketL:\n        {\n          return this.parseArrayLike(types$1.bracketR, true, false, refExpressionErrors);\n        }\n\n      case types$1.braceBarL:\n      case types$1.braceHashL:\n        {\n          return this.parseObjectLike(this.state.type === types$1.braceBarL ? types$1.braceBarR : types$1.braceR, false, true, refExpressionErrors);\n        }\n\n      case types$1.braceL:\n        {\n          return this.parseObjectLike(types$1.braceR, false, false, refExpressionErrors);\n        }\n\n      case types$1._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case types$1.at:\n        this.parseDecorators();\n\n      case types$1._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case types$1._new:\n        return this.parseNewOrNewTarget();\n\n      case types$1.backQuote:\n        return this.parseTemplate(false);\n\n      case types$1.doubleColon:\n        {\n          node = this.startNode();\n          this.next();\n          node.object = null;\n          const callee = node.callee = this.parseNoCallExpr();\n\n          if (callee.type === \"MemberExpression\") {\n            return this.finishNode(node, \"BindExpression\");\n          } else {\n            throw this.raise(callee.start, ErrorMessages.UnsupportedBind);\n          }\n        }\n\n      case types$1.privateName:\n        {\n          const {\n            value,\n            start\n          } = this.state;\n          node = this.parsePrivateName();\n\n          if (this.match(types$1._in)) {\n            this.classScope.usePrivateName(value, start);\n          } else {\n            this.raise(start, ErrorMessages.PrivateInExpectedIn, value);\n          }\n\n          return node;\n        }\n\n      case types$1.moduloAssign:\n        if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"hack\" && this.getPluginOption(\"pipelineOperator\", \"topicToken\") === \"%\") {\n          this.state.value = \"%\";\n          this.state.type = types$1.modulo;\n          this.state.pos--;\n          this.state.end--;\n          this.state.endLoc.column--;\n        } else {\n          throw this.unexpected();\n        }\n\n      case types$1.modulo:\n      case types$1.hash:\n        {\n          const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n          if (pipeProposal) {\n            node = this.startNode();\n            const start = this.state.start;\n            const tokenType = this.state.type;\n            this.next();\n            return this.finishTopicReference(node, start, pipeProposal, tokenType);\n          }\n        }\n\n      case types$1.relational:\n        {\n          if (this.state.value === \"<\") {\n            const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n\n            if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {\n              this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n            }\n          }\n        }\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  finishTopicReference(node, start, pipeProposal, tokenType) {\n    if (this.testTopicReferenceConfiguration(pipeProposal, start, tokenType)) {\n      let nodeType;\n\n      if (pipeProposal === \"smart\") {\n        nodeType = \"PipelinePrimaryTopicReference\";\n      } else {\n        nodeType = \"TopicReference\";\n      }\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        if (pipeProposal === \"smart\") {\n          this.raise(start, ErrorMessages.PrimaryTopicNotAllowed);\n        } else {\n          this.raise(start, ErrorMessages.PipeTopicUnbound);\n        }\n      }\n\n      this.registerTopicReference();\n      return this.finishNode(node, nodeType);\n    } else {\n      throw this.raise(start, ErrorMessages.PipeTopicUnconfiguredToken, tokenType.label);\n    }\n  }\n\n  testTopicReferenceConfiguration(pipeProposal, start, tokenType) {\n    switch (pipeProposal) {\n      case \"hack\":\n        {\n          const pluginTopicToken = this.getPluginOption(\"pipelineOperator\", \"topicToken\");\n          return tokenType.label === pluginTopicToken;\n        }\n\n      case \"smart\":\n        return tokenType === types$1.hash;\n\n      default:\n        throw this.raise(start, ErrorMessages.PipeTopicRequiresHackPipes);\n    }\n  }\n\n  parseAsyncArrowUnaryFunction(node) {\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.pos, ErrorMessages.LineTerminatorBeforeArrow);\n    }\n\n    this.expect(types$1.arrow);\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  parseDo(node, isAsync) {\n    this.expectPlugin(\"doExpressions\");\n\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n\n    node.async = isAsync;\n    this.next();\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    if (isAsync) {\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  parseSuper() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(types$1.parenL) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(node.start, ErrorMessages.SuperNotAllowed);\n    } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(node.start, ErrorMessages.UnexpectedSuper);\n    }\n\n    if (!this.match(types$1.parenL) && !this.match(types$1.bracketL) && !this.match(types$1.dot)) {\n      this.raise(node.start, ErrorMessages.UnsupportedSuper);\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parseMaybePrivateName(isPrivateNameAllowed) {\n    const isPrivate = this.match(types$1.privateName);\n\n    if (isPrivate) {\n      if (!isPrivateNameAllowed) {\n        this.raise(this.state.start + 1, ErrorMessages.UnexpectedPrivateField);\n      }\n\n      return this.parsePrivateName();\n    } else {\n      return this.parseIdentifier(true);\n    }\n  }\n\n  parsePrivateName() {\n    const node = this.startNode();\n    const id = this.startNodeAt(this.state.start + 1, new Position(this.state.curLine, this.state.start + 1 - this.state.lineStart));\n    const name = this.state.value;\n    this.next();\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.prodParam.hasYield && this.match(types$1.dot)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"function\");\n      this.next();\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(node, meta, propertyName) {\n    node.meta = meta;\n\n    if (meta.name === \"function\" && propertyName === \"sent\") {\n      if (this.isContextual(propertyName)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        this.unexpected();\n      }\n    }\n\n    const containsEsc = this.state.containsEsc;\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(node.property.start, ErrorMessages.UnsupportedMetaProperty, meta.name, propertyName);\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  parseImportMetaProperty(node) {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next();\n\n    if (this.isContextual(\"meta\")) {\n      if (!this.inModule) {\n        this.raise(id.start, SourceTypeModuleErrorMessages.ImportMetaOutsideModule);\n      }\n\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode(value, type, node) {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n\n  parseLiteral(value, type) {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value) {\n    return this.parseLiteral(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value) {\n    return this.parseLiteral(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value) {\n    return this.parseLiteral(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value) {\n    return this.parseLiteral(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value) {\n    const node = this.parseLiteral(value.value, \"RegExpLiteral\");\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value) {\n    const node = this.startNode();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let val;\n    this.next();\n    this.expressionScope.enter(newArrowHeadScope());\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStart;\n    let optionalCommaStart;\n\n    while (!this.match(types$1.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma, refExpressionErrors.optionalParameters === -1 ? null : refExpressionErrors.optionalParameters);\n\n        if (this.match(types$1.parenR)) {\n          optionalCommaStart = this.state.start;\n          break;\n        }\n      }\n\n      if (this.match(types$1.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStart = this.state.start;\n        exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc));\n        this.checkCommaAfterRest(41);\n        break;\n      } else {\n        exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem));\n      }\n    }\n\n    const innerEndPos = this.state.lastTokEnd;\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(types$1.parenR);\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n\n    if (canBeArrow && this.shouldParseArrow(exprList) && (arrowNode = this.parseArrow(arrowNode))) {\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStart);\n    }\n\n    if (optionalCommaStart) this.unexpected(optionalCommaStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    this.checkExpressionErrors(refExpressionErrors, true);\n    this.toReferencedListDeep(exprList, true);\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNode(val, \"SequenceExpression\");\n      val.end = innerEndPos;\n      val.loc.end = innerEndLoc;\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  shouldParseArrow(params) {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node) {\n    if (this.eat(types$1.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    return node;\n  }\n\n  parseNewOrNewTarget() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(types$1.dot)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(metaProp.start, ErrorMessages.UnexpectedNewTarget);\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  parseNew(node) {\n    node.callee = this.parseNoCallExpr();\n\n    if (node.callee.type === \"Import\") {\n      this.raise(node.callee.start, ErrorMessages.ImportCallNotNewExpression);\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(this.state.lastTokEnd, ErrorMessages.OptionalChainingNoNew);\n    } else if (this.eat(types$1.questionDot)) {\n      this.raise(this.state.start, ErrorMessages.OptionalChainingNoNew);\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node) {\n    if (this.eat(types$1.parenL)) {\n      const args = this.parseExprList(types$1.parenR);\n      this.toReferencedList(args);\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  parseTemplateElement(isTagged) {\n    const elem = this.startNode();\n\n    if (this.state.value === null) {\n      if (!isTagged) {\n        this.raise(this.state.start + 1, ErrorMessages.InvalidEscapeSequenceTemplate);\n      }\n    }\n\n    elem.value = {\n      raw: this.input.slice(this.state.start, this.state.end).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.state.value\n    };\n    this.next();\n    elem.tail = this.match(types$1.backQuote);\n    return this.finishNode(elem, \"TemplateElement\");\n  }\n\n  parseTemplate(isTagged) {\n    const node = this.startNode();\n    this.next();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n\n    while (!curElt.tail) {\n      this.expect(types$1.dollarBraceL);\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.expect(types$1.braceR);\n      node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n    }\n\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  parseTemplateSubstitution() {\n    return this.parseExpression();\n  }\n\n  parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma);\n\n        if (this.match(close)) {\n          this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n          break;\n        }\n      }\n\n      const prop = this.parsePropertyDefinition(isPattern, refExpressionErrors);\n\n      if (!isPattern) {\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (isRecord && !this.isObjectProperty(prop) && prop.type !== \"SpreadElement\") {\n        this.raise(prop.start, ErrorMessages.InvalidRecordProperty);\n      }\n\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    this.next();\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n\n    return this.finishNode(node, type);\n  }\n\n  maybeAsyncOrAccessorProp(prop) {\n    return !prop.computed && prop.key.type === \"Identifier\" && (this.isLiteralPropertyName() || this.match(types$1.bracketL) || this.match(types$1.star));\n  }\n\n  parsePropertyDefinition(isPattern, refExpressionErrors) {\n    let decorators = [];\n\n    if (this.match(types$1.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(this.state.start, ErrorMessages.UnsupportedPropertyDecorator);\n      }\n\n      while (this.match(types$1.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isGenerator = false;\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(types$1.ellipsis)) {\n      if (decorators.length) this.unexpected();\n\n      if (isPattern) {\n        this.next();\n        prop.argument = this.parseIdentifier();\n        this.checkCommaAfterRest(125);\n        return this.finishNode(prop, \"RestElement\");\n      }\n\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (isPattern || refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    if (!isPattern) {\n      isGenerator = this.eat(types$1.star);\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, false);\n\n    if (!isPattern && !isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(types$1.star);\n        this.parsePropertyName(prop, false);\n      }\n\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n\n        if (this.match(types$1.star)) {\n          isGenerator = true;\n          this.raise(this.state.pos, ErrorMessages.AccessorIsGenerator, keyName);\n          this.next();\n        }\n\n        this.parsePropertyName(prop, false);\n      }\n    }\n\n    this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.params;\n  }\n\n  checkGetterSetterParams(method) {\n    var _params;\n\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const start = method.start;\n\n    if (params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, ErrorMessages.BadGetterArity);\n      } else {\n        this.raise(start, ErrorMessages.BadSetterArity);\n      }\n    }\n\n    if (method.kind === \"set\" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === \"RestElement\") {\n      this.raise(start, ErrorMessages.BadSetterRestParameter);\n    }\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    if (isAccessor) {\n      this.parseMethod(prop, isGenerator, false, false, false, \"ObjectMethod\");\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(types$1.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(prop, isGenerator, isAsync, false, false, \"ObjectMethod\");\n    }\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    prop.shorthand = false;\n\n    if (this.eat(types$1.colon)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      this.checkReservedWord(prop.key.name, prop.key.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startPos, startLoc, cloneIdentifier(prop.key));\n      } else if (this.match(types$1.eq) && refExpressionErrors) {\n        if (refExpressionErrors.shorthandAssign === -1) {\n          refExpressionErrors.shorthandAssign = this.state.start;\n        }\n\n        prop.value = this.parseMaybeDefault(startPos, startLoc, cloneIdentifier(prop.key));\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n\n      prop.shorthand = true;\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n    if (!node) this.unexpected();\n    return node;\n  }\n\n  parsePropertyName(prop, isPrivateNameAllowed) {\n    if (this.eat(types$1.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(types$1.bracketR);\n    } else {\n      const oldInPropertyName = this.state.inPropertyName;\n      this.state.inPropertyName = true;\n      const type = this.state.type;\n      prop.key = type === types$1.num || type === types$1.string || type === types$1.bigint || type === types$1.decimal ? this.parseExprAtom() : this.parseMaybePrivateName(isPrivateNameAllowed);\n\n      if (type !== types$1.privateName) {\n        prop.computed = false;\n      }\n\n      this.state.inPropertyName = oldInPropertyName;\n    }\n\n    return prop.key;\n  }\n\n  initFunction(node, isAsync) {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor;\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    return node;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(node, isTuple ? \"TupleExpression\" : \"ArrayExpression\");\n  }\n\n  parseArrowExpression(node, params, isAsync, trailingCommaPos) {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n\n    if (!this.match(types$1.bracketL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaPos);\n    }\n\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(node, params, trailingCommaPos) {\n    node.params = this.toAssignableList(params, trailingCommaPos, false);\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    const isExpression = allowExpression && !this.match(types$1.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(true, false, hasStrictModeDirective => {\n        const nonSimple = !this.isSimpleParamList(node.params);\n\n        if (hasStrictModeDirective && nonSimple) {\n          const errorPos = (node.kind === \"method\" || node.kind === \"constructor\") && !!node.key ? node.key.end : node.start;\n          this.raise(errorPos, ErrorMessages.IllegalLanguageModeDirective);\n        }\n\n        const strictModeChanged = !oldStrict && this.state.strict;\n        this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);\n\n        if (this.state.strict && node.id) {\n          this.checkLVal(node.id, \"function name\", BIND_OUTSIDE, undefined, undefined, strictModeChanged);\n        }\n      });\n      this.prodParam.exit();\n      this.expressionScope.exit();\n      this.state.labels = oldLabels;\n    }\n  }\n\n  isSimpleParamList(params) {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n\n    return true;\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {\n    const checkClashes = new Set();\n\n    for (const param of node.params) {\n      this.checkLVal(param, \"function parameter list\", BIND_VAR, allowDuplicates ? null : checkClashes, undefined, strictModeChanged);\n    }\n  }\n\n  parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma);\n\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n\n    return elts;\n  }\n\n  parseExprListItem(allowEmpty, refExpressionErrors, allowPlaceholder) {\n    let elt;\n\n    if (this.match(types$1.comma)) {\n      if (!allowEmpty) {\n        this.raise(this.state.pos, ErrorMessages.UnexpectedToken, \",\");\n      }\n\n      elt = null;\n    } else if (this.match(types$1.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(this.parseSpread(refExpressionErrors), spreadNodeStartPos, spreadNodeStartLoc);\n    } else if (this.match(types$1.question)) {\n      this.expectPlugin(\"partialApplication\");\n\n      if (!allowPlaceholder) {\n        this.raise(this.state.start, ErrorMessages.UnexpectedArgumentPlaceholder);\n      }\n\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem);\n    }\n\n    return elt;\n  }\n\n  parseIdentifier(liberal) {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node, name) {\n    node.name = name;\n    node.loc.identifierName = name;\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos, liberal) {\n    let name;\n    const {\n      start,\n      type\n    } = this.state;\n\n    if (type === types$1.name) {\n      name = this.state.value;\n    } else if (type.keyword) {\n      name = type.keyword;\n    } else {\n      throw this.unexpected();\n    }\n\n    if (liberal) {\n      this.state.type = types$1.name;\n    } else {\n      this.checkReservedWord(name, start, !!type.keyword, false);\n    }\n\n    this.next();\n    return name;\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (word.length > 10) {\n      return;\n    }\n\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(startLoc, ErrorMessages.YieldBindingIdentifier);\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(startLoc, ErrorMessages.AwaitBindingIdentifier);\n        return;\n      } else if (this.scope.inStaticBlock) {\n        this.raise(startLoc, ErrorMessages.AwaitBindingIdentifierInStaticBlock);\n        return;\n      } else {\n        this.expressionScope.recordAsyncArrowParametersError(startLoc, ErrorMessages.AwaitBindingIdentifier);\n      }\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(startLoc, ErrorMessages.ArgumentsInClass);\n        return;\n      }\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(startLoc, ErrorMessages.UnexpectedKeyword, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(startLoc, ErrorMessages.UnexpectedReservedWord, word);\n    }\n  }\n\n  isAwaitAllowed() {\n    if (this.prodParam.hasAwait) return true;\n\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n\n    return false;\n  }\n\n  parseAwait(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.AwaitExpressionFormalParameter);\n\n    if (this.eat(types$1.star)) {\n      this.raise(node.start, ErrorMessages.ObsoleteAwaitStar);\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait() {\n    return this.hasPrecedingLineBreak() || this.match(types$1.plusMin) || this.match(types$1.parenL) || this.match(types$1.bracketL) || this.match(types$1.backQuote) || this.match(types$1.regexp) || this.match(types$1.slash) || this.hasPlugin(\"v8intrinsic\") && this.match(types$1.modulo);\n  }\n\n  parseYield() {\n    const node = this.startNode();\n    this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.YieldInParameter);\n    this.next();\n    let delegating = false;\n    let argument = null;\n\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(types$1.star);\n\n      switch (this.state.type) {\n        case types$1.semi:\n        case types$1.eof:\n        case types$1.braceR:\n        case types$1.parenR:\n        case types$1.bracketR:\n        case types$1.braceBarR:\n        case types$1.colon:\n        case types$1.comma:\n          if (!delegating) break;\n\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  checkPipelineAtInfixOperator(left, leftStartPos) {\n    if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n      if (left.type === \"SequenceExpression\") {\n        this.raise(leftStartPos, ErrorMessages.PipelineHeadSequenceExpression);\n      }\n    }\n  }\n\n  checkHackPipeBodyEarlyErrors(startPos) {\n    if (this.match(types$1.arrow)) {\n      throw this.raise(this.state.start, ErrorMessages.PipeBodyIsTighter, types$1.arrow.label);\n    } else if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(startPos, ErrorMessages.PipeTopicUnused);\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpr, startPos, startLoc) {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n\n    if (this.isSimpleReference(childExpr)) {\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      this.checkSmartPipeTopicBodyEarlyErrors(startPos);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression) {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return !expression.computed && this.isSimpleReference(expression.object);\n\n      case \"Identifier\":\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  checkSmartPipeTopicBodyEarlyErrors(startPos) {\n    if (this.match(types$1.arrow)) {\n      throw this.raise(this.state.start, ErrorMessages.PipelineBodyNoArrow);\n    } else if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(startPos, ErrorMessages.PipelineTopicUnused);\n    }\n  }\n\n  withTopicBindingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 1,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withSmartMixTopicForbiddingContext(callback) {\n    const proposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (proposal === \"smart\") {\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        maxNumOfResolvableTopics: 0,\n        maxTopicIndex: null\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext(callback) {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  disallowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  registerTopicReference() {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext() {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext() {\n    return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;\n  }\n\n  parseFSharpPipelineBody(prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n    const ret = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, prec);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return ret;\n  }\n\n  parseModuleExpression() {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode();\n    this.next();\n    this.eat(types$1.braceL);\n    const revertScopes = this.initializeScopes(true);\n    this.enterInitialScopes();\n    const program = this.startNode();\n\n    try {\n      node.body = this.parseProgram(program, types$1.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n\n    this.eat(types$1.braceR);\n    return this.finishNode(node, \"ModuleExpression\");\n  }\n\n}\n\nconst loopLabel = {\n  kind: \"loop\"\n},\n      switchLabel = {\n  kind: \"switch\"\n};\nconst FUNC_NO_FLAGS = 0b000,\n      FUNC_STATEMENT = 0b001,\n      FUNC_HANGING_STATEMENT = 0b010,\n      FUNC_NULLABLE_ID = 0b100;\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\nfunction babel7CompatTokens(tokens) {\n  {\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n\n      if (token.type === types$1.privateName) {\n        const {\n          loc,\n          start,\n          value,\n          end\n        } = token;\n        const hashEndPos = start + 1;\n        const hashEndLoc = new Position(loc.start.line, loc.start.column + 1);\n        tokens.splice(i, 1, new Token({\n          type: types$1.hash,\n          value: \"#\",\n          start: start,\n          end: hashEndPos,\n          startLoc: loc.start,\n          endLoc: hashEndLoc\n        }), new Token({\n          type: types$1.name,\n          value: value,\n          start: hashEndPos,\n          end: end,\n          startLoc: hashEndLoc,\n          endLoc: loc.end\n        }));\n      }\n    }\n  }\n  return tokens;\n}\n\nclass StatementParser extends ExpressionParser {\n  parseTopLevel(file, program) {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n    if (this.options.tokens) file.tokens = babel7CompatTokens(this.tokens);\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(program, end = types$1.eof, sourceType = this.options.sourceType) {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n\n    if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {\n      for (const [name] of Array.from(this.scope.undefinedExports)) {\n        const pos = this.scope.undefinedExports.get(name);\n        this.raise(pos, ErrorMessages.ModuleExportUndefined, name);\n      }\n    }\n\n    return this.finishNode(program, \"Program\");\n  }\n\n  stmtToDirective(stmt) {\n    const directive = stmt;\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n    const directiveLiteral = directive.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = directiveLiteral.value = raw.slice(1, -1);\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    directiveLiteral.type = \"DirectiveLiteral\";\n    return directive;\n  }\n\n  parseInterpreterDirective() {\n    if (!this.match(types$1.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context) {\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n\n    return this.isLetKeyword(context);\n  }\n\n  isLetKeyword(context) {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n\n    if (nextCh === 92 || nextCh === 91) {\n      return true;\n    }\n\n    if (context) return false;\n    if (nextCh === 123) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      keywordRelationalOperator.lastIndex = next;\n\n      if (keywordRelationalOperator.test(this.input)) {\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n\n        if (!isIdentifierChar(endCh) && endCh !== 92) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.match(types$1.at)) {\n      this.parseDecorators(true);\n    }\n\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context, topLevel) {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = types$1._var;\n      kind = \"let\";\n    }\n\n    switch (starttype) {\n      case types$1._break:\n      case types$1._continue:\n        return this.parseBreakContinueStatement(node, starttype.keyword);\n\n      case types$1._debugger:\n        return this.parseDebuggerStatement(node);\n\n      case types$1._do:\n        return this.parseDoStatement(node);\n\n      case types$1._for:\n        return this.parseForStatement(node);\n\n      case types$1._function:\n        if (this.lookaheadCharCode() === 46) break;\n\n        if (context) {\n          if (this.state.strict) {\n            this.raise(this.state.start, ErrorMessages.StrictFunction);\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(this.state.start, ErrorMessages.SloppyFunction);\n          }\n        }\n\n        return this.parseFunctionStatement(node, false, !context);\n\n      case types$1._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case types$1._if:\n        return this.parseIfStatement(node);\n\n      case types$1._return:\n        return this.parseReturnStatement(node);\n\n      case types$1._switch:\n        return this.parseSwitchStatement(node);\n\n      case types$1._throw:\n        return this.parseThrowStatement(node);\n\n      case types$1._try:\n        return this.parseTryStatement(node);\n\n      case types$1._const:\n      case types$1._var:\n        kind = kind || this.state.value;\n\n        if (context && kind !== \"var\") {\n          this.raise(this.state.start, ErrorMessages.UnexpectedLexicalDeclaration);\n        }\n\n        return this.parseVarStatement(node, kind);\n\n      case types$1._while:\n        return this.parseWhileStatement(node);\n\n      case types$1._with:\n        return this.parseWithStatement(node);\n\n      case types$1.braceL:\n        return this.parseBlock();\n\n      case types$1.semi:\n        return this.parseEmptyStatement(node);\n\n      case types$1._import:\n        {\n          const nextTokenCharCode = this.lookaheadCharCode();\n\n          if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {\n            break;\n          }\n        }\n\n      case types$1._export:\n        {\n          if (!this.options.allowImportExportEverywhere && !topLevel) {\n            this.raise(this.state.start, ErrorMessages.UnexpectedImportExport);\n          }\n\n          this.next();\n          let result;\n\n          if (starttype === types$1._import) {\n            result = this.parseImport(node);\n\n            if (result.type === \"ImportDeclaration\" && (!result.importKind || result.importKind === \"value\")) {\n              this.sawUnambiguousESM = true;\n            }\n          } else {\n            result = this.parseExport(node);\n\n            if (result.type === \"ExportNamedDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportAllDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportDefaultDeclaration\") {\n              this.sawUnambiguousESM = true;\n            }\n          }\n\n          this.assertModuleNodeAllowed(node);\n          return result;\n        }\n\n      default:\n        {\n          if (this.isAsyncFunction()) {\n            if (context) {\n              this.raise(this.state.start, ErrorMessages.AsyncFunctionInSingleStatementContext);\n            }\n\n            this.next();\n            return this.parseFunctionStatement(node, true, !context);\n          }\n        }\n    }\n\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (starttype === types$1.name && expr.type === \"Identifier\" && this.eat(types$1.colon)) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(node.start, SourceTypeModuleErrorMessages.ImportOutsideModule);\n    }\n  }\n\n  takeDecorators(node) {\n    const decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator() {\n    return this.match(types$1._class);\n  }\n\n  parseDecorators(allowExport) {\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    while (this.match(types$1.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(types$1._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (this.hasPlugin(\"decorators\") && !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, ErrorMessages.DecoratorExportClass);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(this.state.start, ErrorMessages.UnexpectedLeadingDecorator);\n    }\n  }\n\n  parseDecorator() {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      this.state.decoratorStack.push([]);\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr;\n\n      if (this.eat(types$1.parenL)) {\n        expr = this.parseExpression();\n        this.expect(types$1.parenR);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(types$1.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.eat(types$1.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(node, keyword) {\n    const isBreak = keyword === \"break\";\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, keyword);\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n  }\n\n  verifyBreakContinue(node, keyword) {\n    const isBreak = keyword === \"break\";\n    let i;\n\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n\n    if (i === this.state.labels.length) {\n      this.raise(node.start, ErrorMessages.IllegalBreakContinue, keyword);\n    }\n  }\n\n  parseDebuggerStatement(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression() {\n    this.expect(types$1.parenL);\n    const val = this.parseExpression();\n    this.expect(types$1.parenR);\n    return val;\n  }\n\n  parseDoStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"do\"));\n    this.state.labels.pop();\n    this.expect(types$1._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(types$1.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  parseForStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    let awaitAt = -1;\n\n    if (this.isAwaitAllowed() && this.eatContextual(\"await\")) {\n      awaitAt = this.state.lastTokStart;\n    }\n\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(types$1.parenL);\n\n    if (this.match(types$1.semi)) {\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, null);\n    }\n\n    const startsWithLet = this.isContextual(\"let\");\n    const isLet = startsWithLet && this.isLetKeyword();\n\n    if (this.match(types$1._var) || this.match(types$1._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if ((this.match(types$1._in) || this.isContextual(\"of\")) && init.declarations.length === 1) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, init);\n    }\n\n    const startsWithUnescapedName = this.match(types$1.name) && !this.state.containsEsc;\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(\"of\");\n\n    if (isForOf) {\n      if (startsWithLet) {\n        this.raise(init.start, ErrorMessages.ForOfLet);\n      } else if (awaitAt === -1 && startsWithUnescapedName && init.type === \"Identifier\" && init.name === \"async\") {\n        this.raise(init.start, ErrorMessages.ForOfAsync);\n      }\n    }\n\n    if (isForOf || this.match(types$1._in)) {\n      this.toAssignable(init, true);\n      const description = isForOf ? \"for-of statement\" : \"for-in statement\";\n      this.checkLVal(init, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(node, isAsync, declarationPosition) {\n    this.next();\n    return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), isAsync);\n  }\n\n  parseIfStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(types$1._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(this.state.start, ErrorMessages.IllegalReturn);\n    }\n\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = node.cases = [];\n    this.expect(types$1.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n    let cur;\n\n    for (let sawDefault; !this.match(types$1.braceR);) {\n      if (this.match(types$1._case) || this.match(types$1._default)) {\n        const isCase = this.match(types$1._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push(cur = this.startNode());\n        cur.consequent = [];\n        this.next();\n\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(this.state.lastTokStart, ErrorMessages.MultipleDefaultsInSwitch);\n          }\n\n          sawDefault = true;\n          cur.test = null;\n        }\n\n        this.expect(types$1.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next();\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node) {\n    this.next();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.lastTokEnd, ErrorMessages.NewlineAfterThrow);\n    }\n\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam() {\n    const param = this.parseBindingAtom();\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, \"catch clause\", BIND_LEXICAL);\n    return param;\n  }\n\n  parseTryStatement(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(types$1._catch)) {\n      const clause = this.startNode();\n      this.next();\n\n      if (this.match(types$1.parenL)) {\n        this.expect(types$1.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(types$1.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      clause.body = this.withSmartMixTopicForbiddingContext(() => this.parseBlock(false, false));\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(types$1._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(node.start, ErrorMessages.NoCatchOrFinally);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(node, kind) {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"while\"));\n    this.state.labels.pop();\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node) {\n    if (this.state.strict) {\n      this.raise(this.state.start, ErrorMessages.StrictWith);\n    }\n\n    this.next();\n    node.object = this.parseHeaderExpression();\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"with\"));\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(node, maybeName, expr, context) {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(expr.start, ErrorMessages.LabelRedeclaration, maybeName);\n      }\n    }\n\n    const kind = this.state.type.isLoop ? \"loop\" : this.match(types$1._switch) ? \"switch\" : null;\n\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start\n    });\n    node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(node, expr) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {\n    const node = this.startNode();\n\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n\n    this.expect(types$1.braceL);\n\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n\n    this.parseBlockBody(node, allowDirectives, false, types$1.braceR, afterBlockParse);\n\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt) {\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n  }\n\n  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n    const body = node.body = [];\n    const directives = node.directives = [];\n    this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);\n  }\n\n  parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (!hasStrictModeDirective && directive.value.value === \"use strict\") {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n\n        parsedNonDirective = true;\n        this.state.strictErrors.clear();\n      }\n\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  parseFor(node, init) {\n    node.init = init;\n    this.semicolon(false);\n    node.test = this.match(types$1.semi) ? null : this.parseExpression();\n    this.semicolon(false);\n    node.update = this.match(types$1.parenR) ? null : this.parseExpression();\n    this.expect(types$1.parenR);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  parseForIn(node, init, awaitAt) {\n    const isForIn = this.match(types$1._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt > -1) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt > -1;\n    }\n\n    if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || this.state.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n      this.raise(init.start, ErrorMessages.ForInOfLoopInitializer, isForIn ? \"for-in\" : \"for-of\");\n    } else if (init.type === \"AssignmentPattern\") {\n      this.raise(init.start, ErrorMessages.InvalidLhs, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();\n    this.expect(types$1.parenR);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  parseVar(node, isFor, kind) {\n    const declarations = node.declarations = [];\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n\n      if (this.eat(types$1.eq)) {\n        decl.init = isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();\n      } else {\n        if (kind === \"const\" && !(this.match(types$1._in) || this.isContextual(\"of\"))) {\n          if (!isTypescript) {\n            this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Const declarations\");\n          }\n        } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(types$1._in) || this.isContextual(\"of\")))) {\n          this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Complex binding patterns\");\n        }\n\n        decl.init = null;\n      }\n\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(types$1.comma)) break;\n    }\n\n    return node;\n  }\n\n  parseVarId(decl, kind) {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, \"variable declaration\", kind === \"var\" ? BIND_VAR : BIND_LEXICAL, undefined, kind !== \"var\");\n  }\n\n  parseFunction(node, statement = FUNC_NO_FLAGS, isAsync = false) {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n    this.initFunction(node, isAsync);\n\n    if (this.match(types$1.star) && isHangingStatement) {\n      this.raise(this.state.start, ErrorMessages.GeneratorInSingleStatementContext);\n    }\n\n    node.generator = this.eat(types$1.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, false);\n    this.withSmartMixTopicForbiddingContext(() => {\n      this.parseFunctionBodyAndFinish(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n    });\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseFunctionId(requireId) {\n    return requireId || this.match(types$1.name) ? this.parseIdentifier() : null;\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    this.expect(types$1.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(types$1.parenR, 41, false, allowModifiers);\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.id) return;\n    this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.start);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n  }\n\n  isClassProperty() {\n    return this.match(types$1.eq) || this.match(types$1.semi) || this.match(types$1.braceR);\n  }\n\n  isClassMethod() {\n    return this.match(types$1.parenL);\n  }\n\n  isNonstaticConstructor(method) {\n    return !method.computed && !method.static && (method.key.name === \"constructor\" || method.key.value === \"constructor\");\n  }\n\n  parseClassBody(hadSuperClass, oldStrict) {\n    this.classScope.enter();\n    const state = {\n      hadConstructor: false,\n      hadSuperClass\n    };\n    let decorators = [];\n    const classBody = this.startNode();\n    classBody.body = [];\n    this.expect(types$1.braceL);\n    this.withSmartMixTopicForbiddingContext(() => {\n      while (!this.match(types$1.braceR)) {\n        if (this.eat(types$1.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(this.state.lastTokEnd, ErrorMessages.DecoratorSemicolon);\n          }\n\n          continue;\n        }\n\n        if (this.match(types$1.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\n          this.raise(member.start, ErrorMessages.DecoratorConstructor);\n        }\n      }\n    });\n    this.state.strict = oldStrict;\n    this.next();\n\n    if (decorators.length) {\n      throw this.raise(this.state.start, ErrorMessages.TrailingDecorator);\n    }\n\n    this.classScope.exit();\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  parseClassMemberFromModifier(classBody, member) {\n    const key = this.parseIdentifier(true);\n\n    if (this.isClassMethod()) {\n      const method = member;\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(classBody, method, false, false, false, false);\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop = member;\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(classBody, member, state) {\n    const isStatic = this.isContextual(\"static\");\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      if (this.eat(types$1.braceL)) {\n        this.parseClassStaticBlock(classBody, member);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const publicMethod = member;\n    const privateMethod = member;\n    const publicProp = member;\n    const privateProp = member;\n    const method = publicMethod;\n    const publicMember = publicMethod;\n    member.static = isStatic;\n\n    if (this.eat(types$1.star)) {\n      method.kind = \"method\";\n      const isPrivateName = this.match(types$1.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsGenerator);\n      }\n\n      this.pushClassMethod(classBody, publicMethod, true, false, false, false);\n      return;\n    }\n\n    const isContextual = this.match(types$1.name) && !this.state.containsEsc;\n    const isPrivate = this.match(types$1.privateName);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStart = this.state.start;\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(key.start, ErrorMessages.DuplicateConstructor);\n        }\n\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(key.start, ErrorMessages.OverrideOnConstructor);\n        }\n\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (isContextual && key.name === \"async\" && !this.isLineTerminator()) {\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(types$1.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStart);\n      }\n\n      method.kind = \"method\";\n      const isPrivate = this.match(types$1.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAsync);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);\n      }\n    } else if (isContextual && (key.name === \"get\" || key.name === \"set\") && !(this.match(types$1.star) && this.isLineTerminator())) {\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      const isPrivate = this.match(types$1.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAccessor);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, false, false, false, false);\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (this.isLineTerminator()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  parseClassElementName(member) {\n    const {\n      type,\n      value,\n      start\n    } = this.state;\n\n    if ((type === types$1.name || type === types$1.string) && member.static && value === \"prototype\") {\n      this.raise(start, ErrorMessages.StaticPrototype);\n    }\n\n    if (type === types$1.privateName && value === \"constructor\") {\n      this.raise(start, ErrorMessages.ConstructorClassPrivateField);\n    }\n\n    return this.parsePropertyName(member, true);\n  }\n\n  parseClassStaticBlock(classBody, member) {\n    var _member$decorators;\n\n    this.expectPlugin(\"classStaticBlock\", member.start);\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    this.prodParam.enter(PARAM);\n    const body = member.body = [];\n    this.parseBlockOrModuleBlockBody(body, undefined, false, types$1.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode(member, \"StaticBlock\"));\n\n    if ((_member$decorators = member.decorators) != null && _member$decorators.length) {\n      this.raise(member.start, ErrorMessages.DecoratorStaticBlock);\n    }\n  }\n\n  pushClassProperty(classBody, prop) {\n    if (!prop.computed && (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")) {\n      this.raise(prop.key.start, ErrorMessages.ConstructorClassField);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(classBody, prop) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.start);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true));\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const node = this.parseMethod(method, isGenerator, isAsync, false, false, \"ClassPrivateMethod\", true);\n    classBody.body.push(node);\n    const kind = node.kind === \"get\" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === \"set\" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.start);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {}\n\n  parseClassPrivateProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  parseClassProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseInitializer(node) {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(types$1.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(node, isStatement, optionalId, bindingType = BIND_CLASS) {\n    if (this.match(types$1.name)) {\n      node.id = this.parseIdentifier();\n\n      if (isStatement) {\n        this.checkLVal(node.id, \"class name\", bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        this.unexpected(null, ErrorMessages.MissingClassName);\n      }\n    }\n  }\n\n  parseClassSuper(node) {\n    node.superClass = this.eat(types$1._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  parseExport(node) {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(types$1.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(types$1.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {\n      throw this.unexpected(null, types$1.braceL);\n    }\n\n    let hasDeclaration;\n\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(types$1._default)) {\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, types$1.braceL);\n  }\n\n  eatExportStar(node) {\n    return this.eat(types$1.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (this.isExportDefaultSpecifier()) {\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    if (this.isContextual(\"as\")) {\n      if (!node.specifiers) node.specifiers = [];\n      const specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);\n      this.next();\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(this.finishNode(specifier, \"ExportNamespaceSpecifier\"));\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node) {\n    if (this.match(types$1.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      node.specifiers.push(...this.parseExportSpecifiers());\n      node.source = null;\n      node.declaration = null;\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportDeclaration(node) {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n\n    return false;\n  }\n\n  isAsyncFunction() {\n    if (!this.isContextual(\"async\")) return false;\n    const next = this.nextTokenStart();\n    return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, \"function\");\n  }\n\n  parseExportDefaultExpression() {\n    const expr = this.startNode();\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(types$1._function) || isAsync) {\n      this.next();\n\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(expr, FUNC_STATEMENT | FUNC_NULLABLE_ID, isAsync);\n    } else if (this.match(types$1._class)) {\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types$1.at)) {\n      if (this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, ErrorMessages.DecoratorBeforeExport);\n      }\n\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types$1._const) || this.match(types$1._var) || this.isLet()) {\n      throw this.raise(this.state.start, ErrorMessages.UnsupportedDefaultExport);\n    } else {\n      const res = this.parseMaybeAssignAllowIn();\n      this.semicolon();\n      return res;\n    }\n  }\n\n  parseExportDeclaration(node) {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types$1.name)) {\n      const value = this.state.value;\n\n      if (value === \"async\" && !this.state.containsEsc || value === \"let\") {\n        return false;\n      }\n\n      if ((value === \"type\" || value === \"interface\") && !this.state.containsEsc) {\n        const l = this.lookahead();\n\n        if (l.type === types$1.name && l.value !== \"from\" || l.type === types$1.braceL) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(types$1._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n\n    if (this.input.charCodeAt(next) === 44 || this.match(types$1.name) && hasFrom) {\n      return true;\n    }\n\n    if (this.match(types$1._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));\n      return nextAfterFrom === 34 || nextAfterFrom === 39;\n    }\n\n    return false;\n  }\n\n  parseExportFrom(node, expect) {\n    if (this.eatContextual(\"from\")) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n\n      if (assertions) {\n        node.assertions = assertions;\n      }\n    } else {\n      if (expect) {\n        this.unexpected();\n      } else {\n        node.source = null;\n      }\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.match(types$1.at)) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.unexpected(this.state.start, ErrorMessages.DecoratorBeforeExport);\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return this.state.type.keyword === \"var\" || this.state.type.keyword === \"const\" || this.state.type.keyword === \"function\" || this.state.type.keyword === \"class\" || this.isLet() || this.isAsyncFunction();\n  }\n\n  checkExport(node, checkNames, isDefault, isFrom) {\n    if (checkNames) {\n      if (isDefault) {\n        this.checkDuplicateExports(node, \"default\");\n\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          var _declaration$extra;\n\n          const declaration = node.declaration;\n\n          if (declaration.type === \"Identifier\" && declaration.name === \"from\" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) != null && _declaration$extra.parenthesized)) {\n            this.raise(declaration.start, ErrorMessages.ExportDefaultFromAsIdentifier);\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        for (const specifier of node.specifiers) {\n          const {\n            exported\n          } = specifier;\n          const exportedName = exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportedName);\n\n          if (!isFrom && specifier.local) {\n            const {\n              local\n            } = specifier;\n\n            if (local.type !== \"Identifier\") {\n              this.raise(specifier.start, ErrorMessages.ExportBindingIsString, local.value, exportedName);\n            } else {\n              this.checkReservedWord(local.name, local.start, true, false);\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (currentContextDecorators.length) {\n      throw this.raise(node.start, ErrorMessages.UnsupportedDecoratorExport);\n    }\n  }\n\n  checkDeclaration(node) {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(node, name) {\n    if (this.exportedIdentifiers.has(name)) {\n      this.raise(node.start, name === \"default\" ? ErrorMessages.DuplicateDefaultExport : ErrorMessages.DuplicateExport, name);\n    }\n\n    this.exportedIdentifiers.add(name);\n  }\n\n  parseExportSpecifiers() {\n    const nodes = [];\n    let first = true;\n    this.expect(types$1.braceL);\n\n    while (!this.eat(types$1.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma);\n        if (this.eat(types$1.braceR)) break;\n      }\n\n      const node = this.startNode();\n      const isString = this.match(types$1.string);\n      const local = this.parseModuleExportName();\n      node.local = local;\n\n      if (this.eatContextual(\"as\")) {\n        node.exported = this.parseModuleExportName();\n      } else if (isString) {\n        node.exported = cloneStringLiteral(local);\n      } else {\n        node.exported = cloneIdentifier(local);\n      }\n\n      nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n    }\n\n    return nodes;\n  }\n\n  parseModuleExportName() {\n    if (this.match(types$1.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n\n      if (surrogate) {\n        this.raise(result.start, ErrorMessages.ModuleExportNameHasLoneSurrogate, surrogate[0].charCodeAt(0).toString(16));\n      }\n\n      return result;\n    }\n\n    return this.parseIdentifier(true);\n  }\n\n  parseImport(node) {\n    node.specifiers = [];\n\n    if (!this.match(types$1.string)) {\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      const parseNext = !hasDefault || this.eat(types$1.comma);\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(\"from\");\n    }\n\n    node.source = this.parseImportSource();\n    const assertions = this.maybeParseImportAssertions();\n\n    if (assertions) {\n      node.assertions = assertions;\n    } else {\n      const attributes = this.maybeParseModuleAttributes();\n\n      if (attributes) {\n        node.attributes = attributes;\n      }\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    if (!this.match(types$1.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  shouldParseDefaultImport(node) {\n    return this.match(types$1.name);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  parseAssertEntries() {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(types$1.braceR)) {\n        break;\n      }\n\n      const node = this.startNode();\n      const keyName = this.state.value;\n\n      if (attrNames.has(keyName)) {\n        this.raise(this.state.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, keyName);\n      }\n\n      attrNames.add(keyName);\n\n      if (this.match(types$1.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n\n      this.expect(types$1.colon);\n\n      if (!this.match(types$1.string)) {\n        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n      }\n\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(types$1.comma));\n\n    return attrs;\n  }\n\n  maybeParseModuleAttributes() {\n    if (this.match(types$1._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n\n    const attrs = [];\n    const attributes = new Set();\n\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributeDifferentFromType, node.key.name);\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, node.key.name);\n      }\n\n      attributes.add(node.key.name);\n      this.expect(types$1.colon);\n\n      if (!this.match(types$1.string)) {\n        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n      }\n\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(types$1.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    if (this.isContextual(\"assert\") && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n\n    this.eat(types$1.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(types$1.braceR);\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    if (this.shouldParseDefaultImport(node)) {\n      this.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\", \"default import specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node) {\n    if (this.match(types$1.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(\"as\");\n      this.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\", \"import namespace specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node) {\n    let first = true;\n    this.expect(types$1.braceL);\n\n    while (!this.eat(types$1.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        if (this.eat(types$1.colon)) {\n          throw this.raise(this.state.start, ErrorMessages.DestructureNamedImport);\n        }\n\n        this.expect(types$1.comma);\n        if (this.eat(types$1.braceR)) break;\n      }\n\n      this.parseImportSpecifier(node);\n    }\n  }\n\n  parseImportSpecifier(node) {\n    const specifier = this.startNode();\n    const importedIsString = this.match(types$1.string);\n    specifier.imported = this.parseModuleExportName();\n\n    if (this.eatContextual(\"as\")) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const {\n        imported\n      } = specifier;\n\n      if (importedIsString) {\n        throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, imported.value);\n      }\n\n      this.checkReservedWord(imported.name, specifier.start, true, true);\n      specifier.local = cloneIdentifier(imported);\n    }\n\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n  isThisParam(param) {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n\n}\n\nclass Parser extends StatementParser {\n  constructor(options, input) {\n    options = getOptions(options);\n    super(options, input);\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  getScopeHandler() {\n    return ScopeHandler;\n  }\n\n  parse() {\n    this.enterInitialScopes();\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n\n}\n\nfunction pluginsMap(plugins) {\n  const pluginMap = new Map();\n\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n\n  return pluginMap;\n}\n\nfunction parse(input, options) {\n  var _options;\n\n  if (((_options = options) == null ? void 0 : _options.sourceType) === \"unambiguous\") {\n    options = Object.assign({}, options);\n\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch (_unused) {}\n      } else {\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch (_unused2) {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\nfunction parseExpression(input, options) {\n  const parser = getParser(options, input);\n\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n\n  return parser.getExpression();\n}\n\nfunction getParser(options, input) {\n  let cls = Parser;\n\n  if (options != null && options.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache = {};\n\nfunction getParserClass(pluginsFromOptions) {\n  const pluginList = mixinPluginNames.filter(name => hasPlugin(pluginsFromOptions, name));\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n\n  if (!cls) {\n    cls = Parser;\n\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n\n    parserClassCache[key] = cls;\n  }\n\n  return cls;\n}\n\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = types$1;\n//# sourceMappingURL=index.js.map\n"]},"metadata":{},"sourceType":"script"}